<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CK&#39;s Notepad</title>
  
  
  <link href="http://blog.kevinyang.net/atom.xml" rel="self"/>
  
  <link href="http://blog.kevinyang.net/"/>
  <updated>2022-08-06T13:44:08.886Z</updated>
  <id>http://blog.kevinyang.net/</id>
  
  <author>
    <name>KevinYang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Angular] 測試 ControlContainer with FormArray 版本</title>
    <link href="http://blog.kevinyang.net/2022/08/06/angular-test-controlContainer-with-formarrayname/"/>
    <id>http://blog.kevinyang.net/2022/08/06/angular-test-controlContainer-with-formarrayname/</id>
    <published>2022-08-06T13:20:16.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前寫過一篇關於 <code>ControlContainer</code> 的文章，但那時候太菜不知道怎麼寫測試，今天回頭寫 <code>ControlContainer</code> 配上 <code>formArrayName</code> 時，熊熊發現不知道怎寫測試，稍微有點悲劇，但還好根據官方的測試檔案，還是可以整理出答案，以下就是如何測試有使用 <code>ControlContainer</code> 的 Component</p><span id="more"></span><p>Component 的用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-filter-field</span> <span class="attr">formArrayName</span>=<span class="string">&quot;dynamicFields&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-filter-field</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ts</code>  的部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FilterFieldComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  formData!: <span class="title class_">FormArray</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> controlContainer: ControlContainer</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span> = <span class="variable language_">this</span>.<span class="property">controlContainer</span>.<span class="property">control</span> <span class="keyword">as</span> <span class="title class_">FormArray</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spec 檔案</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fdescribe</span>(<span class="string">&#x27;FilterFieldComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">FilterFieldComponent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">FilterFieldComponent</span>&gt;;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">formModel</span>: <span class="title class_">FormArray</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">formArrayDir</span>: <span class="title class_">FormArrayName</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = <span class="keyword">new</span> <span class="title class_">FormGroupDirective</span>([], []);</span><br><span class="line">    formModel = <span class="keyword">new</span> <span class="title class_">FormArray</span>([]);</span><br><span class="line">    parent.<span class="property">form</span> = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123; <span class="attr">dynamicFields</span>: formModel &#125;);</span><br><span class="line">    formArrayDir = <span class="keyword">new</span> <span class="title class_">FormArrayName</span>(parent, [], []);</span><br><span class="line">    formArrayDir.<span class="property">name</span> = <span class="string">&#x27;dynamicFields&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">FilterFieldComponent</span>],</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">ReactiveFormsModule</span>],</span><br><span class="line">      <span class="attr">providers</span>: [&#123; <span class="attr">provide</span>: <span class="title class_">ControlContainer</span>, <span class="attr">useValue</span>: formArrayDir &#125;],</span><br><span class="line">      <span class="attr">schemas</span>: [<span class="variable constant_">CUSTOM_ELEMENTS_SCHEMA</span>],</span><br><span class="line">    &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>line 17: 因為 <code>ControlContainer</code> 需要特別去做 mock，所以這邊就手動註冊一下，但如果沒有寫過的人就會卡住，慘，這邊要用哪種型別的值，根據<a href="https://angular.io/api/forms/ControlContainer#controlcontainer">官方 API 文件說明</a>，得知有以下幾種 subclass 可以使用</p><p><img src="image-20220806212706185.png" alt="image-20220806212706185"></p><p>而其中的 <code>FormArrayName</code> 是我想要的類型，接下來的另外一個問題會是，如何建立 <code>FormArrayName</code> Class，這時候就是  line 8 ~ 12 的用途啦，這裡的寫法是參考官方的測試 form directive 的<a href="https://github.com/angular/angular/tree/main/packages/forms/test#L448-L454">測試檔案</a></p><p>以上就是如何測試 <code>ControlContainer</code> 的設定寫法</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久以前寫過一篇關於 &lt;code&gt;ControlContainer&lt;/code&gt; 的文章，但那時候太菜不知道怎麼寫測試，今天回頭寫 &lt;code&gt;ControlContainer&lt;/code&gt; 配上 &lt;code&gt;formArrayName&lt;/code&gt; 時，熊熊發現不知道怎寫測試，稍微有點悲劇，但還好根據官方的測試檔案，還是可以整理出答案，以下就是如何測試有使用 &lt;code&gt;ControlContainer&lt;/code&gt; 的 Component&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[HowTo] 讀取 WebAPI 資料到 Excel 表內</title>
    <link href="http://blog.kevinyang.net/2022/07/16/excel-load-webapi/"/>
    <id>http://blog.kevinyang.net/2022/07/16/excel-load-webapi/</id>
    <published>2022-07-16T04:14:24.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>週五突然想到 Excel 是否能載入 JSON 檔案或是 WebAPI 的資料，因為 PowerBI 可以做到，想說 Excel 應該也可以，所以就來試試看</p><span id="more"></span><p>一樣的，我們拿 <code>[JSONPlaceholder](https://jsonplaceholder.typicode.com/)</code> 所提供的 API 來當作範例資料，使用 <a href="https://jsonplaceholder.typicode.com/posts">https://jsonplaceholder.typicode.com/posts</a> 這組資料</p><h2 id="步驟"><a class="header-anchor" href="#步驟"> </a>步驟</h2><ol><li><p>建立一個空的 Excel 檔案</p></li><li><p>選擇 <code>資料</code> Tab 內的<code>從 web</code></p><p><img src="image-20220716125829631.png" alt="image-20220716125829631"></p></li><li><p>將文章一開始的網址貼入到 URL 內後按下『確定』</p><p><img src="image-20220716132852792.png" alt="image-20220716132852792"></p></li><li><p>會開啟存取 Web 內容的視窗，這邊如果 API 有相關權限設定，可在這邊進行設定</p><p><img src="image-20220716130028794.png" alt="image-20220716130028794"></p></li><li><p>確認後下『連接』，Excel 會去呼叫 API 並取回資料</p></li><li><p>取得資料後會開啟 Power Query 編輯器</p><p><img src="image-20220716130216544.png" alt="image-20220716130216544"></p><p>這時候我們就需要針對取回得資料作一些轉換的設定</p><ol><li><p>點 『到表格』</p><p><img src="image-20220716130621219.png" alt="image-20220716130621219"></p></li><li><p>無分隔符號，直接按下『確定』</p><p><img src="image-20220716130659427.png" alt="image-20220716130659427"></p></li><li><p>這時候畫面會轉換成以下圖片</p><p><img src="image-20220716130731882.png" alt="image-20220716130731882"></p></li><li><p>點選 Column1 旁邊的小圖示，這個動作會開啟另外一個視窗來設定要展開哪些欄位</p><p><img src="image-20220716130806821.png" alt="image-20220716130806821"></p><p><img src="image-20220716130847323.png" alt="image-20220716130847323"></p></li><li><p>如果確認後沒問題就可以按下『確定』。備註: 如果不想要使用原始資料行列名稱當前置詞，可以把設定取消掉</p></li><li><p>瀏覽資料，確認無誤後按下『關閉並載入』即可在 Excel 上看到資料了</p><p><img src="SNAGHTML35f5e08.PNG" alt="img"></p></li><li><p>最終成果</p><p><img src="image-20220716131228238.png" alt="image-20220716131228238"></p><p>如果想要手動更新 API 得資料，單純點選這個圖示即可，或是上方的『重新整理』</p><p><img src="image-20220716131326794.png" alt="image-20220716131326794"></p></li></ol></li></ol><h2 id="修改-Query"><a class="header-anchor" href="#修改-Query"> </a>修改 Query</h2><p>如果想要回頭編輯 Query 的方式，可以從這個地方將 Power Query 編輯器開啟</p><p><img src="image-20220716131657411.png" alt="image-20220716131657411"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;週五突然想到 Excel 是否能載入 JSON 檔案或是 WebAPI 的資料，因為 PowerBI 可以做到，想說 Excel 應該也可以，所以就來試試看&lt;/p&gt;</summary>
    
    
    
    <category term="Office" scheme="http://blog.kevinyang.net/categories/Office/"/>
    
    
    <category term="Office" scheme="http://blog.kevinyang.net/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Standalone Component 第一次接觸</title>
    <link href="http://blog.kevinyang.net/2022/07/09/angular-standalone-first-tryout/"/>
    <id>http://blog.kevinyang.net/2022/07/09/angular-standalone-first-tryout/</id>
    <published>2022-07-09T01:13:53.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>Angular standalone component 功能在 v14 版本推出 developer preview version (表示不建議使用在 production 環境上)，還是可以先玩弄一下，稍微感覺未來可能的開發模式跟架構會有怎樣的選擇出現</p><span id="more"></span><h2 id="基本語法"><a class="header-anchor" href="#基本語法"> </a>基本語法</h2><p>standalone component 的寫法很簡單，在 component 的 decorator 內新增 <code>standalone: true</code> 即可完成設定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;photo-gallery&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">ImageGridComponent</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    ... &lt;image-grid [images]=&quot;imageList&quot;&gt;&lt;/image-grid&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PhotoGalleryComponent</span> &#123;</span><br><span class="line">  <span class="comment">// component logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦設定成 standalone component ，過往設定在 <code>NgModule</code> 的 imports 的其他 <code>NgModules</code> 都需要在這邊設定，也包含這 component 內使用的其他 components</p><p>而在路由設定這邊新增 <code>loadComponent</code> 的功能</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./admin/panel.component&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">AdminPanelComponent</span>)&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><code>loadChildren</code> 也支援讀取另外一組 route setting</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./admin/routes&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">ADMIN_ROUTES</span>)&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// In admin/routes.ts:</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ADMIN_ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AdminHomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;users&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AdminUsersComponent</span>&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><code>main.ts</code> 也可以直接啟動 standalone component</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bootstrapApplication&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">PhotoAppComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app/photo.app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">PhotoAppComponent</span>);</span><br></pre></td></tr></table></figure><h2 id="Dive-in-a-little-bit"><a class="header-anchor" href="#Dive-in-a-little-bit"> </a>Dive in a little bit</h2><p>main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode, importProvidersFrom &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/home/home.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">import</span>(<span class="string">&#x27;./app/demo/demo.component&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">m</span>) =&gt;</span> m.<span class="property">DemoComponent</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title function_">importProvidersFrom</span>(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes))],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>透過這種方式完全不使用 <code>NgModule</code> 來啟動一個 Angular App，而在近期的 AngularAir 看到這樣的嘗試</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppComponent</span>.<span class="title function_">bootstrap</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, importProvidersFrom &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>, <span class="title class_">CommonModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">bootstrapApplication</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">      <span class="attr">providers</span>: [<span class="title function_">importProvidersFrom</span>(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes))],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這改法大幅的降低 main.ts 的複雜度，同時也增加了不少彈性</p><p>那 Provider 的部分該怎麼處理，好消息是就跟有 <code>NgModule</code> 時的用法是一樣的。</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://angular.io/guide/standalone-components">Getting started with standalone component</a></li><li><a href="https://stackblitz.com/edit/angular-ivy-2kth3b?file=src%2Fmain.ts,src%2Fapp%2Fapp.component.ts">範例程式碼</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Angular standalone component 功能在 v14 版本推出 developer preview version (表示不建議使用在 production 環境上)，還是可以先玩弄一下，稍微感覺未來可能的開發模式跟架構會有怎樣的選擇出現&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 跳過 Http Interceptor</title>
    <link href="http://blog.kevinyang.net/2022/06/12/angular-skip-interceptor/"/>
    <id>http://blog.kevinyang.net/2022/06/12/angular-skip-interceptor/</id>
    <published>2022-06-12T06:02:50.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>Angular Http Interceptor 使用情境很多，例如加 header token、處理 response error 等，但有時候如果真的有 http request 想要跳過 interceptor 這層該怎麼處理，以下是處理手法</p><span id="more"></span><h2 id="程式碼"><a class="header-anchor" href="#程式碼"> </a>程式碼</h2><p>這裡會利用 <code>HttpBackend</code> 來完成</p><blockquote><p>Interceptors sit between the <code>HttpClient</code> interface and the <code>HttpBackend</code>.</p><p>When injected, <code>HttpBackend</code> dispatches requests directly to the backend, without going through the interceptor chain.</p></blockquote><p><code>HttpClient</code> 原始碼</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HttpClient</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> handler: HttpHandler</span>) &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpBackend</code> interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpBackend</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">handle</span>(<span class="attr">req</span>: <span class="title class_">HttpRequest</span>&lt;<span class="built_in">any</span>&gt;): <span class="title class_">Observable</span>&lt;<span class="title class_">HttpEvent</span>&lt;<span class="built_in">any</span>&gt;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>範例程式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpBackend</span>, <span class="title class_">HttpClient</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SkipInterceptorService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">httpClient</span>: <span class="title class_">HttpClient</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> handler: HttpBackend</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">httpClient</span> = <span class="keyword">new</span> <span class="title class_">HttpClient</span>(handler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手動建立一個 <code>HttpClient</code>，之後透過這個 <code>httpClient</code> 的 request 就不會經過 Interceptor 那層，就是這麼簡單</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://angular.io/api/common/http/HttpBackend">Angular API - HttpBackend</a></li><li><a href="https://itnext.io/bypass-angular-interceptors-with-request-metadata-cf28061cda69">Bypass Angular Interceptors with Request Metadata</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Angular Http Interceptor 使用情境很多，例如加 header token、處理 response error 等，但有時候如果真的有 http request 想要跳過 interceptor 這層該怎麼處理，以下是處理手法&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 自訂 Decorator 使用範例</title>
    <link href="http://blog.kevinyang.net/2022/06/11/angular-custom-decorators-demo/"/>
    <id>http://blog.kevinyang.net/2022/06/11/angular-custom-decorators-demo/</id>
    <published>2022-06-11T08:21:54.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>距離上一篇關於 decorator 的文章已經是 2017 一月份的事情了，時間過真快，那時候來不知道能拿 decorator 做什麼，現在終於有一個還不錯的使用情境</p><span id="more"></span><h2 id="讓程式碼講話"><a class="header-anchor" href="#讓程式碼講話"> </a>讓程式碼講話</h2><p>開發 app 有時候會希望記錄某功能的使用量，常見的作法就是打一發 API 做記錄的動作，而這其實是可以透過 decorator 的方式封裝起來，然後讓任何需要記錄的 function 使用，以下就用程式碼說話了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LogService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../my-feature/log.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Logger</span>(<span class="params">typeName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">    key: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> service = <span class="title class_">AppModule</span>?.<span class="property">injector</span>?.<span class="title function_">get</span>(<span class="title class_">LogService</span>);</span><br><span class="line">      <span class="keyword">if</span> (!!service) &#123;</span><br><span class="line">        service.<span class="title function_">recordUsage</span>(typeName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>line 4: 如果想要 decorator 能接受外部傳進來的值，就可以在這邊定義</li><li>line 10: 保留被 decorated 的 function，等等在第 line 19 會用到</li><li>line 12: 覆寫原本的 function</li><li>line 13: 從 <code>AppModule</code> 取得 injector，可透過 injector 拿到有註冊到 <code>RootModule</code>的 service</li><li>line 19: 繼續執行原本 function 的行為</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">injector</span>: <span class="title class_">Injector</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">injector: Injector</span>) &#123;</span><br><span class="line">    <span class="title class_">AppModule</span>.<span class="property">injector</span> = injector;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>建立一個 static 變數讓自訂的 decorator 內可以使用</li></ul><p>基本上，上面就已經完成了一個 Decorator 的開發了，當然那個 <code>logService</code> 就是自行發揮了</p><p>至於如何使用，範例如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Logger</span>(<span class="string">&#x27;AppComponent&#x27;</span>)</span><br><span class="line"><span class="title function_">c</span>(<span class="params">msg: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;clicked&#x27;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/decorators.html">TypeScript Decorator</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;距離上一篇關於 decorator 的文章已經是 2017 一月份的事情了，時間過真快，那時候來不知道能拿 decorator 做什麼，現在終於有一個還不錯的使用情境&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[.NET Core] 自訂 Authentication handler</title>
    <link href="http://blog.kevinyang.net/2022/06/11/aspnet-custom-authSchema/"/>
    <id>http://blog.kevinyang.net/2022/06/11/aspnet-custom-authSchema/</id>
    <published>2022-06-11T03:22:37.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://asp.net">asp.net</a> core 有很多 authentication 的方法，但有時候想要自訂驗證規則時，該怎麼做，跟著官方文件做完一次後，將自己理解的版本筆記下來</p><span id="more"></span><h1 id="自訂-Authentication"><a class="header-anchor" href="#自訂-Authentication"> </a>自訂 Authentication</h1><p>一開始在思考這題時，繞了幾個圈，但理解後其實不難，就是實做一個 <code>AuthenticationHandler</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiAuthHandler</span> : <span class="title">AuthenticationHandler</span>&lt;<span class="title">AuthenticationSchemeOptions</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiAuthHandler</span>(<span class="params">IOptionsMonitor&lt;AuthenticationSchemeOptions&gt; options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock</span>) : <span class="title">base</span>(<span class="params">options, logger, encoder, clock</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task&lt;AuthenticateResult&gt; <span class="title">HandleAuthenticateAsync</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 回傳驗證結果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>實做完上面後，就可以回到 <code>program.cs</code> 內做註冊的動作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddAuthentication(<span class="string">&quot;Basic&quot;</span>) <span class="comment">// 預設 schema</span></span><br><span class="line">    .AddScheme&lt;AuthenticationSchemeOptions, ApiAuthHandler&gt;(<span class="string">&quot;Basic&quot;</span>, o =&gt; &#123; &#125;);    </span><br><span class="line">    .AddScheme&lt;AuthenticationSchemeOptions, AnotherApiAuthHandler&gt;(<span class="string">&quot;SchemaName&quot;</span>, o =&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure><p>而這裡也允許新增多組 schema，在 API Controller 的地方也可以指定要使用哪一組 schema 做驗證</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize(AuthenticationSchemes = <span class="string">&quot;SchemaName&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SomeFunction</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="自訂-Options"><a class="header-anchor" href="#自訂-Options"> </a>自訂 Options</h2><p>如果希望從 <code>Program.cs</code> 的地方傳入設定檔，就需要自訂一個 <code>AuthenticationSchemeOptions</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiAuthHandlerOption</span>: <span class="title">AuthenticationSchemeOptions</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// add your custom properties</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> MyProp &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line">builder.Services.AddAuthentication(<span class="string">&quot;Basic&quot;</span>) <span class="comment">// 預設 schema</span></span><br><span class="line">    .AddScheme&lt;ApiAuthHandlerOption, ApiAuthHandler&gt;(<span class="string">&quot;Basic&quot;</span>, o =&gt; &#123;</span><br><span class="line">        o.MyProp = <span class="string">&quot;some prop&quot;</span>;</span><br><span class="line">    &#125;); </span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task&lt;AuthenticateResult&gt; <span class="title">HandleAuthenticateAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> myPro = <span class="keyword">base</span>.Options.MyProp; <span class="comment">// 可以取上面那段所設定的值</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1><ul><li><a href="https://github.com/referbruv/CustomSchemeNinja/blob/main/CustomSchemeNinjaApi/Providers/AuthHandlers/MyNinjaAuthHandler.cs">MyNinjaAuthHandler.cs</a></li><li><a href="https://jasonwatmore.com/post/2019/10/21/aspnet-core-3-basic-authentication-tutorial-with-example-api#basic-authentication-handler-cs">Basic Authentication</a></li><li><a href="https://www.dotblogs.com.tw/Null/2020/07/03/172547">[ASP.NET Core] 自定義自己的 Authentication 身份驗證器</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://asp.net&quot;&gt;asp.net&lt;/a&gt; core 有很多 authentication 的方法，但有時候想要自訂驗證規則時，該怎麼做，跟著官方文件做完一次後，將自己理解的版本筆記下來&lt;/p&gt;</summary>
    
    
    
    <category term=".NET Core " scheme="http://blog.kevinyang.net/categories/NET-Core/"/>
    
    
    <category term=".NET Core " scheme="http://blog.kevinyang.net/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>[HowTo] asp.net core 設定 Configuration 的方法</title>
    <link href="http://blog.kevinyang.net/2022/06/05/howto-dotnet-configuration/"/>
    <id>http://blog.kevinyang.net/2022/06/05/howto-dotnet-configuration/</id>
    <published>2022-06-05T14:43:08.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>Quick note for setting configuration  in .net core.</p><span id="more"></span><p>透過建立 Class 來作為 Configuration 的容器</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MongoConnectionOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> name = <span class="string">&quot;MongoConnection&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Database &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>line 3: 單純是方便設定使用 (Option)</li><li>line 5 ~ 6 需與 <code>appsettings.json</code> 想設定的 section 內的欄位一致</li></ol><p><code>appsettings.json</code> 依此範例內會有一個 <code>MongoConnection</code> 的 section 並且有 <code>ConnectionString</code> 和 <code>Database</code> 的設定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;MongoConnection&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ConnectionString&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>預設 <a href="http://asp.net">asp.net</a> core 新建的範本，會使用 top function 的模式建立，所以 <code>program.cs</code> 檔案會變成這樣</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> apiWithMongo.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add services to the container.</span></span><br><span class="line">builder.Services.Configure&lt;MongoConnectionOptions&gt;(builder.Configuration.GetSection(MongoConnectionOptions.name));</span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>透過 line 6 的寫法，我們可以將 <code>appsettings.json</code> 內的某一個 section 值與 class 關連設定起來</li></ul><p>設定完成後，在任何地方如果要使用這組設定值時，可以透過 <code>IOptions&lt;T&gt;</code> 的方式取得</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> MongoConnectionOptions _options;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span>(<span class="params">IOptions&lt;MongoConnectionOptions&gt; options</span>)</span>&#123;</span><br><span class="line">        _options = options.Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h2><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0&amp;WT.mc_id=DOP-MVP-5002594">Options pattern in ASP.NET Core</a></li><li><a href="https://blog.yowko.com/aspdotnet-core-config-array/">在 ASP.NET Core Configuration 中使用 array</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Quick note for setting configuration  in .net core.&lt;/p&gt;</summary>
    
    
    
    <category term=".NET Core" scheme="http://blog.kevinyang.net/categories/NET-Core/"/>
    
    
    <category term=".NET Core" scheme="http://blog.kevinyang.net/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Dockerfile for 建置靜態網站與使用 nginx 來跑</title>
    <link href="http://blog.kevinyang.net/2022/05/19/static-website-docker-with-nginx/"/>
    <id>http://blog.kevinyang.net/2022/05/19/static-website-docker-with-nginx/</id>
    <published>2022-05-19T15:03:30.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>每次都要想 Dockerfile 怎麼寫，乾脆筆記起來. build static website &amp; run with nginx</p><span id="more"></span><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:lts-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> NPM_CONFIG_LOGLEVEL=warn</span><br><span class="line"><span class="keyword">ENV</span> NPM_CONFIG_COLOR=false</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## production environment</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:stable-alpine as deploy</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/build /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;每次都要想 Dockerfile 怎麼寫，乾脆筆記起來. build static website &amp;amp; run with nginx&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>[FSharp] Seq Study</title>
    <link href="http://blog.kevinyang.net/2022/02/20/fsharp-seq-study/"/>
    <id>http://blog.kevinyang.net/2022/02/20/fsharp-seq-study/</id>
    <published>2022-02-20T03:23:23.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>最近在練習 F# 時，發現自己對於 F# Collection 操作不熟悉，尤其是 Seq 的部分，特地拉出單章刻意練習</p><span id="more"></span><p>來自官網的介紹</p><blockquote><p>「 <em>序列</em> 」（sequence）是一種元素的邏輯系列，全都是一種類型。 當您有大量的資料收集，但不一定會預期使用所有元素時，序列特別有用。 個別順序元素只會在必要時計算，因此在不使用所有元素的情況下，序列可以提供比清單更佳的效能。 順序是以類型表示 <code>seq&lt;'T&gt;</code> ，這是的別名 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.ienumerable-1">IEnumerable</a> 。 因此，任何實介面的 .NET 型別都 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.ienumerable-1">IEnumerable</a> 可以用來做為序列。 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html">Seq 模組</a>可支援涉及序列的操作。</p></blockquote><h1 id="Notes"><a class="header-anchor" href="#Notes"> </a>Notes</h1><h2 id="建立-Seq"><a class="header-anchor" href="#建立-Seq"> </a>建立 Seq</h2><p>F# 建立 range 數列的方式可以透過 <code>..</code> 的方式來完成，例如 <code>[ 1 .. 3 ]</code> 就能產生 <code>[ 1;2;3 ]</code> 的 List，要表示 step n 時，可以這樣子表示 <code>[ 1..2..5]</code> 就會得到 <code>[1;3;5]</code>，同樣的表示法套用在 seq 上會是這樣子寫</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123; <span class="number">1.</span><span class="number">.2</span><span class="operator">..</span><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure><p>更進一步可以透過程式的方式產生 seq 的內容</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">-&gt;</span> i <span class="operator">*</span> i &#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span>. <span class="number">10</span> <span class="keyword">do</span> i <span class="operator">*</span> i&#125;</span><br></pre></td></tr></table></figure><p>另外一種會遇到的情況是想將一個 seq 展開並放入到另外一個 seq 時，可以使用 <code>yield!</code> 的關鍵字 ，其效果跟 JavaScript 的 flatMap 是一樣的</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">yield!</span> <span class="keyword">seq</span> &#123; <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件中提到一點就是如果運算是中有使用到 <code>yield!</code> 時，其他回傳值就必須使用 <code>yield</code></p><h2 id="轉換"><a class="header-anchor" href="#轉換"> </a>轉換</h2><p>可以透過兩種方式來將 <code>List</code> or <code>Array</code> 轉換成 <code>seq</code></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Convert an array to a sequence by using a cast.</span></span><br><span class="line"><span class="keyword">let</span> seqFromArray1 <span class="operator">=</span> [<span class="operator">|</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">|</span>] <span class="operator">:&gt;</span> seq<span class="operator">&lt;</span>int<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">// let seqFromArray1 = Seq.cast [| 1 .. 10 |]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert an array to a sequence by using Seq.ofArray.</span></span><br><span class="line"><span class="keyword">let</span> seqFromArray2 <span class="operator">=</span> [<span class="operator">|</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">|</span>] <span class="operator">|&gt;</span> Seq.ofArray</span><br></pre></td></tr></table></figure><h2 id="搜尋"><a class="header-anchor" href="#搜尋"> </a>搜尋</h2><p>常用的方法有  <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#exists">Seq. exists</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#exists">array.exists2</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#find">seq. find</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#findIndex">findIndex</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#pick">Seq. pick</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#tryFind">tryFind</a> 和 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#tryFindIndex">array.tryfindindex</a></p><h2 id="Obtaining-Subsequences"><a class="header-anchor" href="#Obtaining-Subsequences"> </a>Obtaining Subsequences</h2><ul><li><p>常看到的有 <code>Seq.filter</code> 、<code>Seq.choose</code>，跟 List 的版本功能一樣但運作方式不同，filtering 和 choosing 的行為只會針對當下的 seq element</p></li><li><p>取 n 筆記錄的方法有 <code>Seq.take</code> 或是 <code>Seq.truncate</code> 兩者的差異是要處理的 seq 內是否有足夠得資料比數，如果資料比數不夠時，<code>Seq.take</code> 會傳回 <code>System.InvalidOperationException</code> 的例外狀況，而 <code>Seq.truncate</code> 不會發生</p></li><li><p><code>Seq.takeWhile</code> 取值直到第一個不吻合條件發生</p></li><li><p><code>Seq.skip</code> 跳過 n  筆記錄</p></li><li><p><code>Seq.skipWhil</code> skip until first element tor which the predicate return false</p></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// takeWhile</span></span><br><span class="line"><span class="keyword">let</span> mySeqLessThan10 <span class="operator">=</span> Seq.takeWhile (<span class="keyword">fun</span> elem <span class="operator">-&gt;</span> elem <span class="operator">&lt;</span> <span class="number">10</span>) mySeq</span><br><span class="line">mySeqLessThan10 <span class="operator">|&gt;</span> printSeq</span><br><span class="line"></span><br><span class="line"><span class="comment">// skip</span></span><br><span class="line"><span class="keyword">let</span> mySeqSkipFirst5 <span class="operator">=</span> Seq.skip <span class="number">5</span> mySeq</span><br><span class="line">mySeqSkipFirst5 <span class="operator">|&gt;</span> printSeq</span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile</span></span><br><span class="line"><span class="keyword">let</span> mySeqSkipWhileLessThan10 <span class="operator">=</span> Seq.skipWhile (<span class="keyword">fun</span> elem <span class="operator">-&gt;</span> elem <span class="operator">&lt;</span> <span class="number">10</span>) mySeq</span><br><span class="line">mySeqSkipWhileLessThan10 <span class="operator">|&gt;</span> printSeq</span><br></pre></td></tr></table></figure><h2 id="Transforming-Sequences"><a class="header-anchor" href="#Transforming-Sequences"> </a>Transforming Sequences</h2><p>發現很多用法跟 RxJS 好像</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> printSeq seq1 <span class="operator">=</span> Seq.iter (<span class="built_in">printf</span> <span class="string">&quot;%A &quot;</span>) seq1; <span class="built_in">printfn</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> seqPairwise <span class="operator">=</span> Seq.pairwise (<span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">-&gt;</span> i<span class="operator">*</span>i &#125;)</span><br><span class="line">printSeq seqPairwise</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>) (<span class="number">4</span>, <span class="number">9</span>) (<span class="number">9</span>, <span class="number">16</span>) (<span class="number">16</span>, <span class="number">25</span>) (<span class="number">25</span>, <span class="number">36</span>) (<span class="number">36</span>, <span class="number">49</span>) (<span class="number">49</span>, <span class="number">64</span>) (<span class="number">64</span>, <span class="number">81</span>) (<span class="number">81</span>, <span class="number">100</span>) </span><br></pre></td></tr></table></figure><p><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#windowed">Seq.windowed</a> 用法跟 <code>Seq.pairwise</code> 很像，只是他可以指定每組的數量</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> seqNumbers <span class="operator">=</span> [ <span class="number">1.0</span>; <span class="number">1.5</span>; <span class="number">2.0</span>; <span class="number">1.5</span>; <span class="number">1.0</span>; <span class="number">1.5</span> ] <span class="operator">:&gt;</span> seq<span class="operator">&lt;</span>float<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">let</span> seqWindows <span class="operator">=</span> Seq.windowed <span class="number">3</span> seqNumbers</span><br><span class="line"><span class="keyword">let</span> seqMovingAverage <span class="operator">=</span> Seq.map Array.average seqWindows</span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;Initial sequence: &quot;</span></span><br><span class="line">printSeq seqNumbers <span class="comment">// 1.0 1.5 2.0 1.5 1.0 1.5</span></span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;\nWindows of length 3: &quot;</span></span><br><span class="line">printSeq seqWindows <span class="comment">// [|1.0; 1.5; 2.0|] [|1.5; 2.0; 1.5|] [|2.0; 1.5; 1.0|] [|1.5; 1.0; 1.5|]</span></span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;\nMoving average: &quot;</span></span><br><span class="line">printSeq seqMovingAverage <span class="comment">// 1.5 1.666666667 1.5 1.333333333</span></span><br></pre></td></tr></table></figure><h1 id="API-Study"><a class="header-anchor" href="#API-Study"> </a>API Study</h1><h2 id="Seq-collect"><a class="header-anchor" href="#Seq-collect"> </a>Seq.collect</h2><p><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#collect">API</a></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> <span class="string">&quot;AB\nDE&quot;</span></span><br><span class="line"></span><br><span class="line">d.Split [<span class="operator">|</span> <span class="string">&#x27;\n&#x27;</span> <span class="operator">|</span>]</span><br><span class="line"><span class="operator">|&gt;</span> Seq.collect (Seq.skip <span class="number">1</span> <span class="operator">&gt;&gt;</span> Seq.take <span class="number">1</span>)</span><br><span class="line"><span class="operator">|&gt;</span> <span class="built_in">printfn</span> <span class="string">&quot;%A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// seq [&#x27;B&#x27;; &#x27;E&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/zh-tw/dotnet/fsharp/language-reference/sequences">sequences</a></li><li><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html">fsharp collections seqmodule</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在練習 F# 時，發現自己對於 F# Collection 操作不熟悉，尤其是 Seq 的部分，特地拉出單章刻意練習&lt;/p&gt;</summary>
    
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/categories/FSharp/"/>
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>FSharp + Minimal API + MongoDB</title>
    <link href="http://blog.kevinyang.net/2022/01/30/fsharp-minimalAPI-mongodb/"/>
    <id>http://blog.kevinyang.net/2022/01/30/fsharp-minimalAPI-mongodb/</id>
    <published>2022-01-30T12:34:35.000Z</published>
    <updated>2022-08-06T13:44:08.886Z</updated>
    
    <content type="html"><![CDATA[<p>延續<a href="https://blog.kevinyang.net/2022/01/30/fsharp-minimal-api/">上一篇</a> 寫的內容，將 MongoDB 的功能加進來，順便練習 F#</p><span id="more"></span><h1 id="Work-with-MongoDB"><a class="header-anchor" href="#Work-with-MongoDB"> </a>Work with MongoDB</h1><p>.net core 專案不管是 C# 或是 F# 要使用 MongoDB 都需要安裝一個 package <code>MongoDB.Driver</code>，安裝完成後就可以連接 MongoDB 了，這邊就假設各位的電腦已經有一個正常運行的 MongoDB，如果沒有，網路上有很多安裝教學</p><p>接下來的檔案都是在 <code>Todo.fs</code> 內做異動</p><ol><li><p>調整 <code>Todo</code> type 定義</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Todo</span> <span class="operator">=</span> &#123;</span><br><span class="line">      <span class="built_in">id</span><span class="operator">:</span> BsonObjectId <span class="comment">// mongodb 自己的 key 欄位, 需要 open MongoDB.Bson</span></span><br><span class="line">      uid<span class="operator">:</span> <span class="type">string</span> <span class="comment">// 上一篇使用 int, 這裡改用 Guid 當作 uid</span></span><br><span class="line">      title<span class="operator">:</span> <span class="type">string</span></span><br><span class="line">      isDone<span class="operator">:</span> <span class="type">bool</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>增加 property 和 method 到 <code>ITodoService</code> type</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ITodoService</span> <span class="operator">=</span>  </span><br><span class="line">   <span class="keyword">abstract</span> mongo<span class="operator">:</span> MongoClient</span><br><span class="line">   <span class="keyword">abstract</span> db<span class="operator">:</span> IMongoDatabase</span><br><span class="line">   <span class="keyword">abstract</span> GetTodos<span class="operator">:</span> <span class="type">unit</span> <span class="operator">-&gt;</span> Todo <span class="type">seq</span></span><br><span class="line">   <span class="keyword">abstract</span> SaveTodo<span class="operator">:</span> Todo <span class="operator">-&gt;</span> <span class="type">bool</span></span><br></pre></td></tr></table></figure></li><li><p>將缺少的部分實做補齊</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TodoService <span class="operator">=</span> </span><br><span class="line">    &#123; <span class="keyword">new</span> ITodoService <span class="keyword">with</span>   </span><br><span class="line">        <span class="keyword">member</span> __.mongo <span class="operator">=</span> MongoClient(<span class="string">&quot;your mongodb connection string&quot;</span>)</span><br><span class="line">        <span class="keyword">member</span> __.db <span class="operator">=</span> __.mongo.GetDatabase <span class="string">&quot;todos&quot;</span> <span class="comment">// 可以換成自己建立的 database 名稱</span></span><br><span class="line">        <span class="keyword">member</span> __.GetTodos()<span class="operator">:</span> <span class="type">seq</span><span class="operator">&lt;</span>Todo<span class="operator">&gt;</span> <span class="operator">=</span></span><br><span class="line">            __.db</span><br><span class="line">              .GetCollection<span class="operator">&lt;</span>Todo<span class="operator">&gt;</span>(<span class="string">&quot;todos&quot;</span>)</span><br><span class="line">              .Find(Builders.Filter.Empty)</span><br><span class="line">              .ToEnumerable() <span class="operator">|&gt;</span> Seq.cast</span><br><span class="line">              </span><br><span class="line">        <span class="keyword">member</span> __.SaveTodo todo <span class="operator">=</span></span><br><span class="line">            <span class="keyword">let</span> collection <span class="operator">=</span> __.db.GetCollection<span class="operator">&lt;</span>Todo<span class="operator">&gt;</span>(<span class="string">&quot;todos&quot;</span>)</span><br><span class="line">            <span class="keyword">let</span> todos <span class="operator">=</span> </span><br><span class="line">                collection</span><br><span class="line">                    .Find(<span class="keyword">fun</span> x<span class="operator">-&gt;</span> x.uid <span class="operator">=</span> todo.uid)</span><br><span class="line">                    .ToEnumerable()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">match</span> Seq.isEmpty todos <span class="keyword">with</span></span><br><span class="line">            <span class="operator">|</span> <span class="literal">true</span> <span class="operator">-&gt;</span> </span><br><span class="line">                collection.InsertOne &#123; todo <span class="keyword">with</span></span><br><span class="line">                                        <span class="built_in">id</span> <span class="operator">=</span> BsonObjectId(ObjectId.GenerateNewId())</span><br><span class="line">                                        uid <span class="operator">=</span> Guid.NewGuid().ToString() &#125; <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">            <span class="operator">|</span> <span class="literal">false</span> <span class="operator">-&gt;</span> </span><br><span class="line">                <span class="keyword">let</span> filter <span class="operator">=</span> Builders<span class="operator">&lt;</span>Todo<span class="operator">&gt;.</span>Filter.Eq((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.uid), todo.uid)</span><br><span class="line">                <span class="keyword">let</span> update <span class="operator">=</span></span><br><span class="line">                    Builders<span class="operator">&lt;</span>Todo<span class="operator">&gt;.</span>Update</span><br><span class="line">                        .Set((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.title), todo.title)</span><br><span class="line">                        .Set((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.isDone), todo.isDone)</span><br><span class="line"></span><br><span class="line">                collection.UpdateOne(filter, update) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>__.GetTodos()</code> 這一段我稍微卡到的地方在於 <code>IEnumerable</code> 轉型到 <code>Seq</code> 的地方，查了一下文件，發現 <code>IEnumerable</code> 和 <code>Seq</code> 的本質上是一樣的，所以只要使用 <code>Seq.cast</code> 的方法轉一下即可</li><li>MongoDB Collection 的查詢是使用 <code>Builders.filter</code> 的方法建立，這裡因為是要全撈，所以就單純使用 <code>Builders.Filter.Empty</code></li><li><code>__.SaveTodo</code> 的部分，我將建立與更新寫在一起，判斷方式是先用傳進來的 <code>todo.uid</code> 去尋找是否有存在的記錄，透過 pattern match 的寫法來區分新增與更新</li><li>line 24: 建立 <code>filter</code> 與 <code>update</code> 的定義，<code>colletion.UpdateOne</code> 方法需要傳進這兩個定義</li></ul></li><li><p>修改 <code>addTodo</code> 的方法</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> addTodo <span class="operator">=</span></span><br><span class="line">    Func<span class="operator">&lt;</span>ITodoService, Todo, bool<span class="operator">&gt;</span></span><br><span class="line">        (<span class="keyword">fun</span> (todos<span class="operator">:</span> ITodoService) (todo) <span class="operator">-&gt;</span> todos.SaveTodo todo)</span><br></pre></td></tr></table></figure><p>有好一段時間沒有寫 C#，熊熊忘記 <code>Func</code> 的使用方式，還好後來有想起來，而這邊跟寫 C# 的差異在於 line 3 的部分，如果是 C# 會這樣子寫 <code>(todos: ITodoService , todo) =&gt; &#123;...&#125;</code>，但在 F# 的世界裡，因為 <code>Func</code> 的 signature 是 <code>Func(a -&gt; b -&gt; c)</code>，所以才會有 line 3 的寫法出現了，算是 FP 的特性之一。</p><p>BTW，如果想要將 FP 學好，要學會看懂 signature</p></li></ol><p>這樣調整完後，重新執行測試 API ，沒有意外就可以看到資料有儲存到 MongoDB 內了</p><h1 id="注入-IConfiguration"><a class="header-anchor" href="#注入-IConfiguration"> </a>注入 IConfiguration</h1><p>經過一晚的思考，還是將如何使用 Configuration 的作法補上來，順便熟悉 <code>Minimal API</code> 的 DI 機制，接下來會分兩塊來看</p><ol><li><p>map func 直接注入 dependency</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;RequireQualifiedAccess&gt;]</span></span><br><span class="line"><span class="keyword">module</span> Home</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Configuration</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> showVersion <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">let</span> getCurrentVersion (config<span class="operator">:</span>IConfiguration) <span class="operator">=</span> config[<span class="string">&quot;version&quot;</span>]</span><br><span class="line">    Func<span class="operator">&lt;</span>IConfiguration, string<span class="operator">&gt;</span>(getCurrentVersion)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerRoutes (app<span class="operator">:</span> WebApplication) <span class="operator">=</span></span><br><span class="line">    app.MapGet(<span class="string">&quot;/&quot;</span>, showVersion) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app</span><br></pre></td></tr></table></figure><ul><li>line 10: 的 <code>Func</code> 寫法如同上面的，可以用這樣子的方式取得註冊在 services 內的服務 (framework 幫我們完成)</li></ul></li><li><p>註冊 service 層的 DI</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TodoService (config<span class="operator">:</span> IConfiguration) <span class="operator">=</span> </span><br><span class="line">    &#123; <span class="keyword">new</span> ITodoService <span class="keyword">with</span>        </span><br><span class="line">        <span class="keyword">member</span> __.mongo <span class="operator">=</span> MongoClient(config[<span class="string">&quot;mongodb&quot;</span>])</span><br><span class="line">        <span class="keyword">member</span> __.db <span class="operator">=</span> __.mongo.GetDatabase <span class="string">&quot;todos&quot;</span></span><br><span class="line">      <span class="operator">....</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>line 1: 在宣告時就表明要給 <code>IConfiuration</code></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder</span><br><span class="line">    .services</span><br><span class="line">    .AddSingleton<span class="operator">&lt;</span>Todo.ITodoService<span class="operator">&gt;</span>(<span class="keyword">fun</span> _ <span class="operator">-&gt;</span> Todo.TodoService builder.Configuration) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br></pre></td></tr></table></figure><ul><li>所以在註冊的時候就餵給他 Configuration 就好</li></ul></li></ol><p>這樣子就完成了，這部分的寫法我一開始有點鬼打牆，主要是因為我卡在 C# 版本的觀念，service 的 DI 要從 <code>constructure</code> 注入，後來想通其實他就是 function，就直接傳進去就好了。</p><p>換另外一個層面來看，當你發現一個 function 要傳入的東西太多時，就要重新思考這段程式碼是否有問題，是不是負責太多事情了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;延續&lt;a href=&quot;https://blog.kevinyang.net/2022/01/30/fsharp-minimal-api/&quot;&gt;上一篇&lt;/a&gt; 寫的內容，將 MongoDB 的功能加進來，順便練習 F#&lt;/p&gt;</summary>
    
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/categories/FSharp/"/>
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>FSharp 也要走 minimal API 風</title>
    <link href="http://blog.kevinyang.net/2022/01/30/fsharp-minimal-api/"/>
    <id>http://blog.kevinyang.net/2022/01/30/fsharp-minimal-api/</id>
    <published>2022-01-30T05:33:56.000Z</published>
    <updated>2022-08-06T13:44:08.882Z</updated>
    
    <content type="html"><![CDATA[<p>Minimal API 推出後，很多人慢慢能接受這樣的風格了，而 F# 當然也要來一波，以下是簡單跟風過程</p><span id="more"></span><h1 id="基本型"><a class="header-anchor" href="#基本型"> </a>基本型</h1><p>透過 VS2022 建立一個空專案，語言選擇 F#，就完成了</p><p><img src="image-20220130135421055.png" alt="image-20220130135421055"></p><p><img src="image-20220130135458674.png" alt="image-20220130135458674"></p><p>後面就下一步到整個專案建立起來，然後就會看到一個很乾淨的 program.fs 了</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Hosting</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main args <span class="operator">=</span></span><br><span class="line">    <span class="keyword">let</span> builder <span class="operator">=</span> WebApplication.CreateBuilder(args)</span><br><span class="line">    <span class="keyword">let</span> app <span class="operator">=</span> builder.Build()</span><br><span class="line"></span><br><span class="line">    app.MapGet(<span class="string">&quot;/&quot;</span>, Func<span class="operator">&lt;</span>string<span class="operator">&gt;</span>(<span class="keyword">fun</span> () <span class="operator">-&gt;</span> <span class="string">&quot;Hello World!&quot;</span>)) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line"></span><br><span class="line">    app.Run()</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span> <span class="comment">// Exit code</span></span><br></pre></td></tr></table></figure><p>將專案執行起來後就可以看 Hello World! 的顯示</p><p><img src="image-20220130141201938.png" alt="image-20220130141201938"></p><h1 id="來點變化"><a class="header-anchor" href="#來點變化"> </a>來點變化</h1><p>新增一個 <code>HOme.fs</code> 的檔案，然後將 root request 的動作搬到新檔案中，然後多點變化</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.fs</span></span><br><span class="line"><span class="keyword">module</span> Home</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> showTime <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">let</span> getCurrentTime () <span class="operator">=</span> DateTime.Now</span><br><span class="line">    Func<span class="operator">&lt;</span>DateTime<span class="operator">&gt;</span>(getCurrentTime)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerRoutes (app<span class="operator">:</span> WebApplication) <span class="operator">=</span></span><br><span class="line">    app.MapGet(<span class="string">&quot;/&quot;</span>, showTime) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app</span><br></pre></td></tr></table></figure><p>而原本的 <code>Program.fs</code> 就可以改成這樣</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Hosting</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main args <span class="operator">=</span></span><br><span class="line">    <span class="keyword">let</span> builder <span class="operator">=</span> WebApplication.CreateBuilder(args)</span><br><span class="line">    <span class="keyword">let</span> app <span class="operator">=</span> builder.Build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Changing</span></span><br><span class="line">    app</span><br><span class="line">    <span class="operator">|&gt;</span> Home.registerRoutes</span><br><span class="line">    <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    </span><br><span class="line">    app.Run()</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span> <span class="comment">// Exit code</span></span><br></pre></td></tr></table></figure><p>這樣是不是就乾淨很多了，在來多寫一個 add/get items 的小功能</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Todo.fs</span></span><br><span class="line"><span class="meta">[&lt;RequireQualifiedAccess&gt;]</span></span><br><span class="line"><span class="keyword">module</span> Todo</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Todo</span> <span class="operator">=</span> </span><br><span class="line">    &#123; <span class="built_in">id</span><span class="operator">:</span> <span class="type">int</span></span><br><span class="line">      title<span class="operator">:</span> <span class="type">string</span></span><br><span class="line">      isDone<span class="operator">:</span> <span class="type">bool</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> <span class="keyword">private</span> todos <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ITodoService</span> <span class="operator">=</span> </span><br><span class="line">   <span class="keyword">abstract</span> GetTodos<span class="operator">:</span> <span class="type">unit</span> <span class="operator">-&gt;</span> Todo <span class="type">seq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> TodoService <span class="operator">=</span> &#123; <span class="keyword">new</span> ITodoService <span class="keyword">with</span></span><br><span class="line">                       <span class="keyword">member</span> this.GetTodos()<span class="operator">:</span> <span class="type">seq</span><span class="operator">&lt;</span>Todo<span class="operator">&gt;</span> <span class="operator">=</span></span><br><span class="line">                         todos <span class="operator">|&gt;</span> List.toSeq  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> getTodos <span class="operator">=</span> </span><br><span class="line">    Func<span class="operator">&lt;</span>ITodoService, Todo seq<span class="operator">&gt;</span></span><br><span class="line">        (<span class="keyword">fun</span> (todos<span class="operator">:</span> ITodoService) <span class="operator">-&gt;</span> todos.GetTodos())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> addTodo <span class="operator">=</span></span><br><span class="line">    Func<span class="operator">&lt;</span>Todo, bool<span class="operator">&gt;</span></span><br><span class="line">        (<span class="keyword">fun</span> todo <span class="operator">-&gt;</span> </span><br><span class="line">            todos <span class="operator">&lt;-</span> todo<span class="operator">::</span> todos</span><br><span class="line">            <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerRoutes (app<span class="operator">:</span> WebApplication) <span class="operator">=</span></span><br><span class="line">    app.MapGet(<span class="string">&quot;/todos&quot;</span>, getTodos) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app.MapPost(<span class="string">&quot;/todos&quot;</span>, addTodo) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app</span><br></pre></td></tr></table></figure><p><code>Program.fs</code></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Hosting</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.DependencyInjection <span class="comment">// 註冊 service 需要的 namespace</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main args <span class="operator">=</span></span><br><span class="line">    <span class="keyword">let</span> builder <span class="operator">=</span> WebApplication.CreateBuilder(args)</span><br><span class="line">    <span class="comment">// 註冊 service</span></span><br><span class="line">    builder</span><br><span class="line">        .Services</span><br><span class="line">        .AddSingleton<span class="operator">&lt;</span>Todo.ITodoService<span class="operator">&gt;</span>(<span class="keyword">fun</span> _ <span class="operator">-&gt;</span> Todo.TodoService) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> app <span class="operator">=</span> builder.Build()</span><br><span class="line">   </span><br><span class="line">    app</span><br><span class="line">    <span class="operator">|&gt;</span> Home.registerRoutes</span><br><span class="line">    <span class="operator">|&gt;</span> Todo.registerRoutes</span><br><span class="line">    <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    app.Run()</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span> <span class="comment">// Exit code</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="測試"><a class="header-anchor" href="#測試"> </a>測試</h2><p>寫完後就可以用 postman 來測試一下</p><ol><li><p>Query Items</p><p><img src="image-20220130144502653.png" alt="image-20220130144502653"></p></li><li><p>Add Item</p><p><img src="image-20220130144622387.png" alt="image-20220130144622387"></p><p>新增成功後在查詢看有沒有存進去</p><p><img src="image-20220130144654827.png" alt="image-20220130144654827"></p></li></ol><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>同樣的架構在 F# 有可以試用，這是個好消息，之後會再嘗試接上 mongo了，此篇文章的程式碼是參考 <a href="https://github.com/AngelMunoz/NetSixSamples/tree/main/Newishfs">Github Repo</a>，也會在平日的晚上找時間開 F# 讀書會，有興趣的可以 follow 一下</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Minimal API 推出後，很多人慢慢能接受這樣的風格了，而 F# 當然也要來一波，以下是簡單跟風過程&lt;/p&gt;</summary>
    
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/categories/FSharp/"/>
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Cypress E2E with TodoMVC 筆記 02</title>
    <link href="http://blog.kevinyang.net/2022/01/29/angular-e2e-note-2/"/>
    <id>http://blog.kevinyang.net/2022/01/29/angular-e2e-note-2/</id>
    <published>2022-01-29T00:09:48.000Z</published>
    <updated>2022-08-06T13:44:08.882Z</updated>
    
    <content type="html"><![CDATA[<p>繼續上一篇的內容繼續下去，來完成整個 TodoMVC 跟 E2E 測試</p><span id="more"></span><h1 id="測試案例"><a class="header-anchor" href="#測試案例"> </a>測試案例</h1><h2 id="編輯-Todo"><a class="header-anchor" href="#編輯-Todo"> </a>編輯 Todo</h2><p>這個 TodoMVC 的範例中，要顯示 Todo 項目的編輯，只需要在 li 那層加上 <code>editing</code> 的 class 即可，E2E 測試程式如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;work with one todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="title function_">addTodo</span>(i.<span class="title function_">toString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;edit first item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">dblclick</span>();</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;editing&#x27;</span>);</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;exist&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTodoList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params">content: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=newTodo]&#x27;</span>).<span class="title function_">type</span>(content).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>延續上一篇的測試，做了一些重構，將一些重複執行的動作包成 function</li><li>line 9: 使用 alias 的方式來代替 let/const 的寫法，也是官方建議寫法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;editing: todo.isEdit&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> (<span class="attr">dblclick</span>)=<span class="string">&quot;todo.isEdit = true&quot;</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [<span class="attr">value</span>]=<span class="string">&quot;todo.content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>當然 todo 對應的型別也會配合加上 <code>isEdit</code> 的屬性型別</p><p>編輯內容後按 <code>Enter</code> 結束編輯模式，顯示內容也應該要對應修改</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">it</span>(<span class="string">&#x27;edit first item value and enter save&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">edtingItem</span>();</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;input.edit&#x27;</span>)</span><br><span class="line">     .<span class="title function_">type</span>(<span class="string">&#x27;hello&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;contain.text&#x27;</span>, <span class="string">&#x27;0hello&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">edtingItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">dblclick</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;editing: todo.isEdit&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> (<span class="attr">dblclick</span>)=<span class="string">&quot;todo.isEdit = true&quot;</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;todo.content&quot;</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;todo.isEdit = false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用到 <code>ngModel</code> 所以在 <code>app.module.ts</code> 的地方需要 import <code>FormsModule</code></li></ul><h2 id="完成-Todo"><a class="header-anchor" href="#完成-Todo"> </a>完成 Todo</h2><p><img src="image-20220129105724937.png" alt="image-20220129105724937"></p><p>當 checkbox 選取時表示這個 todo 已經完成，會出現刪除線，在 li 上會加上 <code>completed</code> 的 class，E2E 測試如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;complete todo item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>app.component.html (這邊應該不用解釋了吧)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;editing: todo.isEdit, &#x27;completed&#x27;: todo.isCompleted&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> (<span class="attr">change</span>)=<span class="string">&quot;todo.isCompleted = !todo.isCompleted&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> (<span class="attr">dblclick</span>)=<span class="string">&quot;todo.isEdit = true&quot;</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;todo.content&quot;</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;todo.isEdit = false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="刪除-Todo"><a class="header-anchor" href="#刪除-Todo"> </a>刪除 Todo</h2><p><img src="image-20220129110118056.png" alt="image-20220129110118056"></p><p>按下這個就能刪除這筆 todo</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;remove todo item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.destroy&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>angular 程式的部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;removeTodo(todo)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">removeTodo</span>(<span class="params">todo: Todo</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">todos</span> = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="property">id</span> !== todo.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但這樣子寫看似沒有問題，可是執行起來會出現這個錯誤，</p><p><img src="image-20220129110749203.png" alt="image-20220129110749203"></p><p>主要是因為刪除的按鈕只有在滑鼠移到上面時才會顯示出來，所以單純這樣子找會發現找不到的問題，但又用到 <code>:hover</code> 的 CSS 屬性來控制 button 的顯示與否，這問題要怎麼處理呢? 有以下幾種方式</p><ol><li><p>使用 <code>.click(&#123;force: true&#125;)</code> 的暴力解法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;remove todo item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.destroy&#x27;</span>).<span class="title function_">click</span>(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>.invoke('show')</code> 的方式強制顯示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.destroy&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;show&#x27;</span>).<span class="title function_">click</span>();</span><br></pre></td></tr></table></figure></li><li><p>使用社群開發的 plugin，但這個有瀏覽器環境的限制 (<a href="https://github.com/dmtrKovalenko/cypress-real-events">https://github.com/dmtrKovalenko/cypress-real-events</a>)</p></li></ol><h2 id="過濾-Todo"><a class="header-anchor" href="#過濾-Todo"> </a>過濾 Todo</h2><p>測試過濾功能，這邊就示範一個，使用上篇筆記的技巧，在要點選的目標上標註 <code>data-cy=xxx</code>，至於 todo filter 的實做我這邊就不寫了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should filter with only completed todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 準備測試資料</span></span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line">    <span class="comment">// 點選 completed 過濾條件</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=filter-completed]&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Todo-Items-Count"><a class="header-anchor" href="#Todo-Items-Count"> </a>Todo Items Count</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should have remain active todo count&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=todo-count]&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todo-count&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@todo-count&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;0 item left&#x27;</span>);</span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@todo-count&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;2 item left&#x27;</span>);</span><br><span class="line">  <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@todo-count&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;1 item left&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>理論上這邊應該要拆成更小的測試案例，但就讓我偷懶一下</p><h2 id="Clean-Complete"><a class="header-anchor" href="#Clean-Complete"> </a>Clean Complete</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should clear completed todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=clear-completed]&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h1><p>基本的 E2E 測試寫到後面其實就差不多這樣，當然還有其他更進階的測試手法，就留在後面學習了，而這裡還有一件事情需要處理的是重構測試碼，會看到很多重複的情況，這邊其實能整理的更乾淨</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.cypress.io/guides/core-concepts/variables-and-aliases#Return-Values">Variables and Aliases</a></li><li><a href="https://docs.cypress.io/api/commands/as">as</a></li><li><a href="https://docs.cypress.io/api/commands/check">check</a></li><li><a href="https://docs.cypress.io/api/commands/find">find</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;繼續上一篇的內容繼續下去，來完成整個 TodoMVC 跟 E2E 測試&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Cypress E2E with TodoMVC 筆記 01</title>
    <link href="http://blog.kevinyang.net/2022/01/28/angular-e2e-note-1/"/>
    <id>http://blog.kevinyang.net/2022/01/28/angular-e2e-note-1/</id>
    <published>2022-01-28T13:15:41.000Z</published>
    <updated>2022-08-06T13:44:08.878Z</updated>
    
    <content type="html"><![CDATA[<p>建立好 E2E 的環境後，就拿 TodoMVC 的樣板來做練習，以下為練習實作中的筆記</p><span id="more"></span><h1 id="準備要測試的-TodoMVC"><a class="header-anchor" href="#準備要測試的-TodoMVC"> </a>準備要測試的 TodoMVC</h1><ol><li><p>將 TodoMVC  的 template 和 css 搬進 Angular 專案中</p><p><img src="image-20220128213454445.png" alt="image-20220128213454445"></p></li><li><p>建立一個練行用的 e2e spec file</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Main&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;Welcome&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;e2e-study app is running!&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>執行 ng e2e，預期會看到測試失敗</p><p><img src="image-20220128213434694.png" alt="image-20220128213434694"></p></li><li><p>將測試檔案修正成綠燈</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Main&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;todos&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="image-20220128213610960.png" alt="image-20220128213610960"></p></li></ol><h2 id="測試案例-1"><a class="header-anchor" href="#測試案例-1"> </a>測試案例 1</h2><p>檢查 Todo List 筆數是否為兩筆</p><ol><li><p>html 結構</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- These are here just to show the structure of the list items --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;completed&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Taste JavaScript<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create a TodoMVC template&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Buy a unicorn<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Rule the web&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>測試案例 - 紅燈</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(ele.<span class="property">children</span>.<span class="property">length</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="image-20220128214335209.png" alt="image-20220128214335209"></p></li><li><p>綠燈</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(ele.<span class="property">children</span>.<span class="property">length</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查了一下官方文件，有另外一種更乾淨的寫法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);    </span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="測試案例-2"><a class="header-anchor" href="#測試案例-2"> </a>測試案例 2</h2><p>新增 Todo，列表會多一筆紀錄</p><ol><li><p>先重構一下 spec code，發現在兩個 test case 內有重複的 code，將其移到 <code>beforeEach</code> 內</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Main&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;todos&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在 input 地方輸入並按下 enter，期待會看到 3 筆 (預設 2 筆 + 新增 1 筆)，預期失敗，因為沒有實作功能</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;add new todo, list should have 3 items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>實作功能</p><ul><li>app.component.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; v4 <span class="keyword">as</span> uuidv4 &#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Todo</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">isComplete</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">todos</span>: <span class="title class_">Todo</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="params">ele: HTMLInputElement</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title function_">uuidv4</span>(),</span><br><span class="line">      <span class="attr">content</span>: ele.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">isComplete</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    ele.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.component.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span> <span class="attr">autofocus</span> #<span class="attr">newTodo</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;addTodo(newTodo)&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">     ...</span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [<span class="attr">value</span>]=<span class="string">&quot;todo.content&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>重新執行測試就會看到綠燈了</p></li><li><p>整理 html 並配合調整測試檔案</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Main&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;todos&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;add new todo, list should have 3 items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span> <span class="attr">autofocus</span> #<span class="attr">newTodo</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;addTodo(newTodo)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- These are here just to show the structure of the list items --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --&gt;</span>          </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [<span class="attr">value</span>]=<span class="string">&quot;todo.content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="小技巧"><a class="header-anchor" href="#小技巧"> </a>小技巧</h1><p>有時候在定位 HTMLElement 的時候會很麻煩，不像這個範例很單純，這時候就可透過 attribute 的方式來標註，根據這份 <a href="https://docs.cypress.io/guides/references/best-practices#Selecting-Elements">best practice</a> 內提到，我們可以使用 <code>data-cy</code>、<code>data-test</code>、<code>data-testid</code> 來標註，就可以很精準地拿到我們想要的 element.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span> <span class="attr">autofocus</span> #<span class="attr">newTodo</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;addTodo(newTodo)&quot;</span> <span class="attr">data-cy</span>=<span class="string">&quot;newTodo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原本寫法</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">// 改為以下寫法</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=newTodo]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h1><ul><li><p>Cypress API</p><ul><li><p><a href="https://docs.cypress.io/api/commands/should">should</a>: Create an assertion. Assertions are automatically retried until they pass or time out.</p></li><li><p><a href="https://docs.cypress.io/api/commands/type">type</a>: Type into a DOM element.</p></li><li><p><a href="https://docs.cypress.io/api/commands/children">children</a>: Get the children of each DOM element within a set of DOM elements.</p></li><li><p><a href="https://docs.cypress.io/api/commands/get">get</a> : Get one or more DOM elements by selector or <a href="https://docs.cypress.io/guides/core-concepts/variables-and-aliases">alias</a>.</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;建立好 E2E 的環境後，就拿 TodoMVC 的樣板來做練習，以下為練習實作中的筆記&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Add E2E Testing from zero to one with cyrpess</title>
    <link href="http://blog.kevinyang.net/2022/01/27/angular-e2e-cypress/"/>
    <id>http://blog.kevinyang.net/2022/01/27/angular-e2e-cypress/</id>
    <published>2022-01-27T12:40:33.000Z</published>
    <updated>2022-08-06T13:44:08.878Z</updated>
    
    <content type="html"><![CDATA[<p>Angular 在 12 版之類就將 protactor E2E framework 從 CLI 起始專案中移除，主要原因是大家習慣用來做 E2E 測試的工具，Protractor 已經不是主流，是 cypress，為了這個原因，Angular 團隊決定把這選擇權還回開發者手上，讓開發者決定自己的 E2E 測試。</p><span id="more"></span><h1 id="初始環境"><a class="header-anchor" href="#初始環境"> </a>初始環境</h1><p>當然有強大 angular schematics，cypress 也有出可以快速設定測試環境的套件，以下是如何安裝及執行第一個 E2E 測試的步驟</p><ol><li><p>當起始一個新的 Agnular 專案，已經看不到 E2E 的資料夾了</p><p><img src="image-20220127205749466.png" alt="image-20220127205749466"></p></li><li><p>好家在有 <code>ng add</code> 的功能，cypress 的套件安裝可以透過 <code>ng add @cypress/schematic</code> 來完成，這個會執行以下工作</p><p>✅ Install Cypress</p><p>✅ Add npm scripts for running Cypress in <code>run</code> mode and <code>open</code> mode</p><p>✅ Scaffold base Cypress files and directories</p><p>✅ Provide the ability to add new e2e files easily using <code>ng-generate</code></p><p>✅ Optional: prompt you to add or update the default <code>ng e2e</code> command to use Cypress.</p><p><img src="image-20220127210133452.png" alt="image-20220127210133452"></p></li><li><p>當跑完後就可以執行 <code>ng e2e</code> 將 cypress 執行起來並執行第一個預設測試，但如果在沒有任何修改下，會測試錯誤</p><p><img src="image-20220127210434231.png" alt="image-20220127210434231"></p></li><li><p>就來修改一下 e2e 測試讓他綠燈</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;My First Test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;Welcome&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;e2e-study app is running!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="image-20220127210600806.png" alt="image-20220127210600806"></p></li><li><p>這樣就完成 cypress e2e 測試環境了</p></li></ol><h1 id="cypress-schematics-介紹"><a class="header-anchor" href="#cypress-schematics-介紹"> </a>cypress-schematics 介紹</h1><ol><li><p>To run Cypress in <code>open</code> mode within your project:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng run &#123;project-name&#125;:cypress-open</span><br></pre></td></tr></table></figure></li><li><p>To run Cypress headlessly via <code>run</code> mode within your project:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng run &#123;project-name&#125;:cypress-run</span><br></pre></td></tr></table></figure></li><li><p>If you have chosen to add or update the <code>ng e2e</code> command, you can also run Cypress in <code>open</code> mode using this:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng e2e</span><br></pre></td></tr></table></figure></li><li><p>To generate new e2e spec files:</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate @cypress/schematic:e2e</span><br></pre></td></tr></table></figure></li></ol><p>更多設定參數可以到這<a href="https://github.com/cypress-io/cypress/tree/develop/npm/cypress-schematic#builder-options-">連結</a>仔細研究 (angular.json)</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://github.com/cypress-io/cypress/tree/develop/npm/cypress-schematic">cypress schematics</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Angular 在 12 版之類就將 protactor E2E framework 從 CLI 起始專案中移除，主要原因是大家習慣用來做 E2E 測試的工具，Protractor 已經不是主流，是 cypress，為了這個原因，Angular 團隊決定把這選擇權還回開發者手上，讓開發者決定自己的 E2E 測試。&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Others] Windows 11 快速鍵</title>
    <link href="http://blog.kevinyang.net/2021/10/11/win11-keboard-shortcuts/"/>
    <id>http://blog.kevinyang.net/2021/10/11/win11-keboard-shortcuts/</id>
    <published>2021-10-11T01:55:22.000Z</published>
    <updated>2022-08-06T13:44:08.878Z</updated>
    
    <content type="html"><![CDATA[<p>升級到 windows 11 後，原生就提供了不少新功能，為了要讓整個操作流程流暢，勢必要記一些快速鍵，所以從網路上整理了一些</p><span id="more"></span><h1 id="新快速鍵"><a class="header-anchor" href="#新快速鍵"> </a>新快速鍵</h1><ol><li><strong>Open Action Center</strong> - <code>Win + A</code></li><li><strong>Open Notifications Panel</strong> - <code>Win + N</code></li><li><strong>Open Widgets Panel</strong> - <code>Win + W</code></li><li>☆ <strong>Quick Access to snap layout</strong> - <code>Win + Z</code></li></ol><h1 id="既有快速鍵"><a class="header-anchor" href="#既有快速鍵"> </a>既有快速鍵</h1><h2 id="一般"><a class="header-anchor" href="#一般"> </a>一般</h2><ol><li><strong>Alt + F4</strong>: Close active window. When you are on the desktop with no active window selected, this shortcut opens the shutdown dialog box with options to restart, sleep, hibernate, log out, or shut down your PC.</li><li><strong>Win + L</strong>: Lock your computer</li><li><strong>Win + D</strong>: Minimizes all open windows and takes you. to the Desktop</li><li><strong>Alt + Tab</strong>: Switch between the running applications (Task Switcher)</li><li><strong>Win + Tab</strong>: Open Task View</li><li><strong>Ctrl + Z</strong>: Undo an action</li><li><strong>Ctrl + Y</strong>: Redo an action</li><li><strong>Ctrl + Delete</strong>: Move selected item to Recycle Bin:</li><li><strong>Shift + Delete</strong>: Delete the selected item permanently</li><li><strong>Win + X</strong>: Open Start Button context menu</li><li><strong>Esc</strong>: Stop or close the current task</li><li><strong>F11</strong>: Enter/ Exit full-screen mode</li><li><strong>F2</strong>: Rename selected item</li><li><strong>F5</strong>: Refresh the active window. This shortcut also refreshes the Windows desktop when no active window is selected.</li><li><strong>F10</strong>: Open the Menu bar in the current app</li><li><strong>Win + I</strong>: Open Windows 11 Settings</li><li><strong>Win + R</strong>: Open Run command</li><li><strong>Alt + Page Up</strong>: Move up one screen</li><li><strong>Alt + Page Down</strong>: Move down one screen</li><li><strong>Ctrl + Shift + Es</strong>c: Keyboard shortcut to open Task Manager in Windows 11</li><li><strong>Win + S or Win + Q</strong>: Open Windows Search</li><li><strong>Ctrl + P</strong>: Print the current page</li><li><strong>Shift + Arrow keys</strong>: Select more than one item</li><li><strong>Ctrl + S</strong>: Save the current file (works on apps like Office 365, Notepad, Paint, etc.)</li><li><strong>Ctrl + Shift + S</strong>: Save As</li><li><strong>Ctrl + O</strong>: Open a file in the current app</li><li><strong>Alt + Esc</strong>: Cycle through the apps on the taskbar</li><li><strong>Alt + F8</strong>: Display your password on the login screen</li><li><strong>Alt + Spacebar</strong>: Open the shortcut menu for the current window</li><li><strong>Alt + Enter</strong>: Open properties for the selected item</li><li><strong>Alt + F10</strong>: Open the context menu (right-click menu) for the selected item</li><li><strong>Ctrl + N</strong>: Open a new program window of the current app</li><li><strong>Backspace</strong>: Go back to the Settings home page (while on any Windows Settings page)</li><li><strong>Win + period (.) or Win + semicolon (;)</strong>: Windows 11 keyboard shortcut to access the Emoji keyboard</li><li><strong>Win + P</strong>: Project a screen</li><li><strong>Win + H</strong>: Launch Voice Typing</li></ol><h2 id="Screenshot"><a class="header-anchor" href="#Screenshot"> </a>Screenshot</h2><ol><li><strong>PrtScn/ Print Screen</strong>: Take a screenshot of the entire desktop</li><li><strong>Alt + PrtScn</strong>: Take a screenshot of the Active Window</li><li><strong>Win + Shift + S</strong>: Capture any part of the screen with Snip &amp; Sketch</li></ol><h2 id="Desktop-and-Virtual-Desktop-Shortcuts"><a class="header-anchor" href="#Desktop-and-Virtual-Desktop-Shortcuts"> </a>Desktop and Virtual Desktop Shortcuts</h2><ol><li><strong>Windows key</strong>: Open Start Menu</li><li><strong>Ctrl + Shift</strong>: Switch the keyboard layout</li><li><strong>Alt + Tab</strong>: View all open apps</li><li><strong>Ctrl + Arrow keys + Spacebar</strong>: Select more than one item on the desktop</li><li><strong>Win + M</strong>: Minimize all open windows</li><li><strong>Win + Shift + M</strong>: Maximize all minimized windows</li><li><strong>Win + Home</strong>: Minimize or maximize all but the active window</li><li><strong>Win + Left Arrow Key</strong>: Snap the current app or window to the Left</li><li><strong>Win + Right Arrow Key</strong>: Snap the current app or window to the Right</li><li><strong>Win + Shift + Up arrow key</strong>: Stretch the active window to the top and bottom of the screen</li><li><strong>Win + Shift + down arrow key</strong>: Restore or minimize active desktop windows vertically, maintaining width</li><li><strong>Win + Tab</strong>: Open Desktop view</li><li><strong>Win + Ctrl + D</strong>: Add a new virtual desktop</li><li><strong>Win + Ctrl + F4</strong>: Close the active virtual desktop</li><li><strong>Win + Ctrl + Right Arrow</strong>: Switch to the virtual desktops on the Right</li><li><strong>Win + Ctrl + Left Arrow</strong>: Switch to the virtual desktops on the Left</li><li><strong>Ctrl + Shift</strong>: Create a shortcut (while dragging file or folder icon)</li><li><strong>Win + Comma (,)</strong>: Windows Peek (Take a peek at the desktop)</li><li><strong>Win + Ctrl + Shift + B</strong>: Keyboard shortcut to restart your graphics driver instantly in Windows 11</li></ol><h2 id="Taskbar"><a class="header-anchor" href="#Taskbar"> </a>Taskbar</h2><ol><li><strong>Ctrl + Shift + Left-click on app icon</strong>: Open an app as administrator from the Taskbar</li><li><strong>Win + Ctrl + Shift + Number key (0-9)</strong>: Open a second instance of an app with administrator privileges.</li><li><strong>Win + Number key</strong>: Open apps from their pinned taskbar icons. that means Win + 1 will open the first app whose icon is pinned on the Taskbar, while Win + 2 will open the second app, etc., depending on their position on the Taskbar.</li><li><strong>Win + T</strong>: Cycle through apps in the taskbar</li><li><strong>Win + Alt + D</strong>: View Date and Time from the taskbar</li><li><strong>Shift + Left Click app icon</strong>: Open another instance of an app from the taskbar</li><li><strong>Shift + Right-click grouped app icon</strong>: Show the window menu for the group apps from the taskbar</li><li><strong>Win + B</strong>: Highlight the Overflow key (upwards arrow) in the Notification Area (Once highlighted, you can press Enter and then use arrow keys to toggle between each icon under the overflow menu)</li><li><strong>Alt + Windows key + Number Key (0-9)</strong>: Open a Taskbar icon’s Jump List</li><li><strong>Win + Shift + Number Keys (0-9)</strong>: Open another instance of an open app</li><li><strong>Win + Ctrl + Number key (0-9)</strong>: Switch to the last active window of a pinned app</li></ol><h2 id="Miscellaneous"><a class="header-anchor" href="#Miscellaneous"> </a>Miscellaneous</h2><ol><li><strong>Win + forward slash (/)</strong>: Start IME reconversion</li><li><strong>Win + F</strong>: Open Feedback Hub</li><li><strong>Win + K</strong>: Open the “Connect” quick setting</li><li><strong>Win + O</strong>: Lock your device orientation</li><li><strong>Win + Pause</strong>: Display System Properties (About page) in Windows Settings</li><li><strong>Win + Ctrl + F</strong>: Search for PCs (if you are on a network)</li><li>☆ <strong>Win + Shift + Left/ Right arrow key</strong>: Move an app or window from one monitor to another</li><li><strong>Win + Spacebar</strong>: Switch input language and keyboard layout</li><li>☆ <strong>Win + V</strong>: Open Clipboard History</li><li><strong>Win + Y</strong>: Switch input between desktop and Windows Mixed Reality</li></ol><h1 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h1><ul><li><a href="https://beebom.com/windows-11-keyboard-shortcuts/">150+ Most Useful Windows 11 Keyboard Shortcuts You Should Know</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;升級到 windows 11 後，原生就提供了不少新功能，為了要讓整個操作流程流暢，勢必要記一些快速鍵，所以從網路上整理了一些&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Microfrontend with Module Federation 筆記</title>
    <link href="http://blog.kevinyang.net/2021/09/12/ng-microfrontend-with-webpack-federation/"/>
    <id>http://blog.kevinyang.net/2021/09/12/ng-microfrontend-with-webpack-federation/</id>
    <published>2021-09-12T05:37:26.000Z</published>
    <updated>2022-08-06T13:44:08.874Z</updated>
    
    <content type="html"><![CDATA[<p>其實這觀念在去年由 Manfred Steyer (Angular GDE) 提出來，並花很多心力在研究這一塊的作法，一年過去後因為公司上有可能會使用到這樣的情境，所以就先來研究一下，但也因為晚了一年，現在很多工具和環境上已經好很多，而且該採的雷很多前輩都踩過了，這一篇筆記就是稍微整理一下如何從無到有的將 Angular 環境給設定起來</p><span id="more"></span><h1 id="Requirement"><a class="header-anchor" href="#Requirement"> </a>Requirement</h1><ul><li>Angular 12</li></ul><h1 id="設定"><a class="header-anchor" href="#設定"> </a>設定</h1><ol><li><p>建立一個空的 ng application。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new ng-mfe --create-application=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>建立一個 host (shell) application</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g application shell --routing</span><br></pre></td></tr></table></figure></li><li><p>建立一個 remote application</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g application mfe1 --routing</span><br></pre></td></tr></table></figure></li><li><p>為這兩個 application 加入 <code>@angular-architects/module-federation</code> 套件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng add @angular-architects/module-federation --project shell --port 5000</span><br><span class="line">ng add @angular-architects/module-federation --project mfe1 --port 3000</span><br></pre></td></tr></table></figure><ol><li>這時候會產生 webpack.config.js 檔案: 用來設定 remote module 使用</li></ol></li></ol><p>到這邊算是基本完成套件的安裝，接下來就是一些 module/component 的設定</p><ol><li><p>在 <code>mfe1</code> application 中新增一個 <code>FlightsModule</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g m flights --project=mfe --routing</span><br></pre></td></tr></table></figure></li><li><p>設定 <code>webpack.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleFederationPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;webpack/lib/container/ModuleFederationPlugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mf = <span class="built_in">require</span>(<span class="string">&quot;@angular-architects/module-federation/webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> share = mf.<span class="property">share</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sharedMappings = <span class="keyword">new</span> mf.<span class="title class_">SharedMappings</span>();</span><br><span class="line">sharedMappings.<span class="title function_">register</span>(</span><br><span class="line">  path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../../tsconfig.json&#x27;</span>),</span><br><span class="line">  [<span class="comment">/* mapped paths to share */</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">uniqueName</span>: <span class="string">&quot;mfe1&quot;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">runtimeChunk</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,   </span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      ...sharedMappings.<span class="title function_">getAliases</span>(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ModuleFederationPlugin</span>(&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// For remotes (please adjust)</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;mfe1&quot;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;remoteEntry.js&quot;</span>,</span><br><span class="line">        <span class="attr">exposes</span>: &#123;</span><br><span class="line">          <span class="string">&quot;./flightModules&quot;</span>: <span class="string">&quot;./projects/mfe1/src/app/flights/flights.module.ts&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="attr">shared</span>: <span class="title function_">share</span>(&#123;</span><br><span class="line">          <span class="string">&quot;@angular/core&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/common&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/common/http&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/router&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">          ...sharedMappings.<span class="title function_">getDescriptors</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;),</span><br><span class="line">    sharedMappings.<span class="title function_">getPlugin</span>()</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>line 28: host 載入時的 <code>remoteName</code></li><li>line 29: webpack 要產生的 file name</li><li>line 31: expose 的 <code>module</code> 名稱及對應的 module 檔案</li></ul></li><li><p>在 host (shell) 的路由檔設定要 <code>lazyloading</code> 路徑</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loadRemoteModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular-architects/module-federation&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&#x27;http://localhost:3000/remoteEntry.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;flights&#x27;</span>,</span><br><span class="line">    <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">loadRemoteModule</span>(&#123;</span><br><span class="line">        <span class="attr">remoteEntry</span>: <span class="variable constant_">URL</span>,</span><br><span class="line">        <span class="attr">remoteName</span>: <span class="string">&#x27;mfe1&#x27;</span>,</span><br><span class="line">        <span class="attr">exposedModule</span>: <span class="string">&#x27;./flightModule&#x27;</span>,</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">m</span>) =&gt;</span> m.<span class="property">FlightsModule</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>line 7 ~ 15 是標準 Lazy loading 的寫法，而 line 10 從原本的 <code>import</code> 改寫成 <code>loadRemoteModule</code> 即可載入遠端的 module 檔案</li><li><code>remoteEmtry</code> 設定遠端主機位置及參考檔案，檔名為上一個步驟中所設定的檔名</li><li><code>remoteName</code> 為上一步驟所設定的 <code>name</code></li><li><code>exposedModule</code> 為上一步驟所設定的 exposes 內的某一個 <code>key</code></li></ul></li></ol><p>最後在調整一下 host 的 <code>AppComponent</code> 的 HTML 內容，例如加上連結到 flights module 等，到這邊算完成一個最小完成單位，可以將兩個 applications 跑起來後看一下執行結果</p><p><img src="image-20210912145552814.png" alt="image-20210912145552814"></p><h1 id="問題探討"><a class="header-anchor" href="#問題探討"> </a>問題探討</h1><p>看起來一起都很簡單，但仔細思考後，其實還有很多東西要考慮，例如各 module 間的版本如何控制、如何共用狀態、部屬的相依性等，這些都是很實際的問題，等著下一篇筆記再來研究吧</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://www.angulararchitects.io/aktuelles/the-microfrontend-revolution-part-2-module-federation-with-angular/"><strong>The Microfrontend Revolution: Module Federation with Angular</strong></a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;其實這觀念在去年由 Manfred Steyer (Angular GDE) 提出來，並花很多心力在研究這一塊的作法，一年過去後因為公司上有可能會使用到這樣的情境，所以就先來研究一下，但也因為晚了一年，現在很多工具和環境上已經好很多，而且該採的雷很多前輩都踩過了，這一篇筆記就是稍微整理一下如何從無到有的將 Angular 環境給設定起來&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Dhall] 學習筆記 001 - 基本知識建立</title>
    <link href="http://blog.kevinyang.net/2021/08/15/dhall-note-001/"/>
    <id>http://blog.kevinyang.net/2021/08/15/dhall-note-001/</id>
    <published>2021-08-15T02:38:34.000Z</published>
    <updated>2022-08-06T13:44:08.874Z</updated>
    
    <content type="html"><![CDATA[<p>Dhall is a <a href="https://docs.dhall-lang.org/discussions/Programmable-configuration-files.html#">programmable configuration language</a> that you can think of as: JSON + functions + types + imports，這樣應該就解釋了什麼是 Dhall 了吧</p><span id="more"></span><p>貼個範例聞香一下</p><p><img src="image-20210815104539412.png" alt="image-20210815104539412"></p><p>左邊是 dhall 的語法，右邊是輸出結果，看起來還簡單明瞭的，接下來就是基本語言的筆記了，至於如何安裝就請按照這<a href="https://docs.dhall-lang.org/tutorials/Getting-started_Generate-JSON-or-YAML.html#installation">文件</a>安裝</p><h1 id="學習筆記"><a class="header-anchor" href="#學習筆記"> </a>學習筆記</h1><ul><li><p>Dhall 要轉換成不同格式，會透過不同的執行程式完成，例如 Dhall -&gt; JSON 就要用 dhall-to-json，要轉換成 YAML 就會用 dhall-to-yaml，這篇筆記看到 dhall-to-json 輸出結果就會是 JSON 格式</p><p><img src="image-20210815135615904.png" alt="image-20210815135615904"></p></li><li><p>Dhall 是一個強型別語言，compiler 會檢查型別是否正確，會將失敗的理由吐回給你，也可以使用 <code>--explain</code> 的 flag 來取得更多的訊息</p><p><img src="image-20210815105527602.png" alt="image-20210815105527602"></p><p><img src="image-20210815105609372.png" alt="image-20210815105609372"></p></li><li><p>支援 type annotations，類似 TypeScript 指定型別的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1, bar = True &#125; : &#123; foo : Natural, bar : Bool &#125;&#x27;</span><br></pre></td></tr></table></figure><p>Type annotations 也可以用指定檔案的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1, bar = True &#125; : ./schema.dhall&#x27;</span><br></pre></td></tr></table></figure></li><li><p>變數宣告: 使用 <code>let</code> 來進行變數宣告，如上面範例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let home = &#x27;/home/$&#123;user&#125;&#x27;</span><br></pre></td></tr></table></figure></li><li><p>dhall 是 whitespace-insensitive，不像 yaml 一個 space 錯位就壞掉了，因為這樣的特性會有這樣的寫法出現</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span> <span class="keyword">let</span> y = <span class="number">2</span> <span class="keyword">in</span> [x, y]</span><br><span class="line"><span class="comment">// 等同於</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span></span><br><span class="line"><span class="keyword">in</span>  [x, y]</span><br></pre></td></tr></table></figure></li><li><p>一個比較完整的使用範例 (檔案: <code>employee.dhall</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> job = &#123; department = <span class="string">&quot;Data Platform&quot;</span>, title = <span class="string">&quot;Software Engineer&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = &#123; age = <span class="number">23</span>, name = <span class="string">&quot;John Doe&quot;</span>, position = job &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> alice = &#123; age = <span class="number">24</span>, name = <span class="string">&quot;Alice Smith&quot;</span>, position = job &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>  [ john, alice ]</span><br></pre></td></tr></table></figure><p>輸出結果 (執行命令: <code>dhall-to-json --file ./employee.dhall</code>)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;department&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Data Platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Software Engineer&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;department&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Data Platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Software Engineer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li><p>可以寫 function，宣告方式: <code>\(inputName : inputType) -&gt; output</code>，範例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let twice = \(x : Natural) -&gt; [x, x] </span><br><span class="line">in twice 2</span><br><span class="line"></span><br><span class="line">// 輸出結果</span><br><span class="line">[2, 2]</span><br></pre></td></tr></table></figure></li><li><p>record 可以透過 <code>/\</code> 來合併</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1 &#125; /\ &#123; bar = 2&#125;&#x27;</span><br><span class="line"></span><br><span class="line">// 輸出結果</span><br><span class="line">&#123;</span><br><span class="line">   &quot;bar&quot;: 2,</span><br><span class="line">   &quot;foo&quot;: 1, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比較接近現實生活的範例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> smallServer = &#123; cpus = <span class="number">1</span>, gigabytesOfRAM = <span class="number">1</span>, terabytesOfDisk = <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mediumServer = &#123; cpus = <span class="number">8</span>, gigabytesOfRAM = <span class="number">16</span>, terabytesOfDisk = <span class="number">4</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> largeServer = &#123; cpus = <span class="number">64</span>, gigabytesOfRAM = <span class="number">256</span>, terabytesOfDisk = <span class="number">16</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>  [ smallServer /\ &#123; hostName = <span class="string">&quot;eu-west.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;us-east.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;ap-northeast.example.com&quot;</span> &#125;</span><br><span class="line">    , mediumServer /\ &#123; hostName = <span class="string">&quot;us-west.example.com&quot;</span> &#125;</span><br><span class="line">    , smallServer /\ &#123; hostName = <span class="string">&quot;sa-east.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;ca-central.example.com&quot;</span> &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li><li><p>Operators</p><ul><li><code>++</code> 連接兩個字串</li><li><code>#</code> 連接兩個 List</li></ul></li><li><p><code>Optional</code> ，有時候會遇到缺欄位的資料，這時候就要使用 <code>Optional</code> 的表示法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ </span><br><span class="line">  &#123; x = 1, y = None Natural &#125; ,</span><br><span class="line">  &#123; x = 2, y = Some 3 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Some -&gt; 表示這個欄位有可能有 Null 值出現</li><li>None <type> -&gt; 視為 Null 空值</li><li>指令多下 <code>--preserve-null</code> 參數，會將空值輸出 (null)</li></ul></li><li><p>使用 <code>Unions</code> 的方式可以讓清單內有不同型別得資料存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- ./package.dhall</span><br><span class="line"></span><br><span class="line">let Package =</span><br><span class="line">      &lt; Local : &#123; relativePath : Text &#125;</span><br><span class="line">      | GitHub : &#123; repository : Text, revision : Text &#125;</span><br><span class="line">      | Hackage : &#123; package : Text, version : Text &#125;</span><br><span class="line">      &gt;</span><br><span class="line"></span><br><span class="line">in  [ Package.GitHub</span><br><span class="line">        &#123; repository =</span><br><span class="line">            &quot;https://github.com/Gabriel439/Haskell-Turtle-Library.git&quot;</span><br><span class="line">        , revision = &quot;ae5edf227b515b34c1cb6c89d9c58ea0eece12d5&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/optparse-applicative&quot; &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/discrimination&quot; &#125;</span><br><span class="line">    , Package.Hackage &#123; package = &quot;lens&quot;, version = &quot;4.15.4&quot; &#125;</span><br><span class="line">    , Package.GitHub</span><br><span class="line">        &#123; repository = &quot;https://github.com/haskell/text.git&quot;</span><br><span class="line">        , revision = &quot;ccbfabedea1cf5b38ff19f37549feaf01225e537&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/servant-swagger&quot; &#125;</span><br><span class="line">    , Package.Hackage &#123; package = &quot;aeson&quot;, version = &quot;1.2.3.0&quot; &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>mapKey</code> 和 <code>mapValue</code> 就可以做出動態資料，而指令參數 <code>--noMaps</code> 就會單純輸出結果不轉換</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; mapKey = &quot;daniel&quot;, mapValue = &#123; age = 17 &#125; &#125;</span><br><span class="line">, &#123; mapKey = &quot;rebecca&quot;, mapValue = &#123; age = 17 &#125; &#125;</span><br><span class="line">, &#123; mapKey = &quot;aiden&quot;, mapValue = &#123; age = 16 &#125; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>如果要輸出 yaml ，就使用 <code>dhall-to-yaml</code> 來跑 <code>dhall</code> 檔案</p></li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.dhall-lang.org/index.html">Dhall 官方文件</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dhall is a &lt;a href=&quot;https://docs.dhall-lang.org/discussions/Programmable-configuration-files.html#&quot;&gt;programmable configuration language&lt;/a&gt; that you can think of as: JSON + functions + types + imports，這樣應該就解釋了什麼是 Dhall 了吧&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>[K8s 相關] 寫 Helm 技巧筆記</title>
    <link href="http://blog.kevinyang.net/2021/07/28/helm-tips/"/>
    <id>http://blog.kevinyang.net/2021/07/28/helm-tips/</id>
    <published>2021-07-28T15:58:32.000Z</published>
    <updated>2022-08-06T13:44:08.874Z</updated>
    
    <content type="html"><![CDATA[<p>Helm 或許不是現在最新最流行的工具，但公司用這個，所以還是得知道怎麼寫，這邊整理一些撰寫中一些實用小技巧。因為他底層是用 go template，有些語法會跟 Go 很像</p><span id="more"></span><ol><li><p>使用 name template 來降低 template 的雜亂度</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">define</span> <span class="string">&quot;temp.name&quot;</span> &#125;&#125;</span><br><span class="line"><span class="string">...</span></span><br><span class="line">&#123;&#123;<span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用不會輸出到 YAML 的註解表示法: <code>&#123;&#123; /*    /*&#125;&#125;</code></p></li><li><p>需知道 <code>&#123;&#123;-    -&#125;&#125;</code> 中 <code>-</code> 的意思，知道他要去除那邊的空白</p></li><li><p>可以使用 <code>&#123;&#123;- $var  := printf "%s-%s" .Values.xxx .Values.yyy -&#125;&#125;</code> 的寫法來定義範圍區域變數</p></li><li><p>使用 <code>printf</code> 時，要留意資料型別，這部分可查閱  Go <code>printf</code> 的使用辦法</p></li><li><p>在 name template 內如果要使用全域變數時，可加上 <code>$</code> ，例如 <code>&#123;&#123; $.Values.xxxx&#125;&#125;</code></p></li><li><p>使用 name template 時，可以利用 <code>dict</code> 將多組資料傳入 name templates  中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">$data</span> <span class="string">:=</span> <span class="string">dict</span> <span class="string">&quot;key1&quot;</span> <span class="string">value1</span> <span class="string">&quot;key2&quot;</span> <span class="string">value2</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">include</span> <span class="string">&quot;name.template&quot;</span> <span class="string">$data</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">name</span> <span class="string">template</span> <span class="string">內使用傳進來資料的方式</span></span><br><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">define</span> <span class="string">&quot;name.template&quot;</span> &#125;&#125;</span><br><span class="line"><span class="attr">value1:</span> &#123;&#123; <span class="string">.key1</span> &#125;&#125;</span><br><span class="line"><span class="attr">value2:</span> &#123;&#123; <span class="string">.key2</span> &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>range</code> 搭配 Values 中的列表資料，可以快速產生多組設定</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">$item</span> <span class="string">:=</span> <span class="string">.Values.items</span> &#125;&#125;</span><br><span class="line"><span class="attr">value in item:</span> &#123;&#123; <span class="string">$item.value</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">include</span> <span class="string">&quot;name.template&quot;</span> <span class="string">$item</span> &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">end</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>HELM 有一些 Flow control 的運算式可以使用，可參閱 <a href="https://helm.sh/docs/chart_template_guide/control_structures/">Doc</a></p></li><li><p>內建 function 及善用 pipe 可以簡化很多工作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="string">toYaml</span> <span class="string">.Values.resoureces</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">12</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>轉成 YAML 格式且 indent 12 個空白</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Helm 或許不是現在最新最流行的工具，但公司用這個，所以還是得知道怎麼寫，這邊整理一些撰寫中一些實用小技巧。因為他底層是用 go template，有些語法會跟 Go 很像&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Multi-container Pods</title>
    <link href="http://blog.kevinyang.net/2021/07/18/k8s-note-004/"/>
    <id>http://blog.kevinyang.net/2021/07/18/k8s-note-004/</id>
    <published>2021-07-18T14:21:06.000Z</published>
    <updated>2022-08-06T13:44:08.870Z</updated>
    
    <content type="html"><![CDATA[<p>Multi-container Pods 是另外一個很常見的使用方式，有 4 種模式 <code>Init Pattern</code> 、<code>Sidecar Pattern</code>、<code>Adapter Patter</code> 、<code>Ambassador Pattern</code>。</p><span id="more"></span><p>為什麼會出現這種模式，主要的目的是要讓 container 的工作可以單純化，透過組合的方式來完成原本應該要做的事情</p><h1 id="Init-Pattern"><a class="header-anchor" href="#Init-Pattern"> </a>Init Pattern</h1><ul><li><p>在主要 Container 前執行的 Container</p></li><li><p>只會跑一次</p></li><li><p>init container 完成後才會執行主要的 container</p></li><li><p>基本寫法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ps-init</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">initializer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-ctr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until nslookup pluralsight-ftw; do echo waiting for pluralsight-ftw service; sleep 1; done; echo Service found!&#x27;</span>]</span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web-ctr</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nigelpoulton/web-app:1.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ul><li><code>initContainers</code> 區塊就是用來定義 init containers 的</li><li>可以有多個 container</li><li>會依序執行</li><li>如果 init container 執行失敗，整個 Pod 會重新開始 (預設值)，可以被修改</li><li>應設定 resource requests &amp; limits</li></ul><h1 id="Sidecar-Pattern"><a class="header-anchor" href="#Sidecar-Pattern"> </a>Sidecar Pattern</h1><p><img src="image-20210718225552049.png" alt="image-20210718225552049"></p><ul><li><p>與 main container 同時執行，平行運作</p></li><li><p>寫法就是在 containers 下有第二個 image 時，基本上就是 sidecar pattern</p></li><li><p>範例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">git-syncer</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">git-syncer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">k8s.gcr.io/git-sync:v3.1.5</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">init-sync-ctr</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/tmp/git</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>常見用法: Logging</p></li></ul><h1 id="Adapter-Pattern"><a class="header-anchor" href="#Adapter-Pattern"> </a>Adapter Pattern</h1><p><img src="image-20210718225620546.png" alt="image-20210718225620546"></p><ul><li><p>範例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web-ctr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nigelpoulton/nginxadapter:1.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">transformer</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx/nginx-prometheus-exporter</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;-nginx.scrape-uri&quot;</span>,<span class="string">&quot;http://localhost/nginx_status&quot;</span>]</span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9113</span></span><br></pre></td></tr></table></figure></li><li><p>使用另外一個 container 做輸出資料轉換</p></li><li><p>SRP</p></li></ul><h1 id="Ambassador-Pattern"><a class="header-anchor" href="#Ambassador-Pattern"> </a>Ambassador Pattern</h1><p><img src="image-20210718225658971.png" alt="image-20210718225658971"></p><ul><li><p>在 Pod 內的建立起的 proxy</p></li><li><p>Service 只對 Ambassador 做開放</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Multi-container Pods 是另外一個很常見的使用方式，有 4 種模式 &lt;code&gt;Init Pattern&lt;/code&gt; 、&lt;code&gt;Sidecar Pattern&lt;/code&gt;、&lt;code&gt;Adapter Patter&lt;/code&gt; 、&lt;code&gt;Ambassador Pattern&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Jobs</title>
    <link href="http://blog.kevinyang.net/2021/07/17/k8s-note-003/"/>
    <id>http://blog.kevinyang.net/2021/07/17/k8s-note-003/</id>
    <published>2021-07-17T03:55:12.000Z</published>
    <updated>2022-08-06T13:44:08.870Z</updated>
    
    <content type="html"><![CDATA[<p>K8s 內也可以跑 Jobs 和 CronJobs，這一篇筆記就是在記錄此事</p><span id="more"></span><h1 id="什麼是-Jobs"><a class="header-anchor" href="#什麼是-Jobs"> </a>什麼是 Jobs</h1><ul><li>one time execution</li><li>can run multiple Pods in parallel</li><li>Successful completions are tracked</li></ul><h1 id="什麼是-CronJobs"><a class="header-anchor" href="#什麼是-CronJobs"> </a>什麼是 CronJobs</h1><ul><li>Cron Job creates Jobs on a time-based schedule</li><li>scheduled using the Cron format</li><li>names must be less than 52 characters</li><li><code>* * * * *</code> 為標準 Cron format.<ul><li>第一個 <code>*</code>: min (0~59)</li><li>第二個 <code>*</code>: hour (0~23)</li><li>第三個 <code>*</code>: day of month (1 - 31)</li><li>第四個 <code>*</code>: month (1 - 12) 或 jan, fan, mar,…</li><li>第五個 <code>*</code>: day of week (0 - 6, Sunday = 0 or 7) 或是 sun, mon, tue,…</li></ul></li><li>範例：<ul><li>每週一早上 3 點， <code>0 3 * * 1</code></li><li>每小時: <code>0 * * * *</code> , <code>@hourly</code></li><li>每天: <code>0 0 * * *</code>，<code>@daily</code></li><li>每週: <code>0 0 1 * * </code>，<code>@monthly</code></li><li>每年: <code>0 0 1 1 *</code> ，<code>@yearly</code></li><li>每分鐘: <code>*/1 * * * * </code></li></ul></li><li><a href="https://crontab.guru/">cron format editor 網站</a></li></ul><h1 id="如何建立-Jobs-和-CronJobs"><a class="header-anchor" href="#如何建立-Jobs-和-CronJobs"> </a>如何建立 Jobs 和 CronJobs</h1><ul><li><p>先定義 Jobs</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">completions:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">xxx</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;sh&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;.....&quot;</span></span><br></pre></td></tr></table></figure><ul><li>apiVersion 和 kind  的設定方法如上</li><li>completions: 需要成功執行 Job 的 Pods 數量</li><li>parallelism: 平行執行 Job 的 Pods 數量</li><li>restartPolicy 設定值有<ul><li>Never : Never try to restart</li><li>OnFailure: restart when job fail</li></ul></li><li>command: 執行指令</li></ul></li><li><p>Crobjob YAML 樣本如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">concurrencyPolicy:</span> <span class="string">Allow</span> <span class="comment"># Allow, Forbid, Replace</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&#x27;*/5 * * * *&#x27;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">completions:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">xxx</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;sh&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;.....&quot;</span></span><br></pre></td></tr></table></figure><ul><li>concurrencyPolicy: 是否允許 cronjobs 重疊執行</li><li>schedule: 設定執行時間表 (Cron format)</li><li>使用 <code>jobTemplate</code> 來描述 <code>job</code> 的 template</li></ul></li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/">Jobs</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">CrobJobs</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;K8s 內也可以跑 Jobs 和 CronJobs，這一篇筆記就是在記錄此事&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/tags/K8s/"/>
    
  </entry>
  
</feed>
