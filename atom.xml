<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CK&#39;s Notepad</title>
  
  
  <link href="http://blog.kevinyang.net/atom.xml" rel="self"/>
  
  <link href="http://blog.kevinyang.net/"/>
  <updated>2022-11-05T12:20:58.802Z</updated>
  <id>http://blog.kevinyang.net/</id>
  
  <author>
    <name>KevinYang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Dapr] 使用 Dapr 開發 - Hello World</title>
    <link href="http://blog.kevinyang.net/2022/11/05/study-dapr-2/"/>
    <id>http://blog.kevinyang.net/2022/11/05/study-dapr-2/</id>
    <published>2022-11-05T03:08:05.000Z</published>
    <updated>2022-11-05T12:20:58.802Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇知道 Dapr 是什麼後，就要進入 Hello World 的世界了，著手寫看看第一個 Dapr 應用程式</p><span id="more"></span><h2 id="環境安裝"><a class="header-anchor" href="#環境安裝"> </a>環境安裝</h2><p>如果沒有安裝過 <code>Dapr CLI</code> 的，可以先安裝，他可以任我們在開發環境上執行、啟動、管理和除錯 Dapr instances。雖然不是必要但建議開發環境要支援 Docker</p><p>步驟如下</p><ol><li><p><a href="https://docs.dapr.io/getting-started/install-dapr-cli/">安裝 Dapr CLI</a></p></li><li><p><a href="https://docs.dapr.io/getting-started/install-dapr-selfhost/">初始化 Dapr</a>。 此步驟會安裝最新的 Dapr 二進位檔和容器映射，以設定您的開發環境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dapr init</span><br></pre></td></tr></table></figure><p><img src="image-20221105194553626.png" alt="image-20221105194553626"></p><p><img src="image-20221105194623033.png" alt="image-20221105194623033"></p><p>環境多準備了這三個 containers，這時候我們就可以準備來開發第一個 Dapr 應用程式</p></li></ol><h2 id="第一個-Dapr-應用程式"><a class="header-anchor" href="#第一個-Dapr-應用程式"> </a>第一個 Dapr 應用程式</h2><p>Dapr 有提供不同語言的 SDK，方便使用者能自然且直覺的與 Dapr 做互動</p><p><img src="image-20221105194821719.png" alt="image-20221105194821719"></p><p>這裡的範例我使用 .net core console 來練習</p><ol><li><p>建立一個 console 程式</p></li><li><p>安裝 <code>Dapr.Client</code> 套件</p></li><li><p>在 <code>program.cs</code> 貼上這段程式碼</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapr.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> storeName = <span class="string">&quot;statestore&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> key = <span class="string">&quot;counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> daprClient = <span class="keyword">new</span> DaprClientBuilder().Build();</span><br><span class="line"><span class="keyword">var</span> counter = <span class="keyword">await</span> daprClient.GetStateAsync&lt;<span class="built_in">int</span>&gt;(storeName, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Counter = <span class="subst">&#123;counter++&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> daprClient.SaveStateAsync(storeName, key, counter);</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>line 6: 建立 dapr Client</li><li>line 7: 取得 <code>counter</code> state</li><li>line 13: 儲存值回 <code>counter</code> state</li></ul></li><li><p>試著用 <code>dapr</code> 指令來執行程式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dapr run --app-id DaprCounter dotnet run</span><br></pre></td></tr></table></figure><p>會看到程式會跑起來，而且也能看到 Counter 的值被持續增加上去，而且當重啟程式後，也會保留上一次的結果繼續  <img src="/image-20221105200300957.png" alt="image-20221105200300957"></p><p><img src="/image-20221105200334950.png" alt="image-20221105200334950"></p></li></ol><p>使用 <code>dapr run</code> 時，<code>--app-id</code> 很重要，state management building block 是使用這個為 prefix 的值，所以第二次執行不是使用同一個 <code>app-id</code> 則會被視為不同的狀態</p><p>還記得一開始在 <code>dapr init</code> 時，有啟動幾個 container，其中一個是 <code>redis</code>，這也是 dapr 儲存狀態的地方，在上一篇也有提到每一個 building block 後面的元件是可以被抽換的，相關設定檔是透過 yaml 來設定，設定檔儲存位置如下</p><ul><li><p>mac/Linux: <code>$HOME/.dapr/components</code></p></li><li><p>windows: <code>%USERPROFILE%\.dapr\components</code></p><p><img src="image-20221105201130802.png" alt="image-20221105201130802"></p></li></ul><p>從圖片中可以看到有一個 <code>statesotre.yaml</code> 的檔案，內容會是這樣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">statestore</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">state.redis</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redisHost</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">localhost:6379</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redisPassword</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">actorStateStore</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">scopes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DaprCounter</span></span><br></pre></td></tr></table></figure><ul><li>line 4: 這裡的 name 會對應到上面程式碼的 line 3 <code>const string storeName = &quot;statestore&quot;;</code></li><li>line 15: 可透過 <code>scopes</code> 來限定能存取此元件的應用程式 (<code>app-id</code>)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇知道 Dapr 是什麼後，就要進入 Hello World 的世界了，著手寫看看第一個 Dapr 應用程式&lt;/p&gt;</summary>
    
    
    
    <category term="Dapr" scheme="http://blog.kevinyang.net/categories/Dapr/"/>
    
    
    <category term="Dapr" scheme="http://blog.kevinyang.net/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>[Dapr] What is Dapr?</title>
    <link href="http://blog.kevinyang.net/2022/11/05/study-dapr-1/"/>
    <id>http://blog.kevinyang.net/2022/11/05/study-dapr-1/</id>
    <published>2022-11-05T01:45:10.000Z</published>
    <updated>2022-11-05T12:20:58.798Z</updated>
    
    <content type="html"><![CDATA[<p>Dapr 在 2019 第一次公開時，那時候版本還是 0.1 時，就有留意到，想不到幾年後，不僅進入 CNCF 還變成很多人推薦的框架，所以重新拾回研究一下 Dapr 的架構及如何使用在工作上</p><span id="more"></span><p>為什麼會回來看 Dapr，最主要的原因是目前的工作，系統都是以微服務的形式跑在自架的 K8s 上，一旦到達一個規模整個管理跟實做上要考慮的事情變的相對複雜，而 Dapr 可以降低這部分的工作並以一致的模式套用在不同的語言跟技術框架上</p><h2 id="What’s-Dapr"><a class="header-anchor" href="#What’s-Dapr"> </a>What’s Dapr</h2><p>官網上是這樣子介紹的</p><blockquote><h2 id="APIs-for-building-portable-and-reliable-microservices"><a class="header-anchor" href="#APIs-for-building-portable-and-reliable-microservices"> </a>APIs for building portable and reliable microservices</h2><h4 id="Leverage-industry-best-practices-and-focus-on-your-application’s-logic"><a class="header-anchor" href="#Leverage-industry-best-practices-and-focus-on-your-application’s-logic"> </a>Leverage industry best practices and focus on your application’s logic.</h4></blockquote><p><img src="image-20221105101325259.png" alt="image-20221105101325259"></p><p>從圖片上可以知道  Dapr 是走 sidecar 模式，但好家在他底層是使用 go 實做，執行起來也不會太笨重，並提供簡化不少原系統要處理的東西。而且 Dapr sidecar 之間的溝通是採用 <code>gRPC</code> 的模式來降低整體的負擔，將效能影響降至最低</p><h2 id="Dapr-架構"><a class="header-anchor" href="#Dapr-架構"> </a>Dapr 架構</h2><p><img src="Dapr-high-level.png" alt="Dapr at 20,000 feet"></p><p>從這張圖尚可知道，原本的應用程式可透過 HTTP 或 gRPC 的方式與 Dapr 的元件溝通，在這模式下，應用程式間的互動會由 <code>代理人</code> Dapr 來處理，之後我會說明為什麼我會將其定義成 <code>代理人</code> 的原因</p><p>Dapr 提供幾個積木供我們使用 (如下表)，讓我們有抽換背後對應的服務 (抽象化)</p><table><thead><tr><th style="text-align:left">Building block</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">State management</td><td style="text-align:left">Support contextual information for long running stateful services.</td></tr><tr><td style="text-align:left">Service invocation</td><td style="text-align:left">Invoke direct, secure service-to-service calls using platform agnostic protocols and well-known endpoints.</td></tr><tr><td style="text-align:left">Publish and subscribe</td><td style="text-align:left">Implement secure, scalable pub/sub messaging between services.</td></tr><tr><td style="text-align:left">Bindings</td><td style="text-align:left">Trigger code from events raised by external resources with bi-directional communication.</td></tr><tr><td style="text-align:left">Observability</td><td style="text-align:left">Monitor and measure message calls across networked services.</td></tr><tr><td style="text-align:left">Secrets</td><td style="text-align:left">Securely access external secret stores.</td></tr><tr><td style="text-align:left">Actors</td><td style="text-align:left">Encapsulate logic and data in reusable actor objects.</td></tr></tbody></table><p><img src="building-blocks-integration.png" alt="Dapr building blocks integration"></p><p>一開始有提到 Dapr 是使用 <code>sidecar</code> 模式與 application 做互動，所以架構會長的像這樣</p><p><img src="sidecar-generic.png" alt="Sidecar architecture"></p><h2 id="Hosting-Environment"><a class="header-anchor" href="#Hosting-Environment"> </a>Hosting Environment</h2><p>Dapr 的執行環境有分 <code>self-hosted</code> 和 <code>container</code> 模式</p><p><img src="self-hosted-Dapr-sidecar.png" alt="Self-hosted sidecar architecture"></p><p><img src="kubernetes-hosted-Dapr-sidecar.png" alt="Kubernetes-hosted sidecar architecture"></p><p>所以在本機開發環境如果沒有 docker 也還是可以透過 <code>self-hosted</code> 的模式進行開發，不會影響之後的部屬，<code>self-hosted</code> 可透過 Dapr cli 來完成相關的操作 (<a href="https://docs.Dapr.io/getting-started/install-Dapr-cli/">Dapr CLI installer</a>)</p><h3 id="Service-Mesh-Dapr"><a class="header-anchor" href="#Service-Mesh-Dapr"> </a>Service  Mesh &amp; Dapr</h3><p>Service Mesh 是另外一個偉大的坑，其負責範圍其實很多，科普一下</p><blockquote><p>服務網格是一個可設定的基礎結構層，內建功能可處理服務對服務通訊、復原、負載平衡和遙測擷取。 它會將這些考慮的責任移出服務，並移入服務網格層。</p></blockquote><p>Dapr 也遵循一樣的模式，所以接下來的問題會是 Dapr 可以取代原本的 service mesh 嗎? 其實 Dapr 可以與原有的 Service Mesh 共存，負責的業務範圍會不太一樣，Dapr 提供系統服務，service mesh 提供服務間的網路溝通</p><p><img src="dapr-and-service-mesh.png" alt="Dapr and Service Mesh together"></p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/">Dapr for .NET Developers</a></li><li><a href="https://docs.Dapr.io/getting-started/install-Dapr-cli/">Dapr CLI installer</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dapr 在 2019 第一次公開時，那時候版本還是 0.1 時，就有留意到，想不到幾年後，不僅進入 CNCF 還變成很多人推薦的框架，所以重新拾回研究一下 Dapr 的架構及如何使用在工作上&lt;/p&gt;</summary>
    
    
    
    <category term="Dapr" scheme="http://blog.kevinyang.net/categories/Dapr/"/>
    
    
    <category term="Dapr" scheme="http://blog.kevinyang.net/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>[OIDC] 瞭解 OIDC 的表層</title>
    <link href="http://blog.kevinyang.net/2022/10/30/oidc-notes/"/>
    <id>http://blog.kevinyang.net/2022/10/30/oidc-notes/</id>
    <published>2022-10-30T00:21:43.000Z</published>
    <updated>2022-11-05T12:20:58.790Z</updated>
    
    <content type="html"><![CDATA[<p>Keycloak 提供了幾種 protocols，OpenID Connect (OIDC)、OAuth 2.0 and SAML。雖然 OIDC &amp; OAuth 2.0 已存在一段時間，但因為沒有使用實做上的情境，所以都沒有花時間去瞭解背後的運作原理，一樣利用週末的時間來做一下功課</p><span id="more"></span><p>根據閱讀多篇文件瞭解，OIDC 是基於 OAuth 2.0 發展出來的，看起來得先看 OAuth 2.0 是什麼</p><p><img src="image-20221030104933158.png" alt="image-20221030104933158"></p><h2 id="OAuth-2-0"><a class="header-anchor" href="#OAuth-2-0"> </a>OAuth 2.0</h2><p>OAuth 2.0 基本上處理 Authorization 的部分，用來控制授權<strong>誰</strong>能存取<strong>資源</strong>，有四個基本元素</p><ol><li><strong>authorization server</strong>: 用來發 access token 的 server</li><li><strong>resource owner</strong>: 有權限能存取資料的使用者</li><li><strong>client</strong>: 將 access token 傳給系統服務的應用程式</li><li><strong>resource server</strong>: 接受 access token 並驗證其合法性</li></ol><p>其他名詞</p><ol><li><strong>authorization grant</strong>: 授權範圍</li><li><strong>access token</strong>: 由 <code>authorization server</code> 發出，會在發請求時附加在進去給 <code>resource server</code></li><li><strong>redirect URI</strong>: 登入後要轉回的路徑</li></ol><h3 id="授權流程"><a class="header-anchor" href="#授權流程"> </a>授權流程</h3><ol><li><p>Authorization Code</p><p><img src="image-20221030091611632.png" alt="image-20221030091611632"></p><p>這算是比較常見的模式，登入畫面會由 <code>authorization server</code> 提供，透過 <code>redirect URI</code> 的方式帶著 <code>authorization code</code> 回到 <code>client</code> 端供後面使用</p><blockquote><p>這流程也是 Keycloak JavaScript adapter 預設行為</p></blockquote></li><li><p>Implicit</p><p><img src="image-20221030091931055.png" alt="image-20221030091931055"></p><p>使用場景是 SPA 或是純前端系統，與 <code>Authorization Code</code> 模式的差異在於 <code>access token</code> 的取得方式，</p><blockquote><p>這模式比較不安全，「透過 URI Fragment 來傳 Access Token ，所以可能會外洩」</p></blockquote></li><li><p>Resource Owner Password Credentials</p><p><img src="image-20221030092328110.png" alt="image-20221030092328110"></p><p>這比較像是過往的 server side 網頁服務</p></li><li><p>Client Credentials</p><p><img src="image-20221030092618674.png" alt="image-20221030092618674"></p><p>適用場景: machine-to-machine (M2M) applications</p></li></ol><p>(圖片出自: <a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E8%AA%8D%E8%AD%98-oauth-2-0-%E4%B8%80%E6%AC%A1%E4%BA%86%E8%A7%A3%E5%90%84%E8%A7%92%E8%89%B2-%E5%90%84%E9%A1%9E%E5%9E%8B%E6%B5%81%E7%A8%8B%E7%9A%84%E5%B7%AE%E7%95%B0-c42da83a6015">[筆記] 認識 OAuth 2.0：一次了解各角色、各類型流程的差異</a>)</p><h2 id="OIDC"><a class="header-anchor" href="#OIDC"> </a>OIDC</h2><p>瞭解基本 OAuth 2.0 後，那 OIDC 又是什麼，一開始提到 <code>OIDC 是基於 OAuth 2.0 發展出來的</code></p><p>先提一下 <code>OAuth 2.0</code> 只有做 <code>Authorization</code> 的部分，並沒有涵蓋<code>Authentication</code> 的部分，這兩者的差異是什麼呢?</p><ul><li>Authorization: 授權使用範圍</li><li>Authentication: 使用者認證，使用者是否存在及使用者是誰，都算在認證的範圍內</li></ul><p><img src="image-20221030093943446.png" alt="image-20221030093943446"></p><p>(圖片來源: <a href="https://openid.net/connect/">https://openid.net/connect/</a>)</p><p>整個的流程大概會是這樣</p><p><img src="image-20221030094329195.png" alt="image-20221030094329195"></p><p>一些會出現在 OIDC 的名詞</p><ul><li><strong>End User</strong>: Human participant.</li><li><strong>Replying Party (RP)</strong>: OAuth 2.0 Client application requiring End-User Authentication and Claims from an OpenID Provider.</li><li><strong>OpenID Provider (OP)</strong>: OAuth 2.0 Authorization Server that is capable of Authenticating the End-User and providing Claims to a Relying Party about the Authentication event and the End-User.</li><li><strong>ID Token</strong>: <a href="https://openid.net/specs/openid-connect-core-1_0.html#JWT">JSON Web Token (JWT)</a> [JWT] that contains Claims about the Authentication event. It MAY contain other Claims.</li><li><strong>UserInfo Endpoint</strong>: Protected Resource that, when presented with an Access Token by the Client, returns authorized information about the End-User represented by the corresponding Authorization Grant. The UserInfo Endpoint URL MUST use the <code>https</code> scheme and MAY contain port, path, and query parameter components.</li></ul><h3 id="常見-flow"><a class="header-anchor" href="#常見-flow"> </a>常見 flow</h3><ol><li><strong>Authorization Code</strong></li><li><strong>Implicit</strong>: with Id_token</li><li><strong>Hybrid</strong>:  Authorization Code+ Implicit</li></ol><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://www.youtube.com/watch?v=996OiexHze0&amp;t=2s">OAuth 2.0 and OpenID Connect (in plain English)</a></li><li><a href="https://kimlin20011.medium.com/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-openid-connect-%E4%B8%80-8701bbf00958">深入淺出 OpenID Connect (一)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Keycloak 提供了幾種 protocols，OpenID Connect (OIDC)、OAuth 2.0 and SAML。雖然 OIDC &amp;amp; OAuth 2.0 已存在一段時間，但因為沒有使用實做上的情境，所以都沒有花時間去瞭解背後的運作原理，一樣利用週末的時間來做一下功課&lt;/p&gt;</summary>
    
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/categories/Keycloak/"/>
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/tags/Keycloak/"/>
    
  </entry>
  
  <entry>
    <title>[Keycloak] WebAPI with Keycloak</title>
    <link href="http://blog.kevinyang.net/2022/10/23/keycloak-note-2/"/>
    <id>http://blog.kevinyang.net/2022/10/23/keycloak-note-2/</id>
    <published>2022-10-23T05:37:00.000Z</published>
    <updated>2022-11-05T12:20:58.790Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇介紹了基本環境設定與 Angular 前端如何套用 Keycloak，但一個完整的流程應該還會包含後端的 API 驗證，這篇會用 C# 的 WebAPI 來做一個簡單範例</p><span id="more"></span><h2 id="New-Keycloak-Client"><a class="header-anchor" href="#New-Keycloak-Client"> </a>New Keycloak Client</h2><p>在 KeyCloak Admin Console 內多新增一個 Client 並把一些設定全部關掉，在最新版的介面裡面已經找不到設定 <code>access type</code> 的介面了，Google 一番後發現只要將所有的 Authentication flow 全部取消掉，就是以前的 Bearer-only 模式</p><p>所謂的 Bearer-only 模式: the application only allows bearer token requests</p><p><img src="image-20221023185121179.png" alt="image-20221023185121179"></p><p>設定完成後可以到同一畫面的右上角取額 setting json 內容</p><p><img src="image-20221023185454979.png" alt="image-20221023185454979"></p><p>將內容複製起來，等等建立在 Core WebAPI 專案的地方用的到</p><h2 id="c-專案"><a class="header-anchor" href="#c-專案"> </a>c# 專案</h2><p>先新增一個 <a href="http://ASP.NET">ASP.NET</a> Core WebAPI 的專案，並安裝 <a href="https://www.nuget.org/packages/Keycloak.AuthServices.Authentication/1.2.1?_src=template">Keycloak.AuthServices.Authentication</a> 套件</p><p>將上個步驟的 adapter config 內容新增到 <code>appsettings.json</code> 檔內，這邊是示範，Production 使用時請依正確做法設定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Logging&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;LogLevel&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Information&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Microsoft.AspNetCore&quot;</span>: <span class="string">&quot;Warning&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;AllowedHosts&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Keycloak&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;realm&quot;</span>: <span class="string">&quot;myrealm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;auth-server-url&quot;</span>: <span class="string">&quot;http://localhost:8080/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ssl-required&quot;</span>: <span class="string">&quot;external&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resource&quot;</span>: <span class="string">&quot;api-client&quot;</span>,</span><br><span class="line">    <span class="string">&quot;public-client&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;confidential-port&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到 <code>Program.cs</code> 檔案內新增 Authentication 的設定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddKeycloakAuthentication(configuration, o =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    o.RequireHttpsMetadata = <span class="literal">false</span>;    </span><br><span class="line">    o.Audience = <span class="string">&quot;account&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>記得在 <code>app.UseAuthorization()</code> 的上方加入 <code>app.UseAuthentication();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.UseAuthentication();</span><br><span class="line">app.UseAuthorization();</span><br></pre></td></tr></table></figure><p>上述完成設定後，就可以到 API 的地方加上 <code>[Authorize]</code> 的標籤</p><p><img src="image-20221023185907306.png" alt="image-20221023185907306"></p><p>一旦加上去後，只要要呼叫這個 API 時，就會檢查 request header 內的 <strong>authorization</strong> 的 <code>Bearer</code> 值是否合法正確</p><h3 id="如果遇到-CORS-問題"><a class="header-anchor" href="#如果遇到-CORS-問題"> </a>如果遇到 CORS 問題</h3><p>如果從 angular application 呼叫 API 時，通常會撞上 CORS 的問題，這時候就得在 <code>Program.cs</code> 加上 <code>Cors</code> 的相關設定，減少大家 google 的時間，這邊就附上最不嚴謹的設定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddPolicy(<span class="string">&quot;policy&quot;</span>,</span><br><span class="line">                    policy =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        policy.AllowAnyOrigin()</span><br><span class="line">                            .AllowAnyHeader()</span><br><span class="line">                            .AllowAnyMethod();</span><br><span class="line">                    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">app.UseCors(<span class="string">&quot;policy&quot;</span>);</span><br></pre></td></tr></table></figure><p>Controller 的部分也需要加上 <code>[EnableCors]</code> 的標籤</p><h3 id="實際呼叫的-Network-截圖"><a class="header-anchor" href="#實際呼叫的-Network-截圖"> </a>實際呼叫的 Network 截圖</h3><p><img src="image-20221023190406972.png" alt="image-20221023190406972"></p><p>在 Web 的部分會多判斷處理 Token 過期的問題，如果後臺有設定可自動 Refresh，那麼在呼叫 API 時就會去做 Token 更新的動作，之後才會進行 API 呼叫 (with authorization: Bearer xxxxxx)</p><p><img src="image-20221023190645948.png" alt="image-20221023190645948"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇介紹了基本環境設定與 Angular 前端如何套用 Keycloak，但一個完整的流程應該還會包含後端的 API 驗證，這篇會用 C# 的 WebAPI 來做一個簡單範例&lt;/p&gt;</summary>
    
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/categories/Keycloak/"/>
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/tags/Keycloak/"/>
    
  </entry>
  
  <entry>
    <title>[Keycloak] 環境準備 &amp; 基本設定</title>
    <link href="http://blog.kevinyang.net/2022/10/23/keycloak-note-1/"/>
    <id>http://blog.kevinyang.net/2022/10/23/keycloak-note-1/</id>
    <published>2022-10-23T02:05:13.000Z</published>
    <updated>2022-11-05T12:20:58.786Z</updated>
    
    <content type="html"><![CDATA[<p><code>Keycloak is an open source identity and access management solution</code>. 他能提供 SSO 系統服務，一個簡單的驗證機制可以快速被建立出來，更多資訊可以到<a href="https://www.keycloak.org/">官網</a>上閱讀，那為什麼要寫這篇筆記，主要是想要瞭解開發時，如何與 Keycloak 串接，所以要在本機上面將該環境給準備出來，以供開發使用。</p><span id="more"></span><h2 id="環境架設"><a class="header-anchor" href="#環境架設"> </a>環境架設</h2><p>好家在的是在本機電腦上面啟動一套 Keycloak 的動作很簡單，拜 container 技術的進步，只要一行指令就可以完成安裝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:19.0.3 start-dev</span><br></pre></td></tr></table></figure><ul><li>登入帳號密碼預設為 <code>admin</code> / <code>admin</code></li><li>登入網址: <code>http://localhost:8080</code></li></ul><h2 id="Keycloak-後台基本操作"><a class="header-anchor" href="#Keycloak-後台基本操作"> </a>Keycloak 後台基本操作</h2><p>開啟 <code>http://localhost:8080</code> 會看到這個畫面</p><p><img src="image-20221023102214910.png" alt="image-20221023102214910"></p><p>進入 <code>Administration Console </code> 會先看到登入畫面，帳號密碼如上面說到的 <code>admin</code> / <code>admin</code>，登入帳後密碼後會看到一堆設定選單，我們的主要目的是要測試開發時能串接 Keycloak 的登入功能，所以會做以下幾件事情</p><h3 id="建立-realm"><a class="header-anchor" href="#建立-realm"> </a>建立 realm</h3><p>於左上角的下拉選單中，可以看到 <code>Crate Realm</code>，從這邊進行建立 realm 的動作</p><p><img src="image-20221023103522222.png" alt="image-20221023103522222"></p><p>什麼是 <code>realm</code> ? <code>realm</code> 是一個 workspace 讓你可以管理 users、applications、roles and groups.</p><p><img src="image-20221023103719261.png" alt="image-20221023103719261"></p><p>輸入一個名字後按下 <code>Create</code> 即可完成建立，建立完成後在左上角的下拉選單中就可以看到剛剛所建立的 <code>realm</code></p><h3 id="建立-User"><a class="header-anchor" href="#建立-User"> </a>建立 User</h3><p>切換到剛剛所新增的 <code>realm</code> ，然後點選 <code>Users</code> 來準備建立第一個 User 帳號</p><p><img src="image-20221023103904970.png" alt="image-20221023103904970"></p><p>點 <code>Create new user</code> 後，輸入一些基本資訊，按下 <code>Create</code> 完成新增第一個使用者</p><p><img src="image-20221023104129585.png" alt="image-20221023104129585"></p><p>新增完成後，需要來設定一下登入密碼，在畫面上設定密碼的地方在</p><p><img src="image-20221023104247821.png" alt="image-20221023104247821"></p><p><img src="image-20221023104307523.png" alt="image-20221023104307523"></p><p><img src="image-20221023104339043.png" alt="image-20221023104339043"></p><ul><li><code>Temporary</code> ：使用者於第一次登入時是否要重新設定密碼，預設是 <code>On</code> 表示使用者在第一次登入後是需要變更密碼的</li></ul><p>驗證剛剛設定的 User 是否能正常使用，可以透過開啟 <a href="http://localhost:8080/realms/myrealm/account">Keycloak Account Console</a> 的畫面來進行驗證，如果能正確的登入就代表設定正確</p><h2 id="開發-串接"><a class="header-anchor" href="#開發-串接"> </a>開發 &amp; 串接</h2><p>上述完成後就可以來試著串看看了，當然首發是 Angular</p><h3 id="設定-Client-on-Keycloak"><a class="header-anchor" href="#設定-Client-on-Keycloak"> </a>設定 Client (on Keycloak)</h3><p>我覺得這塊是最困惑的地方，一個地方沒設定好，前端就沒法正常使用了</p><ol><li><p>建立 clients</p><p><img src="image-20221023115522307.png" alt="image-20221023115522307"></p></li><li><p>設定 Client ID，之後在 Angular 設定時需要</p><p><img src="image-20221023115602969.png" alt="image-20221023115602969"></p></li><li><p><code>Capability Config</code> 的頁面先保持預設值</p><p><img src="image-20221023115647040.png" alt="image-20221023115647040"></p></li><li><p><code>Save</code> 完成新增 Client</p></li><li><p>這時候會跳到 Client 的詳細頁面，這個頁面需要多設定一些網址資訊</p><ol><li><strong>Valid redirect URIs</strong> 新增 <code>http://localhost:4200/*</code></li><li><strong>Valid post logout redirect URIs</strong> 新增 <code>http://localhost:4200/*</code></li><li><strong>Web origins</strong> 新增 <code>http://localhost:4200</code></li></ol><p>設定完成後按下 <code>Save</code> 儲存異動</p></li></ol><h3 id="Angular-安裝-Keycloack-library"><a class="header-anchor" href="#Angular-安裝-Keycloack-library"> </a>Angular 安裝 Keycloack library</h3><ol><li><p>假設已經有一個 Angular 專案</p></li><li><p>安裝 library</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install keycloak-angular keycloak-js</span><br></pre></td></tr></table></figure></li><li><p>設定 initial config (<code>app.mdoule.ts</code>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">APP_INITIALIZER</span>, <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakAngularModule</span>, <span class="title class_">KeycloakService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-angular&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initializeKeycloak</span>(<span class="params">keycloak: KeycloakService</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">    keycloak.<span class="title function_">init</span>(&#123;</span><br><span class="line">      <span class="attr">config</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">realm</span>: <span class="string">&#x27;myrealm&#x27;</span>,</span><br><span class="line">        <span class="attr">clientId</span>: <span class="string">&#x27;ngclient&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">loadUserProfileAtStartUp</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">initOptions</span>: &#123;</span><br><span class="line">        <span class="attr">onLoad</span>: <span class="string">&#x27;check-sso&#x27;</span>,</span><br><span class="line">        <span class="attr">silentCheckSsoRedirectUri</span>:</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span> + <span class="string">&#x27;/assets/silent-check-sso.html&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">KeycloakAngularModule</span>, <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>([])],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">APP_INITIALIZER</span>,</span><br><span class="line">      <span class="attr">useFactory</span>: initializeKeycloak,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">deps</span>: [<span class="title class_">KeycloakService</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>line 12: Keycloak server 位置</p></li><li><p>line 13: 要存取哪一個 <code>realm</code></p></li><li><p>line 14: 使用的 ClientID</p></li><li><p>line 20: <code>slient-check-sso.html</code> 的內容是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      parent.postMessage(location.href, location.origin);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>line 16 ~ 21: 其他關於驗證的設定項目</p></li></ul><p>當上述設定完成後，基本上整個 angular application 已經跟 keycloak 做好連接了</p><p>以下有一個簡單的範例，用來展示 login 前後的操作</p><ul><li><p><code>app.component.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Keycloak Angular Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> *<span class="attr">ngIf</span>=<span class="string">&quot;isLoggedIn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;logout()&quot;</span>&gt;</span>Log out<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!isLoggedIn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;login()&quot;</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User information<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.username&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.firstName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>First name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.firstName &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.lastName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>Last name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.email&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.email &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>E-mail verified<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.emailVerified ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>app.component.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ActivatedRoute</span>, <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-angular&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakProfile</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> isLoggedIn = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">userProfile</span>: <span class="title class_">KeycloakProfile</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> keycloak: KeycloakService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isLoggedIn</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">isLoggedIn</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isLoggedIn</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userProfile</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">loadUserProfile</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">login</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">logout</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>呈現畫面</p><p><img src="image-20221023132329423.png" alt="image-20221023132329423"></p></li></ol><p>而 login 後的 User 資訊到底可以取到什麼程度，也是可以從後台做設定的</p><p><img src="image-20221023132432605.png" alt="image-20221023132432605"></p><h3 id="AuthGuide-HttpInterceptor"><a class="header-anchor" href="#AuthGuide-HttpInterceptor"> </a>AuthGuide &amp; HttpInterceptor</h3><p>所安裝的套件也好心的將這兩區塊的功能，範例程式碼都提供出來了，這裡就不多寫，直接附上連結</p><ul><li><a href="https://github.com/mauriciovigolo/keycloak-angular#authguard">AuthGuard</a></li><li><a href="https://github.com/mauriciovigolo/keycloak-angular#httpclient-interceptor">HttpClient Interceptor</a></li></ul><h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2><p>Keycloak 的設定很多，很多細節需要仔細的研究，但總的來說，功能很強也保有一定的彈性，例如 User Info Storage 的部分可以串接其他的資訊，或是支援其他的 Identity providers 等，開發上的使用也支援很多常見語言，例如 Java、.NET、JavaScript 、Python 等</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://www.keycloak.org/">Keycloak</a></li><li><a href="https://github.com/mauriciovigolo/keycloak-angular">keycloak-angular</a></li><li><a href="https://www.keycloak.org/docs/latest/securing_apps/#_javascript_adapter">Keycloak JavaScript dapter</a></li></ul><p><a href="https://www.keycloak.org/"></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Keycloak is an open source identity and access management solution&lt;/code&gt;. 他能提供 SSO 系統服務，一個簡單的驗證機制可以快速被建立出來，更多資訊可以到&lt;a href=&quot;https://www.keycloak.org/&quot;&gt;官網&lt;/a&gt;上閱讀，那為什麼要寫這篇筆記，主要是想要瞭解開發時，如何與 Keycloak 串接，所以要在本機上面將該環境給準備出來，以供開發使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/categories/Keycloak/"/>
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/tags/Keycloak/"/>
    
  </entry>
  
  <entry>
    <title>Playwright 探索日記(1) - 初次見面</title>
    <link href="http://blog.kevinyang.net/2022/10/22/playwright-note1/"/>
    <id>http://blog.kevinyang.net/2022/10/22/playwright-note1/</id>
    <published>2022-10-22T02:43:30.000Z</published>
    <updated>2022-11-05T12:20:58.786Z</updated>
    
    <content type="html"><![CDATA[<p>Playwright 是一套 E2E 的測試工具，可以測試多種瀏覽器環境(包含手機)，是一個功能強大且完整的工具</p><span id="more"></span><p>引用官網的介紹</p><p><img src="image-20221022105911680.png" alt="image-20221022105911680"></p><h2 id="專案初始"><a class="header-anchor" href="#專案初始"> </a>專案初始</h2><p>建立一個 playwright 的專案動作很單純，可以透過 <code>npm init</code> 的方式完成，步驟如下</p><ol><li>建立一個資料夾來放 playwright 專案</li><li>開啟命令視窗切換到該資料夾</li><li>執行 <code>npm init playwright@latest</code></li><li>過程中會遇到幾個選擇<ol><li>語言: JavaScript or TypeScript</li><li>測試資料夾的名稱</li><li>是否要加入 GitHub Actions 的指令</li></ol></li><li>等待安裝，即可完成</li></ol><p>等 <code>npm install</code> 結束後即可用 <code>VSCode</code> 開啟該資料夾專案，檔案結構很簡單</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">playwright.config.ts</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br><span class="line">tests/</span><br><span class="line">  example.spec.ts</span><br><span class="line">tests-examples/</span><br><span class="line">  demo-todo-app.spec.ts</span><br></pre></td></tr></table></figure><p><code>playwright.config.ts</code> 和 <code>tests/</code> 下的東西晚點來看，先來跑一下測試與測試報告</p><p>執行測試的指令: <code>npx playwright test</code></p><p>測試報告指令: <code>npx playwright show-report</code></p><h2 id="Playwright-設定檔"><a class="header-anchor" href="#Playwright-設定檔"> </a>Playwright 設定檔</h2><p>在 <code>playwright.config.ts</code> 內充滿了滿滿的註解，想要看不懂設定真的有一定的難度，除了測試檔案資料夾或是 timeout 設定都算基本的，測試環境的設定也是在這個設定檔內，相信這個各位開啟檔案後應該知道怎麼處理了</p><h2 id="測試檔的語法"><a class="header-anchor" href="#測試檔的語法"> </a>測試檔的語法</h2><p>先從預設新增的測試檔案說明起，因為 playwright 提供的 api 功能強大，需要分別研究，現階段先看個感覺</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, expect &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;homepage has Playwright in title and get started link linking to the intro page&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://playwright.dev/&#x27;</span>);</span><br><span class="line">  <span class="comment">// Expect a title &quot;to contain&quot; a substring.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveTitle</span>(<span class="regexp">/Playwright/</span>);</span><br><span class="line">  <span class="comment">// create a locator</span></span><br><span class="line">  <span class="keyword">const</span> getStarted = page.<span class="title function_">getByText</span>(<span class="string">&#x27;Get Started&#x27;</span>);</span><br><span class="line">  <span class="comment">// Expect an attribute &quot;to be strictly equal&quot; to the value.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(getStarted).<span class="title function_">toHaveAttribute</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;/docs/intro&#x27;</span>);</span><br><span class="line">  <span class="comment">// Click the get started link.</span></span><br><span class="line">  <span class="keyword">await</span> getStarted.<span class="title function_">click</span>();</span><br><span class="line">  <span class="comment">// Expects the URL to contain intro.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveURL</span>(<span class="regexp">/.*intro/</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>基本語法結構跟寫 JS Unit test 很像，在 <code>test</code> 內可已有測試描述即要執行的測試程式</li><li><code>page</code> 物件的操作等同操作瀏覽器的一個網頁</li><li>使用 jasmine line 的 expect assertion 的語法來做測試，像是 <code>expect(page).toHaveTitle(/Playwright/);</code></li><li>page 的操作會持續等待結果回來，或是超過 timeout 時間就會噴錯</li><li>也可以執行按鈕的動作或是點選連結的行為</li><li>整個測試流程可讀性還蠻高的</li></ul><h2 id="VSCode-Extension"><a class="header-anchor" href="#VSCode-Extension"> </a>VSCode Extension</h2><p>如果有使用 VSCode，也可以安裝 playwright 的 extension，裝了之後可以讓測試 playwright 更輕鬆</p><p><img src="image-20221022222048276.png" alt="image-20221022222048276"></p><p>看起來就是簡單好用，更多件介紹<a href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright">由此去</a></p><h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2><p>快速掃過官方文件，其實他可以做的不只有 E2E，也還可以做 API Testing，而且不像 <a href="http://cypress.io">cypress.io</a> 一開始就那麼肥大，看起來是一個值得深入研究的工具</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Playwright 是一套 E2E 的測試工具，可以測試多種瀏覽器環境(包含手機)，是一個功能強大且完整的工具&lt;/p&gt;</summary>
    
    
    
    <category term="playwright" scheme="http://blog.kevinyang.net/categories/playwright/"/>
    
    
    <category term="playwright" scheme="http://blog.kevinyang.net/tags/playwright/"/>
    
  </entry>
  
  <entry>
    <title>[RxJS] Config.onUnhandledError</title>
    <link href="http://blog.kevinyang.net/2022/09/18/rxjs-config/"/>
    <id>http://blog.kevinyang.net/2022/09/18/rxjs-config/</id>
    <published>2022-09-18T14:46:59.000Z</published>
    <updated>2022-11-05T12:20:58.782Z</updated>
    
    <content type="html"><![CDATA[<p>今天心血來潮跑去 <code>RxJS</code> 官網晃了一下，無意間看到一個我從沒注意到的好功能，特地寫一篇文章記錄一下，我們在寫 Angular 時會去寫一個 global 的 error handle，主要目的是為了那些未被處理的 exception，而 <code>RxJS</code> 也有一樣的功能，那就是 <code>config</code></p><span id="more"></span><p>先貼上一段 code，直接用程式碼說明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; config, throwError &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line">config.<span class="property">onUnhandledError</span> = <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">warn</span>(err);</span><br><span class="line"></span><br><span class="line"><span class="title function_">throwError</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;error without handle&#x27;</span>).<span class="title function_">subscribe</span>();</span><br><span class="line"><span class="title function_">throwError</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;error with handle&#x27;</span>).<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">error</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>執行效果如下圖</p><p><img src="image-20220918225327395.png" alt="image-20220918225327395"></p><p>光看到這樣是否就覺得有使用他的地方了，而實際在 Angular 內會怎麼使用呢? 因為 <code>config</code> 是 global 設定，所以可以在 root module 定義，剩下的就會自己處理了，十分方便</p><p><img src="image-20220918230230345.png" alt="image-20220918230230345"></p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://rxjs.dev/api/index/interface/GlobalConfig">RxJS config</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天心血來潮跑去 &lt;code&gt;RxJS&lt;/code&gt; 官網晃了一下，無意間看到一個我從沒注意到的好功能，特地寫一篇文章記錄一下，我們在寫 Angular 時會去寫一個 global 的 error handle，主要目的是為了那些未被處理的 exception，而 &lt;code&gt;RxJS&lt;/code&gt; 也有一樣的功能，那就是 &lt;code&gt;config&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Typed Form study notes</title>
    <link href="http://blog.kevinyang.net/2022/09/09/ng14-typed-form/"/>
    <id>http://blog.kevinyang.net/2022/09/09/ng14-typed-form/</id>
    <published>2022-09-09T04:29:45.000Z</published>
    <updated>2022-11-05T12:20:58.782Z</updated>
    
    <content type="html"><![CDATA[<p>Angular 14 推出 Typed Form 的功能，利用中秋放假的時間，好好地將這個功能給仔細玩過一次，掌握好才能在專案上使用到</p><span id="more"></span><h2 id="基本元素"><a class="header-anchor" href="#基本元素"> </a>基本元素</h2><p>Angular 13  有 <code>FormGroup</code>、<code>FormControl</code>、<code>FormArray</code>、<code>FormBuilder</code>，而在 Angular 14 裡原本的這些 <code>FormControl</code> 都會變成 <code>UntypedFormGroup</code>、<code>UntypedFormControl</code>、<code>UnTypedFormArray</code>、<code>UnTypedFormBuilder</code> (透過 ng update 時，Angular 會更換成這些類別)，在 Angular 14 以後的 <code>FormGroup</code>、<code>FormControl</code>、<code>FormArray</code>、<code>FormBuilder</code> 都具有型別了，另外還有一個 <code>FormRecord</code> 的新類別，後面會介紹到他</p><p>使用 Typed Form 的好處是在開發時期就可以知道表單型別，避免一些不必要的錯誤，也可以針對 <code>null</code> 的狀況作防範，有好處就一定有壞處，如果遇到比較動態類型的表單，使用 Typed Form 就比較綁手綁腳，這時候可以退回使用 <code>UnTyped</code> 版本的</p><h2 id="FormControl"><a class="header-anchor" href="#FormControl"> </a>FormControl</h2><p><code>FormControl</code> 在 Typed Form 下多了幾個特性，下面一一說明</p><h3 id="Nullability"><a class="header-anchor" href="#Nullability"> </a>Nullability</h3><p>表單中最基本成員，寫法與 API 跟之前一模一樣</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;myEmail@xxx.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>FormControl</code> 執行  <code>reset()</code>  時，預設會變成 <code>null</code>，但這件事情在 Angular 14 的時候多了一個選項，可以在建立 <code>FormControl</code> 時，設定 <code>&#123;nonNullable: true&#125;</code>，這時候當執行 <code>reset()</code> 時，就會回到一開始建立 <code>FormControl</code> 所賦予的預設值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;myEmail@xxx.com&#x27;</span>, &#123;<span class="attr">nonNullable</span>: <span class="literal">true</span>&#125;); </span><br></pre></td></tr></table></figure><p>這特性很重要，可以避免很多不必要的 null 處理</p><h3 id="Specifying-an-Explicit-Type"><a class="header-anchor" href="#Specifying-an-Explicit-Type"> </a>Specifying an Explicit Type</h3><p>既然是有型別的 <code>FormControl</code>，指定 <code>FormControl</code> 的型別後，一旦設定不符合型別的值就會通知 invalid 了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="literal">null</span>);</span><br><span class="line">email.<span class="title function_">setValue</span>(<span class="string">&#x27;myEmail@xx.com&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="image-20220909151348349.png" alt="image-20220909151348349"></p><p>要迴避這問題的解法有兩種</p><ol><li>用空字串做預設值</li><li>設定 <code>FormControl&lt;string | null&gt;</code></li></ol><h2 id="FormArray"><a class="header-anchor" href="#FormArray"> </a>FormArray</h2><p>如果 <code>FormArray</code> 內只會有同一種型別的 Control，可以直接使用 <code>FormArray</code>，如果是多種類型，例如同時有 <code>FormGroup</code>、<code>FormControl</code>，那就要使用 <code>UntypedFormArray</code> 了</p><h2 id="FormGroup"><a class="header-anchor" href="#FormGroup"> </a>FormGroup</h2><p><code>FormGroup</code> 的 value 與 <code>getRawValue</code> 會回傳不同型別的結果，其實也蠻符合應有的行為</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> group = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      <span class="attr">roomId</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = group.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">const</span> rawValue = group.<span class="title function_">getRawValue</span>();</span><br></pre></td></tr></table></figure><p>以這段程式碼來說，<code>value</code> 會自動判斷為這個型別</p><p><img src="image-20220909153051507.png" alt="image-20220909153051507"></p><p>為什麼會有這樣的型別推導呢，理由有兩個</p><ol><li>一開始與初始化時是使用  <code>new FormControl('')</code>，即表示這個 <code>FormControl</code>  的值有可能是 <code>string | null</code>，假設這邊有多設定 <code>nonNullable: true</code> 時，就可以明確知道 <code>FormControl</code> 的值一定不會有 <code>null</code> 發生</li><li>當 <code>FormGroup</code> 裡的 <code>FormControl</code> 是 <code>disabled</code>  時，<code>FormGroup.value</code> 裡就不會有該 <code>FormControl</code> 的值，所以這邊使用 <code>Partial</code> 十分合理</li></ol><p>換句話說，<code>FormGroup.getRawValue()</code> 的回傳值型別推導就會是</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">    <span class="attr">roomId</span>: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>進一步看 <code>FormGroup</code> 的使用指定型別，一旦指定型別後，Angular 就會檢查相關的資料結構，一但有破壞資料結構的行為出現，就會出現錯誤提示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyForm</span> &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">roomId</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> group = <span class="keyword">new</span> <span class="title class_">FormGroup</span>&lt;<span class="title class_">MyForm</span>&gt;(&#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">roomId</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">group.<span class="title function_">removeControl</span>(<span class="string">&#x27;roomId&#x27;</span>); <span class="comment">// error warning</span></span><br></pre></td></tr></table></figure><p>上述範例就是要移除一個必須要存在的 <code>username</code> ，這時候就會出現錯誤提示，反之，如果要額外加入 <code>FormControl</code>，一樣會噴錯，這表示我們可以透過 interface 的定義來保護 <code>FormGroup</code> 最後輸出資料的結構完整性</p><h2 id="FormRecord"><a class="header-anchor" href="#FormRecord"> </a>FormRecord</h2><p>假設我們真的需要動態的新增或移除 <code>FormControl</code> 時該怎麼辦呢?  這時候可以使用 <code>FormRecord</code>，<code>FormRecord</code> 跟 <code>FormGroup</code> 一樣，只是他在型別上就沒有那麼要求了，可以讓我們自由的新增移除 <code>control</code>，但這裡有一個限制就是，只能增修同一種類型的物件，如果想要不同類型物件的增減，就得回到 <code>UntypedFormGroup</code> 了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">fb</span>.<span class="property">record</span>&lt;<span class="title class_">FormControl</span>&lt;<span class="built_in">string</span> | <span class="literal">null</span>&gt;&gt;(&#123;</span><br><span class="line">     <span class="attr">username</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">     <span class="attr">roomId</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">     <span class="attr">address</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="FormBuilder"><a class="header-anchor" href="#FormBuilder"> </a>FormBuilder</h2><p>預設的 <code>FormBuilder</code> 建立出來的 <code>FormControl</code> 都是 <code>nonNullable: false</code> 的狀態，如果想要 <code>FormControl</code> 都是 <code>nonNullable: true</code> 時，可以使用 <code>NonNullableFormBuilder</code>.，又或者是這樣使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fb = <span class="keyword">new</span> <span class="title class_">FormBuilder</span>();</span><br><span class="line"><span class="keyword">const</span> login = fb.<span class="property">nonNullable</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2><p>上述的文章筆記都是閱讀官方文件，經過理解實際測試後寫下的，下方參考聯結有附上官方文件</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://angular.io/guide/typed-forms">Typed Forms</a></li><li><a href="https://fullstackladder.dev/blog/2022/05/15/angular-14-strict-typed-reactive-forms/">搶先體驗強型別表單(Strict Typed Reactive Forms)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Angular 14 推出 Typed Form 的功能，利用中秋放假的時間，好好地將這個功能給仔細玩過一次，掌握好才能在專案上使用到&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Obsidian] 使用 Obsidian 來寫 Docusaurus Doc &amp; Blog</title>
    <link href="http://blog.kevinyang.net/2022/08/21/use-obsidian-to-maintian-docusaurus/"/>
    <id>http://blog.kevinyang.net/2022/08/21/use-obsidian-to-maintian-docusaurus/</id>
    <published>2022-08-21T06:50:54.000Z</published>
    <updated>2022-11-05T12:20:58.782Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Obsidian 來寫 <code>Docusaurus</code> 似乎也是個好選擇，以下是我嘗試後的一些設定方式</p><span id="more"></span><h2 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h2><p>因為 Obsidian 可以將資料夾視為一個 Vault，我們可以將 <code>Docusaurus</code> 下的 Doc &amp; Blog 兩個資料夾設定為兩個 vault 使用，這篇文章會使用 <code>blog</code> 來做示範</p><h3 id="Open-Folder-as-Vault"><a class="header-anchor" href="#Open-Folder-as-Vault"> </a>Open Folder as Vault</h3><p>將 blog 資料夾開啟，這時候會在 <code>blog</code> 資料夾下新增 <code>.obsidian</code> 的資料夾，所以在 <code>.gitignore</code> 需要設定排除 <code>.obsidian</code> 資料夾，既然都開啟 <code>.gitignore</code> 了，順便排除 <code>@Templates</code> 資料夾  (可自行命名，是用來存放 Obsidian Template 的地方，等等會講到)</p><h3 id="安裝-community-plugin"><a class="header-anchor" href="#安裝-community-plugin"> </a>安裝 community plugin</h3><p>這裡需要安裝兩個 plugin</p><ol><li><p>Custom attachment Location: 方便我們貼圖時可以將圖片動態指定我們設定的位置，以下是我設定的方式 (可自行設定)</p><p><img src="image-20220821151228868.png" alt="image-20220821151228868"></p><p>因為貼圖路徑的關係，還有一個地方需要配合調整，在 <code>Files &amp; Links</code> 的地方</p><p><img src="image-20220821151341432.png" alt="image-20220821151341432"></p><p>Step 2 需要將連結的格式改為相對路徑，這樣 <code>docusaurus</code> 才能正常判讀檔案位置，當然就不能使用 <code>wikilinks</code> 的格式，所幸這些設定檔都是跟著 Vault 走，所以修改不會影響到其他人</p></li><li><p>mdx as md: 因為 <code>docusurus</code> 支援 md 和 mdx 兩種文件格式，所以 Obsidian 需要安裝這個才可以看到兩種檔案格式</p></li></ol><h2 id="設定-Templates"><a class="header-anchor" href="#設定-Templates"> </a>設定 Templates</h2><p>剛剛在前面 <code>.gitignore</code> 時多排除一個 <code>@Templates</code> 的資料夾，當然現在要多新增一個 <code>@Templates</code> 的資料夾在 Blog 資料夾(Vault) 內，並多做以下兩點設定</p><ol><li><p>Template 為 Core Plugin，預設是開啟狀態，所以 Settings 內可以看到 <code>Templates</code> 的選單</p><p><img src="image-20220821152120598.png" alt="image-20220821152120598"></p></li><li><p>設定 Hotkey，這裡可以依各人喜好設定</p><p><img src="image-20220821152234652.png" alt="image-20220821152234652"></p></li></ol><p>當這些設定完成後，這時候我們就可以來新增一個 Blog Template 供後面新增時使用，在 <code>@Templates</code> 資料夾下新增一個 <code>Note</code>，名稱自取</p><p><img src="image-20220821152401960.png" alt="image-20220821152401960"></p><p>在該篇 Note 內，輸入以下內容，這些內容就可以在之後新增 Notes 時透過 Insert template 的方式將內容加入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">slug: </span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line">authors: []</span><br><span class="line"><span class="section">tags: []</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>能用變數說明</p><ul><li><code>&#123;&#123;title&#125;&#125;</code>: 目前這篇 Note 的標題</li><li><code>&#123;&#123;date&#125;&#125;</code> 和 <code>&#123;&#123;time&#125;&#125;</code> 是日期變數 - (memo: 這邊沒有使用到)</li></ul><h3 id="使用方式"><a class="header-anchor" href="#使用方式"> </a>使用方式</h3><ol><li>新增一篇 Note 並輸入標題</li><li>使用 Hotkey 來新增 Template，當有多個 templates 時，會出現選單讓我們選擇要套用哪一個</li></ol><h3 id="Templater-plugin"><a class="header-anchor" href="#Templater-plugin"> </a><code>Templater plugin</code></h3><p>這個 plugin 很強大，可以允許我們寫 script 來處理各種 template 樣式，這邊有一個<a href="https://www.youtube.com/watch?v=1eUxQo6Dy7k">介紹影片</a>，<a href="https://silentvoid13.github.io/Templater/introduction.html">plugin 文件</a>，當然如果使用 <code>Templater plugin</code> 剛剛寫的 template 要做些調整</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">slug: </span><br><span class="line">title: &#x27;&lt;% tp.file.title %&gt;&#x27;</span><br><span class="line">authors: []</span><br><span class="line"><span class="section">tags: []</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>另外要留意的是 Hotkey 的部分，<code>Templater</code> 有自己的 Hotkey 設定，所以這邊會建議只使用一套，就看哪一套適合自己的寫作節奏</p><p><img src="image-20220821154520713.png" alt="image-20220821154520713"></p><p><img src="image-20220821154534208.png" alt="image-20220821154534208"></p><h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2><p>當上述這些設定完成後，<code>Dousaurus</code> 的 Doc 或 Blog 的編寫就會更貼近一般文書編輯的模式，圖片，表格等都可以使用 Obsidian 強大的功能來完成編輯</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 Obsidian 來寫 &lt;code&gt;Docusaurus&lt;/code&gt; 似乎也是個好選擇，以下是我嘗試後的一些設定方式&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Obsidian" scheme="http://blog.kevinyang.net/tags/Obsidian/"/>
    
  </entry>
  
  <entry>
    <title>[Obsidian] 第一次接觸</title>
    <link href="http://blog.kevinyang.net/2022/08/21/obsidian-note-1/"/>
    <id>http://blog.kevinyang.net/2022/08/21/obsidian-note-1/</id>
    <published>2022-08-21T02:49:43.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>其實我知道 <code>Obsidian</code> 這工具已經好一段時間了，只是一直都沒有真的去使用他，看了很多文章和影片介紹，覺得是時候給他一個機會，真的去用看看他的功能是否適合在工作上，或是有其他可以使用的情境</p><span id="more"></span><h2 id="安裝-Obsidian"><a class="header-anchor" href="#安裝-Obsidian"> </a>安裝 Obsidian</h2><p>要安裝 Obsidian 很簡單，到<a href="https://obsidian.md/">官網</a>上就可以下載符合自己作業系統的安裝檔</p><p><img src="image-20220821105956550.png" alt="image-20220821105956550"></p><p>安裝完成後，第一次開啟會詢問要建立 <code>Vault</code> 或是選擇 <code>Vault</code> 的位置</p><p><img src="image-20220821110154460.png" alt="image-20220821110154460"></p><p>什麼是 <code>Vault</code> ? <code>Vault</code> 簡單來說就是存放筆記得資料夾位置，因為是第一次使用，就給他一個 Vault 的名稱跟實際檔案要放哪，建立完成後就會看到這一個畫面</p><p><img src="image-20220821110432244.png" alt="image-20220821110432244"></p><p>如果有使用 Typora 的朋友，基本畫面應該還沒熟悉的，但當然還有左邊跟其他功能圖示，這就等之後在一一探索研究了，當然第一件事情就是新增第一則筆記，Obsidian 是使用 Markdown 的格式來寫筆記，不熟悉 Markdown 的可以去學一下，應該 1 小時內就可以學玩了</p><p>新增筆記的方法，點選左上角的檔案圖示</p><p><img src="image-20220821110711236.png" alt="image-20220821110711236"></p><p>給予筆記標題名稱 (即檔名)</p><p><img src="image-20220821110744590.png" alt="image-20220821110744590"></p><p>編輯區如下圖，Obsidian 也支援 Live Preview 的功能，會即時將 Markdown 轉換成顯示模式，這對於寫筆記的節奏其實幫助很大</p><p><img src="image-20220821111028433.png" alt="image-20220821111028433"></p><h2 id=""><a class="header-anchor" href="#"> </a></h2><h2 id="設定調整-Optional"><a class="header-anchor" href="#設定調整-Optional"> </a>設定調整 (Optional)</h2><p>因為自身的使用習慣，還是要調整一下預設設定，例如圖片存放資料夾的位置等，調整設定可以由左下角的齒輪進去</p><p><img src="image-20220821112342482.png" alt="image-20220821112342482"></p><h3 id="設定附件資料夾位置"><a class="header-anchor" href="#設定附件資料夾位置"> </a>設定附件資料夾位置</h3><p><img src="image-20220821114111247.png" alt="image-20220821114111247"></p><h3 id="安裝-Plugin"><a class="header-anchor" href="#安裝-Plugin"> </a>安裝 Plugin</h3><p>Obsidian 之所有強大是因為他支援安裝 plugin，有分官方版與社群版</p><p><img src="image-20220821114234602.png" alt="image-20220821114234602"></p><p>這裡先列出幾個社群熱門的 plugin</p><ol><li><p>Advanced tables: 簡單明瞭，幫助編輯 Markdown Table</p><p><img src="image-20220821114644538.png" alt="image-20220821114644538"></p></li><li><p>Calendar: 如果使用 Obsidian 寫 daily notes 時，安裝 Calendar 可以用月曆的方式呈現 daily notes，這之後在介紹</p></li><li><p>Dataview: 將 Obsidian 的 Vault 當作資料庫看待，使用 Query 語法將筆記整理會出成另外一份表格使用</p></li><li><p>Kanban:看板模式 <a href="https://github.com/mgmeyers/obsidian-kanban">GitHub Repo</a></p><p><img src="image-20220821115414561.png" alt="image-20220821115414561"></p></li><li><p>Excalidraw: Open source 的白板功能 (<a href="https://excalidraw.com/">範例</a>)</p><p><img src="image-20220821115531883.png" alt="image-20220821115531883"></p></li><li><p>Admonition: 這效果在寫文章筆記時真的很棒，可以很清楚的將需要注意的地方用不同的方式標記出來，例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```ad-note</span></span><br><span class="line"><span class="code">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla.</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p><img src="image-20220821115725690.png" alt="image-20220821115725690"></p></li></ol><h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2><p>Obsidian 確實能提供完整的筆記所需要的功能，當然還有更強大的功能，例如筆記與筆記之間的關連呈現，能透過連結的方式將知識庫給建立出來，雖然初期學習門檻有點高，但是一個值得投資的學習項目，網路上也有很多學習資源</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://ithelp.ithome.com.tw/users/20131832/ironman/4271">Obsidian 雙向鏈結型筆記工具研究與應用，打造屬於個人的專業知識圖譜 系列</a></li><li><a href="https://www.youtube.com/c/NicolevanderHoeven">YouTube - Nicole van der Hoeven</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;其實我知道 &lt;code&gt;Obsidian&lt;/code&gt; 這工具已經好一段時間了，只是一直都沒有真的去使用他，看了很多文章和影片介紹，覺得是時候給他一個機會，真的去用看看他的功能是否適合在工作上，或是有其他可以使用的情境&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Obsidian" scheme="http://blog.kevinyang.net/tags/Obsidian/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 測試 ControlContainer with FormArray 版本</title>
    <link href="http://blog.kevinyang.net/2022/08/06/angular-test-controlContainer-with-formarrayname/"/>
    <id>http://blog.kevinyang.net/2022/08/06/angular-test-controlContainer-with-formarrayname/</id>
    <published>2022-08-06T13:20:16.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前寫過一篇關於 <code>ControlContainer</code> 的文章，但那時候太菜不知道怎麼寫測試，今天回頭寫 <code>ControlContainer</code> 配上 <code>formArrayName</code> 時，熊熊發現不知道怎寫測試，稍微有點悲劇，但還好根據官方的測試檔案，還是可以整理出答案，以下就是如何測試有使用 <code>ControlContainer</code> 的 Component</p><span id="more"></span><p>Component 的用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-filter-field</span> <span class="attr">formArrayName</span>=<span class="string">&quot;dynamicFields&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-filter-field</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ts</code>  的部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FilterFieldComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  formData!: <span class="title class_">FormArray</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> controlContainer: ControlContainer</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span> = <span class="variable language_">this</span>.<span class="property">controlContainer</span>.<span class="property">control</span> <span class="keyword">as</span> <span class="title class_">FormArray</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spec 檔案</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fdescribe</span>(<span class="string">&#x27;FilterFieldComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">FilterFieldComponent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">FilterFieldComponent</span>&gt;;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">formModel</span>: <span class="title class_">FormArray</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">formArrayDir</span>: <span class="title class_">FormArrayName</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = <span class="keyword">new</span> <span class="title class_">FormGroupDirective</span>([], []);</span><br><span class="line">    formModel = <span class="keyword">new</span> <span class="title class_">FormArray</span>([]);</span><br><span class="line">    parent.<span class="property">form</span> = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123; <span class="attr">dynamicFields</span>: formModel &#125;);</span><br><span class="line">    formArrayDir = <span class="keyword">new</span> <span class="title class_">FormArrayName</span>(parent, [], []);</span><br><span class="line">    formArrayDir.<span class="property">name</span> = <span class="string">&#x27;dynamicFields&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">FilterFieldComponent</span>],</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">ReactiveFormsModule</span>],</span><br><span class="line">      <span class="attr">providers</span>: [&#123; <span class="attr">provide</span>: <span class="title class_">ControlContainer</span>, <span class="attr">useValue</span>: formArrayDir &#125;],</span><br><span class="line">      <span class="attr">schemas</span>: [<span class="variable constant_">CUSTOM_ELEMENTS_SCHEMA</span>],</span><br><span class="line">    &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>line 17: 因為 <code>ControlContainer</code> 需要特別去做 mock，所以這邊就手動註冊一下，但如果沒有寫過的人就會卡住，慘，這邊要用哪種型別的值，根據<a href="https://angular.io/api/forms/ControlContainer#controlcontainer">官方 API 文件說明</a>，得知有以下幾種 subclass 可以使用</p><p><img src="image-20220806212706185.png" alt="image-20220806212706185"></p><p>而其中的 <code>FormArrayName</code> 是我想要的類型，接下來的另外一個問題會是，如何建立 <code>FormArrayName</code> Class，這時候就是  line 8 ~ 12 的用途啦，這裡的寫法是參考官方的測試 form directive 的<a href="https://github.com/angular/angular/tree/main/packages/forms/test#L448-L454">測試檔案</a></p><p>以上就是如何測試 <code>ControlContainer</code> 的設定寫法</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久以前寫過一篇關於 &lt;code&gt;ControlContainer&lt;/code&gt; 的文章，但那時候太菜不知道怎麼寫測試，今天回頭寫 &lt;code&gt;ControlContainer&lt;/code&gt; 配上 &lt;code&gt;formArrayName&lt;/code&gt; 時，熊熊發現不知道怎寫測試，稍微有點悲劇，但還好根據官方的測試檔案，還是可以整理出答案，以下就是如何測試有使用 &lt;code&gt;ControlContainer&lt;/code&gt; 的 Component&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[HowTo] 讀取 WebAPI 資料到 Excel 表內</title>
    <link href="http://blog.kevinyang.net/2022/07/16/excel-load-webapi/"/>
    <id>http://blog.kevinyang.net/2022/07/16/excel-load-webapi/</id>
    <published>2022-07-16T04:14:24.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>週五突然想到 Excel 是否能載入 JSON 檔案或是 WebAPI 的資料，因為 PowerBI 可以做到，想說 Excel 應該也可以，所以就來試試看</p><span id="more"></span><p>一樣的，我們拿 <code>[JSONPlaceholder](https://jsonplaceholder.typicode.com/)</code> 所提供的 API 來當作範例資料，使用 <a href="https://jsonplaceholder.typicode.com/posts">https://jsonplaceholder.typicode.com/posts</a> 這組資料</p><h2 id="步驟"><a class="header-anchor" href="#步驟"> </a>步驟</h2><ol><li><p>建立一個空的 Excel 檔案</p></li><li><p>選擇 <code>資料</code> Tab 內的<code>從 web</code></p><p><img src="image-20220716125829631.png" alt="image-20220716125829631"></p></li><li><p>將文章一開始的網址貼入到 URL 內後按下『確定』</p><p><img src="image-20220716132852792.png" alt="image-20220716132852792"></p></li><li><p>會開啟存取 Web 內容的視窗，這邊如果 API 有相關權限設定，可在這邊進行設定</p><p><img src="image-20220716130028794.png" alt="image-20220716130028794"></p></li><li><p>確認後下『連接』，Excel 會去呼叫 API 並取回資料</p></li><li><p>取得資料後會開啟 Power Query 編輯器</p><p><img src="image-20220716130216544.png" alt="image-20220716130216544"></p><p>這時候我們就需要針對取回得資料作一些轉換的設定</p><ol><li><p>點 『到表格』</p><p><img src="image-20220716130621219.png" alt="image-20220716130621219"></p></li><li><p>無分隔符號，直接按下『確定』</p><p><img src="image-20220716130659427.png" alt="image-20220716130659427"></p></li><li><p>這時候畫面會轉換成以下圖片</p><p><img src="image-20220716130731882.png" alt="image-20220716130731882"></p></li><li><p>點選 Column1 旁邊的小圖示，這個動作會開啟另外一個視窗來設定要展開哪些欄位</p><p><img src="image-20220716130806821.png" alt="image-20220716130806821"></p><p><img src="image-20220716130847323.png" alt="image-20220716130847323"></p></li><li><p>如果確認後沒問題就可以按下『確定』。備註: 如果不想要使用原始資料行列名稱當前置詞，可以把設定取消掉</p></li><li><p>瀏覽資料，確認無誤後按下『關閉並載入』即可在 Excel 上看到資料了</p><p><img src="SNAGHTML35f5e08.PNG" alt="img"></p></li><li><p>最終成果</p><p><img src="image-20220716131228238.png" alt="image-20220716131228238"></p><p>如果想要手動更新 API 得資料，單純點選這個圖示即可，或是上方的『重新整理』</p><p><img src="image-20220716131326794.png" alt="image-20220716131326794"></p></li></ol></li></ol><h2 id="修改-Query"><a class="header-anchor" href="#修改-Query"> </a>修改 Query</h2><p>如果想要回頭編輯 Query 的方式，可以從這個地方將 Power Query 編輯器開啟</p><p><img src="image-20220716131657411.png" alt="image-20220716131657411"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;週五突然想到 Excel 是否能載入 JSON 檔案或是 WebAPI 的資料，因為 PowerBI 可以做到，想說 Excel 應該也可以，所以就來試試看&lt;/p&gt;</summary>
    
    
    
    <category term="Office" scheme="http://blog.kevinyang.net/categories/Office/"/>
    
    
    <category term="Office" scheme="http://blog.kevinyang.net/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Standalone Component 第一次接觸</title>
    <link href="http://blog.kevinyang.net/2022/07/09/angular-standalone-first-tryout/"/>
    <id>http://blog.kevinyang.net/2022/07/09/angular-standalone-first-tryout/</id>
    <published>2022-07-09T01:13:53.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>Angular standalone component 功能在 v14 版本推出 developer preview version (表示不建議使用在 production 環境上)，還是可以先玩弄一下，稍微感覺未來可能的開發模式跟架構會有怎樣的選擇出現</p><span id="more"></span><h2 id="基本語法"><a class="header-anchor" href="#基本語法"> </a>基本語法</h2><p>standalone component 的寫法很簡單，在 component 的 decorator 內新增 <code>standalone: true</code> 即可完成設定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;photo-gallery&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">ImageGridComponent</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    ... &lt;image-grid [images]=&quot;imageList&quot;&gt;&lt;/image-grid&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PhotoGalleryComponent</span> &#123;</span><br><span class="line">  <span class="comment">// component logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦設定成 standalone component ，過往設定在 <code>NgModule</code> 的 imports 的其他 <code>NgModules</code> 都需要在這邊設定，也包含這 component 內使用的其他 components</p><p>而在路由設定這邊新增 <code>loadComponent</code> 的功能</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./admin/panel.component&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">AdminPanelComponent</span>)&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><code>loadChildren</code> 也支援讀取另外一組 route setting</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./admin/routes&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">ADMIN_ROUTES</span>)&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// In admin/routes.ts:</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ADMIN_ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AdminHomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;users&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AdminUsersComponent</span>&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><code>main.ts</code> 也可以直接啟動 standalone component</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bootstrapApplication&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">PhotoAppComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app/photo.app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">PhotoAppComponent</span>);</span><br></pre></td></tr></table></figure><h2 id="Dive-in-a-little-bit"><a class="header-anchor" href="#Dive-in-a-little-bit"> </a>Dive in a little bit</h2><p>main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode, importProvidersFrom &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/home/home.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">import</span>(<span class="string">&#x27;./app/demo/demo.component&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">m</span>) =&gt;</span> m.<span class="property">DemoComponent</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title function_">importProvidersFrom</span>(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes))],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>透過這種方式完全不使用 <code>NgModule</code> 來啟動一個 Angular App，而在近期的 AngularAir 看到這樣的嘗試</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppComponent</span>.<span class="title function_">bootstrap</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, importProvidersFrom &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>, <span class="title class_">CommonModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">bootstrapApplication</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">      <span class="attr">providers</span>: [<span class="title function_">importProvidersFrom</span>(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes))],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這改法大幅的降低 main.ts 的複雜度，同時也增加了不少彈性</p><p>那 Provider 的部分該怎麼處理，好消息是就跟有 <code>NgModule</code> 時的用法是一樣的。</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://angular.io/guide/standalone-components">Getting started with standalone component</a></li><li><a href="https://stackblitz.com/edit/angular-ivy-2kth3b?file=src%2Fmain.ts,src%2Fapp%2Fapp.component.ts">範例程式碼</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Angular standalone component 功能在 v14 版本推出 developer preview version (表示不建議使用在 production 環境上)，還是可以先玩弄一下，稍微感覺未來可能的開發模式跟架構會有怎樣的選擇出現&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 跳過 Http Interceptor</title>
    <link href="http://blog.kevinyang.net/2022/06/12/angular-skip-interceptor/"/>
    <id>http://blog.kevinyang.net/2022/06/12/angular-skip-interceptor/</id>
    <published>2022-06-12T06:02:50.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>Angular Http Interceptor 使用情境很多，例如加 header token、處理 response error 等，但有時候如果真的有 http request 想要跳過 interceptor 這層該怎麼處理，以下是處理手法</p><span id="more"></span><h2 id="程式碼"><a class="header-anchor" href="#程式碼"> </a>程式碼</h2><p>這裡會利用 <code>HttpBackend</code> 來完成</p><blockquote><p>Interceptors sit between the <code>HttpClient</code> interface and the <code>HttpBackend</code>.</p><p>When injected, <code>HttpBackend</code> dispatches requests directly to the backend, without going through the interceptor chain.</p></blockquote><p><code>HttpClient</code> 原始碼</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HttpClient</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> handler: HttpHandler</span>) &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpBackend</code> interface</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpBackend</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">handle</span>(<span class="attr">req</span>: <span class="title class_">HttpRequest</span>&lt;<span class="built_in">any</span>&gt;): <span class="title class_">Observable</span>&lt;<span class="title class_">HttpEvent</span>&lt;<span class="built_in">any</span>&gt;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>範例程式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpBackend</span>, <span class="title class_">HttpClient</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SkipInterceptorService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">httpClient</span>: <span class="title class_">HttpClient</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> handler: HttpBackend</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">httpClient</span> = <span class="keyword">new</span> <span class="title class_">HttpClient</span>(handler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手動建立一個 <code>HttpClient</code>，之後透過這個 <code>httpClient</code> 的 request 就不會經過 Interceptor 那層，就是這麼簡單</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://angular.io/api/common/http/HttpBackend">Angular API - HttpBackend</a></li><li><a href="https://itnext.io/bypass-angular-interceptors-with-request-metadata-cf28061cda69">Bypass Angular Interceptors with Request Metadata</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Angular Http Interceptor 使用情境很多，例如加 header token、處理 response error 等，但有時候如果真的有 http request 想要跳過 interceptor 這層該怎麼處理，以下是處理手法&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 自訂 Decorator 使用範例</title>
    <link href="http://blog.kevinyang.net/2022/06/11/angular-custom-decorators-demo/"/>
    <id>http://blog.kevinyang.net/2022/06/11/angular-custom-decorators-demo/</id>
    <published>2022-06-11T08:21:54.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>距離上一篇關於 decorator 的文章已經是 2017 一月份的事情了，時間過真快，那時候來不知道能拿 decorator 做什麼，現在終於有一個還不錯的使用情境</p><span id="more"></span><h2 id="讓程式碼講話"><a class="header-anchor" href="#讓程式碼講話"> </a>讓程式碼講話</h2><p>開發 app 有時候會希望記錄某功能的使用量，常見的作法就是打一發 API 做記錄的動作，而這其實是可以透過 decorator 的方式封裝起來，然後讓任何需要記錄的 function 使用，以下就用程式碼說話了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LogService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../my-feature/log.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Logger</span>(<span class="params">typeName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">    key: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> service = <span class="title class_">AppModule</span>?.<span class="property">injector</span>?.<span class="title function_">get</span>(<span class="title class_">LogService</span>);</span><br><span class="line">      <span class="keyword">if</span> (!!service) &#123;</span><br><span class="line">        service.<span class="title function_">recordUsage</span>(typeName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>line 4: 如果想要 decorator 能接受外部傳進來的值，就可以在這邊定義</li><li>line 10: 保留被 decorated 的 function，等等在第 line 19 會用到</li><li>line 12: 覆寫原本的 function</li><li>line 13: 從 <code>AppModule</code> 取得 injector，可透過 injector 拿到有註冊到 <code>RootModule</code>的 service</li><li>line 19: 繼續執行原本 function 的行為</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">injector</span>: <span class="title class_">Injector</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">injector: Injector</span>) &#123;</span><br><span class="line">    <span class="title class_">AppModule</span>.<span class="property">injector</span> = injector;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>建立一個 static 變數讓自訂的 decorator 內可以使用</li></ul><p>基本上，上面就已經完成了一個 Decorator 的開發了，當然那個 <code>logService</code> 就是自行發揮了</p><p>至於如何使用，範例如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Logger</span>(<span class="string">&#x27;AppComponent&#x27;</span>)</span><br><span class="line"><span class="title function_">c</span>(<span class="params">msg: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;clicked&#x27;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://www.typescriptlang.org/docs/handbook/decorators.html">TypeScript Decorator</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;距離上一篇關於 decorator 的文章已經是 2017 一月份的事情了，時間過真快，那時候來不知道能拿 decorator 做什麼，現在終於有一個還不錯的使用情境&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[.NET Core] 自訂 Authentication handler</title>
    <link href="http://blog.kevinyang.net/2022/06/11/aspnet-custom-authSchema/"/>
    <id>http://blog.kevinyang.net/2022/06/11/aspnet-custom-authSchema/</id>
    <published>2022-06-11T03:22:37.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://asp.net">asp.net</a> core 有很多 authentication 的方法，但有時候想要自訂驗證規則時，該怎麼做，跟著官方文件做完一次後，將自己理解的版本筆記下來</p><span id="more"></span><h1 id="自訂-Authentication"><a class="header-anchor" href="#自訂-Authentication"> </a>自訂 Authentication</h1><p>一開始在思考這題時，繞了幾個圈，但理解後其實不難，就是實做一個 <code>AuthenticationHandler</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiAuthHandler</span> : <span class="title">AuthenticationHandler</span>&lt;<span class="title">AuthenticationSchemeOptions</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiAuthHandler</span>(<span class="params">IOptionsMonitor&lt;AuthenticationSchemeOptions&gt; options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock</span>) : <span class="title">base</span>(<span class="params">options, logger, encoder, clock</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task&lt;AuthenticateResult&gt; <span class="title">HandleAuthenticateAsync</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 回傳驗證結果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>實做完上面後，就可以回到 <code>program.cs</code> 內做註冊的動作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddAuthentication(<span class="string">&quot;Basic&quot;</span>) <span class="comment">// 預設 schema</span></span><br><span class="line">    .AddScheme&lt;AuthenticationSchemeOptions, ApiAuthHandler&gt;(<span class="string">&quot;Basic&quot;</span>, o =&gt; &#123; &#125;);    </span><br><span class="line">    .AddScheme&lt;AuthenticationSchemeOptions, AnotherApiAuthHandler&gt;(<span class="string">&quot;SchemaName&quot;</span>, o =&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure><p>而這裡也允許新增多組 schema，在 API Controller 的地方也可以指定要使用哪一組 schema 做驗證</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Authorize(AuthenticationSchemes = <span class="string">&quot;SchemaName&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SomeFunction</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="自訂-Options"><a class="header-anchor" href="#自訂-Options"> </a>自訂 Options</h2><p>如果希望從 <code>Program.cs</code> 的地方傳入設定檔，就需要自訂一個 <code>AuthenticationSchemeOptions</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiAuthHandlerOption</span>: <span class="title">AuthenticationSchemeOptions</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// add your custom properties</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> MyProp &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line">builder.Services.AddAuthentication(<span class="string">&quot;Basic&quot;</span>) <span class="comment">// 預設 schema</span></span><br><span class="line">    .AddScheme&lt;ApiAuthHandlerOption, ApiAuthHandler&gt;(<span class="string">&quot;Basic&quot;</span>, o =&gt; &#123;</span><br><span class="line">        o.MyProp = <span class="string">&quot;some prop&quot;</span>;</span><br><span class="line">    &#125;); </span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task&lt;AuthenticateResult&gt; <span class="title">HandleAuthenticateAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> myPro = <span class="keyword">base</span>.Options.MyProp; <span class="comment">// 可以取上面那段所設定的值</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1><ul><li><a href="https://github.com/referbruv/CustomSchemeNinja/blob/main/CustomSchemeNinjaApi/Providers/AuthHandlers/MyNinjaAuthHandler.cs">MyNinjaAuthHandler.cs</a></li><li><a href="https://jasonwatmore.com/post/2019/10/21/aspnet-core-3-basic-authentication-tutorial-with-example-api#basic-authentication-handler-cs">Basic Authentication</a></li><li><a href="https://www.dotblogs.com.tw/Null/2020/07/03/172547">[ASP.NET Core] 自定義自己的 Authentication 身份驗證器</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://asp.net&quot;&gt;asp.net&lt;/a&gt; core 有很多 authentication 的方法，但有時候想要自訂驗證規則時，該怎麼做，跟著官方文件做完一次後，將自己理解的版本筆記下來&lt;/p&gt;</summary>
    
    
    
    <category term=".NET Core " scheme="http://blog.kevinyang.net/categories/NET-Core/"/>
    
    
    <category term=".NET Core " scheme="http://blog.kevinyang.net/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>[HowTo] asp.net core 設定 Configuration 的方法</title>
    <link href="http://blog.kevinyang.net/2022/06/05/howto-dotnet-configuration/"/>
    <id>http://blog.kevinyang.net/2022/06/05/howto-dotnet-configuration/</id>
    <published>2022-06-05T14:43:08.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>Quick note for setting configuration  in .net core.</p><span id="more"></span><p>透過建立 Class 來作為 Configuration 的容器</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MongoConnectionOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> name = <span class="string">&quot;MongoConnection&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Database &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>line 3: 單純是方便設定使用 (Option)</li><li>line 5 ~ 6 需與 <code>appsettings.json</code> 想設定的 section 內的欄位一致</li></ol><p><code>appsettings.json</code> 依此範例內會有一個 <code>MongoConnection</code> 的 section 並且有 <code>ConnectionString</code> 和 <code>Database</code> 的設定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;MongoConnection&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ConnectionString&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>預設 <a href="http://asp.net">asp.net</a> core 新建的範本，會使用 top function 的模式建立，所以 <code>program.cs</code> 檔案會變成這樣</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> apiWithMongo.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add services to the container.</span></span><br><span class="line">builder.Services.Configure&lt;MongoConnectionOptions&gt;(builder.Configuration.GetSection(MongoConnectionOptions.name));</span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>透過 line 6 的寫法，我們可以將 <code>appsettings.json</code> 內的某一個 section 值與 class 關連設定起來</li></ul><p>設定完成後，在任何地方如果要使用這組設定值時，可以透過 <code>IOptions&lt;T&gt;</code> 的方式取得</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> MongoConnectionOptions _options;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span>(<span class="params">IOptions&lt;MongoConnectionOptions&gt; options</span>)</span>&#123;</span><br><span class="line">        _options = options.Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h2><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0&amp;WT.mc_id=DOP-MVP-5002594">Options pattern in ASP.NET Core</a></li><li><a href="https://blog.yowko.com/aspdotnet-core-config-array/">在 ASP.NET Core Configuration 中使用 array</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Quick note for setting configuration  in .net core.&lt;/p&gt;</summary>
    
    
    
    <category term=".NET Core" scheme="http://blog.kevinyang.net/categories/NET-Core/"/>
    
    
    <category term=".NET Core" scheme="http://blog.kevinyang.net/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>[筆記] Dockerfile for 建置靜態網站與使用 nginx 來跑</title>
    <link href="http://blog.kevinyang.net/2022/05/19/static-website-docker-with-nginx/"/>
    <id>http://blog.kevinyang.net/2022/05/19/static-website-docker-with-nginx/</id>
    <published>2022-05-19T15:03:30.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>每次都要想 Dockerfile 怎麼寫，乾脆筆記起來. build static website &amp; run with nginx</p><span id="more"></span><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:lts-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> NPM_CONFIG_LOGLEVEL=warn</span><br><span class="line"><span class="keyword">ENV</span> NPM_CONFIG_COLOR=false</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## production environment</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:stable-alpine as deploy</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/build /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;每次都要想 Dockerfile 怎麼寫，乾脆筆記起來. build static website &amp;amp; run with nginx&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>[FSharp] Seq Study</title>
    <link href="http://blog.kevinyang.net/2022/02/20/fsharp-seq-study/"/>
    <id>http://blog.kevinyang.net/2022/02/20/fsharp-seq-study/</id>
    <published>2022-02-20T03:23:23.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>最近在練習 F# 時，發現自己對於 F# Collection 操作不熟悉，尤其是 Seq 的部分，特地拉出單章刻意練習</p><span id="more"></span><p>來自官網的介紹</p><blockquote><p>「 <em>序列</em> 」（sequence）是一種元素的邏輯系列，全都是一種類型。 當您有大量的資料收集，但不一定會預期使用所有元素時，序列特別有用。 個別順序元素只會在必要時計算，因此在不使用所有元素的情況下，序列可以提供比清單更佳的效能。 順序是以類型表示 <code>seq&lt;'T&gt;</code> ，這是的別名 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.ienumerable-1">IEnumerable</a> 。 因此，任何實介面的 .NET 型別都 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.ienumerable-1">IEnumerable</a> 可以用來做為序列。 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html">Seq 模組</a>可支援涉及序列的操作。</p></blockquote><h1 id="Notes"><a class="header-anchor" href="#Notes"> </a>Notes</h1><h2 id="建立-Seq"><a class="header-anchor" href="#建立-Seq"> </a>建立 Seq</h2><p>F# 建立 range 數列的方式可以透過 <code>..</code> 的方式來完成，例如 <code>[ 1 .. 3 ]</code> 就能產生 <code>[ 1;2;3 ]</code> 的 List，要表示 step n 時，可以這樣子表示 <code>[ 1..2..5]</code> 就會得到 <code>[1;3;5]</code>，同樣的表示法套用在 seq 上會是這樣子寫</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123; <span class="number">1.</span><span class="number">.2</span><span class="operator">..</span><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure><p>更進一步可以透過程式的方式產生 seq 的內容</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">-&gt;</span> i <span class="operator">*</span> i &#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span>. <span class="number">10</span> <span class="keyword">do</span> i <span class="operator">*</span> i&#125;</span><br></pre></td></tr></table></figure><p>另外一種會遇到的情況是想將一個 seq 展開並放入到另外一個 seq 時，可以使用 <code>yield!</code> 的關鍵字 ，其效果跟 JavaScript 的 flatMap 是一樣的</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">yield!</span> <span class="keyword">seq</span> &#123; <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件中提到一點就是如果運算是中有使用到 <code>yield!</code> 時，其他回傳值就必須使用 <code>yield</code></p><h2 id="轉換"><a class="header-anchor" href="#轉換"> </a>轉換</h2><p>可以透過兩種方式來將 <code>List</code> or <code>Array</code> 轉換成 <code>seq</code></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Convert an array to a sequence by using a cast.</span></span><br><span class="line"><span class="keyword">let</span> seqFromArray1 <span class="operator">=</span> [<span class="operator">|</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">|</span>] <span class="operator">:&gt;</span> seq<span class="operator">&lt;</span>int<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">// let seqFromArray1 = Seq.cast [| 1 .. 10 |]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert an array to a sequence by using Seq.ofArray.</span></span><br><span class="line"><span class="keyword">let</span> seqFromArray2 <span class="operator">=</span> [<span class="operator">|</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">|</span>] <span class="operator">|&gt;</span> Seq.ofArray</span><br></pre></td></tr></table></figure><h2 id="搜尋"><a class="header-anchor" href="#搜尋"> </a>搜尋</h2><p>常用的方法有  <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#exists">Seq. exists</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#exists">array.exists2</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#find">seq. find</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#findIndex">findIndex</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#pick">Seq. pick</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#tryFind">tryFind</a> 和 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#tryFindIndex">array.tryfindindex</a></p><h2 id="Obtaining-Subsequences"><a class="header-anchor" href="#Obtaining-Subsequences"> </a>Obtaining Subsequences</h2><ul><li><p>常看到的有 <code>Seq.filter</code> 、<code>Seq.choose</code>，跟 List 的版本功能一樣但運作方式不同，filtering 和 choosing 的行為只會針對當下的 seq element</p></li><li><p>取 n 筆記錄的方法有 <code>Seq.take</code> 或是 <code>Seq.truncate</code> 兩者的差異是要處理的 seq 內是否有足夠得資料比數，如果資料比數不夠時，<code>Seq.take</code> 會傳回 <code>System.InvalidOperationException</code> 的例外狀況，而 <code>Seq.truncate</code> 不會發生</p></li><li><p><code>Seq.takeWhile</code> 取值直到第一個不吻合條件發生</p></li><li><p><code>Seq.skip</code> 跳過 n  筆記錄</p></li><li><p><code>Seq.skipWhil</code> skip until first element tor which the predicate return false</p></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// takeWhile</span></span><br><span class="line"><span class="keyword">let</span> mySeqLessThan10 <span class="operator">=</span> Seq.takeWhile (<span class="keyword">fun</span> elem <span class="operator">-&gt;</span> elem <span class="operator">&lt;</span> <span class="number">10</span>) mySeq</span><br><span class="line">mySeqLessThan10 <span class="operator">|&gt;</span> printSeq</span><br><span class="line"></span><br><span class="line"><span class="comment">// skip</span></span><br><span class="line"><span class="keyword">let</span> mySeqSkipFirst5 <span class="operator">=</span> Seq.skip <span class="number">5</span> mySeq</span><br><span class="line">mySeqSkipFirst5 <span class="operator">|&gt;</span> printSeq</span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile</span></span><br><span class="line"><span class="keyword">let</span> mySeqSkipWhileLessThan10 <span class="operator">=</span> Seq.skipWhile (<span class="keyword">fun</span> elem <span class="operator">-&gt;</span> elem <span class="operator">&lt;</span> <span class="number">10</span>) mySeq</span><br><span class="line">mySeqSkipWhileLessThan10 <span class="operator">|&gt;</span> printSeq</span><br></pre></td></tr></table></figure><h2 id="Transforming-Sequences"><a class="header-anchor" href="#Transforming-Sequences"> </a>Transforming Sequences</h2><p>發現很多用法跟 RxJS 好像</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> printSeq seq1 <span class="operator">=</span> Seq.iter (<span class="built_in">printf</span> <span class="string">&quot;%A &quot;</span>) seq1; <span class="built_in">printfn</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> seqPairwise <span class="operator">=</span> Seq.pairwise (<span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">-&gt;</span> i<span class="operator">*</span>i &#125;)</span><br><span class="line">printSeq seqPairwise</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>) (<span class="number">4</span>, <span class="number">9</span>) (<span class="number">9</span>, <span class="number">16</span>) (<span class="number">16</span>, <span class="number">25</span>) (<span class="number">25</span>, <span class="number">36</span>) (<span class="number">36</span>, <span class="number">49</span>) (<span class="number">49</span>, <span class="number">64</span>) (<span class="number">64</span>, <span class="number">81</span>) (<span class="number">81</span>, <span class="number">100</span>) </span><br></pre></td></tr></table></figure><p><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#windowed">Seq.windowed</a> 用法跟 <code>Seq.pairwise</code> 很像，只是他可以指定每組的數量</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> seqNumbers <span class="operator">=</span> [ <span class="number">1.0</span>; <span class="number">1.5</span>; <span class="number">2.0</span>; <span class="number">1.5</span>; <span class="number">1.0</span>; <span class="number">1.5</span> ] <span class="operator">:&gt;</span> seq<span class="operator">&lt;</span>float<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">let</span> seqWindows <span class="operator">=</span> Seq.windowed <span class="number">3</span> seqNumbers</span><br><span class="line"><span class="keyword">let</span> seqMovingAverage <span class="operator">=</span> Seq.map Array.average seqWindows</span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;Initial sequence: &quot;</span></span><br><span class="line">printSeq seqNumbers <span class="comment">// 1.0 1.5 2.0 1.5 1.0 1.5</span></span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;\nWindows of length 3: &quot;</span></span><br><span class="line">printSeq seqWindows <span class="comment">// [|1.0; 1.5; 2.0|] [|1.5; 2.0; 1.5|] [|2.0; 1.5; 1.0|] [|1.5; 1.0; 1.5|]</span></span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;\nMoving average: &quot;</span></span><br><span class="line">printSeq seqMovingAverage <span class="comment">// 1.5 1.666666667 1.5 1.333333333</span></span><br></pre></td></tr></table></figure><h1 id="API-Study"><a class="header-anchor" href="#API-Study"> </a>API Study</h1><h2 id="Seq-collect"><a class="header-anchor" href="#Seq-collect"> </a>Seq.collect</h2><p><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#collect">API</a></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> <span class="string">&quot;AB\nDE&quot;</span></span><br><span class="line"></span><br><span class="line">d.Split [<span class="operator">|</span> <span class="string">&#x27;\n&#x27;</span> <span class="operator">|</span>]</span><br><span class="line"><span class="operator">|&gt;</span> Seq.collect (Seq.skip <span class="number">1</span> <span class="operator">&gt;&gt;</span> Seq.take <span class="number">1</span>)</span><br><span class="line"><span class="operator">|&gt;</span> <span class="built_in">printfn</span> <span class="string">&quot;%A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// seq [&#x27;B&#x27;; &#x27;E&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/zh-tw/dotnet/fsharp/language-reference/sequences">sequences</a></li><li><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html">fsharp collections seqmodule</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在練習 F# 時，發現自己對於 F# Collection 操作不熟悉，尤其是 Seq 的部分，特地拉出單章刻意練習&lt;/p&gt;</summary>
    
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/categories/FSharp/"/>
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/tags/FSharp/"/>
    
  </entry>
  
  <entry>
    <title>FSharp + Minimal API + MongoDB</title>
    <link href="http://blog.kevinyang.net/2022/01/30/fsharp-minimalAPI-mongodb/"/>
    <id>http://blog.kevinyang.net/2022/01/30/fsharp-minimalAPI-mongodb/</id>
    <published>2022-01-30T12:34:35.000Z</published>
    <updated>2022-11-05T12:20:58.774Z</updated>
    
    <content type="html"><![CDATA[<p>延續<a href="https://blog.kevinyang.net/2022/01/30/fsharp-minimal-api/">上一篇</a> 寫的內容，將 MongoDB 的功能加進來，順便練習 F#</p><span id="more"></span><h1 id="Work-with-MongoDB"><a class="header-anchor" href="#Work-with-MongoDB"> </a>Work with MongoDB</h1><p>.net core 專案不管是 C# 或是 F# 要使用 MongoDB 都需要安裝一個 package <code>MongoDB.Driver</code>，安裝完成後就可以連接 MongoDB 了，這邊就假設各位的電腦已經有一個正常運行的 MongoDB，如果沒有，網路上有很多安裝教學</p><p>接下來的檔案都是在 <code>Todo.fs</code> 內做異動</p><ol><li><p>調整 <code>Todo</code> type 定義</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Todo</span> <span class="operator">=</span> &#123;</span><br><span class="line">      <span class="built_in">id</span><span class="operator">:</span> BsonObjectId <span class="comment">// mongodb 自己的 key 欄位, 需要 open MongoDB.Bson</span></span><br><span class="line">      uid<span class="operator">:</span> <span class="type">string</span> <span class="comment">// 上一篇使用 int, 這裡改用 Guid 當作 uid</span></span><br><span class="line">      title<span class="operator">:</span> <span class="type">string</span></span><br><span class="line">      isDone<span class="operator">:</span> <span class="type">bool</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>增加 property 和 method 到 <code>ITodoService</code> type</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ITodoService</span> <span class="operator">=</span>  </span><br><span class="line">   <span class="keyword">abstract</span> mongo<span class="operator">:</span> MongoClient</span><br><span class="line">   <span class="keyword">abstract</span> db<span class="operator">:</span> IMongoDatabase</span><br><span class="line">   <span class="keyword">abstract</span> GetTodos<span class="operator">:</span> <span class="type">unit</span> <span class="operator">-&gt;</span> Todo <span class="type">seq</span></span><br><span class="line">   <span class="keyword">abstract</span> SaveTodo<span class="operator">:</span> Todo <span class="operator">-&gt;</span> <span class="type">bool</span></span><br></pre></td></tr></table></figure></li><li><p>將缺少的部分實做補齊</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TodoService <span class="operator">=</span> </span><br><span class="line">    &#123; <span class="keyword">new</span> ITodoService <span class="keyword">with</span>   </span><br><span class="line">        <span class="keyword">member</span> __.mongo <span class="operator">=</span> MongoClient(<span class="string">&quot;your mongodb connection string&quot;</span>)</span><br><span class="line">        <span class="keyword">member</span> __.db <span class="operator">=</span> __.mongo.GetDatabase <span class="string">&quot;todos&quot;</span> <span class="comment">// 可以換成自己建立的 database 名稱</span></span><br><span class="line">        <span class="keyword">member</span> __.GetTodos()<span class="operator">:</span> <span class="type">seq</span><span class="operator">&lt;</span>Todo<span class="operator">&gt;</span> <span class="operator">=</span></span><br><span class="line">            __.db</span><br><span class="line">              .GetCollection<span class="operator">&lt;</span>Todo<span class="operator">&gt;</span>(<span class="string">&quot;todos&quot;</span>)</span><br><span class="line">              .Find(Builders.Filter.Empty)</span><br><span class="line">              .ToEnumerable() <span class="operator">|&gt;</span> Seq.cast</span><br><span class="line">              </span><br><span class="line">        <span class="keyword">member</span> __.SaveTodo todo <span class="operator">=</span></span><br><span class="line">            <span class="keyword">let</span> collection <span class="operator">=</span> __.db.GetCollection<span class="operator">&lt;</span>Todo<span class="operator">&gt;</span>(<span class="string">&quot;todos&quot;</span>)</span><br><span class="line">            <span class="keyword">let</span> todos <span class="operator">=</span> </span><br><span class="line">                collection</span><br><span class="line">                    .Find(<span class="keyword">fun</span> x<span class="operator">-&gt;</span> x.uid <span class="operator">=</span> todo.uid)</span><br><span class="line">                    .ToEnumerable()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">match</span> Seq.isEmpty todos <span class="keyword">with</span></span><br><span class="line">            <span class="operator">|</span> <span class="literal">true</span> <span class="operator">-&gt;</span> </span><br><span class="line">                collection.InsertOne &#123; todo <span class="keyword">with</span></span><br><span class="line">                                        <span class="built_in">id</span> <span class="operator">=</span> BsonObjectId(ObjectId.GenerateNewId())</span><br><span class="line">                                        uid <span class="operator">=</span> Guid.NewGuid().ToString() &#125; <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">            <span class="operator">|</span> <span class="literal">false</span> <span class="operator">-&gt;</span> </span><br><span class="line">                <span class="keyword">let</span> filter <span class="operator">=</span> Builders<span class="operator">&lt;</span>Todo<span class="operator">&gt;.</span>Filter.Eq((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.uid), todo.uid)</span><br><span class="line">                <span class="keyword">let</span> update <span class="operator">=</span></span><br><span class="line">                    Builders<span class="operator">&lt;</span>Todo<span class="operator">&gt;.</span>Update</span><br><span class="line">                        .Set((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.title), todo.title)</span><br><span class="line">                        .Set((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.isDone), todo.isDone)</span><br><span class="line"></span><br><span class="line">                collection.UpdateOne(filter, update) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>__.GetTodos()</code> 這一段我稍微卡到的地方在於 <code>IEnumerable</code> 轉型到 <code>Seq</code> 的地方，查了一下文件，發現 <code>IEnumerable</code> 和 <code>Seq</code> 的本質上是一樣的，所以只要使用 <code>Seq.cast</code> 的方法轉一下即可</li><li>MongoDB Collection 的查詢是使用 <code>Builders.filter</code> 的方法建立，這裡因為是要全撈，所以就單純使用 <code>Builders.Filter.Empty</code></li><li><code>__.SaveTodo</code> 的部分，我將建立與更新寫在一起，判斷方式是先用傳進來的 <code>todo.uid</code> 去尋找是否有存在的記錄，透過 pattern match 的寫法來區分新增與更新</li><li>line 24: 建立 <code>filter</code> 與 <code>update</code> 的定義，<code>colletion.UpdateOne</code> 方法需要傳進這兩個定義</li></ul></li><li><p>修改 <code>addTodo</code> 的方法</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> addTodo <span class="operator">=</span></span><br><span class="line">    Func<span class="operator">&lt;</span>ITodoService, Todo, bool<span class="operator">&gt;</span></span><br><span class="line">        (<span class="keyword">fun</span> (todos<span class="operator">:</span> ITodoService) (todo) <span class="operator">-&gt;</span> todos.SaveTodo todo)</span><br></pre></td></tr></table></figure><p>有好一段時間沒有寫 C#，熊熊忘記 <code>Func</code> 的使用方式，還好後來有想起來，而這邊跟寫 C# 的差異在於 line 3 的部分，如果是 C# 會這樣子寫 <code>(todos: ITodoService , todo) =&gt; &#123;...&#125;</code>，但在 F# 的世界裡，因為 <code>Func</code> 的 signature 是 <code>Func(a -&gt; b -&gt; c)</code>，所以才會有 line 3 的寫法出現了，算是 FP 的特性之一。</p><p>BTW，如果想要將 FP 學好，要學會看懂 signature</p></li></ol><p>這樣調整完後，重新執行測試 API ，沒有意外就可以看到資料有儲存到 MongoDB 內了</p><h1 id="注入-IConfiguration"><a class="header-anchor" href="#注入-IConfiguration"> </a>注入 IConfiguration</h1><p>經過一晚的思考，還是將如何使用 Configuration 的作法補上來，順便熟悉 <code>Minimal API</code> 的 DI 機制，接下來會分兩塊來看</p><ol><li><p>map func 直接注入 dependency</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[&lt;RequireQualifiedAccess&gt;]</span></span><br><span class="line"><span class="keyword">module</span> Home</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Configuration</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> showVersion <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">let</span> getCurrentVersion (config<span class="operator">:</span>IConfiguration) <span class="operator">=</span> config[<span class="string">&quot;version&quot;</span>]</span><br><span class="line">    Func<span class="operator">&lt;</span>IConfiguration, string<span class="operator">&gt;</span>(getCurrentVersion)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerRoutes (app<span class="operator">:</span> WebApplication) <span class="operator">=</span></span><br><span class="line">    app.MapGet(<span class="string">&quot;/&quot;</span>, showVersion) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app</span><br></pre></td></tr></table></figure><ul><li>line 10: 的 <code>Func</code> 寫法如同上面的，可以用這樣子的方式取得註冊在 services 內的服務 (framework 幫我們完成)</li></ul></li><li><p>註冊 service 層的 DI</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TodoService (config<span class="operator">:</span> IConfiguration) <span class="operator">=</span> </span><br><span class="line">    &#123; <span class="keyword">new</span> ITodoService <span class="keyword">with</span>        </span><br><span class="line">        <span class="keyword">member</span> __.mongo <span class="operator">=</span> MongoClient(config[<span class="string">&quot;mongodb&quot;</span>])</span><br><span class="line">        <span class="keyword">member</span> __.db <span class="operator">=</span> __.mongo.GetDatabase <span class="string">&quot;todos&quot;</span></span><br><span class="line">      <span class="operator">....</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>line 1: 在宣告時就表明要給 <code>IConfiuration</code></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder</span><br><span class="line">    .services</span><br><span class="line">    .AddSingleton<span class="operator">&lt;</span>Todo.ITodoService<span class="operator">&gt;</span>(<span class="keyword">fun</span> _ <span class="operator">-&gt;</span> Todo.TodoService builder.Configuration) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br></pre></td></tr></table></figure><ul><li>所以在註冊的時候就餵給他 Configuration 就好</li></ul></li></ol><p>這樣子就完成了，這部分的寫法我一開始有點鬼打牆，主要是因為我卡在 C# 版本的觀念，service 的 DI 要從 <code>constructure</code> 注入，後來想通其實他就是 function，就直接傳進去就好了。</p><p>換另外一個層面來看，當你發現一個 function 要傳入的東西太多時，就要重新思考這段程式碼是否有問題，是不是負責太多事情了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;延續&lt;a href=&quot;https://blog.kevinyang.net/2022/01/30/fsharp-minimal-api/&quot;&gt;上一篇&lt;/a&gt; 寫的內容，將 MongoDB 的功能加進來，順便練習 F#&lt;/p&gt;</summary>
    
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/categories/FSharp/"/>
    
    
    <category term="FSharp" scheme="http://blog.kevinyang.net/tags/FSharp/"/>
    
  </entry>
  
</feed>
