<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CK&#39;s Notepad</title>
  
  
  <link href="http://blog.kevinyang.net/atom.xml" rel="self"/>
  
  <link href="http://blog.kevinyang.net/"/>
  <updated>2021-06-14T05:54:39.531Z</updated>
  <id>http://blog.kevinyang.net/</id>
  
  <author>
    <name>KevinYang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[How-to] 如何寫一份 JSON Schema</title>
    <link href="http://blog.kevinyang.net/2021/06/06/how-to-write-json-schema/"/>
    <id>http://blog.kevinyang.net/2021/06/06/how-to-write-json-schema/</id>
    <published>2021-06-06T02:49:01.000Z</published>
    <updated>2021-06-14T05:54:39.531Z</updated>
    
    <content type="html"><![CDATA[<p>當要驗證 JSON 資料格式是否正確，有幾種做法</p><ol><li>丟給後端去驗證</li><li>寫個 JSON Schema 做驗證(前端就可以先檢查了)</li></ol><p>JSON Schema 是什麼？他有點像以前 XSD (用來描述 XML 結構的檔案，也有驗證的效果)，除了可以用來驗證 JSON 資料格式是否正確，也可以用來驗證 YAML 檔案的格式。</p><span id="more"></span><h1 id="基本語法"><a class="header-anchor" href="#基本語法"> </a>基本語法</h1><p>所以如何寫一個 JSON Schema，我們需要寫另外一份 JSON 來描述未來想要驗證的 JSON 資料格式為何，型態為何，可以輸入得資料有哪些等，下面就跟大家一起整理相關的語法筆記 (部分範例來自 JSON Schema 網站，連結在參考資料)</p><p>假設有一個 JSON 資料長這樣</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;productName&quot;</span>: <span class="string">&quot;A green door&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">12.50</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: [ <span class="string">&quot;home&quot;</span>, <span class="string">&quot;green&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一個基本的 JSON schema 長這樣</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://json-schema.org/draft/2020-12/schema&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;$id&quot;</span>: <span class="string">&quot;https://example.com/product.schema.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Product&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;A product in the catalog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>keyword<ul><li><code>$schema</code>: 參考的 JSON schema 是哪一個版本</li><li><code>$id</code>: 這份 JSON schema 存放的位置</li></ul></li><li>annotation<ul><li><code>title</code>，<code>description</code> 描述說明此份 schema 的用途</li></ul></li><li>validation keyword<ul><li><code>type</code> : 資料格式型態，可以描述的型態有 <code>null</code>、 <code>boolean</code>、 <code>object</code>、 <code>array</code>、 <code>number</code>、 <code>string</code>、 <code>integer</code></li></ul></li></ul><p>上面是設定跟說明這份 schema 的用途，類似 metadata，至於如何描述資料結構，描述方法如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;productId&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The unique identifier for a product&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;productName&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Name of the product&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;productId&quot;</span>, <span class="string">&quot;productName&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>validation keyword<ul><li><code>properties</code> 用來描述此 <code>Object</code> 內有哪些欄位</li><li><code>required</code> 用來設定哪些欄位是必填的</li></ul></li></ul><h2 id="更多語法"><a class="header-anchor" href="#更多語法"> </a>更多語法</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The price of the product&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;exclusiveMinimum&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>數字型別</li><li>不能是 0 (用 <a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.2.5"><code>exclusiveMinimum</code></a> 規則排除)</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tags&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Tags for the product&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;array&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;items&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;minItems&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;uniqueItems&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此為陣列型別的欄位</li><li>陣列 內得資料格式，使用 <a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.1.2"><code>items</code></a> 定義</li><li>至少要有一筆資料 (<a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.4.2"><code>minItems</code></a> 來設定最少筆數)</li><li>且不能重複 (<a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.4.3"><code>uniqueItems</code></a> 檢查)</li></ul><h2 id="Nesting-data-structures"><a class="header-anchor" href="#Nesting-data-structures"> </a>Nesting data structures</h2><p>不難，一樣式套用上面的規則，做法是一樣的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dimensions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;length&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;width&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;height&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;length&quot;</span>, <span class="string">&quot;width&quot;</span>, <span class="string">&quot;height&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References-schema"><a class="header-anchor" href="#References-schema"> </a>References schema</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;warehouseLocation&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Coordinates of the warehouse where the product is located.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;https://example.com/geographical-location.schema.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>$ref</code> 指定 schema 的參考路徑，可以是外部或內部 (<a href="https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00#section-8.2.4">spec</a>)</p><ul><li><p>外部參考: 使用 URI Reference</p></li><li><p>內部參考: 使用 <code>#/路徑</code> 的方式，搭配 <code>$defs</code> 使用</p><p><img src="image-20210606115417347.png" alt="image-20210606115417347"></p></li></ul></li></ul><h1 id="進階語法"><a class="header-anchor" href="#進階語法"> </a>進階語法</h1><ul><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.2.3"><code>additionalProperties</code></a>: 是否有其他額外的欄位，<code>false</code> 時，JSON 得資料必須符合 schema 所定義的 <code>properties</code></li><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.2.2"><code>patternProperties</code></a>: 用 Regex 來描述 Property 名稱規則及對應得資料格式</li><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.2.1.3"><code>oneOf</code></a> 符合定義規則的其中一項<ul><li>MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.</li><li>An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword’s value.</li></ul></li><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.8.2.4"><code>$defs</code></a> 搭配 <code>$ref</code> 使用 (舊版名稱為: <code>definitions</code>)<ul><li>MUST be an object. Each member value of this object MUST be a valid JSON Schema.</li><li>reserves a location for schema authors to inline re-usable JSON Schemas into a more general schema.</li></ul></li><li><a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.1.2"><code>enum</code></a>: 設定可以使用的值有哪些</li><li>MUST be an array and at least one element.</li><li>An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword’s array value.</li><li><a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.3.3"><code>pattern</code></a>: 使用 Regex 設定可以輸入資料的格式 (format)</li></ul><p>完整範例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;$id&quot;</span>: <span class="string">&quot;https://example.com/entry-schema&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://json-schema.org/draft/2020-12/schema&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;JSON Schema for an fstab entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;storage&quot;</span> ],</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;storage&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;oneOf&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;#/$defs/diskDevice&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;#/$defs/diskUUID&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;#/$defs/nfs&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;#/$defs/tmpfs&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;fstype&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;ext3&quot;</span>, <span class="string">&quot;ext4&quot;</span>, <span class="string">&quot;btrfs&quot;</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;array&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;minItems&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;items&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;uniqueItems&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;readonly&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;boolean&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;$defs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;diskDevice&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;disk&quot;</span> ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;device&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;^/dev/[^/]+(/[^/]+)*$&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;type&quot;</span>, <span class="string">&quot;device&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;diskUUID&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;disk&quot;</span> ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;label&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;^[a-fA-F0-9]&#123;8&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;12&#125;$&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;type&quot;</span>, <span class="string">&quot;label&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;nfs&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: &#123; <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;nfs&quot;</span> ] &#125;,</span><br><span class="line">        <span class="attr">&quot;remotePath&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;^(/[^/]+)+$&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;server&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;oneOf&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;hostname&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;ipv4&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;ipv6&quot;</span> &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;type&quot;</span>, <span class="string">&quot;server&quot;</span>, <span class="string">&quot;remotePath&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tmpfs&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: &#123; <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;tmpfs&quot;</span> ] &#125;,</span><br><span class="line">        <span class="attr">&quot;sizeInMB&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;minimum&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">&quot;maximum&quot;</span>: <span class="number">512</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;type&quot;</span>, <span class="string">&quot;sizeInMB&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要知道更多 JSON Schema 語法的寫法，可以到 <code>JSON Schema Store</code> 內去瞭解，裡面列出很多現在常用的服務，很多都是用來驗證 YAML 格式是否正確，或是閱讀這篇<a href="https://json-schema.org/understanding-json-schema/">文件</a></p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ol><li><a href="https://json-schema.org/">JSON Schema</a></li><li><a href="https://json-schema.org/specification.html">JSON Schema specification</a></li><li><a href="https://www.schemastore.org/json/">JSON Schema Store</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;當要驗證 JSON 資料格式是否正確，有幾種做法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;丟給後端去驗證&lt;/li&gt;
&lt;li&gt;寫個 JSON Schema 做驗證(前端就可以先檢查了)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JSON Schema 是什麼？他有點像以前 XSD (用來描述 XML 結構的檔案，也有驗證的效果)，除了可以用來驗證 JSON 資料格式是否正確，也可以用來驗證 YAML 檔案的格式。&lt;/p&gt;</summary>
    
    
    
    <category term="How-to" scheme="http://blog.kevinyang.net/categories/How-to/"/>
    
    
    <category term="How-to" scheme="http://blog.kevinyang.net/tags/How-to/"/>
    
  </entry>
  
  <entry>
    <title>[NATS] Messaging architecture - 影片筆記</title>
    <link href="http://blog.kevinyang.net/2021/05/08/nats-study-1/"/>
    <id>http://blog.kevinyang.net/2021/05/08/nats-study-1/</id>
    <published>2021-05-08T06:39:36.000Z</published>
    <updated>2021-06-14T05:54:39.527Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作上碰到了 Messaging 架構面的開發，或許對很多人來說這已經是很基本的常識，但對我來說這是新東西，所以看個影片將裡面提到的觀念筆記下來</p><span id="more"></span><h1 id="Messaging-架構"><a class="header-anchor" href="#Messaging-架構"> </a>Messaging 架構</h1><p><img src="image-20210508152057858.png" alt="image-20210508152057858"></p><ul><li>message had payload and subject</li><li>Subject names are extremely important (描述目標) -</li><li>Producers - message 建立者 (publishers)<ul><li>Publisher may specify an optional reply, it change message type from notify to request</li></ul></li><li>Subscribe: receive messages matching a subscription<ul><li>can specify a queue group name</li><li>can specify how many messages to receive before auto-canceling (big deal)</li><li>can specify wildcards, ex: <code>pokenats.*.*.hb.100</code>, <code>pokenats.eden-services.&gt;</code><ul><li><code>*</code> matches any value in that element</li><li><code>&gt;</code> matches all elements that follow, only valid at the end of subject</li></ul></li></ul></li><li>NATS Server<ul><li>Clustered servers/cluster-aware clients<ul><li>Build-in resiliency and high availability</li><li>Client will auto connect to another server in the cluster if one NATS server is down.</li></ul></li><li>Text-base protocol (payload is an array of bytes)<ul><li>use telnet to explore</li></ul></li><li>Monitorable on a dedicated port - returning JSON data to describing the state of the server</li><li>Server protects itself first<ul><li>Auto-pruning of slow/non-responsive client</li><li>Disconnect clients that send bad protocol messages</li></ul></li><li>at most once delivery</li><li>messages stored until number or size limits are reached</li><li>Subscribers can request messages sent earlier<ul><li>Start with first/last/n-th/etc message</li></ul></li><li>Durable subscriptions<ul><li>Resume previous session</li></ul></li><li>At least once delivery</li></ul></li><li>Three simple patterns<ul><li>Publish-subscribe (基本行為)</li><li>Queueing (變化型)</li><li>Request-Reply (變化型)</li></ul></li></ul><p><img src="image-20210508154237496.png" alt="image-20210508154237496"></p><p>利用 Subject Name 來區分事件所對應的行為，<strong>事件名稱很重要</strong></p><h1 id="實做練習"><a class="header-anchor" href="#實做練習"> </a>實做練習</h1><ol><li><p>在 windows 電腦上要架設一個 NATS 服務，有 Docker 後一切都變簡單了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nats-main -p 4222:4222 -p 6222:6222 -p 8222:8222 nats</span><br></pre></td></tr></table></figure></li><li><p>如果沒有安裝過 NestJS CLI  的可以參考這篇<a href="https://docs.nestjs.com/#installation">文件</a>，這裡我建立了兩個 NestJS App，一個是 Client, 一個是 Server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nest new app-client</span><br><span class="line">nest new app-server</span><br></pre></td></tr></table></figure><ul><li>基本上，這邊命名為 client、server 沒什麼意義，因為在 Messaging 的世界裡，每一個都是 Client 或是 Server (因為都可以發訊息或接收訊息)</li></ul></li><li><p>在兩個專案中都安裝以下套件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --save @nestjs/microservices</span><br><span class="line">npm i --save nats@^1.4.12</span><br></pre></td></tr></table></figure><ul><li>留意: <code>nats</code> 套件 1.x 和 2.x 版的 API 是不相容</li></ul></li><li><p>設定 NATS Server 連線資訊</p><ul><li>main.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; natsConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./nats.config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line"></span><br><span class="line">  app.connectMicroservice(natsConfig);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> globalPrefix = <span class="string">&#x27;api&#x27;</span>;</span><br><span class="line">  app.setGlobalPrefix(globalPrefix);</span><br><span class="line">  <span class="keyword">const</span> port = process.env.port || <span class="number">3333</span>; <span class="comment">// Port 可改</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.startAllMicroservicesAsync();</span><br><span class="line">  <span class="keyword">await</span> app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Listening at http://localhost:&#x27;</span> + port + <span class="string">&#x27;/&#x27;</span> + globalPrefix);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>nats.config.ts</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NatsOptions, Transport &#125; from &#x27;@nestjs/microservices&#x27;;</span><br><span class="line"></span><br><span class="line">export const natsConfig: NatsOptions = &#123;</span><br><span class="line">  transport: Transport.NATS,</span><br><span class="line">  options: &#123;</span><br><span class="line">    url: process.env.NATS_URL || &#x27;nats:<span class="comment">//localhost:4222&#x27;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Client 設定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Module &#125; from &#x27;@nestjs/common&#x27;;</span><br><span class="line">import &#123; ClientsModule &#125; from &#x27;@nestjs/microservices&#x27;;</span><br><span class="line">import &#123; AppController &#125; from &#x27;./app.controller&#x27;;</span><br><span class="line">import &#123; AppService &#125; from &#x27;./app.service&#x27;;</span><br><span class="line">import &#123; natsConfig &#125; from &#x27;./nats.config&#x27;;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ClientsModule.register([&#123;</span><br><span class="line">      name: &#x27;MATH_SERVICE&#x27;,</span><br><span class="line">      ...natsConfig,</span><br><span class="line">    &#125;])</span><br><span class="line">  ],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Client 是用來發送訊息的，如果只是單純監聽事件，就不需要設定這個<ul><li><code>client.emit([subject], [payload])</code> :  event-driven messaging</li><li><code>client.send([subject], [payload])</code> :  request-response messaging</li></ul></li></ul></li><li><p>Controller 設定</p><ol><li>發送端</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="meta">@Inject</span>(<span class="string">&#x27;MATH_SERVICE&#x27;</span>) <span class="keyword">private</span> client: ClientProxy,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Inject('MATH_SERVICE')</code> 對應 <code>AppModule</code> 所註冊的名稱，可自行更換</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum(data: <span class="built_in">number</span>[]): Observable&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.client.send&lt;<span class="built_in">number</span>&gt;(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;sum&#x27;</span> &#125;, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>發送一個 Event ，Subject Name: <code>&#123;cmd: 'sum'&#125;</code>，payload 是一個數字陣列</li></ul><ol start="2"><li>接收端</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MessagePattern</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;sum&#x27;</span> &#125;)</span><br><span class="line">sum(data: <span class="built_in">number</span>[]): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;MinionAppController: sum&#x27;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.minionAppService.sum(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>@MessagePattern([subject])</code> 決定要監聽的 Subject  種類</li></ul></li></ol><h1 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h1><ul><li><a href="https://www.youtube.com/watch?v=SLb4rdI5lIM">NATS for Modern Messaging and Microservices</a></li><li><a href="https://docs.nats.io/">NATS 官網</a></li><li><a href="https://hub.docker.com/_/nats">NATS Docker Image</a></li><li><a href="https://docs.nestjs.com/microservices/nats#nats">NestJS - NATS</a></li><li>範例程式<ul><li><a href="https://github.com/chgc/nats-nest-studyDemo/tree/client">Client</a></li><li><a href="https://github.com/chgc/nats-nest-studyDemo/tree/server">Server</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近工作上碰到了 Messaging 架構面的開發，或許對很多人來說這已經是很基本的常識，但對我來說這是新東西，所以看個影片將裡面提到的觀念筆記下來&lt;/p&gt;</summary>
    
    
    
    <category term="NATS" scheme="http://blog.kevinyang.net/categories/NATS/"/>
    
    
    <category term="NATS" scheme="http://blog.kevinyang.net/tags/NATS/"/>
    
  </entry>
  
  <entry>
    <title>[Azure DevOps] 用 API 來建立 WorkItems - Angular 篇</title>
    <link href="http://blog.kevinyang.net/2021/04/18/devops-api-angular-version/"/>
    <id>http://blog.kevinyang.net/2021/04/18/devops-api-angular-version/</id>
    <published>2021-04-18T12:01:51.000Z</published>
    <updated>2021-06-14T05:54:39.527Z</updated>
    
    <content type="html"><![CDATA[<p>當網路速度慢遇上要大量開  Work Items 時，就會有一種想下班的念頭，還好 Azure DevOps 有提供 API 可以讓我們用程式來建立 Work Items，雖然剛開始有點小麻煩，但弄通後就還好，所以這邊就筆記一下起手式</p><span id="more"></span><h1 id="OAuth"><a class="header-anchor" href="#OAuth"> </a>OAuth</h1><p>當呼叫 API 時，還是得通過驗證才能操作 API，這邊可以簡單的透過建立 <code>Personal access tokens</code> 的方式來完成權限控管及驗證等功能，至於如何在 Azure DevOps 建立 PAT，我相信網路上已經有很多文章在講怎麼操作了</p><p>每一個操作的 API 也有說明所需的權限，範例<img src="image-20210418201316995.png" alt="image-20210418201316995"></p><h1 id="API-操作"><a class="header-anchor" href="#API-操作"> </a>API 操作</h1><p>這邊我使用 Angular 作為範例程式 ，先用一個 API 的操作來說明</p><h2 id="取得-iterations"><a class="header-anchor" href="#取得-iterations"> </a>取得 iterations</h2><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/work/iterations/list?view=azure-devops-rest-6.0">API - Work - Iterations</a></li></ul><p>根據 API 文件得知，呼叫 <code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/&#123;team&#125;/_apis/work/teamsettings/iterations?api-version=6.0</code> 可以取得開 project 下的 iterations 資訊，</p><p>程式碼的部分如下(以下的程式碼會產生錯誤)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baseUrl = <span class="string">&#x27;`https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;&#x27;</span>; </span><br><span class="line"><span class="function"><span class="title">getIterations</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/work/teamsettings/iterations?api-version=<span class="subst">$&#123;<span class="built_in">this</span>.apiVersion&#125;</span>`</span>);    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>organization</code> 和 <code>project</code> 請配合自己的 DevOps 專案修改</li><li>這段程式碼當在呼叫 API 時會出現錯誤，原因是沒有授權的關係</li></ul><p>來調整一下呼叫的 header 資訊，加入之前所建立的 PAT</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getIterations</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.http.get(</span><br><span class="line">     <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/work/teamsettings/iterations?api-version=<span class="subst">$&#123;<span class="built_in">this</span>.apiVersion&#125;</span>`</span>,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">headers</span>: <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">         <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">       &#125;),</span><br><span class="line">     &#125;</span><br><span class="line">   );    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>Headers 的部分加入 <code>Authorization</code> 的內容</li><li>PAT 需要轉換成 Base64 的格式</li><li><code>PAT:$&#123;token&#125;</code> 的 <code>PAT:</code> 是必要的</li><li>重新執行即可取回所要的資訊</li></ul><p>每次呼叫 API 時後面都要加上 <code>api-version</code> 資訊，其實有點麻煩，這資訊可以改放到 headers 內</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">      <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">      <span class="string">&#x27;X-TFS-FedAuthRedirect&#x27;</span>: <span class="string">&#x27;Suppress&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;api-version&#x27;</span>: <span class="string">&#x27;6.0&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="建立-Work-Item"><a class="header-anchor" href="#建立-Work-Item"> </a>建立 Work Item</h2><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20items/create?view=azure-devops-rest-6.0">API - Work Items - Create</a></li></ul><blockquote><p>POST <a href="https://dev.azure.com/%7Borganization%7D/%7Bproject%7D/_apis/wit/workitems/$%7Btype%7D?api-version=6.0">https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/${type}?api-version=6.0</a></p></blockquote><p>第一次看到 <code>$&#123;type&#125;</code> 的時候，我也搞不懂要放入什麼，經過一陣亂測試，終於知道要放什麼東西了 ，在網頁上面要新增一個 Work Item 時，可以選得類別會依開發模式來決定，基本操作都是一樣的</p><p><img src="image-20210418205023231.png" alt="image-20210418205023231"></p><p>如果要建立一個 <code>Task</code>，網址會是</p><p><code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/_apis/wit/workitems/$Task</code></p><p>如果是 <code>Issue</code>，網址則會是</p><p><code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/_apis/wit/workitems/$Issue</code></p><p>這樣子說明應該可以瞭解 <code>$&#123;type&#125;</code> 要怎麼改了</p><p>另外一個要注意的地方是 Request Body 的 Content-Type 需要設定為 <code>application/json-patch+json</code></p><p><img src="image-20210418205307166.png" alt="image-20210418205307166"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">    <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">    <span class="string">&#x27;api-version&#x27;</span>: <span class="built_in">this</span>.apiVersion,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>範例程式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">createWorkItem</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http.post(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/wit/workitems/$Task`</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.Title&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;Title here&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.Description&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;desc here&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/Microsoft.VSTS.Common.Priority&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.IterationPath&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;apiDemo\\w001&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ], &#123;</span><br><span class="line">        <span class="attr">headers</span>: <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">            <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">            <span class="string">&#x27;api-version&#x27;</span>: <span class="built_in">this</span>.apiVersion,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>可以修改的 path ，可參閱 <a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20item%20types%20field/list?view=azure-devops-rest-6.0">API - work item fields</a>，但不是所有的欄位都可以設定，這部分就請各位自己測試了</li></ul><h2 id="Update-Work-Item"><a class="header-anchor" href="#Update-Work-Item"> </a>Update Work Item</h2><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20items/update?view=azure-devops-rest-6.0">API - Work Item Update</a></li></ul><blockquote><p>PATCH <a href="https://dev.azure.com/%7Borganization%7D/_apis/wit/workitems/%7Bid%7D?api-version=6.0">https://dev.azure.com/{organization}/_apis/wit/workitems/{id}?api-version=6.0</a></p></blockquote><p>用一個 Related Work 的範例來說明更新 Work Item</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addLink</span>(<span class="params">parent, ...childrend</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.http.patch(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/wit/workitems/<span class="subst">$&#123;parent&#125;</span>`</span>, [</span><br><span class="line">    ...childrend.map(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/relations/-&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: &#123;</span><br><span class="line">          <span class="attr">rel</span>: <span class="string">&#x27;System.LinkTypes.Related&#x27;</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/wit/workItems/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">attributes</span>: &#123;</span><br><span class="line">            <span class="attr">comment</span>: <span class="string">&#x27;adding another task&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],  &#123;</span><br><span class="line">      <span class="attr">headers</span>: <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">          <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">          <span class="string">&#x27;api-version&#x27;</span>: <span class="built_in">this</span>.apiVersion,</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 API 文件中有提供更多範例可以參考</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/?view=azure-devops-rest-6.0">azure-devops-rest</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;當網路速度慢遇上要大量開  Work Items 時，就會有一種想下班的念頭，還好 Azure DevOps 有提供 API 可以讓我們用程式來建立 Work Items，雖然剛開始有點小麻煩，但弄通後就還好，所以這邊就筆記一下起手式&lt;/p&gt;</summary>
    
    
    
    <category term="Azure DevOps" scheme="http://blog.kevinyang.net/categories/Azure-DevOps/"/>
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Azure-DevOps/Angular/"/>
    
    
    <category term="Azure DevOps" scheme="http://blog.kevinyang.net/tags/Azure-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>[Teams] 關於 MessageCard Action 的一些事情</title>
    <link href="http://blog.kevinyang.net/2021/03/26/teams-messagecard-action-action/"/>
    <id>http://blog.kevinyang.net/2021/03/26/teams-messagecard-action-action/</id>
    <published>2021-03-26T23:48:54.000Z</published>
    <updated>2021-06-14T05:54:39.523Z</updated>
    
    <content type="html"><![CDATA[<p>Teams 可以讓使用者透過 Incoming Webhooks 的方式將資訊以 JSON 的方式傳入並用卡片的形式呈現，而卡片的內容也可以定義一些動作讓使用者做操作，例如收集資訊並回傳到指定的服務去(API)，但到底要怎麼傳，跟怎麼驗證，這部分的文件被藏在我認為還蠻角落的地方，透過這篇筆記稍微整理一下</p><span id="more"></span><blockquote><p>注意: 這邊所紀錄的內容的資料來源是 <code>Legacy actionable message card reference </code></p></blockquote><h1 id="MessageCard"><a class="header-anchor" href="#MessageCard"> </a>MessageCard</h1><p>挑幾個跟 Action 比較有關的欄位出來</p><ul><li><code>correlationId</code> : log 使用，在 HttpPost 時，會以 <code>Card-Correlation-Id</code> 紀錄，應和 <code>Action-Request-Id</code> 一同被紀錄起來供後續使用，<code>Action-Request-Id</code> 由 Office 365 產生，可以用來查使用者的執行哪一個動作</li><li><code>potentialAction</code> ：希望操作的動作會定義在這一個區塊，數量最多能放 4 個動作。在 Section 裡也可以放 <code>potentialAction</code></li></ul><h2 id="Action-行為"><a class="header-anchor" href="#Action-行為"> </a>Action 行為</h2><p>Action 可以有下列幾種行為模式</p><ul><li>OpenUri</li><li>HttpPost</li><li>ActionCard</li><li>InvokeAddInCommand</li></ul><h3 id="OpenUri"><a class="header-anchor" href="#OpenUri"> </a>OpenUri</h3><p><strong>功能</strong>: 打開網址或 APP</p><p><strong>建議</strong>:</p><ol><li>使用此方式提供使用者另開網站，而非將連結放到主文內</li><li>至少附上一個連結，讓使用者可以看到更多資訊</li><li>應為 <code>potentialAction</code> 的最後一個動作</li></ol><p><strong>格式</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;OpenUri&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Learn More&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;targets&quot;</span>: [&#123;</span><br><span class="line">        <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://docs.microsoft.com/outlook/actionable-messages&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>name</code> : 按鈕顯示名稱，使用動詞命名</p></li><li><p><code>targets</code>: 可以針對使用者設備的作業系統版本提供對應的連結</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;targets&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;default&quot;</span>, <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://yammer.com/.../123&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;iOS&quot;</span>, <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;yammer://u/123&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;android&quot;</span>, <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;yammer://u/123&quot;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="HttpPost"><a class="header-anchor" href="#HttpPost"> </a>HttpPost</h3><p>這一個應該會是最常用的行為，基本上就是做一個 API 呼叫</p><p><strong>功能</strong>: 呼叫外部 web 服務</p><p><strong>驗證</strong>: 如需驗證發送者的身份，除了可以在 URL 後面掛 token 驗證外，也可以參考此<a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/security-requirements#verifying-that-requests-come-from-microsoft">文件</a>內的方式</p><p><strong>格式</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Save&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://docs.microsoft.com/outlook/actionable-messages&quot;</span></span><br><span class="line">    <span class="string">&quot;body&quot;</span> : <span class="string">&quot;payload content&quot;</span></span><br><span class="line">    <span class="string">&quot;headers&quot;</span>: [...],</span><br><span class="line">    <span class="attr">&quot;bodyContentType&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>body</strong> 是呼叫 HttpPost 要傳的內容，下面會介紹搭配 <code>ActionCard</code> 的方式做出動態收集資料的行為</li><li><strong>bodyContentType</strong>: 預設為 <code>application/json</code> ，另外一個有效的設定值為 <code>application/x-www-form-urlencoded</code></li><li><strong>headers</strong>: 就字面上意思，想要在發 HttpPost 時放在 header 區塊的資訊</li></ul><p><strong>執行過程</strong>: 整個 <code>HttpPost</code> 的發送行為會由微軟代為發送，並不是由 Client 端直接發送，這也是為什麼在驗證篇的文件中，提到可以驗證 http requests 是否來自微軟</p><h3 id="被呼叫服務的回應方式"><a class="header-anchor" href="#被呼叫服務的回應方式"> </a>被呼叫服務的回應方式</h3><p>當被呼叫的服務執行完動作時，需要給 Teams 一些回應，以下有幾點文件上提到的小叮嚀</p><ul><li>Response 的 header 中，要加入 <code>CARD-ACTION-STATUS</code>，而資訊應清晰，不需要加呼叫者的名字或是執行時間，因為這部分的資訊會被自動加上</li><li>Refresh Card: 可回傳一個完整的 MessageCard 內容來更新使用者發出動作的同一卡片資訊，例如移除原本卡片中的動作項目，或是更新同張卡片上的資訊內容<ul><li>重點: 在 Header 加入 <code>CARD-UPDATE-IN-BODY: TRUE</code></li><li>不要使用 Refresh Cards 做精靈式回答的工作</li><li>至少包含一個 <code>OpenUri</code> 連結回原本系統</li></ul></li></ul><h3 id="ActionCard"><a class="header-anchor" href="#ActionCard"> </a>ActionCard</h3><p><img src="trello-example-expanded-explained.png" alt="trello-example-expanded-explained"></p><p><strong>功能</strong>: 收集使用者輸入資訊，收集到的資訊可用在 <code>HttpPost</code> 和 <code>OpenUri</code></p><p><strong>格式</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ActionCard&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;TextInput&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;comment&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;isRequired&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;isMultiline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Action&#x27;s name prop.&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://yammer.com/comment?postId=123&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;comment=&#123;&#123;comment.value&#125;&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>isRequried</code> : 欄位是否必填</li><li><code>value</code>: 預設值</li><li>line 17: 使用大括弧包住變數，可使用變數的來源為 <code>inputs</code> 區塊定義的物件並以 input 的 <code>id</code> 為變數名稱，格式 <code>&#123;&#123;<id of input>.value&#125;&#125;</code></li></ul><p>可使用的輸入欄位型態有</p><ul><li><p>TextInput</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;TextInput&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;comment&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;isMultiline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;maxLength&quot;</span>: <span class="number">250</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>isMultiline</code> : 為 true 時會顯示 textarea, 為 false 時會顯示 input</li><li><code>maxLength</code>: 設定可輸入文字的上限值</li></ul></li><li><p>DateInput</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;DateInput&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;dueDate&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;includeTime&quot;</span>: <span class="literal">false</span></span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>includeTime</code> : 是否要顯示時間設定</li></ul></li><li><p>MultichoiceInput</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;MultichoiceInput&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pick an option&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;isMultiSelect&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;expanded&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;choices&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;Choice 1&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;Choice 2&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;Choice 3&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;3&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>isMultiSelect</code>: 設定為 <code>true</code> 時，會顯示成 checkbox ，當設定為 <code>false</code> 時，會顯示成 radio 。預設值為 `false</li><li><code>style</code>: 當 <code>isMultiSelect</code> 為 false 時且 style 設定為 <code>expanded</code> ，畫面會盡量將選項全部顯示。預設值為 <code>normal</code></li></ul></li></ul><h3 id="InvokeAddInCommand"><a class="header-anchor" href="#InvokeAddInCommand"> </a>InvokeAddInCommand</h3><p>這行為目前看起來只能用在 Offie Add-in，暫時不研究，Reference: <a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference?WT.mc_id=DOP-MVP-5002680#invokeaddincommand-action">InvokeAddInCommand action</a></p><h2 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h2><p>範例一</p><p><img src="trello-example-explained.png" alt="trello-example-explained"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;summary&quot;</span>: <span class="string">&quot;Card \&quot;Test card\&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;themeColor&quot;</span>: <span class="string">&quot;0078D7&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Card created: \&quot;Name of card\&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sections&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span>: <span class="string">&quot;David Claux&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span>: <span class="string">&quot;9/13/2016, 3:34pm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span>: <span class="string">&quot;https://connectorsdemo.azurewebsites.net/images/MSC12_Oscar_002.jpg&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;facts&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Board:&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;Name of board&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;List:&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;Name of list&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Assigned to:&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;(none)&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Due date:&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;(none)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;potentialAction&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ActionCard&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Set due date&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;DateInput&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;dueDate&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Select a date&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ActionCard&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Move&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;MultichoiceInput&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;move&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pick a list&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;choices&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;List 1&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;l1&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;List 2&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;l2&quot;</span> &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ActionCard&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Add a comment&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;TextInput&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;comment&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;isMultiline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Enter your comment&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;OpenUri&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;View in Trello&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;default&quot;</span>, <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://...&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>範例二</p><p><img src="twitter-example-explained.png" alt="twitter-example-explained"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;themeColor&quot;</span>: <span class="string">&quot;0078D7&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sections&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span>: <span class="string">&quot;**Elon Musk**&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span>: <span class="string">&quot;@elonmusk - 9/12/2016 at 5:33pm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span>: <span class="string">&quot;https://pbs.twimg.com/profile_images/782474226020200448/zDo-gAo0.jpg&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityText&quot;</span>: <span class="string">&quot;Climate change explained in comic book form by xkcd xkcd.com/1732&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span>: <span class="string">&quot;**Mark Knopfler**&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span>: <span class="string">&quot;@MarkKnopfler - 9/12/2016 at 1:12pm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span>: <span class="string">&quot;https://pbs.twimg.com/profile_images/378800000221985528/b2ebfafca6fd7b565fdf3bf4ccdb4dc9.jpeg&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityText&quot;</span>: <span class="string">&quot;Mark Knopfler features on B.B King&#x27;s all-star album of Blues greats, released on this day in 2005...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="驗證"><a class="header-anchor" href="#驗證"> </a>驗證</h1><ul><li><p>Action URL 必須是 HTTPS</p></li><li><p>可以驗證 hearer token 是否合法</p></li><li><p>可驗證 <code>aud</code> 是否與目前 service base URL 相符</p></li><li><p>可使用 URL 掛載 token 的方式作驗證</p></li><li><p>bearer token 包含了 AAD Office 365 User 資訊</p></li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference?WT.mc_id=DOP-MVP-5002680">Legacy actionable message card reference</a></li><li><a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/security-requirements?WT.mc_id=DOP-MVP-5002680">Security requirements for actionable messages in Office 365</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Teams 可以讓使用者透過 Incoming Webhooks 的方式將資訊以 JSON 的方式傳入並用卡片的形式呈現，而卡片的內容也可以定義一些動作讓使用者做操作，例如收集資訊並回傳到指定的服務去(API)，但到底要怎麼傳，跟怎麼驗證，這部分的文件被藏在我認為還蠻角落的地方，透過這篇筆記稍微整理一下&lt;/p&gt;</summary>
    
    
    
    <category term="Teams" scheme="http://blog.kevinyang.net/categories/Teams/"/>
    
    
    <category term="Teams" scheme="http://blog.kevinyang.net/tags/Teams/"/>
    
  </entry>
  
  <entry>
    <title>[Teams] 訊息傳遞 - webhooks and connectors</title>
    <link href="http://blog.kevinyang.net/2021/03/20/teams-and-messages/"/>
    <id>http://blog.kevinyang.net/2021/03/20/teams-and-messages/</id>
    <published>2021-03-20T01:44:43.000Z</published>
    <updated>2021-06-14T05:54:39.519Z</updated>
    
    <content type="html"><![CDATA[<p>Teams 可透過 webhook and connectors 的方式來做訊息的交換，但對於每一種的使用及限制真的很不熟，所以將透過此筆記來釐清其中的關係</p><span id="more"></span><p>Teams 的應用程式中可以看到**連接器(connector)**的項目可以新增，其中有很多與第三方服務的連接器，而 <code>Incoming WebHook</code> 是我們一定要加入的功能，畢竟想要傳訊息到 Teams，這一條路是要開通的</p><h1 id="Webhooks-and-Connectors"><a class="header-anchor" href="#Webhooks-and-Connectors"> </a>Webhooks and Connectors</h1><p>根據官網文件指出，webhooks and connectors 有以下四種</p><h2 id="Outgoing-webhooks"><a class="header-anchor" href="#Outgoing-webhooks"> </a>Outgoing webhooks</h2><p>使用者可以透過 <code>Outgoing webhooks</code> 送 request 到自己設定的服務，並取回相對應的回應。以下重點整理</p><ul><li><p><strong>Scoped configuration</strong>: scoped on a team-by-team basis</p></li><li><p><strong>Reacive messaging</strong>: 透過 <code>@mentioned</code> 的方式啟動 <code>Outgoing webooks</code></p></li><li><p>被呼叫的服務只有 5 秒鐘可以回應</p></li><li><p><strong>Standard HTTP message exchange</strong>: 回傳的訊息會加在原本的訊息下 (as reply)</p></li><li><p>可回傳 message, 例如 單純文字或卡片</p></li><li><p>不能被包在 Teams app 內</p></li><li><p>適用情境特地的團隊工作流程，但不適用於資料量比較大的事件上，因為有回應時間上的限制</p></li><li><p>運作方式跟寫 bots 很像，但不一定要使用 Bot Framework</p></li><li><p><strong>Litmited Microsoft Teams API Message support</strong>: messages send to web service, but don’t have access to APIs like list of chnnels or the channel roster in team</p></li><li><p>註冊 Outgoing Webhooks 的地方</p><ul><li><p>在團隊 -&gt; 管理團隊 -&gt; 應用程式</p><p><img src="SNAGHTML1767ab8d.PNG" alt="img"></p><p><img src="image-20210320104530920.png" alt="image-20210320104530920"></p><p>建立完成後，會取得一個安全性金鑰，需要之後用來驗證資訊安全性使用，更多細節請參閱下一點</p></li><li><p>安全性</p><p><img src="image-20210320104740607.png" alt="image-20210320104740607"></p><p><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-outgoing-webhook#2-create-a-method-to-verify-the-outgoing-webhook-hmac-token">文件</a></p><p><a href="https://youtu.be/EqodWkS5PYM?t=358">Live Demo</a></p></li><li><p>參考文件</p><ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-outgoing-webhook">Create an outgoing webhook</a></li></ul></li></ul></li></ul><h2 id="Connectors"><a class="header-anchor" href="#Connectors"> </a>Connectors</h2><p>允許使用者訂閱服務的通知訊息</p><ul><li>會有對應的 https 網址</li></ul><h2 id="Incoming-webhooks"><a class="header-anchor" href="#Incoming-webhooks"> </a>Incoming webhooks</h2><ul><li><p>最單純的 Connector</p></li><li><p>Incoming webhooks 是根據團隊開放使用 (新增應用程式)</p></li><li><p>Independent HTTPs messaging support: present clear &amp; consisten messages with cards</p></li><li><p>Secure resource definition: message included as JSON paylods; prevents malicious code injetion</p></li><li><p>Actionable messaging support: send messages as text-based or rich cards</p></li><li><p>Markdown Support，不支援 HTML 語法</p></li><li><p>範例回應樣式</p><p><img src="image-20210320110740485.png" alt="image-20210320110740485"></p><p><img src="image-20210320110803618.png" alt="image-20210320110803618"></p></li><li><p>參考資料</p><ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using">Sending messages to connectors and webhooks</a></li></ul></li></ul><h2 id="Office-365-Connectors"><a class="header-anchor" href="#Office-365-Connectors"> </a>Office 365 Connectors</h2><ul><li>可以被打包上架的 Connectors</li><li>可以有自己的設定頁面</li><li>messages type: Office 365 Connector cards</li><li>可以收集安裝 Connectors 的設定資料以供後續發訊息使用</li><li>參考資料<ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-creating">Creating Office 365 Connectors for Microsoft Teams</a></li></ul></li></ul><h2 id="Rate-limiting-for-Connectors"><a class="header-anchor" href="#Rate-limiting-for-Connectors"> </a>Rate limiting for Connectors</h2><table><thead><tr><th style="text-align:left">Time (seconds)</th><th style="text-align:left">Maximum allowed requests</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left">60</td></tr><tr><td style="text-align:left">3600</td><td style="text-align:left">100</td></tr><tr><td style="text-align:left">7200</td><td style="text-align:left">150</td></tr><tr><td style="text-align:left">86400</td><td style="text-align:left">1800</td></tr></tbody></table><ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/rate-limit#best-practices">Best Practice Doc</a></li></ul><h1 id="Cards"><a class="header-anchor" href="#Cards"> </a>Cards</h1><p>卡片訊息在 Teams 內很常見，而 Adaptive cards 算是比較新的卡片格式，但在 Connectors、Bots、Messaging extension 下分別有些限制</p><ul><li>Adaptive cards in incoming webhooks 的限制<ul><li>All native adaptive card schema elements, except <code>Action.Submit</code>, are fully supported.</li><li>The supported actions are <a href="https://adaptivecards.io/explorer/Action.OpenUrl.html"><strong>Action.OpenURL</strong></a>, <a href="https://adaptivecards.io/explorer/Action.ShowCard.html"><strong>Action.ShowCard</strong></a>, and <a href="https://adaptivecards.io/explorer/Action.ToggleVisibility.html"><strong>Action.ToggleVisibility</strong></a>.</li></ul></li><li>更多卡片類型及限制的說明文件: <a href="https://docs.microsoft.com/zh-tw/microsoftteams/platform/task-modules-and-cards/cards/cards-reference#adaptive-card">網址</a></li></ul><p>目前的狀態: Adaptive Cards 遇上 Incoming webhooks 的支援度基本上是不能用的，支援完整度最好的是 Bots in Teams，只能透過 message 附件的方式包進去，可是這樣子的作法畫面就很醜 (<a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using#the-flow-for-sending-adaptive-cards-via-an-incoming-webhook-is-as-follows">範例</a>)，可惜</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/what-are-webhooks-and-connectors">文件: What are webhooks and connectors?</a></li><li><a href="https://www.youtube.com/watch?v=EqodWkS5PYM">影片: Connect web services to Microsoft Teams with webhooks and Office 3655 Connectors</a></li><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/task-modules-and-cards/what-are-cards">文件: Cards</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Teams 可透過 webhook and connectors 的方式來做訊息的交換，但對於每一種的使用及限制真的很不熟，所以將透過此筆記來釐清其中的關係&lt;/p&gt;</summary>
    
    
    
    <category term="Teams" scheme="http://blog.kevinyang.net/categories/Teams/"/>
    
    
    <category term="Teams" scheme="http://blog.kevinyang.net/tags/Teams/"/>
    
  </entry>
  
  <entry>
    <title>[Azure DevOps] Pipeline 建置時跨 Repo 情境下該如何處理呢?</title>
    <link href="http://blog.kevinyang.net/2021/03/17/azure-devops-build-pipeline-resource/"/>
    <id>http://blog.kevinyang.net/2021/03/17/azure-devops-build-pipeline-resource/</id>
    <published>2021-03-17T14:51:35.000Z</published>
    <updated>2021-06-14T05:54:39.519Z</updated>
    
    <content type="html"><![CDATA[<p>在工作上遇到一個情況就是一個系統的前後端是分在兩個 Repository 的，但前端的檔案需要被包進後端的程式中做後續的發佈，就在思考該如何處理這個問題，終於想出一個還不錯簡單的方式</p><span id="more"></span><p>在 Pipeline 建置時，可以將打包出來的結果 Publish 成 Pipeline Artifact，yaml 的寫法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">artifactName:</span> <span class="string">&#x27;ngApp&#x27;</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)/dist/front-website&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>artifactName</code> : 打包出來的檔案名稱</li><li><code>PathtoPublish</code>：要打包的檔案資料夾位置</li></ul><p>到後端的 Repository 的 Pipeline 的 Task 中，可以利用 <code>Download Pipeline Artifact</code> 的 Task 來下載某一個專案下的某一個 Pipeline 發佈的 Artifact，這一個任務可以將編譯建置後的結果跨專案的使用，真的很方便</p><p><img src="image-20210317230842327.png" alt="image-20210317230842327"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadPipelineArtifact@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download Pipeline Artifact&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">buildType:</span> <span class="string">specific</span></span><br><span class="line">    <span class="attr">project:</span> <span class="string">&#x27;&lt;project-id&gt;&#x27;</span></span><br><span class="line">    <span class="attr">definition:</span> <span class="number">13</span></span><br><span class="line">    <span class="attr">specificBuildWithTriggering:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allowPartiallySucceededBuilds:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">artifactName:</span> <span class="string">ngAPP</span></span><br><span class="line">    <span class="attr">targetPath:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)/backend/wwwroot&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>targetPath</code> 下載目標路徑</li></ul><p>由於可能會有先後順序的問題，這時候也可以搭配 Triggers 中的 <code>Build completion </code> 來做到 Pipeline 間的連動</p><p><img src="image-20210317231019398.png" alt="image-20210317231019398"></p><p>途中的設定執行的順序是，當 <code>FrontCode</code> Pipeline 完成後會觸發執行 <code>PipelineTest</code> 的 Pipeline 。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在工作上遇到一個情況就是一個系統的前後端是分在兩個 Repository 的，但前端的檔案需要被包進後端的程式中做後續的發佈，就在思考該如何處理這個問題，終於想出一個還不錯簡單的方式&lt;/p&gt;</summary>
    
    
    
    <category term="Azure DevOps" scheme="http://blog.kevinyang.net/categories/Azure-DevOps/"/>
    
    
    <category term="Azure DevOps" scheme="http://blog.kevinyang.net/tags/Azure-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>[Rust] Rust 學習筆記 - 基本概念篇</title>
    <link href="http://blog.kevinyang.net/2021/02/23/rust-note-2/"/>
    <id>http://blog.kevinyang.net/2021/02/23/rust-note-2/</id>
    <published>2021-02-23T02:20:10.000Z</published>
    <updated>2021-06-14T05:54:39.519Z</updated>
    
    <content type="html"><![CDATA[<p>繼上篇猜數字的練習範例中，大致上可以感受到 Rust 這語言的個性，但還是得知道語言的型別、語法及流程控制的方法，所以這邊筆記會針對 <a href="https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html">Command Programming Concepts 章節</a> 的內容擷取我覺得需要記下來的重點</p><span id="more"></span><h1 id="Variables-and-Mutability"><a class="header-anchor" href="#Variables-and-Mutability"> </a>Variables and Mutability</h1><ul><li><p>變數宣告後，預設皆為不可改變的狀態 (Immutable)，如果需要一個可以被改變的變數，必須加上 <code>mut</code> 的關鍵字</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// immutable</span></span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// 這行會出錯</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> b = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;can be changed&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>變數的型別必須要一致，直到重新被宣告 <a href="https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#shadowing">(Shadowing)</a></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> a = a.len(); </span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> b = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line">b = b.len(); <span class="comment">// 型別不一致，會發生錯誤</span></span><br></pre></td></tr></table></figure></li><li><p>variables 與 constants 的差異有以下幾點</p><ul><li>constants 不能使用 <code>mut</code></li><li>constants 使用 <code>const</code> 宣告而且必須指定型別，範例: <code>const MAX_POINTS: u32 = 100_000;</code></li><li>constants 只能被宣告一次</li></ul></li></ul><h1 id="Data-Types"><a class="header-anchor" href="#Data-Types"> </a>Data Types</h1><h2 id="Scalar-Type"><a class="header-anchor" href="#Scalar-Type"> </a>Scalar Type</h2><p>Rust 的標準型別 (scalar type) 有四種: <code>integers</code>、<code>floating-point numbers</code>、 <code>Booleans</code>、<code>characters</code>。</p><h3 id="Integer"><a class="header-anchor" href="#Integer"> </a>Integer</h3><ul><li><p>分為 signed (<code>i</code>) 和 unsigned (<code>u</code>)</p></li><li><p>有 8-bit、16-bit、32-bit、64-bit、128-bit、arch 長度</p></li><li><p>8 ~ 128 bit 的範圍算法說明如下</p><blockquote><p>Each signed variant can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive, where <em>n</em> is the number of bits that variant uses. So an <code>i8</code> can store numbers from -(27) to 27 - 1, which equals -128 to 127. Unsigned variants can store numbers from 0 to 2n - 1, so a <code>u8</code> can store numbers from 0 to 28 - 1, which equals 0 to 255.</p><p>Additionally, the <code>isize</code> and <code>usize</code> types depend on the kind of computer your program is running on: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.</p></blockquote></li><li><p>可以使 <code>_</code> 來增加數字的閱讀性，例如: <code>100_000</code> 等同於 <code>100000</code></p></li></ul><h3 id="floating-point"><a class="header-anchor" href="#floating-point"> </a>floating-point</h3><ul><li><code>f32</code> 和 <code>f64</code> 兩種 floating-point type</li><li>根據 <code>IEEE-754</code>  標準 (<a href="https://zh.wikipedia.org/wiki/IEEE_754">wiki</a>)</li></ul><h3 id="Boolean"><a class="header-anchor" href="#Boolean"> </a>Boolean</h3><ul><li><p>如一般使用 <code>true</code> 和 <code>false</code> 兩種結果，大小為 <code>1 byte</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> f: <span class="built_in">bool</span> = <span class="literal">false</span>; <span class="comment">// with explicit type annotation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Character"><a class="header-anchor" href="#Character"> </a>Character</h3><ul><li><p>基本文字型使用雙引號包起來，而 <code>character</code> 使用單引號，跟 C# 一樣</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> z = <span class="string">&#x27;ℤ&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> heart_eyed_cat = &#x27;😻&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Compound-Types"><a class="header-anchor" href="#Compound-Types"> </a>Compound Types</h2><h3 id="Tuple"><a class="header-anchor" href="#Tuple"> </a>Tuple</h3><ul><li><p>宣告方式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tup1 = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> tup2: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解構 tuple</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tup = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接使用 index 讀取 tuple</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> five_hundred = x.<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> six_point_four = x.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> one = x.<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="Array"><a class="header-anchor" href="#Array"> </a>Array</h3><ul><li><p>宣告方式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>; <span class="number">5</span>]; <span class="comment">// [1,1,1,1,1]</span></span><br></pre></td></tr></table></figure></li><li><p>with 型別及長度宣告</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: [<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure></li><li><p>從 0 開始，超過陣列長度會造成錯誤</p></li></ul><h1 id="Functions"><a class="header-anchor" href="#Functions"> </a>Functions</h1><ul><li><p>宣告方式: <code>fn</code></p></li><li><p>命名方式: <code>snake case</code>，範例: <code>fn another_function()&#123; &#125;</code></p></li><li><p>Function parameters 的設定方式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    another_function(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">another_function</span></span>(x: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Expression in Function</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y = &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>&#123; &#125;</code> 來建立一個新的 scope</li><li>line 6: 沒有分號結尾，視為 <code>expression</code> 會被 return</li></ul></li><li><p>Function 需回傳 <code>values</code> 或是 <code>expressions</code>，沒有 <code>void</code> 的概念</p></li></ul><h1 id="Comments"><a class="header-anchor" href="#Comments"> </a>Comments</h1><ul><li><p>註解符號為 : <code>//</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// I’m feeling lucky today</span></span><br><span class="line">    <span class="keyword">let</span> lucky_number = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Control-Flow"><a class="header-anchor" href="#Control-Flow"> </a>Control Flow</h1><p>流程控制有 <code>if</code> 和 <code>loops</code> 兩種方法</p><h2 id="if"><a class="header-anchor" href="#if"> </a>if</h2><ul><li><p>語法，<code>if</code> 後面的條件不需要使用 <code>( )</code> 包起來</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有 <code>else if</code> 這種東西</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 4&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 3&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 2&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is not divisible by 4, 3, or 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以搭配 <code>let</code> 使用，但回傳的型別必須一致</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of number is: &#123;&#125;&quot;</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="loops"><a class="header-anchor" href="#loops"> </a>loops</h2><p>有三種 loops 的方式: <code>loop</code>、<code>while</code>、<code>for</code></p><ul><li><p>loop</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The result is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);</span><br><span class="line"></span><br><span class="line">        number -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;LIFTOFF!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> a.iter() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>Rust 沒有像 C# 擁有很多不同型別或是程式語法，但這些都算是基本需要掌握的，如果有地方理解錯誤也請讓我知道，感謝</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;繼上篇猜數字的練習範例中，大致上可以感受到 Rust 這語言的個性，但還是得知道語言的型別、語法及流程控制的方法，所以這邊筆記會針對 &lt;a href=&quot;https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html&quot;&gt;Command Programming Concepts 章節&lt;/a&gt; 的內容擷取我覺得需要記下來的重點&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="http://blog.kevinyang.net/categories/Rust/"/>
    
    
    <category term="Rust" scheme="http://blog.kevinyang.net/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>[Rust] Rust 學習筆記 - 跟著文件寫猜數字</title>
    <link href="http://blog.kevinyang.net/2021/02/19/rust-note-1/"/>
    <id>http://blog.kevinyang.net/2021/02/19/rust-note-1/</id>
    <published>2021-02-19T03:51:01.000Z</published>
    <updated>2021-06-14T05:54:39.515Z</updated>
    
    <content type="html"><![CDATA[<p>Rust 這語言關注他有一段時間，但都沒有真正的動手寫看看，趁年後還沒那麼多事情時，來學習一下，或許日後可以用他來寫 web assembly</p><span id="more"></span><h1 id="環境安裝"><a class="header-anchor" href="#環境安裝"> </a>環境安裝</h1><p>Rust 的執行環境基本上就依<a href="https://www.rust-lang.org/zh-TW/learn/get-started">官網</a>的安裝步驟做就可以了，如果是 Windows 的環境，當在執行 <code>cargo build</code> 時，有可能會出現 <code>link.exe</code> 找不到的錯誤訊息，通常這個問題跟電腦環境沒裝 <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">C++ Build Tools</a> 有關</p><p>開發工具的部分，選擇性還蠻多的，以我目前的環境，是直接選擇 VSCode + Rust 擴充套件進行學習環境</p><h1 id="建立新專案"><a class="header-anchor" href="#建立新專案"> </a>建立新專案</h1><p>安裝完 Rust 後，會有 <code>cargo</code> 的命令可以使用，跟 Angular CLI 的 <code>ng</code> 類似，可以用他來打包、開發、等工作</p><p><img src="image-20210219120226176.png" alt="image-20210219120226176"></p><p>建立專案的指令是 <code>cargo new &lt;project_name&gt;</code>，建立完成後專案資料夾下會有這些檔案</p><p><img src="image-20210219120327131.png" alt="image-20210219120327131"></p><ul><li><code>Cargo.toml</code> : 用來記載專案資訊，相依套件等資訊，類似 <code>package.json</code></li><li><code>Cargo.lock</code>: 用來紀錄套件安裝等資訊，類似 <code>package-lock.json</code></li><li><code>target</code> 資料夾：建置後(<code>cargo build</code>) 的輸出資料夾</li><li><code>src</code> 資料夾：程式放置位置</li><li><code>src/main.rs</code> : 主要進入點</li></ul><p>想執行程式時，使用 <code>cargo run</code> 的指令就可以了</p><h1 id="猜數字-官方範例"><a class="header-anchor" href="#猜數字-官方範例"> </a>猜數字(官方範例)</h1><ul><li><a href="https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html">文件位置</a></li></ul><p>當打開 <code>main.rs</code> 檔案，裡面只有一個 function ，這個是程式的初始執行的方法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要從 console 上接收到使用者輸入得資料時，就要使用到內建的 <code>io</code> 方法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io; <span class="comment">// 引用 package, library, namespace (就那個意思)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Guess the number!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">    io::stdin()</span><br><span class="line">        .read_line(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .expect(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>line 8: 建立一個可以被變更的文字型態的變數，</p><ul><li>使用 <code>mut</code> 關鍵字設定變數為可變更的</li></ul></li><li><p>line 10 ~ 11: 接收使用者輸入得資料，並存放到 <code>guess</code> 變數中</p><ul><li>使用 <code>&amp;</code> 建立一個 reference</li></ul></li><li><p>line 12: 需處理當 <code>read_line</code> 失敗時需要回傳什麼結果，這是 Rust 處理 Exception 的方式，可以思考成這樣</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> guess;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   guess = Console.Readline();   </span><br><span class="line">&#125; catch &#123;</span><br><span class="line">   guess = <span class="string">&quot;Failed to read line&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>必須處理 Error 的部分，不然 compiler 會跟你抱怨</p><p><img src="image-20210219135909589.png" alt="image-20210219135909589"></p></li></ul></li><li><p>line 14: 使用 <code>&#123;&#125;</code> 來空出變數要顯示的位置，當有多個時，會依序顯示</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x: &#123;&#125;, y: &#123;&#125;&quot;</span>, x, y);</span><br></pre></td></tr></table></figure></li></ul><h2 id="引用套件"><a class="header-anchor" href="#引用套件"> </a>引用套件</h2><p>使用其他相依套件的方式很簡單，就在 <code>Cargo.toml</code> 中將套件名稱與版本設定上去即可，類似 npm 的概念，rust 也有自己的 package 管理機制，可以上 <a href="https://crates.io/">crates.io</a> 搜尋套件，&lt;在這練習範例中，使用了 <code>rand</code> 這一個 package</p><p><img src="image-20210219140316275.png" alt="image-20210219140316275"></p><p>搜尋後再右邊有 install 的方式，只要複製貼到 <code>Cargo.toml</code> 的 <code>dependencies</code> 下即可</p><h2 id="使用套件"><a class="header-anchor" href="#使用套件"> </a>使用套件</h2><p>在 <code>main.rs</code>  裡要建立一個介於 1~ 100 的亂數，寫法如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> secret_number = rand::thread_rng().gen_range(<span class="number">1</span>..<span class="number">100</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.rs/rand/0.8.3/rand/trait.Rng.html">gen_range API</a></li></ul><p>※備註一，Rust  不喜歡沒有使用的東西留在程式碼內，如果有那種沒使用的變數發生時，編譯時會出現下面的警示訊息</p><p><img src="image-20210219141201642.png" alt="image-20210219141201642"></p><h2 id="比較數字"><a class="header-anchor" href="#比較數字"> </a>比較數字</h2><p>Rust 有內建比較數字的方法 <code>std::cmp::Ordering;</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">let</span> secret_number = rand::thread_rng().gen_range(<span class="number">1</span>..<span class="number">100</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">match</span> guess.cmp(&amp;secret_number) &#123;</span><br><span class="line">        Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">        Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">        Ordering::Equal =&gt; <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>match</code> : Pattern Matching 的關鍵字 (很常出現的一種寫法)</p></li><li><p><code>secret_number</code> 為數字型，<code>guess</code> 為文字型，line 10 的比較會跳出錯誤訊息</p><p><img src="image-20210219141553593.png" alt="image-20210219141553593"></p></li></ul><p>基於上面的原因，我們需要將 guess 轉換成數字型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> guess: <span class="built_in">u32</span> = guess.trim().parse().expect(<span class="string">&quot;Please type a number!&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>trim()</code> 會將 <code>\n</code> 或是空白給清除掉</p></li><li><p><code>parse()</code> 將文字轉換成數字，由於宣告變數時，有指定型別, <code>: u32</code> ，所以會轉換成 <code>u32</code> 型別</p></li><li><p><code>expect(....)</code>，當發生 exception 時，會顯示裡面的文字</p><p><img src="image-20210219142058900.png" alt="image-20210219142058900"></p></li></ul><h2 id="持續進行遊戲直到猜對"><a class="header-anchor" href="#持續進行遊戲直到猜對"> </a>持續進行遊戲直到猜對</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">       io::stdin()</span><br><span class="line">           .read_line(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">           .expect(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> guess: <span class="built_in">u32</span> = guess.trim().parse().expect(<span class="string">&quot;Please type a number!&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">match</span> guess.cmp(&amp;secret_number) &#123;</span><br><span class="line">           Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">           Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">           Ordering::Equal =&gt; &#123;</span><br><span class="line">               <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>line 1：新增 loop 迴圈</li><li>line 17: 猜對時跳出迴圈</li></ul><p>上面的寫法針對 <code>line 12</code> 輸入不是可轉換成數字的情況下，還是會被迫結束程式，所以要修正一下寫法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> guess: <span class="built_in">u32</span> = <span class="keyword">match</span> guess.trim().parse() &#123;</span><br><span class="line">            <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>再次透過 pattern match 的方式，調整遇到 <code>Err</code> 時要做的行為，這樣就不會因為轉換失敗造成程式被強制中斷了。</p><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>到這邊是官網提供的一個算是完整的簡單範例，也可以從中觀察到 Rust 這語言的特性，自己在第一次寫時並沒有遇到太卡的地方，很多觀念都可以從其他語言延用，可以算是一個嚴謹但又不會讓你寫得很囉唆。第一印象是好的</p><p>接下來就會往更深層去瞭解這語言的其他部分，例如型別、流程控制、跟程式結構等，下篇見。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rust 這語言關注他有一段時間，但都沒有真正的動手寫看看，趁年後還沒那麼多事情時，來學習一下，或許日後可以用他來寫 web assembly&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="http://blog.kevinyang.net/categories/Rust/"/>
    
    
    <category term="Rust" scheme="http://blog.kevinyang.net/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Angular 在 VSCode Extension (Webview) 內做頁面切換</title>
    <link href="http://blog.kevinyang.net/2021/02/05/angular-vscode-extension-page-navigate/"/>
    <id>http://blog.kevinyang.net/2021/02/05/angular-vscode-extension-page-navigate/</id>
    <published>2021-02-05T16:22:09.000Z</published>
    <updated>2021-06-14T05:54:39.515Z</updated>
    
    <content type="html"><![CDATA[<p>繼上一篇環境基礎設定完成後，這篇先來筆記一下要如何做頁面切換，有哪些地方需要留意的</p><span id="more"></span><p>首先要知道在 VSCode Extension Webview 的環境並不是一個 web server 而是檔案，所以我們就不能使用預設的路由設定模式，而必須改為 hash 模式 (<code>HashLocationStrategy</code>)，設定方式如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> RouterModule.forRoot(routes, &#123;</span><br><span class="line">      <span class="attr">useHash</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>在到 <code>index.html</code> 的地方，調整 base 路徑的部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到這邊基本上 Angular 的路由就可以正常運作了</p><p>或許會問說，那 LazyLoading 的部分呢? 很抱歉，在 VSCode Extension Webview 內是不能使用的，所以 <code>loadChildren</code> 的寫法要改成這樣</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> ProductModule &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;繼上一篇環境基礎設定完成後，這篇先來筆記一下要如何做頁面切換，有哪些地方需要留意的&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 把 Angular 網站放到 VSCode Extension 內</title>
    <link href="http://blog.kevinyang.net/2021/02/05/ng-vscode-extension-webview/"/>
    <id>http://blog.kevinyang.net/2021/02/05/ng-vscode-extension-webview/</id>
    <published>2021-02-05T13:33:51.000Z</published>
    <updated>2021-06-14T05:54:39.515Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天我分享了一個 YouTube  的影片，該影片大致上的內容是如何使用 VSCode Extension 使用 Webview API，既然可以用 webview 的方式來呈現網頁，那顯示一個 Angular App 也是很正常的事情，但環境設定上要怎麼調整呢? 這篇筆記就來整理一下</p><span id="more"></span><h1 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h1><ol><li><p>首先先建立一個 Angular 的專案 (這應該不用講要用什麼指令了吧)</p></li><li><p>打開 <code>package.json</code>，新增以下內容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;publisher&quot;</span>: <span class="string">&quot;publisher-name&quot;</span>,</span><br><span class="line"><span class="string">&quot;engines&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;vscode&quot;</span>: <span class="string">&quot;^1.53.0&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;categories&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;Other&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;activationEvents&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;onCommand:angular-webview.start&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;./dist/ext-src/extension.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;contributes&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;commands&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;angular-webview.start&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Open Webview&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;category&quot;</span>: <span class="string">&quot;CK&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>categories</code> 、<code>activationEvents</code>、<code>contributes</code> 的區塊內容請配合 VS Code Extension 開發規範做調整</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="attr">&quot;@types/vscode&quot;</span>: <span class="string">&quot;^1.53.0&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;vscode-test&quot;</span>: <span class="string">&quot;^1.5.0&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;vsce&quot;</span>: <span class="string">&quot;^1.83.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改完後記得要執行 <code>npm install</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">...</span><br><span class="line">   <span class="comment">// 修改</span></span><br><span class="line">   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;ng build --prod --output-hashing none &amp;&amp; tsc -p tsconfig.extension.json&quot;</span>,</span><br><span class="line">   <span class="comment">// 新增指令</span></span><br><span class="line">   <span class="attr">&quot;package&quot;</span>: <span class="string">&quot;vsce package&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;vscode:prepublish&quot;</span>: <span class="string">&quot;npm run build &amp;&amp; tsc -p tsconfig.extension.json&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>.vscodeignore</code> 檔案 (可根據狀況調整)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">!dist</span><br><span class="line">.vscode</span><br><span class="line">e2e</span><br><span class="line">ext-src</span><br><span class="line">node_modules</span><br><span class="line">src</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>.vscode</code> 資料夾並新增 <code>launch.json</code> 檔案</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Run Extension&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;extensionHost&quot;</span>,</span><br><span class="line"><span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line"><span class="attr">&quot;args&quot;</span>: [</span><br><span class="line"><span class="string">&quot;--extensionDevelopmentPath=$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;outFiles&quot;</span>: [</span><br><span class="line"><span class="string">&quot;$&#123;workspaceFolder&#125;/out/**/*.js&quot;</span></span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>ext-src</code> 資料夾，並在該資料夾下新增 <code>extension.ts</code> 檔案</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vscode <span class="keyword">from</span> <span class="string">&#x27;vscode&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Manages webview panels</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebPanel</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Track the currently panel. Only allow a single panel to exist at a time.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> currentPanel: WebPanel | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> viewType = <span class="string">&#x27;angular&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> panel: vscode.WebviewPanel;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> extensionPath: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> builtAppFolder: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> disposables: vscode.Disposable[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="title">createOrShow</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    extensionPath: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: vscode.ExtensionContext</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> column = vscode.window.activeTextEditor</span><br><span class="line">      ? vscode.window.activeTextEditor.viewColumn</span><br><span class="line">      : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a panel, show it.</span></span><br><span class="line">    <span class="comment">// Otherwise, create angular panel.</span></span><br><span class="line">    <span class="keyword">if</span> (WebPanel.currentPanel) &#123;</span><br><span class="line">      WebPanel.currentPanel.panel.reveal(column);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      WebPanel.currentPanel = <span class="keyword">new</span> WebPanel(</span><br><span class="line">        extensionPath,</span><br><span class="line">        column || vscode.ViewColumn.One,</span><br><span class="line">        context</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WebPanel.currentPanel;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    extensionPath: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    column: vscode.ViewColumn,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: vscode.ExtensionContext</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.extensionPath = extensionPath;</span><br><span class="line">    <span class="built_in">this</span>.builtAppFolder = <span class="string">&#x27;dist/cklab&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create and show a new webview panel</span></span><br><span class="line">    <span class="built_in">this</span>.panel = vscode.window.createWebviewPanel(</span><br><span class="line">      WebPanel.viewType,</span><br><span class="line">      <span class="string">&#x27;My Angular Webview&#x27;</span>,</span><br><span class="line">      column,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Enable javascript in the webview</span></span><br><span class="line">        <span class="attr">enableScripts</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// And restrict the webview to only loading content from our extension&#x27;s `media` directory.</span></span><br><span class="line">        <span class="attr">localResourceRoots</span>: [</span><br><span class="line">          vscode.Uri.file(path.join(<span class="built_in">this</span>.extensionPath, <span class="built_in">this</span>.builtAppFolder)),</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the webview&#x27;s initial html content</span></span><br><span class="line">    <span class="built_in">this</span>.panel.webview.html = <span class="built_in">this</span>._getHtmlForWebview(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Listen for when the panel is disposed</span></span><br><span class="line">    <span class="comment">// This happens when the user closes the panel or when the panel is closed programatically</span></span><br><span class="line">    <span class="built_in">this</span>.panel.onDidDispose(<span class="function">() =&gt;</span> <span class="built_in">this</span>.dispose(), <span class="literal">null</span>, <span class="built_in">this</span>.disposables);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle messages from the webview</span></span><br><span class="line">    <span class="built_in">this</span>.panel.webview.onDidReceiveMessage(</span><br><span class="line">      <span class="function">(<span class="params">message: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (message.command) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;alert&#x27;</span>:</span><br><span class="line">            vscode.window.showErrorMessage(message.text);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="built_in">this</span>.disposables</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">dispose</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    WebPanel.currentPanel = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clean up our resources</span></span><br><span class="line">    <span class="built_in">this</span>.panel.dispose();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.disposables.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> x = <span class="built_in">this</span>.disposables.pop();</span><br><span class="line">      <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        x.dispose();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns html of the start page (index.html)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">_getHtmlForWebview</span>(<span class="params">context: vscode.ExtensionContext</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// path to dist folder</span></span><br><span class="line">    <span class="keyword">const</span> appDistPath = path.join(<span class="built_in">this</span>.extensionPath, <span class="built_in">this</span>.builtAppFolder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get path to index.html file from dist folder</span></span><br><span class="line">    <span class="keyword">const</span> indexPath = path.join(appDistPath, <span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read index file from file system</span></span><br><span class="line">    <span class="keyword">let</span> indexHtml = fs.readFileSync(indexPath, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Get all link prefixed by href or src</span></span><br><span class="line">    <span class="keyword">const</span> matchLinks = <span class="regexp">/(href|src)=&quot;([^&quot;]*)&quot;/g</span>;</span><br><span class="line">    <span class="comment">// 2. Transform the result of the regex into a vscode&#x27;s URI format</span></span><br><span class="line">    <span class="keyword">const</span> toUri = <span class="function">(<span class="params">_: <span class="built_in">string</span>, prefix: <span class="string">&#x27;href&#x27;</span> | <span class="string">&#x27;src&#x27;</span>, link: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// For &lt;base href=&quot;#&quot; /&gt;</span></span><br><span class="line">      <span class="keyword">if</span> (link === <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>=&quot;<span class="subst">$&#123;link&#125;</span>&quot;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// For scripts &amp; links</span></span><br><span class="line">      <span class="keyword">const</span> _path = path.join(appDistPath, link);</span><br><span class="line">      <span class="keyword">const</span> uri = vscode.Uri.file(_path);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>=&quot;<span class="subst">$&#123;<span class="built_in">this</span>.panel.webview[<span class="string">&#x27;asWebviewUri&#x27;</span>](uri)&#125;</span>&quot;`</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update the base URI tag</span></span><br><span class="line">    indexHtml = indexHtml.replace(matchLinks, toUri);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indexHtml;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) </span>&#123;</span><br><span class="line">  context.subscriptions.push(</span><br><span class="line">    vscode.commands.registerCommand(<span class="string">&#x27;angular-webview.start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      WebPanel.createOrShow(context.extensionPath, context);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this method is called when your extension is deactivated</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deactivate</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>line 49: 請根據自己 Angular 專案輸出資料夾路徑做調整</li><li>line 138: 跟著 <code>package.json</code> 的指令註冊一起調整命令名稱</li></ul></li><li><p>新增 <code>tsconfig.extension.json</code> 檔案</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;ext-src&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;.vscode/*&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>到這邊應算是完成最基本的 VS Code Extension 環境的設定，如何看是否有設定成功，可以執行以下步驟</p><ol><li><p>開 Terminal 執行 <code>npm run build</code></p></li><li><p>按 F5 進入 Debug 模式，這時候會開啟一個新的 VS Code 視窗</p></li><li><p>執行所設定的啟動指令，以這個範例來說就是 <code>CK: Open Webview</code></p><p><img src="image-20210205215343080.png" alt="image-20210205215343080"></p></li><li><p>成功後的顯示畫面</p><p><img src="image-20210205215408533.png" alt="image-20210205215408533"></p></li></ol><p>至於在 VS Code Webview 的環境下，Angular 開發上有什麼需要注意的事項，這部分就留到下一篇筆記了</p><h1 id="打包套件"><a class="header-anchor" href="#打包套件"> </a>打包套件</h1><p>如果都寫完要發布成可以安裝的擴充套件時，可以執行 <code>npm run package</code> 就會產生一個 <code>VSIX</code> 的安裝檔案</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://www.youtube.com/watch?v=a5DX5pQ9p5M">How to Code a VSCode Extension</a></li><li><a href="https://code.visualstudio.com/api/get-started/your-first-extension">VSCode Extension Get Started</a></li><li><a href="https://code.visualstudio.com/api/extension-guides/webview">VSCode Webview API</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前幾天我分享了一個 YouTube  的影片，該影片大致上的內容是如何使用 VSCode Extension 使用 Webview API，既然可以用 webview 的方式來呈現網頁，那顯示一個 Angular App 也是很正常的事情，但環境設定上要怎麼調整呢? 這篇筆記就來整理一下&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Flutter] 設定 Firebase Messaging 功能</title>
    <link href="http://blog.kevinyang.net/2021/01/13/flutter-firebase-message-setup/"/>
    <id>http://blog.kevinyang.net/2021/01/13/flutter-firebase-message-setup/</id>
    <published>2021-01-13T04:18:55.000Z</published>
    <updated>2021-06-14T05:54:39.511Z</updated>
    
    <content type="html"><![CDATA[<p>網路上面關於設定 Flutter 的文章真的很亂，也不知道哪一個版本能用，乾脆自己整理一篇目前可以使用的版本，還好越晚使用，設定步驟就越簡單</p><span id="more"></span><h1 id="設定-Firebase-專案"><a class="header-anchor" href="#設定-Firebase-專案"> </a>設定 Firebase 專案</h1><p>需要從 Firebase 專案中下載 google-services.json 的檔案，以供後續套件使用，取得步驟如下</p><ol><li>進入 Firebase 專案</li><li>選擇專案設定<img src="image-20210113123819276.png" alt="image-20210113123819276"></li><li>新增應用程式 (Android)後，即可取得 <code>google-services.json</code> 的檔案</li><li>將該檔案複製到 Flutter 專案下的 <code>android/app</code> 資料夾下<img src="image-20210113124016995.png" alt="image-20210113124016995"></li></ol><h1 id="Flutter-Firebase-Message-套件"><a class="header-anchor" href="#Flutter-Firebase-Message-套件"> </a>Flutter Firebase Message 套件</h1><h2 id="套件安裝"><a class="header-anchor" href="#套件安裝"> </a>套件安裝</h2><p>於 <code>pubspec.yaml</code> 檔內新增下列套件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">firebase_core:</span> <span class="string">^0.7.0</span></span><br><span class="line"><span class="attr">firebase_messaging:</span> <span class="number">8.0</span><span class="number">.0</span><span class="string">-dev.13</span></span><br></pre></td></tr></table></figure><h2 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h2><p>為了要讓 Flutter 在建置時，能載入剛剛下載的 <code>google-services.json</code> 檔案，還需調整以下檔案</p><ol><li><p><code>android/build.gradle</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    // ... other dependencies</span><br><span class="line">    // 新增這一行</span><br><span class="line">    classpath &#x27;com.google.gms:google-services:4.3.3&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/android/app/build.gradle</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#x27;com.android.application&#x27;</span><br><span class="line">// 新增這一行</span><br><span class="line">apply plugin: &#x27;com.google.gms.google-services&#x27;</span><br></pre></td></tr></table></figure></li></ol><p>※如果 Flutter 專案的 Flutter 版本是 1.12 以上，則不需要額外新增任何檔案，如果是低於該版本，請依此<a href="https://firebase.flutter.dev/docs/messaging/overview#flutter-android-embedding-v1">文件</a>說明新增檔案</p><h2 id="程式碼設定"><a class="header-anchor" href="#程式碼設定"> </a>程式碼設定</h2><p>Flutter 內的程式碼要增加的項目如下</p><ol><li><p>main.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">await</span> Firebase.initializeApp();</span><br><span class="line">  <span class="comment">// Set the background messaging handler early on, as a named top-level function</span></span><br><span class="line">  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);</span><br><span class="line">  <span class="comment">/// <span class="markdown">Create an Android Notification Channel.</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">這裡有多使用套件: flutter<span class="emphasis">_local_</span>notifications: ^3.0.3</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">We use this channel in the <span class="code">`AndroidManifest.xml`</span> file to override the</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">default FCM channel to enable heads up notifications.</span></span></span><br><span class="line">  <span class="keyword">await</span> flutterLocalNotificationsPlugin</span><br><span class="line">      .resolvePlatformSpecificImplementation&lt;</span><br><span class="line">          AndroidFlutterLocalNotificationsPlugin&gt;()</span><br><span class="line">      ?.createNotificationChannel(channel);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Update the iOS foreground notification presentation options to allow</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">heads up notifications.</span></span></span><br><span class="line">  <span class="keyword">await</span> FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(</span><br><span class="line">    alert: <span class="keyword">true</span>,</span><br><span class="line">    badge: <span class="keyword">true</span>,</span><br><span class="line">    sound: <span class="keyword">true</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; _firebaseMessagingBackgroundHandler(RemoteMessage message) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// If you&#x27;re going to use other Firebase services in the background, such as Firestore,</span></span><br><span class="line">  <span class="comment">// make sure you call `initializeApp` before using other Firebase services.</span></span><br><span class="line">  <span class="keyword">await</span> Firebase.initializeApp();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Handling a background message <span class="subst">$&#123;message.messageId&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在啟動的第一個 widget 檔案內</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  <span class="comment">// 當 app 處於開啟狀態時，監聽推撥訊息用</span></span><br><span class="line">  FirebaseMessaging.onMessage.listen((RemoteMessage message) <span class="keyword">async</span> &#123;</span><br><span class="line">    RemoteNotification notification = message.notification;</span><br><span class="line">    AndroidNotification android = message.notification?.android;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (notification != <span class="keyword">null</span> &amp;&amp; android != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> flutterLocalNotificationsPlugin.<span class="keyword">show</span>(</span><br><span class="line">          notification.hashCode,</span><br><span class="line">          notification.title,</span><br><span class="line">          notification.body,</span><br><span class="line">          NotificationDetails(</span><br><span class="line">            android: AndroidNotificationDetails(</span><br><span class="line">              channel.id,</span><br><span class="line">              channel.name,</span><br><span class="line">              channel.description,</span><br><span class="line">              icon: <span class="string">&#x27;launch_background&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">          ));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">   </span><br><span class="line">  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;A new onMessageOpenedApp event was published!&#x27;</span>);</span><br><span class="line">    <span class="comment">// 這邊可以寫在 app 關閉狀態，點通知訊息時，打開 app 後要做的事情</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>當然還有其他可以設定的部分，更多細節可以參閱<a href="https://firebase.flutter.dev/docs/messaging/usage/">這裡的文件</a></p><h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1><ul><li><p><a href="https://firebase.flutter.dev/docs/messaging/usage/">Firebase Cloud Messaging</a></p></li><li><p><a href="https://github.com/FirebaseExtended/flutterfire/tree/master/packages/firebase_messaging/firebase_messaging">Firebase_messaging_plugin</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;網路上面關於設定 Flutter 的文章真的很亂，也不知道哪一個版本能用，乾脆自己整理一篇目前可以使用的版本，還好越晚使用，設定步驟就越簡單&lt;/p&gt;</summary>
    
    
    
    <category term="Flutter" scheme="http://blog.kevinyang.net/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="http://blog.kevinyang.net/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>[Dart] List 的操作 reduce 與 fold</title>
    <link href="http://blog.kevinyang.net/2020/12/27/dart-reduce-fold/"/>
    <id>http://blog.kevinyang.net/2020/12/27/dart-reduce-fold/</id>
    <published>2020-12-27T15:26:33.000Z</published>
    <updated>2021-06-14T05:54:39.511Z</updated>
    
    <content type="html"><![CDATA[<p>每一個語言對於清單的操作，一直都是必須要掌握的能力之一，在 dart 裡面的 List 的操作方法常見又有幾種，而其中的 reduce 與 fold 這兩個操作方式，對我來說是有點特殊的，在此筆記一下</p><span id="more"></span><h1 id="List-的操作"><a class="header-anchor" href="#List-的操作"> </a>List   的操作</h1><h2 id="reduce"><a class="header-anchor" href="#reduce"> </a>reduce</h2><p>Dart 裡的 <code>reduce</code> 行為跟 <code>JavaScript</code> 的有點差異，先看程式碼再來說明</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> result = list.reduce((value, element) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + element;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result);</span><br></pre></td></tr></table></figure><ol><li><p><code>reduce</code> 的過程中，資料操作的型別是不能做更換的，表示 value 與 element 的型別會是一致</p></li><li><p>如果想要操作得資料與想要取的的結果型態不一樣時，要先做轉型後(搭配 map) 再操作</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> carts = [</span><br><span class="line">    Cart(productName: <span class="string">&quot;蘋果&quot;</span>, price: <span class="number">50</span>, amount: <span class="number">1</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;蔬菜&#x27;</span>, price: <span class="number">20</span>, amount: <span class="number">2</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;雞肉&#x27;</span>, price: <span class="number">60</span>, amount: <span class="number">3</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;雞蛋&#x27;</span>, price: <span class="number">10</span>, amount: <span class="number">10</span>),</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> totalPrice = carts.map((element)=&gt; element.amount * element.price)</span><br><span class="line">   .reduce((value,element)=&gt; value+element);</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">print</span>(totalPrice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> productName;</span><br><span class="line">  <span class="built_in">num</span> price;</span><br><span class="line">  <span class="built_in">num</span> amount;</span><br><span class="line">  Cart(&#123;<span class="keyword">this</span>.productName, <span class="keyword">this</span>.price, <span class="keyword">this</span>.amount&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>method  介面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E reduce(</span><br><span class="line">  E combine(E value, E element)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="fold"><a class="header-anchor" href="#fold"> </a>fold</h2><p>上面的第二個範例寫法，如果寫習慣 JavaScript 的人會覺得很囉唆，但其實 JavaScript 的 reduce 等於 Dart 的 fold，一樣先來看程式碼</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> carts = [</span><br><span class="line">    Cart(productName: <span class="string">&quot;Apple&quot;</span>, price: <span class="number">50</span>, amount: <span class="number">1</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;蔬菜&#x27;</span>, price: <span class="number">20</span>, amount: <span class="number">2</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;雞肉&#x27;</span>, price: <span class="number">60</span>, amount: <span class="number">3</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;雞蛋&#x27;</span>, price: <span class="number">10</span>, amount: <span class="number">10</span>),</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> totalPrice = carts.fold(<span class="number">0</span>, (prev, element) =&gt; prev + element.price * element.amount);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(totalPrice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> productName;</span><br><span class="line">  <span class="built_in">num</span> price;</span><br><span class="line">  <span class="built_in">num</span> amount;</span><br><span class="line">  Cart(&#123;<span class="keyword">this</span>.productName, <span class="keyword">this</span>.price, <span class="keyword">this</span>.amount&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>fold  的初始值是放在第一個位置</p></li><li><p>後面的使用方式就和 JavaScript  的 reduce 一樣了</p></li><li><p>method 介面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> fold(</span><br><span class="line">  initialValue,</span><br><span class="line">  <span class="built_in">dynamic</span> combine(previousValue, E element)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>這兩個用法都有他試用的情境，根據情境挑適合的方法使用，可以讓程式碼乾淨許多</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;每一個語言對於清單的操作，一直都是必須要掌握的能力之一，在 dart 裡面的 List 的操作方法常見又有幾種，而其中的 reduce 與 fold 這兩個操作方式，對我來說是有點特殊的，在此筆記一下&lt;/p&gt;</summary>
    
    
    
    <category term="Flutter" scheme="http://blog.kevinyang.net/categories/Flutter/"/>
    
    
    <category term="Flutter" scheme="http://blog.kevinyang.net/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>如何做出自動版號的效果</title>
    <link href="http://blog.kevinyang.net/2020/11/02/how-to-auto-version/"/>
    <id>http://blog.kevinyang.net/2020/11/02/how-to-auto-version/</id>
    <published>2020-11-02T07:29:50.000Z</published>
    <updated>2021-06-14T05:54:39.511Z</updated>
    
    <content type="html"><![CDATA[<p>最近再弄一個版號顯示的功能，但我真的好懶得手動去改版號，有什麼自動方便的作法呢? 以下是我找到比較方便的方式</p><span id="more"></span><h1 id="NET-Core"><a class="header-anchor" href="#NET-Core"> </a>.NET Core</h1><p>在以往的 <code>.NET 專案</code> 有一個記錄版本的檔案，叫做 <code>Assemblyinfo.cs</code>，裡面會記錄著專案的相關資訊包含作者、公司、產品名稱、及版本資訊等，目前可以透過 IDE 編輯專案屬性 -&gt; 編輯套件資訊</p><p><img src="image-20201102154101905.png" alt="image-20201102154101905"></p><p>如果要自動編版本號碼，這裡有一個透過編輯 <code>csproj</code> 來動態改變版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Build</span>&gt;</span>$([System.DateTime]::op_Subtraction($([System.DateTime]::get_Now().get_Date()),$([System.DateTime]::new(2000,1,1))).get_TotalDays())<span class="tag">&lt;/<span class="name">Build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Revision</span>&gt;</span>$([MSBuild]::Divide($([System.DateTime]::get_Now().get_TimeOfDay().get_TotalSeconds()), 2).ToString(&#x27;F0&#x27;))<span class="tag">&lt;/<span class="name">Revision</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Version</span>&gt;</span>1.$(Build).$(Revision)<span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;build&gt; </code> 、<code>&lt;Revision&gt;</code> 自定義變數供 <code>&lt;Version&gt;</code> 使用，這邊的規則可以依個人喜好修改</li><li><code>&lt;Version&gt;</code> 設定產品版本</li></ul><p><img src="image-20201102161627599.png" alt="image-20201102161627599"></p><p>對應產生的 <code>Assemblyinfo.cs</code> 內容為</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// &lt;auto-generated&gt;</span></span><br><span class="line"><span class="comment">//     這段程式碼是由工具產生的。</span></span><br><span class="line"><span class="comment">//     執行階段版本:4.0.30319.42000</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，</span></span><br><span class="line"><span class="comment">//     變更將會遺失。</span></span><br><span class="line"><span class="comment">// &lt;/auto-generated&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute(<span class="meta-string">&quot;4a3c5c00-20b2-4c11-90d1-d01d65382565&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyCompanyAttribute(<span class="meta-string">&quot;WebApplication4&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyConfigurationAttribute(<span class="meta-string">&quot;Debug&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyFileVersionAttribute(<span class="meta-string">&quot;1.7611.29271.0&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyInformationalVersionAttribute(<span class="meta-string">&quot;1.7611.29271&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyProductAttribute(<span class="meta-string">&quot;WebApplication4&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyTitleAttribute(<span class="meta-string">&quot;WebApplication4&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyVersionAttribute(<span class="meta-string">&quot;1.7611.29271.0&quot;</span>)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由 MSBuild WriteCodeFragment 類別產生。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Angular"><a class="header-anchor" href="#Angular"> </a>Angular</h1><p>有時候我們也想要在前端網站給予設定版本，除了手動修改外，其實也可以透過 <code>npm version</code> 來完成，雖然有點奇怪，但還是可以運作啦</p><h2 id="npm-version"><a class="header-anchor" href="#npm-version"> </a>npm version</h2><p>這功能原本是用來更新 npm package 版本使用，指令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=&lt;prerelease-id&gt;] | from-git]</span><br></pre></td></tr></table></figure><p>這指令會同步更新 <code>package.json</code> 的 <code>version</code> 欄位值，這邊就快速列出我所使用的 script</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;prebuild&quot;</span>: <span class="string">&quot;npm --no-git-tag-version version patch&quot;</span>,</span><br><span class="line"><span class="string">&quot;postversion&quot;</span>: <span class="string">&quot;git add package.json package-lock.json &amp;&amp; git commit -mv%npm_package_version%&quot;</span>,</span><br></pre></td></tr></table></figure><ul><li><code>prebuild</code> 這行為會發生在執行 <code>npm build</code> 之前<ul><li><code>--no-git-tag-version</code> 設定 <code>npm version</code> 不要自動 commit 且不要加上 tag</li><li><code>npm version patch</code> : 只更新 patch 版號</li></ul></li><li><code>postversion</code> 這動作會發生在 <code>npm version</code> 之後<ul><li>加入並 commit 異動檔案</li></ul></li></ul><p>當 <code>package.json</code> 內的 <code>version</code> 處理完後，就可以在 <code>environment.ts</code> 的地方引用 <code>package.json</code> 了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;</span><br><span class="line">  <span class="attr">version</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../package.json&#x27;</span>).version,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由於這邊有使用到 <code>node</code> 的 <code>required</code> ，在 <code>tsconfig.app.json</code> 及 <code>tsconfig.spec.json</code> 的 <code>compilerOptions.types</code> 內要加上 <code>node</code>，並安裝 <code>@types/node</code> 的型別定義檔，剩下就跟原來使用 environment 的方式一樣了</p><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>目前是我處理自動版號的方式，如果有其他更好的作法，也歡迎分享給我</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://edi.wang/post/2018/9/27/get-app-version-net-core">Get App Version in .NET Core</a></li><li><a href="https://docs.npmjs.com/cli/v6/commands/npm-version">npm version</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近再弄一個版號顯示的功能，但我真的好懶得手動去改版號，有什麼自動方便的作法呢? 以下是我找到比較方便的方式&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>[EF Core] 新增一個計算欄位 (Computed Column)</title>
    <link href="http://blog.kevinyang.net/2020/09/17/efcore-add-computed-column/"/>
    <id>http://blog.kevinyang.net/2020/09/17/efcore-add-computed-column/</id>
    <published>2020-09-17T04:23:28.000Z</published>
    <updated>2021-06-14T05:54:39.511Z</updated>
    
    <content type="html"><![CDATA[<p>當使用 EF Code First 設計資料表時，如果有一個欄位是要設定計算公式時，程式碼該如何寫呢?</p><span id="more"></span><p>以下幾個步驟</p><ol><li><p>在欄位上標記欄位屬於 <code>computed</code> 性質</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.Computed)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> CalculatedField &#123;</span><br><span class="line">    <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>migration</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-migration xxxx-xxxx</span><br></pre></td></tr></table></figure></li><li><p>打開剛建立的 <code>migration</code> 檔案並找到剛剛所指定的欄位</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">migrationBuilder.CreateTable(</span><br><span class="line">                name: <span class="string">&quot;Demo&quot;</span>,</span><br><span class="line">                columns: table =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 刪除原本產生的欄位</span></span><br><span class="line">                   CalculatedField = table.Column&lt;<span class="built_in">int</span>&gt;(nullable: <span class="literal">false</span>, defaultValue: <span class="number">0</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">);</span><br><span class="line">migrationBuilder.Sql(<span class="string">&quot;ALTER TABLE dbo.Demo ADD CalculatedField AS ([你的計算規則])&quot;</span>);      </span><br></pre></td></tr></table></figure></li><li><p>打完收工</p></li></ol><p>以上是我目前的作法，能正常運作。如果有更好的寫法，也歡迎在下面留言分享討論</p><h1 id="額外補充"><a class="header-anchor" href="#額外補充"> </a>額外補充</h1><p>如果想要透過 EF Migration 來新增 Stored Procedure 的話，可以這樣子寫</p><ol><li><p>將 storeㄎ procedure 的 SQL 檔案放在某資料夾下，並將 SQL 檔案設定為 <code>內嵌資源 (EmbeddedResource)</code></p></li><li><p>新增一個空的 migration 後加入以下的程式碼</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> assembly = Assembly.GetExecutingAssembly();</span><br><span class="line">            <span class="keyword">var</span> resourceNames =</span><br><span class="line">                        assembly.GetManifestResourceNames().                        </span><br><span class="line">                        Where(str=&gt; str.Contains(<span class="string">&quot;[sp file name].sql&quot;</span>));</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> resourceName <span class="keyword">in</span> resourceNames)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (Stream stream = assembly.GetManifestResourceStream(resourceName))</span><br><span class="line">                <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span> StreamReader(stream))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> sql = reader.ReadToEnd();</span><br><span class="line">                    migrationBuilder.Sql(sql);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Down</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            migrationBuilder.Sql(<span class="string">&quot;DROP PROCEDURE [SP Name]&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>當進行 database 更新時，就會將該 SP 新增到資料庫中</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;當使用 EF Code First 設計資料表時，如果有一個欄位是要設定計算公式時，程式碼該如何寫呢?&lt;/p&gt;</summary>
    
    
    
    <category term="Entity Framework" scheme="http://blog.kevinyang.net/categories/Entity-Framework/"/>
    
    
    <category term="Entity Framework" scheme="http://blog.kevinyang.net/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 如何寫具有非同步驗證的 Angular 自訂表單物件</title>
    <link href="http://blog.kevinyang.net/2020/08/29/angular-custom-form-control-with-async-valiator/"/>
    <id>http://blog.kevinyang.net/2020/08/29/angular-custom-form-control-with-async-valiator/</id>
    <published>2020-08-29T12:14:05.000Z</published>
    <updated>2021-06-14T05:54:39.511Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天有人在論壇問了一個自訂表單非同步驗證的問題，這問題是當一個自訂表單物件內有非同步驗證時，外部使用者無法正確地取得該表單物件的驗證狀態，這問題我一開始想說應該不難，但也花了我快一天的時間才釐清要怎麼寫一個具有非同步驗證的自訂表單物件，方法如下</p><span id="more"></span><h1 id="同步驗證"><a class="header-anchor" href="#同步驗證"> </a>同步驗證</h1><p>我們都知道 Angular <code>FormControl</code> 的驗證有分同步與分同步兩種方式，下面是同步驗證的寫法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-user&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./user.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./user.component.css&quot;</span>],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: NG_VALUE_ACCESSOR,</span><br><span class="line">      <span class="attr">useExisting</span>: UserComponent,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: NG_VALIDATORS,</span><br><span class="line">      <span class="attr">useExisting</span>: UserComponent,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserComponent</span> <span class="title">implements</span> <span class="title">OnInit</span>, <span class="title">ControlValueAccessor</span>, <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> FormControl(<span class="string">&quot;&quot;</span>, [Validators.required]);</span><br><span class="line">  onChange: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  onTouched: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName.valueChanges.subscribe(&#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.onChange) &#123;</span><br><span class="line">          <span class="built_in">this</span>.onChange(value);</span><br><span class="line">          <span class="built_in">this</span>.onTouched();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="title">writeValue</span>(<span class="params">obj: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName.patchValue(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">registerOnChange</span>(<span class="params">fn: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.onChange = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">registerOnTouched</span>(<span class="params">fn: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.onTouched = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName.errors;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分同步驗證"><a class="header-anchor" href="#分同步驗證"> </a>分同步驗證</h1><p>非同步驗證在 <code>FormControl</code> 的驗證狀態是 <code>PENDING</code>  &lt;–&gt; <code>VALID/INVALID</code> 間切換，由於非同步與同步要實作的方法都是同一個，所以當非同步與同步驗證同時存在時，要以非同步為準，不然整個驗證都只會取得同步驗證的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">    ...</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: NG_ASYNC_VALIDATORS,</span><br><span class="line">      <span class="attr">useExisting</span>: UserComponent,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserComponent</span> <span class="title">implements</span> <span class="title">OnInit</span>, <span class="title">ControlValueAccessor</span>, <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> FormControl(<span class="string">&quot;&quot;</span>, [Validators.required], [<span class="built_in">this</span>.asyncValidator]);</span><br><span class="line">  onChange: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  onTouched: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">asyncValidator</span>(<span class="params">c: AbstractControl</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">of</span>(c.value === <span class="string">&quot;123&quot;</span>).pipe(</span><br><span class="line">      delay(<span class="number">500</span>),</span><br><span class="line">      map(<span class="function"><span class="params">b</span> =&gt;</span> (b ? <span class="literal">null</span> : &#123; <span class="attr">nomatch</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName.errors;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一旦註冊成 <code>NG_ASYNC_VALIDATORS</code> 時，外部使用這一個自訂 <code>FormControl</code> 的 status 就會處在 <code>PENDING</code> ，而其原因是因為 <code>validate</code>  的方法沒有回傳一個完成的訊號，基於這一個理由，我們需要調整 <code>validate</code> 的實作方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName.statusChanges.pipe(      </span><br><span class="line">      filter(<span class="function"><span class="params">status</span> =&gt;</span> status !== <span class="string">&quot;PENDING&quot;</span>),</span><br><span class="line">      map(<span class="function"><span class="params">status</span> =&gt;</span> <span class="built_in">this</span>.firstName.errors),      </span><br><span class="line">      first()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>完整程式碼如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ControlValueAccessor,</span><br><span class="line">  Validator,</span><br><span class="line">  NG_VALUE_ACCESSOR,</span><br><span class="line">  NG_VALIDATORS,</span><br><span class="line">  NG_ASYNC_VALIDATORS,</span><br><span class="line">  Validators,</span><br><span class="line">  AbstractControl</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/forms&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormControl &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/forms&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter, tap, map, delay, first &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/operators&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-user&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./user.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./user.component.css&quot;</span>],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: NG_VALUE_ACCESSOR,</span><br><span class="line">      <span class="attr">useExisting</span>: UserComponent,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: NG_ASYNC_VALIDATORS,</span><br><span class="line">      <span class="attr">useExisting</span>: UserComponent,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserComponent</span> <span class="title">implements</span> <span class="title">OnInit</span>, <span class="title">ControlValueAccessor</span>, <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> FormControl(<span class="string">&quot;&quot;</span>, [Validators.required], [<span class="built_in">this</span>.asyncValidator]);</span><br><span class="line">  onChange: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  onTouched: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">asyncValidator</span>(<span class="params">c: AbstractControl</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">of</span>(c.value === <span class="string">&quot;123&quot;</span>).pipe(</span><br><span class="line">      delay(<span class="number">500</span>),</span><br><span class="line">      map(<span class="function"><span class="params">b</span> =&gt;</span> (b ? <span class="literal">null</span> : &#123; <span class="attr">nomatch</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName.valueChanges.subscribe(&#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.onChange) &#123;</span><br><span class="line">          <span class="built_in">this</span>.onChange(value);</span><br><span class="line">          <span class="built_in">this</span>.onTouched();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">writeValue</span>(<span class="params">obj: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.firstName.patchValue(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">registerOnChange</span>(<span class="params">fn: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.onChange = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">registerOnTouched</span>(<span class="params">fn: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.onTouched = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">validate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName.statusChanges.pipe(</span><br><span class="line">      filter(<span class="function"><span class="params">status</span> =&gt;</span> status !== <span class="string">&quot;PENDING&quot;</span>),</span><br><span class="line">      map(<span class="function"><span class="params">status</span> =&gt;</span> <span class="built_in">this</span>.firstName.errors),      </span><br><span class="line">      first()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><p><a href="https://stackblitz.com/edit/angular-ivy-qdvfuj?file=src%2Fapp%2Fuser%2Fuser.component.ts">stackbliz</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前幾天有人在論壇問了一個自訂表單非同步驗證的問題，這問題是當一個自訂表單物件內有非同步驗證時，外部使用者無法正確地取得該表單物件的驗證狀態，這問題我一開始想說應該不難，但也花了我快一天的時間才釐清要怎麼寫一個具有非同步驗證的自訂表單物件，方法如下&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[容器] 如何寫 Dockerfile</title>
    <link href="http://blog.kevinyang.net/2020/08/03/docker-101-note-3/"/>
    <id>http://blog.kevinyang.net/2020/08/03/docker-101-note-3/</id>
    <published>2020-08-03T05:36:31.000Z</published>
    <updated>2021-06-14T05:54:39.511Z</updated>
    
    <content type="html"><![CDATA[<p>前面兩篇筆記都在整理如何操作 docker container，要怎麼製作最重要的 Image 呢? 我會在這篇整理出來</p><span id="more"></span><p>要建立出一個可以用來執行的 Image，就必須透過 <code>Dockerfile</code> 來設定，<code>Dockerfile</code> 是一個類似文字檔的設定檔，docker 會依 <code>Dockerfile</code> 內的設定建立出一個可以部屬到 Registry 的 Image，其設定內容其實不複雜，以下為簡單語法介紹</p><h1 id="Dockerfile-結構與使用語法"><a class="header-anchor" href="#Dockerfile-結構與使用語法"> </a>Dockerfile 結構與使用語法</h1><p>如之前所說，Image 所能執行的 OS 必須跟底層 docker server 跑的 OS 一樣或是使用同種 Kernel，所以當 docker server 是跑在 Linux base 上，那 Dockerfile 能跑的環境也只能是 Linux base。下面是一個簡單的範例</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> python /app/app.py</span></span><br></pre></td></tr></table></figure><ul><li><code>FROM</code> Image 將執行的環境，這邊可以使用別人建立好的 Base Image，通常是作業系統，例如 ubuntu, centos 或是 <code>core/aspnet</code> 的執行環境</li><li><code>COPY</code> 複製本機檔案到 Image 裡，本機根目錄的認定為 <code>Dockerfile</code> 所處的目錄</li><li><code>RUN</code> 執行 Linux 指令</li><li><code>CMD</code> 當執行 <code>docker run</code> 時會執行的指令，如果有個 <code>CMD</code> 只有最後一行會生效</li></ul><p>如果能看懂跟理解上面的 <code>Dockerfile</code>，那基本上就只是 <code>Dockerfile</code> 語法及環境設定的熟悉度了，下面再列出幾個常用的指令</p><ul><li><p><code>WORKDIR</code> 設定當前的工作目錄</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br></pre></td></tr></table></figure></li><li><p><code>LABEL</code> Image 的 Metadata 資訊</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">&quot;這是LABEL的範例&quot;</span> version=<span class="string">&quot;1.0&quot;</span> owner=<span class="string">&quot;CK&#x27;s Notepad&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>ENV</code> 設定環境變數</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;KEY&gt; &lt;Value&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>ENTRYPOINT</code> 作用跟 <code>CMD</code> 一樣，差異在他不會被 <code>docker run &lt;image&gt; &lt;command&gt;</code> 給覆蓋掉</p></li><li><p><code>EXPOSE</code> 宣告 Container 運行時對外有哪些 Port 可以使用 (宣告而已)</p></li></ul><h1 id="實際-Dockerfile-範例"><a class="header-anchor" href="#實際-Dockerfile-範例"> </a>實際 Dockerfile 範例</h1><h2 id="asp-net-core"><a class="header-anchor" href="#asp-net-core"> </a><a href="http://asp.net">asp.net</a> core</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class="number">3.0</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy csproj and restore as distinct layers</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> *.sln .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> aspnetapp/*.csproj ./aspnetapp/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dotnet restore</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy everything else and build app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> aspnetapp/. ./aspnetapp/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app/aspnetapp</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dotnet publish -c Release -o out</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class="number">3.0</span> AS runtime</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /app/aspnetapp/out ./</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;dotnet&quot;</span>, <span class="string">&quot;aspnetapp.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="Angular"><a class="header-anchor" href="#Angular"> </a>Angular</h2><ul><li><p>單純可以執行的</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> /dist/app-to-run-inside-docker /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li><p>在 docker 環境內建置部屬 (multiple-stage)</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stage 1</span></span><br><span class="line"><span class="keyword">FROM</span> node:alpine AS my-app-build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install &amp;&amp; npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stage 2</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=my-app-build /app/dist/app-to-run-inside-docker /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="建置-Dockerfile"><a class="header-anchor" href="#建置-Dockerfile"> </a>建置 Dockerfile</h1><p>要建置 Image 透過指令就可以完成了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line">// 範例</span><br><span class="line">docker build -t angular-app .</span><br></pre></td></tr></table></figure><ul><li><code>-t</code> : 上 Tag</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面兩篇筆記都在整理如何操作 docker container，要怎麼製作最重要的 Image 呢? 我會在這篇整理出來&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/categories/Docker/"/>
    
    <category term="Container" scheme="http://blog.kevinyang.net/categories/Container/"/>
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/tags/Docker/"/>
    
    <category term="Container" scheme="http://blog.kevinyang.net/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>[容器] 容器技術之 Docker 篇 - 指令操作</title>
    <link href="http://blog.kevinyang.net/2020/07/31/docker-101-note-2/"/>
    <id>http://blog.kevinyang.net/2020/07/31/docker-101-note-2/</id>
    <published>2020-07-31T09:10:13.000Z</published>
    <updated>2021-06-14T05:54:39.511Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇整理了概念，這一篇來整理常用的指令，雖然也有 GUI 操作 docker 的服務，但透過指令還是比較快的</p><span id="more"></span><h1 id="Image-相關"><a class="header-anchor" href="#Image-相關"> </a>Image 相關</h1><ul><li><p>列出本機端擁有的 images</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li><code>-a</code>：列出完整的映像檔層次資訊。每個映像檔是由不同層次組成的，我們會在稍後說明。</li><li><code>-q</code>：只列出映像檔ID。這在做映像檔批次處理時很方便。</li><li><code>-tree</code>：官方文件已經沒有這個參數，但還是可以用。列出映像檔不同層次之間的樹狀關係。</li></ul></li><li><p>下載 Image</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;image name&gt;</span><br></pre></td></tr></table></figure></li><li><p>刪除 Image</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &lt;image name&gt;</span><br></pre></td></tr></table></figure></li><li><p>幫 Image 上 Tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br></pre></td></tr></table></figure></li><li><p>建置 Image 檔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build</span><br></pre></td></tr></table></figure></li><li><p>上傳 Image 檔</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push</span><br></pre></td></tr></table></figure></li></ul><h1 id="Container-相關"><a class="header-anchor" href="#Container-相關"> </a>Container 相關</h1><h2 id="執行時的操作指令"><a class="header-anchor" href="#執行時的操作指令"> </a>執行時的操作指令</h2><ul><li><p>建立 Container 並執行指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker create [OPTIONS] IMAGE [COMMAND] [ARG...] // 建立但不會啟動執行 Container </span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...] // 建立且啟動執行 Container</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> : 背景執行</li><li><code>-i</code>: 輸入</li><li><code>-t</code>: 輸出</li><li><code>--name</code>: 給 Container 名稱</li><li><code>-p [本機 Port]:[Container 內部 Port]</code>: Port mapping</li><li><code>-v</code>: 掛載  volumes</li><li><code>-rm</code>: 執行結束後自動移除</li><li>相關參數請參閱 <a href="https://docs.docker.com/engine/reference/commandline/create/#options">Docker docs</a></li></ul></li><li><p>刪除執行中的 Container，<strong>但 Container 還是存在，只是死了。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill CONTAINER</span><br></pre></td></tr></table></figure><ul><li><code>--signal, -s</code> : 送訊號到 Container</li></ul></li><li><p>移除 Container(停止或運行中都行)，Container就從這世上消失了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm CONTAINER</span><br></pre></td></tr></table></figure><ul><li><code>--force, -f</code> : 強制移除</li><li><code>--link, -l</code> 移除特定連結</li><li><code>--volumnes, -v</code> 移除掛載在 Container 上的匿名 volumes</li></ul></li><li><p>暫停執行中的 Container，<strong>仍暫有記憶體停，服務不中斷</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></li><li><p>恢復暫停中的 Container</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></li><li><p>停止執行中的 Container，<strong>但不暫有記憶體，服務中斷</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li><code>--time, -t</code> 幾秒後停止 Container</li></ul></li><li><p>啟動停止中的 Container</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li><code>--attach, -a</code> : Attach STDOUT/STDERR and forward signals</li><li><code>--interactive, -i</code>: Attach container’s STDIN</li></ul></li><li><p>重新啟動Container</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li><code>--time, -t</code>: 幾秒後重啟 Container</li></ul></li><li><p>讓 Container 暫停直到 Container 停止為止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker wait CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></li><li><p>更名 Container</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename CONTAINER NEW_NAME</span><br></pre></td></tr></table></figure></li></ul><h2 id="狀態"><a class="header-anchor" href="#狀態"> </a>狀態</h2><ul><li>inspect：檢查 Container 的狀態</li><li>stats：查看 Container 的 CPU、記憶體及網路使用</li><li>port：查看 Container 的通訊埠使用</li><li>ps：查看 Container 使用狀態<ul><li><code>-a</code> 列出所有的 Container</li></ul></li><li>top：查看 Container 在主系統中的記憶體使用</li><li>dpid：查看 Container 的 pid</li></ul><h2 id="執行時的操作"><a class="header-anchor" href="#執行時的操作"> </a>執行時的操作</h2><ul><li><p>attach：連接 Container 的標準輸出輸入端</p><ul><li>使用<code>-d</code>或<code>-id</code>參數：離開 Container 時該 Container 停止。</li><li>使用<code>-td</code>參數：離開 Container 時該 Container 繼續在背景。</li></ul></li><li><p>exec：在外部向 Container 內執行指令</p></li><li><p>denter：進入 Container</p></li><li><p>logs：將 Container 內的輸出顯示到螢幕上</p></li><li><p>cp: 複製檔案到 Container</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /path/to/file1 DOCKER_ID:/path/to/file2</span><br></pre></td></tr></table></figure></li></ul><h1 id="Registry-相關"><a class="header-anchor" href="#Registry-相關"> </a>Registry 相關</h1><ul><li><p>登入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login // 預設指向 public docker hub</span><br><span class="line">docker loing &lt;ip&gt; // 登入私有 docker registry</span><br></pre></td></tr></table></figure></li><li><p>登出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure></li><li><p>搜尋</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search &lt;search word&gt;</span><br><span class="line">// 查詢星星數條件</span><br><span class="line">docker search -s &lt;n start&gt; &lt;search word&gt;</span><br></pre></td></tr></table></figure><ul><li>n 是限定須有幾顆星以上的 image 才會被搜尋出來</li></ul></li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.docker.com/engine/reference/commandline/docker/">docker base command</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇整理了概念，這一篇來整理常用的指令，雖然也有 GUI 操作 docker 的服務，但透過指令還是比較快的&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/categories/Docker/"/>
    
    <category term="Container" scheme="http://blog.kevinyang.net/categories/Container/"/>
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/tags/Docker/"/>
    
    <category term="Container" scheme="http://blog.kevinyang.net/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>[容器] 容器技術之 Docker 篇 - 概念整理</title>
    <link href="http://blog.kevinyang.net/2020/07/30/docker-101-note-1/"/>
    <id>http://blog.kevinyang.net/2020/07/30/docker-101-note-1/</id>
    <published>2020-07-30T05:42:30.000Z</published>
    <updated>2021-06-14T05:54:39.507Z</updated>
    
    <content type="html"><![CDATA[<p>閃避多年的主題，容器技術，到最後還是閃不到，只好乖乖的面對它。首先先針對比較常見的容器技術 Docker，將一些比較概念性的東西整理在這邊筆記內。</p><span id="more"></span><h1 id="與-Virtual-Machine-的差異"><a class="header-anchor" href="#與-Virtual-Machine-的差異"> </a>與 Virtual Machine 的差異</h1><p>Docker 與虛擬機器(Virtual Machine)的差異</p><ul><li>Docker 容器與容器間共用相同的 OS Kernel，虛擬機器是各自擁有自己的 OS，這表示 Docker Server 如果是跑 Linux 版本(通常也是這個)，就不能跑 Windows 的容器。虛擬機器只是共用硬體資源，所以在 VM Server 上就可以並存 Linux base 和 Windows Base</li><li>在同樣的硬體資源下，Docker 可以跑比較多單位</li><li>複製環境的速度，Docker 比較快，因為容器所需要的 Image 是可以透過指令的方式從某一個地方抓下來就可以執行，而 VM 也是可以做到，但因為 VM 的檔案比較大，搬移需要比較長的時間</li></ul><p><img src="1_gVNbunchCV5wXgnwlT-iGg.jpeg" alt="1_gVNbunchCV5wXgnwlT-iGg"></p><h1 id="概念"><a class="header-anchor" href="#概念"> </a>概念</h1><h2 id="名詞"><a class="header-anchor" href="#名詞"> </a>名詞</h2><ul><li>Image: 透過 <code>dockerfile</code> 編譯出來的 Image，唯獨屬性，就想成他是一片 CD</li><li>Container: 執行 Image 的容器，就像 CD-ROM，一個 Image 可以創造出很多 Container，Container 具有讀寫的能力，但由於 Image 是唯讀，所以要操作保留的資料應該要放在另外一個地方, <strong>Volume</strong></li><li>Volume: 可以想成容器的外掛硬碟，用來保留資料使用</li><li>Registry: 放 Image 的地方，有公用的服務，例如 Docker Hub，當然也可以自己架</li></ul><h2 id="安裝"><a class="header-anchor" href="#安裝"> </a>安裝</h2><p>Windows 10 的電腦可以安裝下載 <a href="https://www.docker.com/products/docker-desktop">Docker desktop for Windows</a> 的穩定版，但須具有 Hyper-V 的功能才能啟動 Docker 的服務。如果能安裝 <a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10">WSL 2</a> 及 <a href="https://www.microsoft.com/zh-tw/p/windows-terminal/9n0dx20hk701">Windows Terminal</a> 的，之後的操作上會更加友善</p><p>至於其他作業系統的安裝方式，官網或是網路上有很多文件，這邊就不多贅述</p><h2 id="網路"><a class="header-anchor" href="#網路"> </a>網路</h2><p><strong>None</strong>: 沒有網路功能，簡單說就是一個沒有網卡的 Container</p><p><strong>Bridget (Default)</strong>，Docker 內部的虛擬網路，除了可以對外連線外，也提供內部各 Container 間的聯繫</p><p><img src="bridge_network.jpg" alt="bridge_network"></p><p><strong>Host Mode</strong>: 建立與 Docker Server Host 一樣等級的 network interface</p><p><img src="none-mode.png" alt="none-mode"></p><p><strong>Container Mode</strong>: Container 共用同一個 Network Interface</p><p><img src="container-mode.png" alt="container-mode"></p><p><strong>Overlay</strong>: Container 可以與跑在不同 Docker Server 上的 Container 做溝通，類似 VPN Site to Site 的概念?</p><h1 id="Overview-流程圖"><a class="header-anchor" href="#Overview-流程圖"> </a>Overview 流程圖</h1><p><img src="screen-shot-2020-03-19-at-9.01.25-am.png" alt="screen-shot-2020-03-19-at-9.01.25-am"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;閃避多年的主題，容器技術，到最後還是閃不到，只好乖乖的面對它。首先先針對比較常見的容器技術 Docker，將一些比較概念性的東西整理在這邊筆記內。&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/categories/Docker/"/>
    
    <category term="Container" scheme="http://blog.kevinyang.net/categories/Container/"/>
    
    
    <category term="Docker" scheme="http://blog.kevinyang.net/tags/Docker/"/>
    
    <category term="Container" scheme="http://blog.kevinyang.net/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>[Office] 如何在簡報上做出圓圖效果</title>
    <link href="http://blog.kevinyang.net/2020/07/28/office-ppt-tips-crop-image/"/>
    <id>http://blog.kevinyang.net/2020/07/28/office-ppt-tips-crop-image/</id>
    <published>2020-07-28T06:43:39.000Z</published>
    <updated>2021-06-14T05:54:39.495Z</updated>
    
    <content type="html"><![CDATA[<p>這一個技巧應該很多人都知道了，但我是最近需要用到才學會的，但不管怎樣還是分享一下，如何在簡報上做出圓圖效果，而這一個技巧適用於 Office PowerPoint 與 Google 簡報，以下是操作步驟。</p><span id="more"></span><h1 id="Office-PowerPoint"><a class="header-anchor" href="#Office-PowerPoint"> </a>Office PowerPoint</h1><ol><li><p>加入一張圖片，可以用複製、拖拉、或是手動加入都可以</p></li><li><p>選擇圖片，這時候上方的選單會多出跟圖片編輯相關的選項</p><p><img src="image-20200728144934186.png" alt="image-20200728144934186"></p></li><li><p>選擇【圖片格式】</p><p><img src="image-20200728145014134.png" alt="image-20200728145014134"></p></li><li><p>裁剪的功能是我們要的，但這之前先介紹裁剪原本的功能</p><ol><li><p>可以裁剪我們想要的圖片範圍，點選【裁剪】後圖片的邊界會顯示如下圖圓圈標示起來的樣式</p><p><img src="image-20200728145333770.png" alt="image-20200728145333770"></p></li><li><p>透過移動邊際來決定裁剪後要顯示的範圍</p><p><img src="image-20200728145420151.png" alt="image-20200728145420151"></p></li><li><p>確定後只會留下明亮的部分</p></li></ol></li><li><p>除了預設功能外，【裁剪】下方的箭頭打開還有更多的功能，本篇文章的圓圖顯示就是要利用這邊的功能</p><p><img src="image-20200728145539002.png" alt="image-20200728145539002"></p></li></ol><h2 id="顯示圓圖"><a class="header-anchor" href="#顯示圓圖"> </a>顯示圓圖</h2><ol><li><p>選擇裁剪成圖形，選擇橢圓形，(沒有圓形的選項)</p><p><img src="image-20200728145657272.png" alt="image-20200728145657272"></p><p><img src="image-20200728145738420.png" alt="image-20200728145738420"></p></li><li><p>設定長寬比例為 <strong>1 : 1</strong></p><p><img src="image-20200728145813218.png" alt="image-20200728145813218"></p></li><li><p>完成圓形圖片的顯示</p><p><img src="image-20200728145845651.png" alt="image-20200728145845651"></p></li></ol><h1 id="Google-簡報"><a class="header-anchor" href="#Google-簡報"> </a>Google 簡報</h1><p>在 Google 簡報上要顯示圓形圖片的方式跟 PowerPoint 是一樣的</p><ol><li><p>插入圖片</p><p><img src="image-20200728150019552.png" alt="image-20200728150019552"></p></li><li><p>選擇圖片後，會出現【裁剪】的圖示</p><p><img src="image-20200728150135004.png" alt="image-20200728150135004"></p></li><li><p>透過旁邊的箭頭選單，選擇要裁剪的圖形樣式</p><p><img src="image-20200728150215963.png" alt="image-20200728150215963"></p></li><li><p>這裡要留意的是，如果圖片的長寬比例不是 1 : 1 的關係時，就不會顯示成圓形，所以要裁剪圖片的尺寸</p><p><img src="image-20200728150816591.png" alt="image-20200728150816591"></p><p><img src="image-20200728150910331.png" alt="image-20200728150910331"></p></li><li><p>打完收工</p></li></ol><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><p>本文章使用的圖片來源是 Photo by <a href="https://unsplash.com/@vdapinto?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Vitor Pinto</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;這一個技巧應該很多人都知道了，但我是最近需要用到才學會的，但不管怎樣還是分享一下，如何在簡報上做出圓圖效果，而這一個技巧適用於 Office PowerPoint 與 Google 簡報，以下是操作步驟。&lt;/p&gt;</summary>
    
    
    
    <category term="Office" scheme="http://blog.kevinyang.net/categories/Office/"/>
    
    
    <category term="Office" scheme="http://blog.kevinyang.net/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 幫 moment.js 套件瘦身</title>
    <link href="http://blog.kevinyang.net/2020/07/25/angular-moment-localte-is-too-fat/"/>
    <id>http://blog.kevinyang.net/2020/07/25/angular-moment-localte-is-too-fat/</id>
    <published>2020-07-25T04:21:38.000Z</published>
    <updated>2021-06-14T05:54:39.495Z</updated>
    
    <content type="html"><![CDATA[<p>長久以來，使用 moment.js 這一個時間套件讓我很掙扎，畢竟他很好用但很肥，主要肥胖的地方都是一堆用不到的 locale.</p><p>今天終於下定決心要來解決這個問題，經過兩分鐘的搜尋後，以下是解法</p><span id="more"></span><ol><li>在 <code>src</code> 資料夾下建立一個 locale 空的資料夾</li><li>在 <code>angular.json</code> 的 <code>fileReplacements</code> 內多新增下面設定</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;replace&quot;</span>: <span class="string">&quot;node_modules/moment/locale/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;with&quot;</span>: <span class="string">&quot;src/locale/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當這樣子設定完成後，ng build --prod 時會出現 <code>\moment\locale\af.js&quot; does not exist.</code> 找不到的錯誤訊息，沒關係這個不會影響到我們的程式執行。</p><p>經過這樣子的調整後，整個 moment locale 的部分就會被拔掉，瞬間瘦了快 400kb 的大小，可以算是瘦身成功</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;長久以來，使用 moment.js 這一個時間套件讓我很掙扎，畢竟他很好用但很肥，主要肥胖的地方都是一堆用不到的 locale.&lt;/p&gt;
&lt;p&gt;今天終於下定決心要來解決這個問題，經過兩分鐘的搜尋後，以下是解法&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
</feed>
