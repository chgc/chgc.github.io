<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CK&#39;s Notepad</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.kevinyang.net/"/>
  <updated>2021-02-18T02:25:04.971Z</updated>
  <id>http://blog.kevinyang.net/</id>
  
  <author>
    <name>KevinYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Angular] Angular 在 VSCode Extension (Webview) 內做頁面切換</title>
    <link href="http://blog.kevinyang.net/2021/02/06/angular-vscode-extension-page-navigate/"/>
    <id>http://blog.kevinyang.net/2021/02/06/angular-vscode-extension-page-navigate/</id>
    <published>2021-02-05T16:22:09.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>繼上一篇環境基礎設定完成後，這篇先來筆記一下要如何做頁面切換，有哪些地方需要留意的</p><a id="more"></a><p>首先要知道在 VSCode Extension Webview 的環境並不是一個 web server 而是檔案，所以我們就不能使用預設的路由設定模式，而必須改為 hash 模式 (<code>HashLocationStrategy</code>)，設定方式如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> RouterModule.forRoot(routes, &#123;</span><br><span class="line">      useHash: <span class="literal">true</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>在到 <code>index.html</code> 的地方，調整 base 路徑的部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到這邊基本上 Angular 的路由就可以正常運作了</p><p>或許會問說，那 LazyLoading 的部分呢? 很抱歉，在 VSCode Extension Webview 內是不能使用的，所以 <code>loadChildren</code> 的寫法要改成這樣</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: <span class="string">'product'</span>, loadChildren: <span class="function"><span class="params">()</span> =&gt;</span> ProductModule &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;繼上一篇環境基礎設定完成後，這篇先來筆記一下要如何做頁面切換，有哪些地方需要留意的&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 把 Angular 網站放到 VSCode Extension 內</title>
    <link href="http://blog.kevinyang.net/2021/02/05/ng-vscode-extension-webview/"/>
    <id>http://blog.kevinyang.net/2021/02/05/ng-vscode-extension-webview/</id>
    <published>2021-02-05T13:33:51.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天我分享了一個 YouTube  的影片，該影片大致上的內容是如何使用 VSCode Extension 使用 Webview API，既然可以用 webview 的方式來呈現網頁，那顯示一個 Angular App 也是很正常的事情，但環境設定上要怎麼調整呢? 這篇筆記就來整理一下</p><a id="more"></a><h1 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h1><ol><li><p>首先先建立一個 Angular 的專案 (這應該不用講要用什麼指令了吧)</p></li><li><p>打開 <code>package.json</code>，新增以下內容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">"publisher": "publisher-name",</span><br><span class="line">"engines": &#123;</span><br><span class="line">    "vscode": "^1.53.0"</span><br><span class="line">&#125;,</span><br><span class="line">"categories": [</span><br><span class="line">    <span class="string">"Other"</span></span><br><span class="line">],</span><br><span class="line">"activationEvents": [</span><br><span class="line">    <span class="string">"onCommand:angular-webview.start"</span></span><br><span class="line">],</span><br><span class="line">"main": "./dist/ext-src/extension.js",</span><br><span class="line">"contributes": &#123;</span><br><span class="line">    "commands": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"angular-webview.start"</span>,</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"Open Webview"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="string">"CK"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">"repository": &#123;</span><br><span class="line">    "type": "git",</span><br><span class="line">    "url": "#"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>categories</code> 、<code>activationEvents</code>、<code>contributes</code> 的區塊內容請配合 VS Code Extension 開發規範做調整</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">    ...</span><br><span class="line">   "@types/vscode": "^1.53.0",</span><br><span class="line">   "vscode-test": "^1.5.0",</span><br><span class="line">   "vsce": "^1.83.0"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改完後記得要執行 <code>npm install</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">...</span><br><span class="line">   // 修改</span><br><span class="line">   "build": "ng build --prod --output-hashing none &amp;&amp; tsc -p tsconfig.extension.json",</span><br><span class="line">   // 新增指令</span><br><span class="line">   "package": "vsce package",</span><br><span class="line">   "vscode:prepublish": "npm run build &amp;&amp; tsc -p tsconfig.extension.json"</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>.vscodeignore</code> 檔案 (可根據狀況調整)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">!dist</span><br><span class="line">.vscode</span><br><span class="line">e2e</span><br><span class="line">ext-src</span><br><span class="line">node_modules</span><br><span class="line">src</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>.vscode</code> 資料夾並新增 <code>launch.json</code> 檔案</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line"><span class="attr">"configurations"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Run Extension"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"extensionHost"</span>,</span><br><span class="line"><span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line"><span class="attr">"args"</span>: [</span><br><span class="line"><span class="string">"--extensionDevelopmentPath=$&#123;workspaceFolder&#125;"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"outFiles"</span>: [</span><br><span class="line"><span class="string">"$&#123;workspaceFolder&#125;/out/**/*.js"</span></span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>ext-src</code> 資料夾，並在該資料夾下新增 <code>extension.ts</code> 檔案</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vscode <span class="keyword">from</span> <span class="string">'vscode'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Manages webview panels</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> WebPanel &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Track the currently panel. Only allow a single panel to exist at a time.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> currentPanel: WebPanel | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> readonly viewType = <span class="string">'angular'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> readonly panel: vscode.WebviewPanel;</span><br><span class="line">  <span class="keyword">private</span> readonly extensionPath: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> readonly builtAppFolder: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> disposables: vscode.Disposable[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> createOrShow(</span><br><span class="line">    extensionPath: <span class="built_in">string</span>,</span><br><span class="line">    context: vscode.ExtensionContext</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> column = vscode.window.activeTextEditor</span><br><span class="line">      ? vscode.window.activeTextEditor.viewColumn</span><br><span class="line">      : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a panel, show it.</span></span><br><span class="line">    <span class="comment">// Otherwise, create angular panel.</span></span><br><span class="line">    <span class="keyword">if</span> (WebPanel.currentPanel) &#123;</span><br><span class="line">      WebPanel.currentPanel.panel.reveal(column);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      WebPanel.currentPanel = <span class="keyword">new</span> WebPanel(</span><br><span class="line">        extensionPath,</span><br><span class="line">        column || vscode.ViewColumn.One,</span><br><span class="line">        context</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WebPanel.currentPanel;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    extensionPath: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    column: vscode.ViewColumn,</span></span><br><span class="line"><span class="params">    context: vscode.ExtensionContext</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.extensionPath = extensionPath;</span><br><span class="line">    <span class="keyword">this</span>.builtAppFolder = <span class="string">'dist/cklab'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create and show a new webview panel</span></span><br><span class="line">    <span class="keyword">this</span>.panel = vscode.window.createWebviewPanel(</span><br><span class="line">      WebPanel.viewType,</span><br><span class="line">      <span class="string">'My Angular Webview'</span>,</span><br><span class="line">      column,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Enable javascript in the webview</span></span><br><span class="line">        enableScripts: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// And restrict the webview to only loading content from our extension's `media` directory.</span></span><br><span class="line">        localResourceRoots: [</span><br><span class="line">          vscode.Uri.file(path.join(<span class="keyword">this</span>.extensionPath, <span class="keyword">this</span>.builtAppFolder)),</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the webview's initial html content</span></span><br><span class="line">    <span class="keyword">this</span>.panel.webview.html = <span class="keyword">this</span>._getHtmlForWebview(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Listen for when the panel is disposed</span></span><br><span class="line">    <span class="comment">// This happens when the user closes the panel or when the panel is closed programatically</span></span><br><span class="line">    <span class="keyword">this</span>.panel.onDidDispose(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.dispose(), <span class="literal">null</span>, <span class="keyword">this</span>.disposables);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle messages from the webview</span></span><br><span class="line">    <span class="keyword">this</span>.panel.webview.onDidReceiveMessage(</span><br><span class="line">      (message: <span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">switch</span> (message.command) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'alert'</span>:</span><br><span class="line">            vscode.window.showErrorMessage(message.text);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="keyword">this</span>.disposables</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> dispose() &#123;</span><br><span class="line">    WebPanel.currentPanel = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clean up our resources</span></span><br><span class="line">    <span class="keyword">this</span>.panel.dispose();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>.disposables.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> x = <span class="keyword">this</span>.disposables.pop();</span><br><span class="line">      <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        x.dispose();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns html of the start page (index.html)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> _getHtmlForWebview(context: vscode.ExtensionContext) &#123;</span><br><span class="line">    <span class="comment">// path to dist folder</span></span><br><span class="line">    <span class="keyword">const</span> appDistPath = path.join(<span class="keyword">this</span>.extensionPath, <span class="keyword">this</span>.builtAppFolder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get path to index.html file from dist folder</span></span><br><span class="line">    <span class="keyword">const</span> indexPath = path.join(appDistPath, <span class="string">'index.html'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read index file from file system</span></span><br><span class="line">    <span class="keyword">let</span> indexHtml = fs.readFileSync(indexPath, &#123; encoding: <span class="string">'utf8'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Get all link prefixed by href or src</span></span><br><span class="line">    <span class="keyword">const</span> matchLinks = <span class="regexp">/(href|src)="([^"]*)"/g</span>;</span><br><span class="line">    <span class="comment">// 2. Transform the result of the regex into a vscode's URI format</span></span><br><span class="line">    <span class="keyword">const</span> toUri = <span class="function">(<span class="params">_: <span class="built_in">string</span>, prefix: 'href' | 'src', link: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// For &lt;base href="#" /&gt;</span></span><br><span class="line">      <span class="keyword">if</span> (link === <span class="string">'#'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>="<span class="subst">$&#123;link&#125;</span>"`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// For scripts &amp; links</span></span><br><span class="line">      <span class="keyword">const</span> _path = path.join(appDistPath, link);</span><br><span class="line">      <span class="keyword">const</span> uri = vscode.Uri.file(_path);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>="<span class="subst">$&#123;this.panel.webview['asWebviewUri'](uri)&#125;</span>"`</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update the base URI tag</span></span><br><span class="line">    indexHtml = indexHtml.replace(matchLinks, toUri);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indexHtml;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) </span>&#123;</span><br><span class="line">  context.subscriptions.push(</span><br><span class="line">    vscode.commands.registerCommand(<span class="string">'angular-webview.start'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      WebPanel.createOrShow(context.extensionPath, context);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this method is called when your extension is deactivated</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deactivate</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>line 49: 請根據自己 Angular 專案輸出資料夾路徑做調整</li><li>line 138: 跟著 <code>package.json</code> 的指令註冊一起調整命令名稱</li></ul></li><li><p>新增 <code>tsconfig.extension.json</code> 檔案</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es6"</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"dist"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [</span><br><span class="line">      <span class="string">"es6"</span>,</span><br><span class="line">      <span class="string">"dom"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"rootDir"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [</span><br><span class="line">    <span class="string">"ext-src"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules/*"</span>, </span><br><span class="line">    <span class="string">".vscode/*"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>到這邊應算是完成最基本的 VS Code Extension 環境的設定，如何看是否有設定成功，可以執行以下步驟</p><ol><li><p>開 Terminal 執行 <code>npm run build</code></p></li><li><p>按 F5 進入 Debug 模式，這時候會開啟一個新的 VS Code 視窗</p></li><li><p>執行所設定的啟動指令，以這個範例來說就是 <code>CK: Open Webview</code></p><p><img src="image-20210205215343080.png" alt="image-20210205215343080"></p></li><li><p>成功後的顯示畫面</p><p><img src="image-20210205215408533.png" alt="image-20210205215408533"></p></li></ol><p>至於在 VS Code Webview 的環境下，Angular 開發上有什麼需要注意的事項，這部分就留到下一篇筆記了</p><h1 id="打包套件"><a class="header-anchor" href="#打包套件"> </a>打包套件</h1><p>如果都寫完要發布成可以安裝的擴充套件時，可以執行 <code>npm run package</code> 就會產生一個 <code>VSIX</code> 的安裝檔案</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://www.youtube.com/watch?v=a5DX5pQ9p5M" target="_blank" rel="noopener">How to Code a VSCode Extension</a></li><li><a href="https://code.visualstudio.com/api/get-started/your-first-extension" target="_blank" rel="noopener">VSCode Extension Get Started</a></li><li><a href="https://code.visualstudio.com/api/extension-guides/webview" target="_blank" rel="noopener">VSCode Webview API</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前幾天我分享了一個 YouTube  的影片，該影片大致上的內容是如何使用 VSCode Extension 使用 Webview API，既然可以用 webview 的方式來呈現網頁，那顯示一個 Angular App 也是很正常的事情，但環境設定上要怎麼調整呢? 這篇筆記就來整理一下&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Flutter] 設定 Firebase Messaging 功能</title>
    <link href="http://blog.kevinyang.net/2021/01/13/flutter-firebase-message-setup/"/>
    <id>http://blog.kevinyang.net/2021/01/13/flutter-firebase-message-setup/</id>
    <published>2021-01-13T04:18:55.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>網路上面關於設定 Flutter 的文章真的很亂，也不知道哪一個版本能用，乾脆自己整理一篇目前可以使用的版本，還好越晚使用，設定步驟就越簡單</p><a id="more"></a><h1 id="設定-firebase-專案"><a class="header-anchor" href="#設定-firebase-專案"> </a>設定 Firebase 專案</h1><p>需要從 Firebase 專案中下載 google-services.json 的檔案，以供後續套件使用，取得步驟如下</p><ol><li>進入 Firebase 專案</li><li>選擇專案設定<img src="image-20210113123819276.png" alt="image-20210113123819276"></li><li>新增應用程式 (Android)後，即可取得 <code>google-services.json</code> 的檔案</li><li>將該檔案複製到 Flutter 專案下的 <code>android/app</code> 資料夾下<img src="image-20210113124016995.png" alt="image-20210113124016995"></li></ol><h1 id="flutter-firebase-message-套件"><a class="header-anchor" href="#flutter-firebase-message-套件"> </a>Flutter Firebase Message 套件</h1><h2 id="套件安裝"><a class="header-anchor" href="#套件安裝"> </a>套件安裝</h2><p>於 <code>pubspec.yaml</code> 檔內新增下列套件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">firebase_core:</span> <span class="string">^0.7.0</span></span><br><span class="line"><span class="attr">firebase_messaging:</span> <span class="number">8.0</span><span class="number">.0</span><span class="bullet">-dev.13</span></span><br></pre></td></tr></table></figure><h2 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h2><p>為了要讓 Flutter 在建置時，能載入剛剛下載的 <code>google-services.json</code> 檔案，還需調整以下檔案</p><ol><li><p><code>android/build.gradle</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    // ... other dependencies</span><br><span class="line">    // 新增這一行</span><br><span class="line">    classpath &apos;com.google.gms:google-services:4.3.3&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/android/app/build.gradle</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.application&apos;</span><br><span class="line">// 新增這一行</span><br><span class="line">apply plugin: &apos;com.google.gms.google-services&apos;</span><br></pre></td></tr></table></figure></li></ol><p>※如果 Flutter 專案的 Flutter 版本是 1.12 以上，則不需要額外新增任何檔案，如果是低於該版本，請依此<a href="https://firebase.flutter.dev/docs/messaging/overview#flutter-android-embedding-v1" target="_blank" rel="noopener">文件</a>說明新增檔案</p><h2 id="程式碼設定"><a class="header-anchor" href="#程式碼設定"> </a>程式碼設定</h2><p>Flutter 內的程式碼要增加的項目如下</p><ol><li><p>main.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">await</span> Firebase.initializeApp();</span><br><span class="line">  <span class="comment">// Set the background messaging handler early on, as a named top-level function</span></span><br><span class="line">  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);</span><br><span class="line">  <span class="comment">/// Create an Android Notification Channel.</span></span><br><span class="line">  <span class="comment">/// 這裡有多使用套件: flutter_local_notifications: ^3.0.3</span></span><br><span class="line">  <span class="comment">/// We use this channel in the `AndroidManifest.xml` file to override the</span></span><br><span class="line">  <span class="comment">/// default FCM channel to enable heads up notifications.</span></span><br><span class="line">  <span class="keyword">await</span> flutterLocalNotificationsPlugin</span><br><span class="line">      .resolvePlatformSpecificImplementation&lt;</span><br><span class="line">          AndroidFlutterLocalNotificationsPlugin&gt;()</span><br><span class="line">      ?.createNotificationChannel(channel);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Update the iOS foreground notification presentation options to allow</span></span><br><span class="line">  <span class="comment">/// heads up notifications.</span></span><br><span class="line">  <span class="keyword">await</span> FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(</span><br><span class="line">    alert: <span class="keyword">true</span>,</span><br><span class="line">    badge: <span class="keyword">true</span>,</span><br><span class="line">    sound: <span class="keyword">true</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; _firebaseMessagingBackgroundHandler(RemoteMessage message) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// If you're going to use other Firebase services in the background, such as Firestore,</span></span><br><span class="line">  <span class="comment">// make sure you call `initializeApp` before using other Firebase services.</span></span><br><span class="line">  <span class="keyword">await</span> Firebase.initializeApp();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Handling a background message <span class="subst">$&#123;message.messageId&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在啟動的第一個 widget 檔案內</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  <span class="comment">// 當 app 處於開啟狀態時，監聽推撥訊息用</span></span><br><span class="line">  FirebaseMessaging.onMessage.listen((RemoteMessage message) <span class="keyword">async</span> &#123;</span><br><span class="line">    RemoteNotification notification = message.notification;</span><br><span class="line">    AndroidNotification android = message.notification?.android;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (notification != <span class="keyword">null</span> &amp;&amp; android != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> flutterLocalNotificationsPlugin.show(</span><br><span class="line">          notification.hashCode,</span><br><span class="line">          notification.title,</span><br><span class="line">          notification.body,</span><br><span class="line">          NotificationDetails(</span><br><span class="line">            android: AndroidNotificationDetails(</span><br><span class="line">              channel.id,</span><br><span class="line">              channel.name,</span><br><span class="line">              channel.description,</span><br><span class="line">              icon: <span class="string">'launch_background'</span>,</span><br><span class="line">            ),</span><br><span class="line">          ));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">   </span><br><span class="line">  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A new onMessageOpenedApp event was published!'</span>);</span><br><span class="line">    <span class="comment">// 這邊可以寫在 app 關閉狀態，點通知訊息時，打開 app 後要做的事情</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>當然還有其他可以設定的部分，更多細節可以參閱<a href="https://firebase.flutter.dev/docs/messaging/usage/" target="_blank" rel="noopener">這裡的文件</a></p><h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1><ul><li><p><a href="https://firebase.flutter.dev/docs/messaging/usage/" target="_blank" rel="noopener">Firebase Cloud Messaging</a></p></li><li><p><a href="https://github.com/FirebaseExtended/flutterfire/tree/master/packages/firebase_messaging/firebase_messaging" target="_blank" rel="noopener">Firebase_messaging_plugin</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;網路上面關於設定 Flutter 的文章真的很亂，也不知道哪一個版本能用，乾脆自己整理一篇目前可以使用的版本，還好越晚使用，設定步驟就越簡單&lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://blog.kevinyang.net/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://blog.kevinyang.net/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>[Dart] List 的操作 reduce 與 fold</title>
    <link href="http://blog.kevinyang.net/2020/12/27/dart-reduce-fold/"/>
    <id>http://blog.kevinyang.net/2020/12/27/dart-reduce-fold/</id>
    <published>2020-12-27T15:26:33.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>每一個語言對於清單的操作，一直都是必須要掌握的能力之一，在 dart 裡面的 List 的操作方法常見又有幾種，而其中的 reduce 與 fold 這兩個操作方式，對我來說是有點特殊的，在此筆記一下</p><a id="more"></a><h1 id="list-的操作"><a class="header-anchor" href="#list-的操作"> </a>List   的操作</h1><h2 id="reduce"><a class="header-anchor" href="#reduce"> </a>reduce</h2><p>Dart 裡的 <code>reduce</code> 行為跟 <code>JavaScript</code> 的有點差異，先看程式碼再來說明</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> result = list.reduce((value, element) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + element;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result);</span><br></pre></td></tr></table></figure><ol><li><p><code>reduce</code> 的過程中，資料操作的型別是不能做更換的，表示 value 與 element 的型別會是一致</p></li><li><p>如果想要操作得資料與想要取的的結果型態不一樣時，要先做轉型後(搭配 map) 再操作</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> carts = [</span><br><span class="line">    Cart(productName: <span class="string">"蘋果"</span>, price: <span class="number">50</span>, amount: <span class="number">1</span>),</span><br><span class="line">    Cart(productName: <span class="string">'蔬菜'</span>, price: <span class="number">20</span>, amount: <span class="number">2</span>),</span><br><span class="line">    Cart(productName: <span class="string">'雞肉'</span>, price: <span class="number">60</span>, amount: <span class="number">3</span>),</span><br><span class="line">    Cart(productName: <span class="string">'雞蛋'</span>, price: <span class="number">10</span>, amount: <span class="number">10</span>),</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> totalPrice = carts.map((element)=&gt; element.amount * element.price)</span><br><span class="line">   .reduce((value,element)=&gt; value+element);</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">print</span>(totalPrice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> productName;</span><br><span class="line">  <span class="built_in">num</span> price;</span><br><span class="line">  <span class="built_in">num</span> amount;</span><br><span class="line">  Cart(&#123;<span class="keyword">this</span>.productName, <span class="keyword">this</span>.price, <span class="keyword">this</span>.amount&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>method  介面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E reduce(</span><br><span class="line">  E combine(E value, E element)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="fold"><a class="header-anchor" href="#fold"> </a>fold</h2><p>上面的第二個範例寫法，如果寫習慣 JavaScript 的人會覺得很囉唆，但其實 JavaScript 的 reduce 等於 Dart 的 fold，一樣先來看程式碼</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> carts = [</span><br><span class="line">    Cart(productName: <span class="string">"Apple"</span>, price: <span class="number">50</span>, amount: <span class="number">1</span>),</span><br><span class="line">    Cart(productName: <span class="string">'蔬菜'</span>, price: <span class="number">20</span>, amount: <span class="number">2</span>),</span><br><span class="line">    Cart(productName: <span class="string">'雞肉'</span>, price: <span class="number">60</span>, amount: <span class="number">3</span>),</span><br><span class="line">    Cart(productName: <span class="string">'雞蛋'</span>, price: <span class="number">10</span>, amount: <span class="number">10</span>),</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> totalPrice = carts.fold(<span class="number">0</span>, (prev, element) =&gt; prev + element.price * element.amount);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(totalPrice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> productName;</span><br><span class="line">  <span class="built_in">num</span> price;</span><br><span class="line">  <span class="built_in">num</span> amount;</span><br><span class="line">  Cart(&#123;<span class="keyword">this</span>.productName, <span class="keyword">this</span>.price, <span class="keyword">this</span>.amount&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>fold  的初始值是放在第一個位置</p></li><li><p>後面的使用方式就和 JavaScript  的 reduce 一樣了</p></li><li><p>method 介面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic</span> fold(</span><br><span class="line">  initialValue,</span><br><span class="line">  <span class="keyword">dynamic</span> combine(previousValue, E element)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>這兩個用法都有他試用的情境，根據情境挑適合的方法使用，可以讓程式碼乾淨許多</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一個語言對於清單的操作，一直都是必須要掌握的能力之一，在 dart 裡面的 List 的操作方法常見又有幾種，而其中的 reduce 與 fold 這兩個操作方式，對我來說是有點特殊的，在此筆記一下&lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://blog.kevinyang.net/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://blog.kevinyang.net/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>如何做出自動版號的效果</title>
    <link href="http://blog.kevinyang.net/2020/11/02/how-to-auto-version/"/>
    <id>http://blog.kevinyang.net/2020/11/02/how-to-auto-version/</id>
    <published>2020-11-02T07:29:50.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>最近再弄一個版號顯示的功能，但我真的好懶得手動去改版號，有什麼自動方便的作法呢? 以下是我找到比較方便的方式</p><a id="more"></a><h1 id="net-core"><a class="header-anchor" href="#net-core"> </a>.NET Core</h1><p>在以往的 <code>.NET 專案</code> 有一個記錄版本的檔案，叫做 <code>Assemblyinfo.cs</code>，裡面會記錄著專案的相關資訊包含作者、公司、產品名稱、及版本資訊等，目前可以透過 IDE 編輯專案屬性 -&gt; 編輯套件資訊</p><p><img src="image-20201102154101905.png" alt="image-20201102154101905"></p><p>如果要自動編版本號碼，這裡有一個透過編輯 <code>csproj</code> 來動態改變版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Build</span>&gt;</span>$([System.DateTime]::op_Subtraction($([System.DateTime]::get_Now().get_Date()),$([System.DateTime]::new(2000,1,1))).get_TotalDays())<span class="tag">&lt;/<span class="name">Build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Revision</span>&gt;</span>$([MSBuild]::Divide($([System.DateTime]::get_Now().get_TimeOfDay().get_TotalSeconds()), 2).ToString('F0'))<span class="tag">&lt;/<span class="name">Revision</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Version</span>&gt;</span>1.$(Build).$(Revision)<span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;build&gt;</code> 、<code>&lt;Revision&gt;</code> 自定義變數供 <code>&lt;Version&gt;</code> 使用，這邊的規則可以依個人喜好修改</li><li><code>&lt;Version&gt;</code> 設定產品版本</li></ul><p><img src="image-20201102161627599.png" alt="image-20201102161627599"></p><p>對應產生的 <code>Assemblyinfo.cs</code> 內容為</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// &lt;auto-generated&gt;</span></span><br><span class="line"><span class="comment">//     這段程式碼是由工具產生的。</span></span><br><span class="line"><span class="comment">//     執行階段版本:4.0.30319.42000</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，</span></span><br><span class="line"><span class="comment">//     變更將會遺失。</span></span><br><span class="line"><span class="comment">// &lt;/auto-generated&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute(<span class="meta-string">"4a3c5c00-20b2-4c11-90d1-d01d65382565"</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyCompanyAttribute(<span class="meta-string">"WebApplication4"</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyConfigurationAttribute(<span class="meta-string">"Debug"</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyFileVersionAttribute(<span class="meta-string">"1.7611.29271.0"</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyInformationalVersionAttribute(<span class="meta-string">"1.7611.29271"</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyProductAttribute(<span class="meta-string">"WebApplication4"</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyTitleAttribute(<span class="meta-string">"WebApplication4"</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyVersionAttribute(<span class="meta-string">"1.7611.29271.0"</span>)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由 MSBuild WriteCodeFragment 類別產生。</span></span><br></pre></td></tr></table></figure><h1 id="angular"><a class="header-anchor" href="#angular"> </a>Angular</h1><p>有時候我們也想要在前端網站給予設定版本，除了手動修改外，其實也可以透過 <code>npm version</code> 來完成，雖然有點奇怪，但還是可以運作啦</p><h2 id="npm-version"><a class="header-anchor" href="#npm-version"> </a>npm version</h2><p>這功能原本是用來更新 npm package 版本使用，指令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=&lt;prerelease-id&gt;] | from-git]</span><br></pre></td></tr></table></figure><p>這指令會同步更新 <code>package.json</code> 的 <code>version</code> 欄位值，這邊就快速列出我所使用的 script</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"prebuild": "npm --no-git-tag-version version patch",</span><br><span class="line">"postversion": "git add package.json package-lock.json &amp;&amp; git commit -mv%npm_package_version%",</span><br></pre></td></tr></table></figure><ul><li><code>prebuild</code> 這行為會發生在執行 <code>npm build</code> 之前<ul><li><code>--no-git-tag-version</code> 設定 <code>npm version</code> 不要自動 commit 且不要加上 tag</li><li><code>npm version patch</code> : 只更新 patch 版號</li></ul></li><li><code>postversion</code> 這動作會發生在 <code>npm version</code> 之後<ul><li>加入並 commit 異動檔案</li></ul></li></ul><p>當 <code>package.json</code> 內的 <code>version</code> 處理完後，就可以在 <code>environment.ts</code> 的地方引用 <code>package.json</code> 了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;</span><br><span class="line">  version: <span class="built_in">require</span>(<span class="string">'../../package.json'</span>).version,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由於這邊有使用到 <code>node</code> 的 <code>required</code> ，在 <code>tsconfig.app.json</code> 及 <code>tsconfig.spec.json</code> 的 <code>compilerOptions.types</code> 內要加上 <code>node</code>，並安裝 <code>@types/node</code> 的型別定義檔，剩下就跟原來使用 environment 的方式一樣了</p><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>目前是我處理自動版號的方式，如果有其他更好的作法，也歡迎分享給我</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://edi.wang/post/2018/9/27/get-app-version-net-core" target="_blank" rel="noopener">Get App Version in .NET Core</a></li><li><a href="https://docs.npmjs.com/cli/v6/commands/npm-version" target="_blank" rel="noopener">npm version</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近再弄一個版號顯示的功能，但我真的好懶得手動去改版號，有什麼自動方便的作法呢? 以下是我找到比較方便的方式&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://blog.kevinyang.net/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>[EF Core] 新增一個計算欄位 (Computed Column)</title>
    <link href="http://blog.kevinyang.net/2020/09/17/efcore-add-computed-column/"/>
    <id>http://blog.kevinyang.net/2020/09/17/efcore-add-computed-column/</id>
    <published>2020-09-17T04:23:28.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>當使用 EF Code First 設計資料表時，如果有一個欄位是要設定計算公式時，程式碼該如何寫呢?</p><a id="more"></a><p>以下幾個步驟</p><ol><li><p>在欄位上標記欄位屬於 <code>computed</code> 性質</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.Computed)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> CalculatedField &#123;</span><br><span class="line">    <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>migration</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-migration xxxx-xxxx</span><br></pre></td></tr></table></figure></li><li><p>打開剛建立的 <code>migration</code> 檔案並找到剛剛所指定的欄位</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">migrationBuilder.CreateTable(</span><br><span class="line">                name: <span class="string">"Demo"</span>,</span><br><span class="line">                columns: table =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 刪除原本產生的欄位</span></span><br><span class="line">                   CalculatedField = table.Column&lt;<span class="keyword">int</span>&gt;(nullable: <span class="literal">false</span>, defaultValue: <span class="number">0</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">);</span><br><span class="line">migrationBuilder.Sql(<span class="string">"ALTER TABLE dbo.Demo ADD CalculatedField AS ([你的計算規則])"</span>);</span><br></pre></td></tr></table></figure></li><li><p>打完收工</p></li></ol><p>以上是我目前的作法，能正常運作。如果有更好的寫法，也歡迎在下面留言分享討論</p><h1 id="額外補充"><a class="header-anchor" href="#額外補充"> </a>額外補充</h1><p>如果想要透過 EF Migration 來新增 Stored Procedure 的話，可以這樣子寫</p><ol><li><p>將 storeㄎ procedure 的 SQL 檔案放在某資料夾下，並將 SQL 檔案設定為 <code>內嵌資源 (EmbeddedResource)</code></p></li><li><p>新增一個空的 migration 後加入以下的程式碼</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> assembly = Assembly.GetExecutingAssembly();</span><br><span class="line">            <span class="keyword">var</span> resourceNames =</span><br><span class="line">                        assembly.GetManifestResourceNames().                        </span><br><span class="line">                        Where(str=&gt; str.Contains(<span class="string">"[sp file name].sql"</span>));</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">string</span> resourceName <span class="keyword">in</span> resourceNames)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (Stream stream = assembly.GetManifestResourceStream(resourceName))</span><br><span class="line">                <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span> StreamReader(stream))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">string</span> sql = reader.ReadToEnd();</span><br><span class="line">                    migrationBuilder.Sql(sql);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Down</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            migrationBuilder.Sql(<span class="string">"DROP PROCEDURE [SP Name]"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>當進行 database 更新時，就會將該 SP 新增到資料庫中</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;當使用 EF Code First 設計資料表時，如果有一個欄位是要設定計算公式時，程式碼該如何寫呢?&lt;/p&gt;
    
    </summary>
    
      <category term="Entity Framework" scheme="http://blog.kevinyang.net/categories/Entity-Framework/"/>
    
    
      <category term="Entity Framework" scheme="http://blog.kevinyang.net/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 如何寫具有非同步驗證的 Angular 自訂表單物件</title>
    <link href="http://blog.kevinyang.net/2020/08/29/angular-custom-form-control-with-async-valiator/"/>
    <id>http://blog.kevinyang.net/2020/08/29/angular-custom-form-control-with-async-valiator/</id>
    <published>2020-08-29T12:14:05.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天有人在論壇問了一個自訂表單非同步驗證的問題，這問題是當一個自訂表單物件內有非同步驗證時，外部使用者無法正確地取得該表單物件的驗證狀態，這問題我一開始想說應該不難，但也花了我快一天的時間才釐清要怎麼寫一個具有非同步驗證的自訂表單物件，方法如下</p><a id="more"></a><h1 id="同步驗證"><a class="header-anchor" href="#同步驗證"> </a>同步驗證</h1><p>我們都知道 Angular <code>FormControl</code> 的驗證有分同步與分同步兩種方式，下面是同步驗證的寫法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">"app-user"</span>,</span><br><span class="line">  templateUrl: <span class="string">"./user.component.html"</span>,</span><br><span class="line">  styleUrls: [<span class="string">"./user.component.css"</span>],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;</span><br><span class="line">      provide: NG_VALUE_ACCESSOR,</span><br><span class="line">      useExisting: UserComponent,</span><br><span class="line">      multi: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      provide: NG_VALIDATORS,</span><br><span class="line">      useExisting: UserComponent,</span><br><span class="line">      multi: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserComponent <span class="keyword">implements</span> OnInit, ControlValueAccessor, Validator &#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> FormControl(<span class="string">""</span>, [Validators.required]);</span><br><span class="line">  onChange: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  onTouched: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName.valueChanges.subscribe(&#123;</span><br><span class="line">      next: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.onChange) &#123;</span><br><span class="line">          <span class="keyword">this</span>.onChange(value);</span><br><span class="line">          <span class="keyword">this</span>.onTouched();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  writeValue(obj: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName.patchValue(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  registerOnChange(fn: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.onChange = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  registerOnTouched(fn: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.onTouched = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  validate() &#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName.errors;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分同步驗證"><a class="header-anchor" href="#分同步驗證"> </a>分同步驗證</h1><p>非同步驗證在 <code>FormControl</code> 的驗證狀態是 <code>PENDING</code>  &lt;–&gt; <code>VALID/INVALID</code> 間切換，由於非同步與同步要實作的方法都是同一個，所以當非同步與同步驗證同時存在時，要以非同步為準，不然整個驗證都只會取得同步驗證的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">   ...</span><br><span class="line">    providers: [</span><br><span class="line">    ...</span><br><span class="line">    &#123;</span><br><span class="line">      provide: NG_ASYNC_VALIDATORS,</span><br><span class="line">      useExisting: UserComponent,</span><br><span class="line">      multi: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserComponent <span class="keyword">implements</span> OnInit, ControlValueAccessor, Validator &#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> FormControl(<span class="string">""</span>, [Validators.required], [<span class="keyword">this</span>.asyncValidator]);</span><br><span class="line">  onChange: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  onTouched: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  asyncValidator(c: AbstractControl) &#123;</span><br><span class="line">    <span class="keyword">return</span> of(c.value === <span class="string">"123"</span>).pipe(</span><br><span class="line">      delay(<span class="number">500</span>),</span><br><span class="line">      map(<span class="function"><span class="params">b</span> =&gt;</span> (b ? <span class="literal">null</span> : &#123; nomatch: <span class="literal">true</span> &#125;))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  validate() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName.errors;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦註冊成 <code>NG_ASYNC_VALIDATORS</code> 時，外部使用這一個自訂 <code>FormControl</code> 的 status 就會處在 <code>PENDING</code> ，而其原因是因為 <code>validate</code>  的方法沒有回傳一個完成的訊號，基於這一個理由，我們需要調整 <code>validate</code> 的實作方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">validate() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName.statusChanges.pipe(      </span><br><span class="line">      filter(<span class="function"><span class="params">status</span> =&gt;</span> status !== <span class="string">"PENDING"</span>),</span><br><span class="line">      map(<span class="function"><span class="params">status</span> =&gt;</span> <span class="keyword">this</span>.firstName.errors),      </span><br><span class="line">      first()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>完整程式碼如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">"@angular/core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ControlValueAccessor,</span><br><span class="line">  Validator,</span><br><span class="line">  NG_VALUE_ACCESSOR,</span><br><span class="line">  NG_VALIDATORS,</span><br><span class="line">  NG_ASYNC_VALIDATORS,</span><br><span class="line">  Validators,</span><br><span class="line">  AbstractControl</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"@angular/forms"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormControl &#125; <span class="keyword">from</span> <span class="string">"@angular/forms"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; of &#125; <span class="keyword">from</span> <span class="string">"rxjs"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter, tap, map, delay, first &#125; <span class="keyword">from</span> <span class="string">"rxjs/operators"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">"app-user"</span>,</span><br><span class="line">  templateUrl: <span class="string">"./user.component.html"</span>,</span><br><span class="line">  styleUrls: [<span class="string">"./user.component.css"</span>],</span><br><span class="line">  providers: [</span><br><span class="line">    &#123;</span><br><span class="line">      provide: NG_VALUE_ACCESSOR,</span><br><span class="line">      useExisting: UserComponent,</span><br><span class="line">      multi: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      provide: NG_ASYNC_VALIDATORS,</span><br><span class="line">      useExisting: UserComponent,</span><br><span class="line">      multi: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserComponent <span class="keyword">implements</span> OnInit, ControlValueAccessor, Validator &#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> FormControl(<span class="string">""</span>, [Validators.required], [<span class="keyword">this</span>.asyncValidator]);</span><br><span class="line">  onChange: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  onTouched: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  asyncValidator(c: AbstractControl) &#123;</span><br><span class="line">    <span class="keyword">return</span> of(c.value === <span class="string">"123"</span>).pipe(</span><br><span class="line">      delay(<span class="number">500</span>),</span><br><span class="line">      map(<span class="function"><span class="params">b</span> =&gt;</span> (b ? <span class="literal">null</span> : &#123; nomatch: <span class="literal">true</span> &#125;))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName.valueChanges.subscribe(&#123;</span><br><span class="line">      next: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.onChange) &#123;</span><br><span class="line">          <span class="keyword">this</span>.onChange(value);</span><br><span class="line">          <span class="keyword">this</span>.onTouched();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  writeValue(obj: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName.patchValue(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  registerOnChange(fn: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.onChange = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  registerOnTouched(fn: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.onTouched = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  validate() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName.statusChanges.pipe(</span><br><span class="line">      filter(<span class="function"><span class="params">status</span> =&gt;</span> status !== <span class="string">"PENDING"</span>),</span><br><span class="line">      map(<span class="function"><span class="params">status</span> =&gt;</span> <span class="keyword">this</span>.firstName.errors),      </span><br><span class="line">      first()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><p><a href="https://stackblitz.com/edit/angular-ivy-qdvfuj?file=src%2Fapp%2Fuser%2Fuser.component.ts" target="_blank" rel="noopener">stackbliz</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前幾天有人在論壇問了一個自訂表單非同步驗證的問題，這問題是當一個自訂表單物件內有非同步驗證時，外部使用者無法正確地取得該表單物件的驗證狀態，這問題我一開始想說應該不難，但也花了我快一天的時間才釐清要怎麼寫一個具有非同步驗證的自訂表單物件，方法如下&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[容器] 如何寫 Dockerfile</title>
    <link href="http://blog.kevinyang.net/2020/08/03/docker-101-note-3/"/>
    <id>http://blog.kevinyang.net/2020/08/03/docker-101-note-3/</id>
    <published>2020-08-03T05:36:31.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>前面兩篇筆記都在整理如何操作 docker container，要怎麼製作最重要的 Image 呢? 我會在這篇整理出來</p><a id="more"></a><p>要建立出一個可以用來執行的 Image，就必須透過 <code>Dockerfile</code> 來設定，<code>Dockerfile</code> 是一個類似文字檔的設定檔，docker 會依 <code>Dockerfile</code> 內的設定建立出一個可以部屬到 Registry 的 Image，其設定內容其實不複雜，以下為簡單語法介紹</p><h1 id="dockerfile-結構與使用語法"><a class="header-anchor" href="#dockerfile-結構與使用語法"> </a>Dockerfile 結構與使用語法</h1><p>如之前所說，Image 所能執行的 OS 必須跟底層 docker server 跑的 OS 一樣或是使用同種 Kernel，所以當 docker server 是跑在 Linux base 上，那 Dockerfile 能跑的環境也只能是 Linux base。下面是一個簡單的範例</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">COPY</span> . /app</span><br><span class="line"><span class="keyword">RUN</span> make /app</span><br><span class="line"><span class="keyword">CMD</span> python /app/app.py</span><br></pre></td></tr></table></figure><ul><li><code>FROM</code> Image 將執行的環境，這邊可以使用別人建立好的 Base Image，通常是作業系統，例如 ubuntu, centos 或是 <code>core/aspnet</code> 的執行環境</li><li><code>COPY</code> 複製本機檔案到 Image 裡，本機根目錄的認定為 <code>Dockerfile</code> 所處的目錄</li><li><code>RUN</code> 執行 Linux 指令</li><li><code>CMD</code> 當執行 <code>docker run</code> 時會執行的指令，如果有個 <code>CMD</code> 只有最後一行會生效</li></ul><p>如果能看懂跟理解上面的 <code>Dockerfile</code>，那基本上就只是 <code>Dockerfile</code> 語法及環境設定的熟悉度了，下面再列出幾個常用的指令</p><ul><li><p><code>WORKDIR</code> 設定當前的工作目錄</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span> /app</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>LABEL</code> Image 的 Metadata 資訊</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span> description="這是LABEL的範例" version="1.0" owner="CK's Notepad"</span><br></pre></td></tr></table></figure></li><li><p><code>ENV</code> 設定環境變數</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;KEY&gt; &lt;Value&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>ENTRYPOINT</code> 作用跟 <code>CMD</code> 一樣，差異在他不會被 <code>docker run &lt;image&gt; &lt;command&gt;</code> 給覆蓋掉</p></li><li><p><code>EXPOSE</code> 宣告 Container 運行時對外有哪些 Port 可以使用 (宣告而已)</p></li></ul><h1 id="實際-dockerfile-範例"><a class="header-anchor" href="#實際-dockerfile-範例"> </a>實際 Dockerfile 範例</h1><h2 id="asp-net-core"><a class="header-anchor" href="#asp-net-core"> </a><a href="http://asp.net" target="_blank" rel="noopener">asp.net</a> core</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class="number">3.0</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span> /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy csproj and restore as distinct layers</span></span><br><span class="line"><span class="keyword">COPY</span> *.sln .</span><br><span class="line"><span class="keyword">COPY</span> aspnetapp/*.csproj ./aspnetapp/</span><br><span class="line"><span class="keyword">RUN</span> dotnet restore</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy everything else and build app</span></span><br><span class="line"><span class="keyword">COPY</span> aspnetapp/. ./aspnetapp/</span><br><span class="line"><span class="keyword">WORKDIR</span> /app/aspnetapp</span><br><span class="line"><span class="keyword">RUN</span> dotnet publish -c Release -o out</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class="number">3.0</span> AS runtime</span><br><span class="line"><span class="keyword">WORKDIR</span> /app</span><br><span class="line"><span class="keyword">COPY</span> --from=build /app/aspnetapp/out ./</span><br><span class="line"><span class="keyword">ENTRYPOINT</span> ["dotnet", "aspnetapp.dll"]</span><br></pre></td></tr></table></figure><h2 id="angular"><a class="header-anchor" href="#angular"> </a>Angular</h2><ul><li><p>單純可以執行的</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span> /dist/app-to-run-inside-docker /usr/share/nginx/html</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li><li><p>在 docker 環境內建置部屬 (multiple-stage)</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stage 1</span></span><br><span class="line"><span class="keyword">FROM</span> node:alpine AS my-app-build</span><br><span class="line"><span class="keyword">WORKDIR</span> /app</span><br><span class="line"><span class="keyword">COPY</span> . .</span><br><span class="line"><span class="keyword">RUN</span> npm install &amp;&amp; npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># stage 2</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span> --from=my-app-build /app/dist/app-to-run-inside-docker /usr/share/nginx/html</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="建置-dockerfile"><a class="header-anchor" href="#建置-dockerfile"> </a>建置 Dockerfile</h1><p>要建置 Image 透過指令就可以完成了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line">// 範例</span><br><span class="line">docker build -t angular-app .</span><br></pre></td></tr></table></figure><ul><li><code>-t</code> : 上 Tag</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面兩篇筆記都在整理如何操作 docker container，要怎麼製作最重要的 Image 呢? 我會在這篇整理出來&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.kevinyang.net/categories/Docker/"/>
    
      <category term="Container" scheme="http://blog.kevinyang.net/categories/Container/"/>
    
    
      <category term="Docker" scheme="http://blog.kevinyang.net/tags/Docker/"/>
    
      <category term="Container" scheme="http://blog.kevinyang.net/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>[容器] 容器技術之 Docker 篇 - 指令操作</title>
    <link href="http://blog.kevinyang.net/2020/07/31/docker-101-note-2/"/>
    <id>http://blog.kevinyang.net/2020/07/31/docker-101-note-2/</id>
    <published>2020-07-31T09:10:13.000Z</published>
    <updated>2021-02-18T02:25:04.971Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇整理了概念，這一篇來整理常用的指令，雖然也有 GUI 操作 docker 的服務，但透過指令還是比較快的</p><a id="more"></a><h1 id="image-相關"><a class="header-anchor" href="#image-相關"> </a>Image 相關</h1><ul><li><p>列出本機端擁有的 images</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li><code>-a</code>：列出完整的映像檔層次資訊。每個映像檔是由不同層次組成的，我們會在稍後說明。</li><li><code>-q</code>：只列出映像檔ID。這在做映像檔批次處理時很方便。</li><li><code>-tree</code>：官方文件已經沒有這個參數，但還是可以用。列出映像檔不同層次之間的樹狀關係。</li></ul></li><li><p>下載 Image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;image name&gt;</span><br></pre></td></tr></table></figure></li><li><p>刪除 Image</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &lt;image name&gt;</span><br></pre></td></tr></table></figure></li><li><p>幫 Image 上 Tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br></pre></td></tr></table></figure></li><li><p>建置 Image 檔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build</span><br></pre></td></tr></table></figure></li><li><p>上傳 Image 檔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push</span><br></pre></td></tr></table></figure></li></ul><h1 id="container-相關"><a class="header-anchor" href="#container-相關"> </a>Container 相關</h1><h2 id="執行時的操作指令"><a class="header-anchor" href="#執行時的操作指令"> </a>執行時的操作指令</h2><ul><li><p>建立 Container 並執行指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker create [OPTIONS] IMAGE [COMMAND] [ARG...] // 建立但不會啟動執行 Container </span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...] // 建立且啟動執行 Container</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> : 背景執行</li><li><code>-i</code>: 輸入</li><li><code>-t</code>: 輸出</li><li><code>--name</code>: 給 Container 名稱</li><li><code>-p [本機 Port]:[Container 內部 Port]</code>: Port mapping</li><li><code>-v</code>: 掛載  volumes</li><li><code>-rm</code>: 執行結束後自動移除</li><li>相關參數請參閱 <a href="https://docs.docker.com/engine/reference/commandline/create/#options" target="_blank" rel="noopener">Docker docs</a></li></ul></li><li><p>刪除執行中的 Container，<strong>但 Container 還是存在，只是死了。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill CONTAINER</span><br></pre></td></tr></table></figure><ul><li><code>--signal, -s</code> : 送訊號到 Container</li></ul></li><li><p>移除 Container(停止或運行中都行)，Container就從這世上消失了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm CONTAINER</span><br></pre></td></tr></table></figure><ul><li><code>--force, -f</code> : 強制移除</li><li><code>--link, -l</code> 移除特定連結</li><li><code>--volumnes, -v</code> 移除掛載在 Container 上的匿名 volumes</li></ul></li><li><p>暫停執行中的 Container，<strong>仍暫有記憶體停，服務不中斷</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></li><li><p>恢復暫停中的 Container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></li><li><p>停止執行中的 Container，<strong>但不暫有記憶體，服務中斷</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li><code>--time, -t</code> 幾秒後停止 Container</li></ul></li><li><p>啟動停止中的 Container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li><code>--attach, -a</code> : Attach STDOUT/STDERR and forward signals</li><li><code>--interactive, -i</code>: Attach container’s STDIN</li></ul></li><li><p>重新啟動Container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li><code>--time, -t</code>: 幾秒後重啟 Container</li></ul></li><li><p>讓 Container 暫停直到 Container 停止為止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker wait CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure></li><li><p>更名 Container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename CONTAINER NEW_NAME</span><br></pre></td></tr></table></figure></li></ul><h2 id="狀態"><a class="header-anchor" href="#狀態"> </a>狀態</h2><ul><li>inspect：檢查 Container 的狀態</li><li>stats：查看 Container 的 CPU、記憶體及網路使用</li><li>port：查看 Container 的通訊埠使用</li><li>ps：查看 Container 使用狀態<ul><li><code>-a</code> 列出所有的 Container</li></ul></li><li>top：查看 Container 在主系統中的記憶體使用</li><li>dpid：查看 Container 的 pid</li></ul><h2 id="執行時的操作"><a class="header-anchor" href="#執行時的操作"> </a>執行時的操作</h2><ul><li><p>attach：連接 Container 的標準輸出輸入端</p><ul><li>使用<code>-d</code>或<code>-id</code>參數：離開 Container 時該 Container 停止。</li><li>使用<code>-td</code>參數：離開 Container 時該 Container 繼續在背景。</li></ul></li><li><p>exec：在外部向 Container 內執行指令</p></li><li><p>denter：進入 Container</p></li><li><p>logs：將 Container 內的輸出顯示到螢幕上</p></li><li><p>cp: 複製檔案到 Container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /path/to/file1 DOCKER_ID:/path/to/file2</span><br></pre></td></tr></table></figure></li></ul><h1 id="registry-相關"><a class="header-anchor" href="#registry-相關"> </a>Registry 相關</h1><ul><li><p>登入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login // 預設指向 public docker hub</span><br><span class="line">docker loing &lt;ip&gt; // 登入私有 docker registry</span><br></pre></td></tr></table></figure></li><li><p>登出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure></li><li><p>搜尋</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search &lt;search word&gt;</span><br><span class="line">// 查詢星星數條件</span><br><span class="line">docker search -s &lt;n start&gt; &lt;search word&gt;</span><br></pre></td></tr></table></figure><ul><li>n 是限定須有幾顆星以上的 image 才會被搜尋出來</li></ul></li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.docker.com/engine/reference/commandline/docker/" target="_blank" rel="noopener">docker base command</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇整理了概念，這一篇來整理常用的指令，雖然也有 GUI 操作 docker 的服務，但透過指令還是比較快的&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.kevinyang.net/categories/Docker/"/>
    
      <category term="Container" scheme="http://blog.kevinyang.net/categories/Container/"/>
    
    
      <category term="Docker" scheme="http://blog.kevinyang.net/tags/Docker/"/>
    
      <category term="Container" scheme="http://blog.kevinyang.net/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>[容器] 容器技術之 Docker 篇 - 概念整理</title>
    <link href="http://blog.kevinyang.net/2020/07/30/docker-101-note-1/"/>
    <id>http://blog.kevinyang.net/2020/07/30/docker-101-note-1/</id>
    <published>2020-07-30T05:42:30.000Z</published>
    <updated>2021-02-18T02:25:04.967Z</updated>
    
    <content type="html"><![CDATA[<p>閃避多年的主題，容器技術，到最後還是閃不到，只好乖乖的面對它。首先先針對比較常見的容器技術 Docker，將一些比較概念性的東西整理在這邊筆記內。</p><a id="more"></a><h1 id="與-virtual-machine-的差異"><a class="header-anchor" href="#與-virtual-machine-的差異"> </a>與 Virtual Machine 的差異</h1><p>Docker 與虛擬機器(Virtual Machine)的差異</p><ul><li>Docker 容器與容器間共用相同的 OS Kernel，虛擬機器是各自擁有自己的 OS，這表示 Docker Server 如果是跑 Linux 版本(通常也是這個)，就不能跑 Windows 的容器。虛擬機器只是共用硬體資源，所以在 VM Server 上就可以並存 Linux base 和 Windows Base</li><li>在同樣的硬體資源下，Docker 可以跑比較多單位</li><li>複製環境的速度，Docker 比較快，因為容器所需要的 Image 是可以透過指令的方式從某一個地方抓下來就可以執行，而 VM 也是可以做到，但因為 VM 的檔案比較大，搬移需要比較長的時間</li></ul><p><img src="1_gVNbunchCV5wXgnwlT-iGg.jpeg" alt="1_gVNbunchCV5wXgnwlT-iGg"></p><h1 id="概念"><a class="header-anchor" href="#概念"> </a>概念</h1><h2 id="名詞"><a class="header-anchor" href="#名詞"> </a>名詞</h2><ul><li>Image: 透過 <code>dockerfile</code> 編譯出來的 Image，唯獨屬性，就想成他是一片 CD</li><li>Container: 執行 Image 的容器，就像 CD-ROM，一個 Image 可以創造出很多 Container，Container 具有讀寫的能力，但由於 Image 是唯讀，所以要操作保留的資料應該要放在另外一個地方, <strong>Volume</strong></li><li>Volume: 可以想成容器的外掛硬碟，用來保留資料使用</li><li>Registry: 放 Image 的地方，有公用的服務，例如 Docker Hub，當然也可以自己架</li></ul><h2 id="安裝"><a class="header-anchor" href="#安裝"> </a>安裝</h2><p>Windows 10 的電腦可以安裝下載 <a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker desktop for Windows</a> 的穩定版，但須具有 Hyper-V 的功能才能啟動 Docker 的服務。如果能安裝 <a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10" target="_blank" rel="noopener">WSL 2</a> 及 <a href="https://www.microsoft.com/zh-tw/p/windows-terminal/9n0dx20hk701" target="_blank" rel="noopener">Windows Terminal</a> 的，之後的操作上會更加友善</p><p>至於其他作業系統的安裝方式，官網或是網路上有很多文件，這邊就不多贅述</p><h2 id="網路"><a class="header-anchor" href="#網路"> </a>網路</h2><p><strong>None</strong>: 沒有網路功能，簡單說就是一個沒有網卡的 Container</p><p><strong>Bridget (Default)</strong>，Docker 內部的虛擬網路，除了可以對外連線外，也提供內部各 Container 間的聯繫</p><p><img src="bridge_network.jpg" alt="bridge_network"></p><p><strong>Host Mode</strong>: 建立與 Docker Server Host 一樣等級的 network interface</p><p><img src="none-mode.png" alt="none-mode"></p><p><strong>Container Mode</strong>: Container 共用同一個 Network Interface</p><p><img src="container-mode.png" alt="container-mode"></p><p><strong>Overlay</strong>: Container 可以與跑在不同 Docker Server 上的 Container 做溝通，類似 VPN Site to Site 的概念?</p><h1 id="overview-流程圖"><a class="header-anchor" href="#overview-流程圖"> </a>Overview 流程圖</h1><p><img src="screen-shot-2020-03-19-at-9.01.25-am.png" alt="screen-shot-2020-03-19-at-9.01.25-am"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;閃避多年的主題，容器技術，到最後還是閃不到，只好乖乖的面對它。首先先針對比較常見的容器技術 Docker，將一些比較概念性的東西整理在這邊筆記內。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://blog.kevinyang.net/categories/Docker/"/>
    
      <category term="Container" scheme="http://blog.kevinyang.net/categories/Container/"/>
    
    
      <category term="Docker" scheme="http://blog.kevinyang.net/tags/Docker/"/>
    
      <category term="Container" scheme="http://blog.kevinyang.net/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>[Office] 如何在簡報上做出圓圖效果</title>
    <link href="http://blog.kevinyang.net/2020/07/28/office-ppt-tips-crop-image/"/>
    <id>http://blog.kevinyang.net/2020/07/28/office-ppt-tips-crop-image/</id>
    <published>2020-07-28T06:43:39.000Z</published>
    <updated>2021-02-18T02:25:04.955Z</updated>
    
    <content type="html"><![CDATA[<p>這一個技巧應該很多人都知道了，但我是最近需要用到才學會的，但不管怎樣還是分享一下，如何在簡報上做出圓圖效果，而這一個技巧適用於 Office PowerPoint 與 Google 簡報，以下是操作步驟。</p><a id="more"></a><h1 id="office-powerpoint"><a class="header-anchor" href="#office-powerpoint"> </a>Office PowerPoint</h1><ol><li><p>加入一張圖片，可以用複製、拖拉、或是手動加入都可以</p></li><li><p>選擇圖片，這時候上方的選單會多出跟圖片編輯相關的選項</p><p><img src="image-20200728144934186.png" alt="image-20200728144934186"></p></li><li><p>選擇【圖片格式】</p><p><img src="image-20200728145014134.png" alt="image-20200728145014134"></p></li><li><p>裁剪的功能是我們要的，但這之前先介紹裁剪原本的功能</p><ol><li><p>可以裁剪我們想要的圖片範圍，點選【裁剪】後圖片的邊界會顯示如下圖圓圈標示起來的樣式</p><p><img src="image-20200728145333770.png" alt="image-20200728145333770"></p></li><li><p>透過移動邊際來決定裁剪後要顯示的範圍</p><p><img src="image-20200728145420151.png" alt="image-20200728145420151"></p></li><li><p>確定後只會留下明亮的部分</p></li></ol></li><li><p>除了預設功能外，【裁剪】下方的箭頭打開還有更多的功能，本篇文章的圓圖顯示就是要利用這邊的功能</p><p><img src="image-20200728145539002.png" alt="image-20200728145539002"></p></li></ol><h2 id="顯示圓圖"><a class="header-anchor" href="#顯示圓圖"> </a>顯示圓圖</h2><ol><li><p>選擇裁剪成圖形，選擇橢圓形，(沒有圓形的選項)</p><p><img src="image-20200728145657272.png" alt="image-20200728145657272"></p><p><img src="image-20200728145738420.png" alt="image-20200728145738420"></p></li><li><p>設定長寬比例為 <strong>1 : 1</strong></p><p><img src="image-20200728145813218.png" alt="image-20200728145813218"></p></li><li><p>完成圓形圖片的顯示</p><p><img src="image-20200728145845651.png" alt="image-20200728145845651"></p></li></ol><h1 id="google-簡報"><a class="header-anchor" href="#google-簡報"> </a>Google 簡報</h1><p>在 Google 簡報上要顯示圓形圖片的方式跟 PowerPoint 是一樣的</p><ol><li><p>插入圖片</p><p><img src="image-20200728150019552.png" alt="image-20200728150019552"></p></li><li><p>選擇圖片後，會出現【裁剪】的圖示</p><p><img src="image-20200728150135004.png" alt="image-20200728150135004"></p></li><li><p>透過旁邊的箭頭選單，選擇要裁剪的圖形樣式</p><p><img src="image-20200728150215963.png" alt="image-20200728150215963"></p></li><li><p>這裡要留意的是，如果圖片的長寬比例不是 1 : 1 的關係時，就不會顯示成圓形，所以要裁剪圖片的尺寸</p><p><img src="image-20200728150816591.png" alt="image-20200728150816591"></p><p><img src="image-20200728150910331.png" alt="image-20200728150910331"></p></li><li><p>打完收工</p></li></ol><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><p>本文章使用的圖片來源是 Photo by <a href="https://unsplash.com/@vdapinto?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Vitor Pinto</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這一個技巧應該很多人都知道了，但我是最近需要用到才學會的，但不管怎樣還是分享一下，如何在簡報上做出圓圖效果，而這一個技巧適用於 Office PowerPoint 與 Google 簡報，以下是操作步驟。&lt;/p&gt;
    
    </summary>
    
      <category term="Office" scheme="http://blog.kevinyang.net/categories/Office/"/>
    
    
      <category term="Office" scheme="http://blog.kevinyang.net/tags/Office/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 幫 moment.js 套件瘦身</title>
    <link href="http://blog.kevinyang.net/2020/07/25/angular-moment-localte-is-too-fat/"/>
    <id>http://blog.kevinyang.net/2020/07/25/angular-moment-localte-is-too-fat/</id>
    <published>2020-07-25T04:21:38.000Z</published>
    <updated>2021-02-18T02:25:04.955Z</updated>
    
    <content type="html"><![CDATA[<p>長久以來，使用 moment.js 這一個時間套件讓我很掙扎，畢竟他很好用但很肥，主要肥胖的地方都是一堆用不到的 locale.</p><p>今天終於下定決心要來解決這個問題，經過兩分鐘的搜尋後，以下是解法</p><a id="more"></a><ol><li>在 <code>src</code> 資料夾下建立一個 locale 空的資料夾</li><li>在 <code>angular.json</code> 的 <code>fileReplacements</code> 內多新增下面設定</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"replace"</span>: <span class="string">"node_modules/moment/locale/"</span>,</span><br><span class="line">  <span class="attr">"with"</span>: <span class="string">"src/locale/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當這樣子設定完成後，ng build --prod 時會出現 <code>\moment\locale\af.js&quot; does not exist.</code> 找不到的錯誤訊息，沒關係這個不會影響到我們的程式執行。</p><p>經過這樣子的調整後，整個 moment locale 的部分就會被拔掉，瞬間瘦了快 400kb 的大小，可以算是瘦身成功</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;長久以來，使用 moment.js 這一個時間套件讓我很掙扎，畢竟他很好用但很肥，主要肥胖的地方都是一堆用不到的 locale.&lt;/p&gt;
&lt;p&gt;今天終於下定決心要來解決這個問題，經過兩分鐘的搜尋後，以下是解法&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[.NET Core] 使用 Azure Key Vault 服務來管理簽章用的金鑰</title>
    <link href="http://blog.kevinyang.net/2020/06/22/azure-keyVault-sign-with-rsa/"/>
    <id>http://blog.kevinyang.net/2020/06/22/azure-keyVault-sign-with-rsa/</id>
    <published>2020-06-22T13:16:41.000Z</published>
    <updated>2021-02-18T02:25:04.951Z</updated>
    
    <content type="html"><![CDATA[<p>要使用 RSA Private Key 來做資料簽章表示我們需要將 Private Key 存放在某一個地方，但絕對不會在程式的參數設定檔內，其實在 <a href="http://ASP.NET" target="_blank" rel="noopener">ASP.NET</a> Core 內提供很多方法可以存放設定檔，例如使用 user secret，更多資訊可以參閱<a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/app-secrets?view=aspnetcore-3.1" target="_blank" rel="noopener">此文件</a>。</p><p>Azure 上面也有一個 Azure Key Vault 的服務，可以集中管理相關的金鑰 (Keys)、秘密 (Secret)、憑證 (Certificate) 等資訊，而相關的服務就可以連線到這一個 Key Vault 服務取得相關的資訊做進一步的使用，例如加解密等作業</p><a id="more"></a><h1 id="秘密-secret"><a class="header-anchor" href="#秘密-secret"> </a>秘密 (Secret)</h1><p>在一個網站會有一些設定檔會因為部屬環境而所異動，這一類的設定當然不可能寫死在程式裡，所以會將這一類的設定檔放在某一個設定檔類，例如 appsettings.json 或是 user secret 等地方，而像資料庫連線這種資料敏感的資料，存放在 appsettings.json 內就十分危險，會建議放在版控以外的地方或是 Hosting 的主機上，例如 Azure App Service 就有提供設定環境參數的地方。</p><p><img src="image-20200622213144659.png" alt="image-20200622213144659"></p><p>但如果同樣的資訊出現在不同的程式裡，分別設定就變得十分不合適了，這時候使用 Azure Key Vault 服務就會是個不錯的選擇，但這邊就不多說明如何建立 Azure Key Vault 的步驟了，相關資訊可以上網找一下，應該蠻多的</p><p>當 Azure Key Vault 設定好時，為了要讓網站 (<a href="http://ASP.NET" target="_blank" rel="noopener">ASP.NET</a> Core MVC) 可以將 Key Vault 上所設定的 Secret 資訊讀近來，還需要以下有幾個步驟</p><ol><li><p>在 Azure Active Directory 下註冊應用程式</p><p><img src="image-20200622213613127.png" alt="image-20200622213613127"></p></li><li><p>註冊完成後，到該應用程式下的【憑證與秘密】，新增 【用戶端密碼】</p><ol><li>這邊需要記下兩個資訊，分別是 【應用程式 (用戶端) 識別碼】與 【用戶端密碼的值】</li><li>這邊如果不想要使用用戶端密碼的，可以使用憑證的方式</li></ol></li><li><p>回到 Azure Key Vault 的服務內，授權應用程式可以存取 Key Vault</p><p><img src="SNAGHTML2126530-1592833176303.PNG" alt="img"></p><ol start="4"><li><p>新增存取原則</p><p><img src="image-20200622214050780.png" alt="image-20200622214050780"></p><ul><li>設定相關的權限</li><li>選擇套用的主體，這邊是指剛剛所註冊的應用程式</li></ul></li><li><p>完成新增動作</p></li></ol><p>到這邊，就已經完成相關權限設定的部分，接下來就是程式端的設定</p></li></ol><h2 id="程式"><a class="header-anchor" href="#程式"> </a>程式</h2><ol><li><p>需要安裝以下套件</p><ol><li><a href="https://www.nuget.org/packages/Microsoft.Azure.Services.AppAuthentication" target="_blank" rel="noopener">Microsoft.Azure.Services.AppAuthentication</a></li><li><a href="https://www.nuget.org/packages/Microsoft.Azure.KeyVault" target="_blank" rel="noopener">Microsoft.Azure.KeyVault</a></li><li><a href="https://www.nuget.org/packages/Microsoft.Extensions.Configuration.AzureKeyVault/" target="_blank" rel="noopener">Microsoft.Extensions.Configuration.AzureKeyVault</a></li></ol></li><li><p>在 appsettings.json 的地方新增此資訊</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"KeyVault": &#123;</span><br><span class="line">  "Vault": "xxx",</span><br><span class="line">  "ClientId": "xxx",</span><br><span class="line">  "ClientSecret": "xxx"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>當然這邊的 <code>ClientId</code> 和 <code>ClientSecret</code> 會放在 <code>User secret</code> 下，而不會是 <code>appsettings.json</code> 內</p></li><li><p>在 <code>Program.cs</code> 的地方做出以下調整</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            Host.CreateDefaultBuilder(args)</span><br><span class="line">                .ConfigureAppConfiguration((ctx, builder) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 新增部分</span></span><br><span class="line">                    <span class="keyword">var</span> builtConfig = builder.Build();</span><br><span class="line">                    <span class="keyword">var</span> keyVaultEndpoint = GetKeyVaultEndpoint(builtConfig[<span class="string">"KeyVault:Vault"</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(keyVaultEndpoint))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> azureServiceTokenProvider = <span class="keyword">new</span> AzureServiceTokenProvider();</span><br><span class="line">                        <span class="keyword">var</span> keyVaultClient = <span class="keyword">new</span> KeyVaultClient(</span><br><span class="line">                            <span class="keyword">new</span> KeyVaultClient.AuthenticationCallback(</span><br><span class="line">                                azureServiceTokenProvider.KeyVaultTokenCallback));</span><br><span class="line">                        builder.AddAzureKeyVault(</span><br><span class="line">                            keyVaultEndpoint, keyVaultClient, <span class="keyword">new</span> DefaultKeyVaultSecretManager());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)                </span><br><span class="line">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">                &#125;);</span><br><span class="line">   <span class="comment">// 新增部分</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetKeyVaultEndpoint</span>(<span class="params"><span class="keyword">string</span> VAULT_NAME</span>)</span> =&gt; <span class="string">$"https://<span class="subst">&#123;VAULT_NAME&#125;</span>.vault.azure.net/"</span>;</span><br></pre></td></tr></table></figure></li><li><p>當完成這修改後，.NET Core MVC 就會優先從 Azure Key Vault 裡取得 secret 資料，讀取的方式與其他參數設定取法是一樣的</p></li></ol><h1 id="金鑰-keys"><a class="header-anchor" href="#金鑰-keys"> </a>金鑰 (Keys)</h1><p>至於金鑰的取法就比較特殊點，需要透過 <code>KeyVaultClient</code> 的方式來取得，而且也只能取得公開金鑰的部分，私有金鑰要做的事情，則會透過 <code>KeyVaultClient</code> 來完成。</p><p>要建立 <code>KeyVaultClient</code> 的方法如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> KeyVaultClient <span class="title">GetClient</span>(<span class="params"></span>)</span> =&gt; <span class="keyword">new</span> KeyVaultClient(<span class="keyword">new</span> KeyVaultClient.AuthenticationCallback(<span class="keyword">async</span> (<span class="keyword">string</span> authority, <span class="keyword">string</span> resource, <span class="keyword">string</span> scope) =&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> context = <span class="keyword">new</span> AuthenticationContext(authority, TokenCache.DefaultShared);</span><br><span class="line">           ClientCredential clientCred = <span class="keyword">new</span> ClientCredential(configuration[<span class="string">"KeyVault:ClientId"</span>], configuration[<span class="string">"KeyVault:ClientSecret"</span>]);</span><br><span class="line">           <span class="keyword">var</span> authResult = <span class="keyword">await</span> context.AcquireTokenAsync(resource, clientCred);</span><br><span class="line">           <span class="keyword">return</span> authResult.AccessToken;</span><br><span class="line">       &#125;));</span><br></pre></td></tr></table></figure><p>執行 <code>GetClient()</code> 就可以取得 KeyVaultClient，當取得 client 後，就可以取得我們想要的金鑰，但這邊最簡單的方式是透過金鑰的識別碼</p><p><img src="image-20200622220559893.png" alt="image-20200622220559893"></p><p><img src="image-20200622225114968.png" alt="image-20200622225114968"></p><p><img src="image-20200622220802801.png" alt="image-20200622220802801"></p><p>這邊的【金鑰識別碼】就是我們等等要用的資訊，先記起來，相關的程式碼會這樣子寫。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> KeyId = <span class="string">"xxx"</span>; <span class="comment">// 金鑰識別碼</span></span><br><span class="line"><span class="keyword">var</span> client = GetClient();</span><br><span class="line"><span class="keyword">var</span> hostKey = <span class="keyword">await</span> client.GetKeyAsync(KeyId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得 Public Key </span></span><br><span class="line"><span class="keyword">var</span> rsa = hostkye.Key.ToRSA();</span><br><span class="line"><span class="keyword">var</span> publicKey = rsa.ToXmlString(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 簽章</span></span><br><span class="line"><span class="keyword">var</span> hasher = <span class="keyword">new</span> SHA256CryptoServiceProvider();</span><br><span class="line"><span class="keyword">var</span> digest = hasher.ComputeHash(data_buffer);</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> client.SignAsync(KeyId, <span class="string">"RS256"</span>, digest);</span><br><span class="line"><span class="keyword">byte</span>[] sign_buffer = result.Result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驗證簽章</span></span><br><span class="line"><span class="keyword">var</span> sign_buffer = sign_getFromSomeWhere();</span><br><span class="line"><span class="keyword">var</span> data_buffer = data_getFromSomeWhere();</span><br><span class="line"><span class="keyword">var</span> rsa = <span class="keyword">new</span> RSACryptoServiceProvider();</span><br><span class="line">rsa.FromXmlString(publicKey);</span><br><span class="line"><span class="keyword">var</span> hasher = <span class="keyword">new</span> SHA256CryptoServiceProvider();</span><br><span class="line"><span class="keyword">var</span> digest = hasher.ComputeHash(data_buffer);</span><br><span class="line"><span class="keyword">var</span> isVerfy = rsa.VerifyHash(digest, <span class="string">"Sha256"</span>, sign_buffer);</span><br></pre></td></tr></table></figure><p>到這裡基本上就是一些 KeyVaultClient 的操作，當然還有其他更細節的東西，可能就要等我之後有玩更深入時，才能分享了</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://azure.microsoft.com/zh-tw/services/key-vault/" target="_blank" rel="noopener">Azure Key Vault</a></li><li><a href="https://www.youtube.com/watch?v=PgujSug1ZbI" target="_blank" rel="noopener">Azure Key Vault Tutorial | Secure secrets, keys and certificates easily</a></li><li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/key-vault-configuration?view=aspnetcore-3.1" target="_blank" rel="noopener">ASP.NET Core 中的 Azure Key Vault 設定提供者</a></li><li><a href="https://dotblogs.com.tw/tom5707/2018/05/07/004419" target="_blank" rel="noopener">[ASP.NET Core] 使用User Secret安全存放開發應用程式密鑰(VS 2017)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要使用 RSA Private Key 來做資料簽章表示我們需要將 Private Key 存放在某一個地方，但絕對不會在程式的參數設定檔內，其實在 &lt;a href=&quot;http://ASP.NET&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ASP.NET&lt;/a&gt; Core 內提供很多方法可以存放設定檔，例如使用 user secret，更多資訊可以參閱&lt;a href=&quot;https://docs.microsoft.com/zh-tw/aspnet/core/security/app-secrets?view=aspnetcore-3.1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;此文件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Azure 上面也有一個 Azure Key Vault 的服務，可以集中管理相關的金鑰 (Keys)、秘密 (Secret)、憑證 (Certificate) 等資訊，而相關的服務就可以連線到這一個 Key Vault 服務取得相關的資訊做進一步的使用，例如加解密等作業&lt;/p&gt;
    
    </summary>
    
      <category term="Azure" scheme="http://blog.kevinyang.net/categories/Azure/"/>
    
      <category term=".NET Core" scheme="http://blog.kevinyang.net/categories/NET-Core/"/>
    
    
      <category term="Azure" scheme="http://blog.kevinyang.net/tags/Azure/"/>
    
      <category term=".NET Core" scheme="http://blog.kevinyang.net/tags/NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>[Azure] 將 Angular 網站放在 App Service Linux Version 上</title>
    <link href="http://blog.kevinyang.net/2020/06/15/azure-app-service-linux-angular/"/>
    <id>http://blog.kevinyang.net/2020/06/15/azure-app-service-linux-angular/</id>
    <published>2020-06-15T11:51:01.000Z</published>
    <updated>2021-02-18T02:25:04.951Z</updated>
    
    <content type="html"><![CDATA[<p>要將 Angular 放在 Azure 上面的方法有很多種，而今天要介紹的是其中一種，App Service(Linux Version)</p><a id="more"></a><p>在 Azure 上面，使用 Linux 版本的價錢可以比 Windows 版本便宜許多，但如果想要放靜態網站時又該怎麼呢? 其實可以簡單透過 npm 上面的一個套件 <a href="https://www.npmjs.com/package/serve" target="_blank" rel="noopener">serve</a> 來完成，這樣就不用自己寫一個 Http Server。但如果是要給 Production 環境使用，還是建議使用正統的 http server 寫法</p><p>在 App Service 上面可以這樣子設定</p><p><img src="image-20200615211052044.png" alt="image-20200615211052044"></p><p>可以透過啟動指令的方式來啟動我們想要執行的程式，所以如果是 node epxress 的情況下，就會是 <code>node ./index.js</code> 之類的</p><p>而部屬的動作就將 Angular build 出的專案資料夾內的檔案上傳到 App Service 即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要將 Angular 放在 Azure 上面的方法有很多種，而今天要介紹的是其中一種，App Service(Linux Version)&lt;/p&gt;
    
    </summary>
    
      <category term="Azure" scheme="http://blog.kevinyang.net/categories/Azure/"/>
    
      <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
      <category term="Azure" scheme="http://blog.kevinyang.net/tags/Azure/"/>
    
      <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Angular FormGroup Value 之被忽略的細節</title>
    <link href="http://blog.kevinyang.net/2020/05/06/angular-formgroup-value/"/>
    <id>http://blog.kevinyang.net/2020/05/06/angular-formgroup-value/</id>
    <published>2020-05-06T07:57:13.000Z</published>
    <updated>2021-02-18T02:25:04.951Z</updated>
    
    <content type="html"><![CDATA[<p>當在操作 Angular  表單時，於最後送出表單資料到 API 時，常見的使用方法為 <code>formGroup.value</code> 或是 <code>formGroup.getRawValue()</code> 兩種方法，關於 <code>getRawValue()</code> 大概也不用多贅述了。但你知道 <code>FormGroup</code> 的 value 取得資料的規則嗎 ?</p><a id="more"></a><h1 id="formgroup-value"><a class="header-anchor" href="#formgroup-value"> </a>FormGroup.value</h1><p>一般來說，<code>FormGroup</code> 的 value 會將該群組下的控制項資料取出，如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">formData1 = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">    firstName: <span class="keyword">new</span> FormControl(<span class="string">"Kevin"</span>),</span><br><span class="line">    lastName: <span class="keyword">new</span> FormControl(<span class="string">"Yang"</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(formData1.value); <span class="comment">// &#123;firstName: 'Kevin', lastName: 'Yang'&#125;</span></span><br></pre></td></tr></table></figure><p>而第一個新手常會踩到的雷，會這遇到 <code>FormControl</code> 狀態是 <code>Disabed</code> 時，<code>FormGroup</code> 取出的值就不會是全部了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">formData1 = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">    firstName: <span class="keyword">new</span> FormControl(&#123;value:<span class="string">"Kevin"</span>, disabled: <span class="literal">true</span>&#125;),</span><br><span class="line">    lastName: <span class="keyword">new</span> FormControl(<span class="string">"Yang"</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(formData1.value); <span class="comment">// &#123;lastName: 'Yang'&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(formData1.getRawValue()); <span class="comment">// &#123;firstName: 'Kevin', lastName: 'Yang'&#125;</span></span><br></pre></td></tr></table></figure><p>官方文件說明</p><blockquote><p>For an enabled <code>FormGroup</code>, the values of enabled controls as an object with a key-value pair for each member of the group.</p></blockquote><p>到這邊都還算正常，但你知道當 <code>FormGroup</code> 狀態為 <code>Disabled</code> 時，就會取出所有控制項的值嗎?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">formData1 = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">    firstName: <span class="keyword">new</span> FormControl(&#123;value:<span class="string">"Kevin"</span>, disabled: <span class="literal">true</span>&#125;),</span><br><span class="line">    lastName: <span class="keyword">new</span> FormControl(<span class="string">"Yang"</span>),</span><br><span class="line">&#125;);</span><br><span class="line">formData1.disable();</span><br><span class="line"><span class="built_in">console</span>.log(formData1.value); <span class="comment">// &#123;firstName: 'Kevin', lastName: 'Yang'&#125;</span></span><br></pre></td></tr></table></figure><p>根據官網的說明</p><blockquote><p>For a disabled <code>FormGroup</code>, the values of all controls as an object with a key-value pair for each member of the group.</p></blockquote><p>但如果是這樣子的結構，會取得怎樣的值呢?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">formData1 = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">    firstName: <span class="keyword">new</span> FormControl(&#123;value:<span class="string">"Kevin"</span>, disabled: <span class="literal">true</span>&#125;),    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(formData1.value); <span class="comment">// ??</span></span><br></pre></td></tr></table></figure><p>在第五行會顯示 <code>{firstName: 'Kevin'}</code>，這是一件我剛開始也覺得很困惑的現象，為什麼明明 <code>FormControl</code> 是 <code>disabled</code>  的狀態，但為什麼還能取得呢?</p><h2 id="原始碼解析"><a class="header-anchor" href="#原始碼解析"> </a>原始碼解析</h2><p>在 <code>FormGroup</code>  class 內有一個方法是在判斷目前 <code>FormGroup</code> 下的控制項是否全部為 <code>Disabled</code> ，如果是自己本身的狀態也會被設定為 <code>Disabled</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> _allControlsDisabled(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> controlName of <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.controls)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.controls[controlName].enabled) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.controls).length &gt; <span class="number">0</span> || <span class="keyword">this</span>.disabled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/angular/angular/blob/master/packages/forms/src/model.ts#L1631-L1638" target="_blank" rel="noopener">source code</a></li></ul><p>因為這一個關係，上面那一個問題就會使用 <code>FormGroup</code> 為 Disabled 時的規則運行</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://angular.io/api/forms/AbstractControl#properties" target="_blank" rel="noopener">Angular API</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;當在操作 Angular  表單時，於最後送出表單資料到 API 時，常見的使用方法為 &lt;code&gt;formGroup.value&lt;/code&gt; 或是 &lt;code&gt;formGroup.getRawValue()&lt;/code&gt; 兩種方法，關於 &lt;code&gt;getRawValue()&lt;/code&gt; 大概也不用多贅述了。但你知道 &lt;code&gt;FormGroup&lt;/code&gt; 的 value 取得資料的規則嗎 ?&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Angular Form 值變化 - 不踩雷就不會進步</title>
    <link href="http://blog.kevinyang.net/2020/04/20/angular-form-valuechanges/"/>
    <id>http://blog.kevinyang.net/2020/04/20/angular-form-valuechanges/</id>
    <published>2020-04-20T01:49:44.000Z</published>
    <updated>2021-02-18T02:25:04.951Z</updated>
    
    <content type="html"><![CDATA[<p>Angular Reacitve Form 內有一套值的更新流程，從 FormGroup 到 FormControl 間到底是如何進行資料的更新，有什麼要留意的地方，在這篇筆記內我盡量整理 (會持續潤稿)</p><a id="more"></a><p>首先先將重點放在 <code>FormGroup</code> 和 <code>FormControl</code> 這兩個主體上就好，我們都知道 <code>FormGroup</code> 和 <code>FormControl</code> 都是繼承 <code>AbstractControl</code>，不同的部分就在各 class 上重新撰寫 ，好加在的是這篇文章要看的程是碼都在同一個<a href="https://github.com/angular/angular/blob/d7e9d8746a47c689fd8014f3913c47c4d6692709/packages/forms/src/model.ts" target="_blank" rel="noopener">檔案</a>上</p><p>而此篇要探討的是 <code>setValue</code>、<code>patchValue</code> 和 <code>valuechanges</code> 這三件事情，到底更新的流程是什麼，為什麼這件事情很重要，當在寫連動表單或是物件時，流程一但搞錯就會讓你除錯除到死</p><h1 id="原始碼解析"><a class="header-anchor" href="#原始碼解析"> </a>原始碼解析</h1><h2 id="formcontrol"><a class="header-anchor" href="#formcontrol"> </a>FormControl</h2><p>先從最底層的元件來看，對於 <code>FormControl</code> 來說，<code>patchValue</code> 與 <code>setValue</code> 是沒有差異的，即使呼叫 <code>patchValue</code>，還是會去執行 <code>setValue</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> patchValue(value: <span class="built_in">any</span>, options: &#123;</span><br><span class="line">    onlySelf?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitEvent?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitModelToViewChange?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitViewToModelChange?: <span class="built_in">boolean</span></span><br><span class="line">  &#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setValue(value, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>setValue</code> 會執行的程是碼其實也不多，所有的工作都落在 <code>updateValueAndValidity</code> 上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setValue(value: <span class="built_in">any</span>, options: &#123;</span><br><span class="line">   onlySelf?: <span class="built_in">boolean</span>,</span><br><span class="line">   emitEvent?: <span class="built_in">boolean</span>,</span><br><span class="line">   emitModelToViewChange?: <span class="built_in">boolean</span>,</span><br><span class="line">   emitViewToModelChange?: <span class="built_in">boolean</span></span><br><span class="line"> &#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">   (<span class="keyword">this</span> <span class="keyword">as</span> &#123;value: <span class="built_in">any</span>&#125;).value = <span class="keyword">this</span>._pendingValue = value;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>._onChange.length &amp;&amp; options.emitModelToViewChange !== <span class="literal">false</span>) &#123;</span><br><span class="line">     <span class="keyword">this</span>._onChange.forEach(</span><br><span class="line">         (changeFn) =&gt; changeFn(<span class="keyword">this</span>.value, options.emitViewToModelChange !== <span class="literal">false</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.updateValueAndValidity(options); <span class="comment">// 重點 function</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="updatevalueandvalidity"><a class="header-anchor" href="#updatevalueandvalidity"> </a>updateValueAndValidity</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">updateValueAndValidity(opts: &#123;onlySelf?: <span class="built_in">boolean</span>, emitEvent?: <span class="built_in">boolean</span>&#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._setInitialStatus();</span><br><span class="line">    <span class="keyword">this</span>._updateValue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.enabled) &#123;</span><br><span class="line">      <span class="keyword">this</span>._cancelExistingSubscription();</span><br><span class="line">      (<span class="keyword">this</span> <span class="keyword">as</span> &#123;errors: ValidationErrors | <span class="literal">null</span>&#125;).errors = <span class="keyword">this</span>._runValidator();</span><br><span class="line">      (<span class="keyword">this</span> <span class="keyword">as</span> &#123;status: <span class="built_in">string</span>&#125;).status = <span class="keyword">this</span>._calculateStatus();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === VALID || <span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">        <span class="keyword">this</span>._runAsyncValidator(opts.emitEvent);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opts.emitEvent !== <span class="literal">false</span>) &#123;</span><br><span class="line">      (<span class="keyword">this</span>.valueChanges <span class="keyword">as</span> EventEmitter&lt;<span class="built_in">any</span>&gt;).emit(<span class="keyword">this</span>.value);</span><br><span class="line">      (<span class="keyword">this</span>.statusChanges <span class="keyword">as</span> EventEmitter&lt;<span class="built_in">string</span>&gt;).emit(<span class="keyword">this</span>.status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._parent &amp;&amp; !opts.onlySelf) &#123;</span><br><span class="line">      <span class="keyword">this</span>._parent.updateValueAndValidity(opts);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主要程式碼是寫在 <code>AbstractControl</code> 裡</p><ul><li><p>line 2: 取得目前物件的狀態，如果是 <code>disabled</code> 的話，則 <code>status</code> 將會是 <code>DISABLED</code> 不然就是 <code>VALID</code></p></li><li><p>line 3: 只有在 <code>FormGroup</code> 和 <code>FormArray</code> 有實做，根據目前 <code>Group</code> / <code>Array</code> 內子物件的值更新本身的值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** @internal */</span></span><br><span class="line">_updateValue(): <span class="built_in">void</span> &#123;</span><br><span class="line">  (<span class="keyword">this</span> <span class="keyword">as</span> &#123;value: <span class="built_in">any</span>&#125;).value = <span class="keyword">this</span>._reduceValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** @internal */</span></span><br><span class="line">_reduceValue() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._reduceChildren(</span><br><span class="line">      &#123;&#125;, <span class="function">(<span class="params">acc: &#123;[k: <span class="built_in">string</span>]: AbstractControl&#125;, control: AbstractControl, name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (control.enabled || <span class="keyword">this</span>.disabled) &#123;</span><br><span class="line">          acc[name] = control.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>line 5 ~ 13: 如果物件狀態是 <code>enabled</code> 才會進行驗證動作，驗證的順序為</p><ol><li>同步驗證先執行，並更新狀態</li><li>如果狀態是 <code>VALID</code> 或是 <code>PENDING</code> 才會進行非同步驗證</li></ol></li><li><p>根據傳入參數 <code>emitEvent</code> 來決定是否觸發 <code>valueChanges</code> 和 <code>statusChanges</code></p></li><li><p>根據 <code>onlySelf</code> 來決定是否要觸發父層的 <code>updateValueAndValidity</code></p></li></ul><p>這裡有一個小技巧，所傳入的參數值並沒有設定預設值，而是很明確指定判斷值，這招可以學一下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (opts.emitEvent !== <span class="literal">false</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="formgroup"><a class="header-anchor" href="#formgroup"> </a>FormGroup</h2><h3 id="patchvalue"><a class="header-anchor" href="#patchvalue"> </a>patchValue</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">patchValue(value: &#123;[key: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;, options: &#123;onlySelf?: <span class="built_in">boolean</span>, emitEvent?: <span class="built_in">boolean</span>&#125; = &#123;&#125;):</span><br><span class="line">     <span class="built_in">void</span> &#123;</span><br><span class="line">   <span class="built_in">Object</span>.keys(value).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.controls[name]) &#123;</span><br><span class="line">       <span class="keyword">this</span>.controls[name].patchValue(value[name], &#123;onlySelf: <span class="literal">true</span>, emitEvent: options.emitEvent&#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">this</span>.updateValueAndValidity(options);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>會先更新子物件，並設定只會更新子物件本身</li><li>在跑自己的 <code>updateValueAndValidity</code></li></ul><h1 id="細節"><a class="header-anchor" href="#細節"> </a>細節</h1><p>一般使用基本上不會遇到什麼問題，但如果遇到連動的情況，就要特別小心</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">formData = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">   firstName: <span class="keyword">new</span> FormControl(),</span><br><span class="line">   lastName: <span class="keyword">new</span> FormControl()</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h2 id="情境-1"><a class="header-anchor" href="#情境-1"> </a>情境 1</h2><p>請各位想想根據第一段的原始碼解析，這邊跑出來結果會是什麼呢?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.formData.valueChanges.subscribe(&#123;</span><br><span class="line">      next: <span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"formGroup"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.firstName.valueChanges.subscribe(&#123;</span><br><span class="line">      next: <span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"firstName:"</span>, value, <span class="string">"formGroup value:"</span> ,<span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.lastName.valueChanges.subscribe(&#123;</span><br><span class="line">     next: <span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"lastName:"</span>, value, <span class="string">"formGroup value:"</span> ,<span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.patchValue(&#123;</span><br><span class="line">    firstName: <span class="string">"1"</span>,</span><br><span class="line">    lastName: <span class="string">"2"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>結果如下</p><p><img src="image-20200420113943341.png" alt="image-20200420113943341"></p><p>為什麼呢? 來模擬一下執行的步驟</p><ol><li><code>formGroup.patchValue</code> : 會根據傳進去的資料依序更新 <code>firstname</code> 與 <code>lastName</code> formControl</li><li><code>firstName FormControl</code> 更新自身的值，但因為 <code>FormGroup</code> 傳入 <code>onlySelf</code> 為 <code>true</code>，所以不會更新 parent 的值</li><li><code>lastName FormControl</code> 更新自身的值，但因為 <code>FormGroup</code> 傳入 <code>onlySelf</code> 為 <code>true</code>，所以不會更新 parent 的值</li><li><code>FormGroup</code> 執行 <code>updateValueAndValidity</code></li><li>根據 <code>children</code> 更新自身的值</li><li>送出 <code>valueChanges event</code></li><li>結束</li></ol><h2 id="情境-2"><a class="header-anchor" href="#情境-2"> </a>情境 2</h2><p>這邊跑出來結果會是什麼呢?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.formData.valueChanges.subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"formGroup"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.firstName.valueChanges</span><br><span class="line">    .pipe(tap(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.formData.controls.lastName.setValue(<span class="string">"3"</span>)))</span><br><span class="line">    .subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">"firstName:"</span>,</span><br><span class="line">        value,</span><br><span class="line">        <span class="string">"formGroup value:"</span>,</span><br><span class="line">        <span class="keyword">this</span>.formData.value</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.lastName.valueChanges.subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"lastName:"</span>, value, <span class="string">"formGroup value:"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.patchValue(&#123;</span><br><span class="line">    firstName: <span class="string">"1"</span>,</span><br><span class="line">    lastName: <span class="string">"2"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>結果如下</p><p><img src="image-20200420114620734.png" alt="image-20200420114620734"></p><p>你想對了嗎? 我們來模擬一下執行的步驟</p><ol><li><code>formGroup.patchValue</code> : 會根據傳進去的資料依序更新 <code>firstname</code> 與 <code>lastName</code> formControl</li><li><code>firstName FormControl</code> 更新自身的值，但因為 <code>FormGroup</code> 傳入 <code>onlySelf</code> 為 <code>true</code> ，所以不會更新 parent 的值</li><li>過程中去執行更新 <code>lastName FormControl</code> 的值 ，參數接為預設值，所以 <code>emitEvent: true,onlySelf:false</code></li><li>觸發 <code>lastName FormControl</code> 的 <code>valueChanges</code></li><li>觸發父層的 <code>updateValueAndValidity</code></li><li><code>firstName FormControl</code> 自身 <code>valueChanges</code> 流程跑玩</li><li><code>lastName FormControl</code> 更新自身的值，但因為 <code>FormGroup</code> 傳入 <code>onlySelf</code> 為 <code>true</code>，所以不會更新父層的值</li><li><code>FormGroup</code> 執行 <code>updateValueAndValidity</code></li><li>根據 <code>children</code> 更新自身的值</li><li>送出 <code>valueChanges event</code></li><li>結束</li></ol><h2 id="情境-3"><a class="header-anchor" href="#情境-3"> </a>情境 3</h2><p>這邊跑出來結果會是什麼呢?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.formData.valueChanges.subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"formGroup"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.firstName.valueChanges</span><br><span class="line">    .pipe(tap(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.formData.controls.lastName.setValue(<span class="string">"3"</span>, &#123;emitEvent: <span class="literal">false</span>&#125;)))</span><br><span class="line">    .subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">"firstName:"</span>,</span><br><span class="line">        value,</span><br><span class="line">        <span class="string">"formGroup value:"</span>,</span><br><span class="line">        <span class="keyword">this</span>.formData.value</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.lastName.valueChanges.subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"lastName:"</span>, value, <span class="string">"formGroup value:"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.patchValue(&#123;</span><br><span class="line">    firstName: <span class="string">"1"</span>,</span><br><span class="line">    lastName: <span class="string">"2"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>結果如下，你想對了嗎?</p><p><img src="image-20200420115342646.png" alt="image-20200420115342646"></p><h2 id="情境-4"><a class="header-anchor" href="#情境-4"> </a>情境 4</h2><p>這邊跑出來結果會是什麼呢?</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.formData.valueChanges.subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"formGroup"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.firstName.valueChanges</span><br><span class="line">    .pipe(tap(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.formData.controls.lastName.setValue(<span class="string">"3"</span>, &#123;emitEvent: <span class="literal">false</span>, onlySelf: <span class="literal">true</span>&#125;)))</span><br><span class="line">    .subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">"firstName:"</span>,</span><br><span class="line">        value,</span><br><span class="line">        <span class="string">"formGroup value:"</span>,</span><br><span class="line">        <span class="keyword">this</span>.formData.value</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.lastName.valueChanges.subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"lastName:"</span>, value, <span class="string">"formGroup value:"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.patchValue(&#123;</span><br><span class="line">    firstName: <span class="string">"1"</span>,</span><br><span class="line">    lastName: <span class="string">"2"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>結果如下，你想對了嗎?</p><p><img src="image-20200420115502508.png" alt="image-20200420115502508"></p><h2 id="情境-5"><a class="header-anchor" href="#情境-5"> </a>情境 5</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.formData.valueChanges.subscribe(&#123;</span><br><span class="line">      next: <span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"formGroup"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.firstName.valueChanges</span><br><span class="line">    .pipe(</span><br><span class="line">    mergeMap(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">             timer(<span class="number">1000</span>, <span class="number">0</span>).pipe(</span><br><span class="line">        take(<span class="number">1</span>),</span><br><span class="line">        tap(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">            <span class="keyword">this</span>.formData.controls.lastName.setValue(<span class="string">"3"</span>, &#123;</span><br><span class="line">            emitEvent: <span class="literal">false</span>,</span><br><span class="line">            onlySelf: <span class="literal">true</span></span><br><span class="line">        &#125;)))</span><br><span class="line">      )</span><br><span class="line">)</span><br><span class="line">    .subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">"firstName:"</span>,</span><br><span class="line">        value,</span><br><span class="line">        <span class="string">"formGroup value:"</span>,</span><br><span class="line">        <span class="keyword">this</span>.formData.value</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.controls.lastName.valueChanges.subscribe(&#123;</span><br><span class="line">    next: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"lastName:"</span>, value, <span class="string">"formGroup value:"</span>, <span class="keyword">this</span>.formData.value)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.formData.patchValue(&#123;</span><br><span class="line">    firstName: <span class="string">"1"</span>,</span><br><span class="line">    lastName: <span class="string">"2"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>結果如下，你想對了嗎?</p><p><img src="image-20200420115625936.png" alt="image-20200420115625936"></p><h1 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h1><p>Reactive Form 將 <code>valueChanges</code> 包成 <code>Observable</code> 是很方便，要做一些連動的動作可以如流水般的操作，但問題是，如果資料流的線路沒搞對，就會發生為什麼這裡取的資料是錯的問題發生。這些細節的部分都是文件中沒有提到的</p><p>所以，在 FormControl 的 valuechanges 流中操作其它 FormControl 的值要特別小心，務必確認同步與非同步的發生順序</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular Reacitve Form 內有一套值的更新流程，從 FormGroup 到 FormControl 間到底是如何進行資料的更新，有什麼要留意的地方，在這篇筆記內我盡量整理 (會持續潤稿)&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[AMP] First AMP Page</title>
    <link href="http://blog.kevinyang.net/2020/04/16/amp-101/"/>
    <id>http://blog.kevinyang.net/2020/04/16/amp-101/</id>
    <published>2020-04-16T01:07:55.000Z</published>
    <updated>2021-02-18T02:25:04.951Z</updated>
    
    <content type="html"><![CDATA[<p>AMP = Accelerated Mobile Pages，Google帶領開發的開源專案，目的是為提升行動裝置對網站的存取速度。沒寫過，所以要來學，這一篇就是學習過程中的筆記</p><a id="more"></a><h1 id="amp-基本組成"><a class="header-anchor" href="#amp-基本組成"> </a>AMP 基本組成</h1><p>一個合格的 AMP 一定要有以下的元素</p><ol><li><p>第一行一定是 <code>&lt;!doctype html&gt;</code></p></li><li><p>一定有 <code>&lt;head&gt;&lt;/head&gt;</code> 和 <code>&lt;body&gt;&lt;/body&gt;</code> 兩個區塊</p></li><li><p><code>&lt;html&gt;</code> 標籤內要標示閃電符號 (<code>&lt;html ⚡&gt;</code>，或是 <code>amp</code> 文字 (<code>&lt;html amp&gt;</code>)</p></li><li><p><code>&lt;head&gt;</code> 的第一個元素一定是 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p></li><li><p><code>&lt;head&gt;</code> 內會有 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1,initial-scale=1&quot;&gt;</code></p></li><li><p><code>&lt;head&gt;</code> 內要有 <code>&lt;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&lt;/script&gt;</code>，這一行越早寫越好</p></li><li><p><code>&lt;head&gt;</code> 內要有 <code>&lt;link rel=&quot;canonical&quot; href=&quot;$SOME_URL&quot;&gt;</code>，<code>$SOME_URL</code> 要替換成目前頁面的網址，目的是要連結目前的 AMP 頁面到非 AMP 頁面或是網站</p></li><li><p>包含 AMP-Style: 這段程式碼會在 AMP Script 載入前將畫面隱藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">amp-boilerplate</span>&gt;</span><span class="css"><span class="selector-tag">body</span>&#123;<span class="attribute">-webkit-animation</span>:-amp-start <span class="number">8s</span> <span class="built_in">steps</span>(1,end) <span class="number">0s</span> <span class="number">1</span> normal both;<span class="attribute">-moz-animation</span>:-amp-start <span class="number">8s</span> <span class="built_in">steps</span>(1,end) <span class="number">0s</span> <span class="number">1</span> normal both;<span class="attribute">-ms-animation</span>:-amp-start <span class="number">8s</span> <span class="built_in">steps</span>(1,end) <span class="number">0s</span> <span class="number">1</span> normal both;<span class="attribute">animation</span>:-amp-start <span class="number">8s</span> <span class="built_in">steps</span>(1,end) <span class="number">0s</span> <span class="number">1</span> normal both&#125;@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;@-<span class="keyword">ms</span>-<span class="keyword">keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;@<span class="keyword">keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">amp-boilerplate</span>&gt;</span><span class="css"><span class="selector-tag">body</span>&#123;<span class="attribute">-webkit-animation</span>:none;<span class="attribute">-moz-animation</span>:none;<span class="attribute">-ms-animation</span>:none;<span class="attribute">animation</span>:none&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="amp-限制"><a class="header-anchor" href="#amp-限制"> </a>AMP 限制</h1><h2 id="css"><a class="header-anchor" href="#css"> </a>CSS</h2><p>在 AMP 上面要使用自訂 CSS 有以下的設定</p><ol><li>自訂 CSS 必須定義在 <code>&lt;style amp-custom&gt;&lt;/style&gt;</code> 內且只能有一個或是 <code>inline-style</code>，為了節省網路傳輸，不能有外部 style 連結</li><li>CSS 內容的部分大小不能大於 75 K</li><li>不能使用 <code>!important</code></li><li>不能寫 <code>i-amphtml-</code> class 和 tag 名稱，簡單說不能使用 AMP Component 要用的名稱</li><li>其它能用不能用的 CSS Style 請參閱 <a href="https://amp.dev/documentation/guides-and-tutorials/develop/style_and_layout/style_pages/?format=websites" target="_blank" rel="noopener">Suppored CSS</a></li></ol><h2 id="html"><a class="header-anchor" href="#html"> </a>HTML</h2><p>除了 CSS 有限制外，HTML 也有允許跟不允許使用的列表 ，<a href="https://github.com/ampproject/amphtml/blob/master/spec/amp-tag-addendum.md#html5-tag-whitelist" target="_blank" rel="noopener">HTML5 Tag 白名單</a></p><p>更多詳細資訊可以閱讀此文，<a href="https://amp.dev/documentation/guides-and-tutorials/learn/spec/amphtml/?format=websites" target="_blank" rel="noopener">AMP HTML Specification</a></p><h1 id="開發思維"><a class="header-anchor" href="#開發思維"> </a>開發思維</h1><p>AMP 的開發方式，基本上是使用官方提供的 Component 去組出畫面，所以在內容呈現上就是要找到對的 Component 然後將內容套進去，例如 <code>&lt;img&gt;</code>，就會用 <code>&lt;amp-img&gt;</code> 替代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">amp-img</span> <span class="attr">src</span>=<span class="string">"IMG-URL"</span> <span class="attr">layout</span>=<span class="string">"responsive"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"480"</span>&gt;</span><span class="tag">&lt;/<span class="name">amp-img</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有的動作就交給 component 來處理，像是 RWD 的效果，除了 <code>responsive</code> 的效果外，當然還有其他的設定，設定方式請參閱官方文件 <a href="https://amp.dev/documentation/guides-and-tutorials/learn/amp-html-layout/?format=websites" target="_blank" rel="noopener">AMPHTML Layout System</a> 章節</p><h2 id="使用-amp-components"><a class="header-anchor" href="#使用-amp-components"> </a>使用 AMP Components</h2><p>每一個 AMP Component 在自己的 API 文件中，大部分都有 <code>Required Scripts</code> 的資訊，而這一個資訊就是要加到頁面中，例如 <code>amp-youtube</code> 元件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">custom-element</span>=<span class="string">"amp-youtube"</span> <span class="attr">src</span>=<span class="string">"https://cdn.ampproject.org/v0/amp-youtube-0.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基於這種架構，寫 AMP  的第一個門檻是要使用哪一個 component。(怎麼跟 Flutter 好像)，更多關於 Component 的可以參閱 <a href="https://amp.dev/documentation/components/" target="_blank" rel="noopener">Components 文件</a></p><h1 id="驗證工具"><a class="header-anchor" href="#驗證工具"> </a>驗證工具</h1><p>Chrome 有出 AMP 驗證工具，安裝後即可使用，<a href="https://chrome.google.com/webstore/detail/amp-validator/nmoffdblmcmgeicmolmhobpoocbbmknc/related?hl=en" target="_blank" rel="noopener">安裝位置</a></p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://amp.dev/documentation/courses/beginning-course" target="_blank" rel="noopener">AMP Beginning Free Course</a></li><li><a href="https://support.google.com/webmasters/answer/139066?hl=zh-Hant" target="_blank" rel="noopener">整合重複的網址 canonical</a></li><li><a href="https://amp.dev/documentation/guides-and-tutorials/learn/amp-html-layout/?format=websites" target="_blank" rel="noopener">AMPHTML Layout System</a></li><li><a href="https://amp.dev/documentation/components/" target="_blank" rel="noopener">Components 文件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AMP = Accelerated Mobile Pages，Google帶領開發的開源專案，目的是為提升行動裝置對網站的存取速度。沒寫過，所以要來學，這一篇就是學習過程中的筆記&lt;/p&gt;
    
    </summary>
    
      <category term="AMP" scheme="http://blog.kevinyang.net/categories/AMP/"/>
    
    
      <category term="AMP" scheme="http://blog.kevinyang.net/tags/AMP/"/>
    
  </entry>
  
  <entry>
    <title>[Podcast] Podcast 新手上路，有什麼是我需要準備的</title>
    <link href="http://blog.kevinyang.net/2020/04/15/podcast-preparation/"/>
    <id>http://blog.kevinyang.net/2020/04/15/podcast-preparation/</id>
    <published>2020-04-15T00:52:16.000Z</published>
    <updated>2021-02-18T02:25:04.951Z</updated>
    
    <content type="html"><![CDATA[<p>收聽 Podcast 的人比你想像中的還多很多，在台灣也有很多有優質的 Podcast 節目，這裡我整理了一些開自己 Podcast 所需要準備的基本工作</p><a id="more"></a><p>開 Podcast 節目其實不難，可以分幾個部分來看</p><h1 id="企劃"><a class="header-anchor" href="#企劃"> </a>企劃</h1><p>一個節目最重要的是<strong>內容</strong>及<strong>走向</strong>，這裡所指的走向是風格，想要呈現怎樣的節目風格? 時間長度? 這些都是要在開始製作前需要思考的部分。</p><p>一但決定好風格內容後，接下來的另外一個難題就是<strong>節目名稱</strong>，節目名稱的困難點是如何帶給聽眾一個記憶點，或是凸顯主持人的個性，可以花點時間，好好的思考一下。</p><p>接下來的<strong>節目規畫</strong>部分就比較簡單了，每一個製作 Podcast 的人風格都不一樣，有些人喜歡將稿先擬好，然後進量不要脫稿演出，有些人喜歡列出這次要講的大綱，更有些人就直接上了，找出適合自己的方式，畢竟 Podcast 是一個需要時間的長期創作，找到適合的工作方式可以讓自己持續下去。</p><h1 id="軟體"><a class="header-anchor" href="#軟體"> </a>軟體</h1><h2 id="平台"><a class="header-anchor" href="#平台"> </a>平台</h2><p>規劃面到一個段落後，就可以來尋找錄出來的節目要放在哪裡，所幸目前的年代已經有很多很方便的平台與服務，可以幫我們處理這一塊的工作，以<a href="https://www.facebook.com/3Nerds" target="_blank" rel="noopener">三宅一聲</a>來說，我們是放在 <a href="https://anchor.fm/" target="_blank" rel="noopener">anchor.fm</a>上，這是國外的平台，這一類的平台台灣也有，例如 <a href="https://firstory.me/" target="_blank" rel="noopener">Firstory</a>，這些平台可以讓你放節目上去並幫你轉發布到其它媒介，例如 Spotify、iTune、Google Podcast  等。另外一種是自有平台，例如 <a href="https://www.soundon.fm/" target="_blank" rel="noopener">SoundOn</a>、<a href="https://baabao.com/" target="_blank" rel="noopener">八寶網路廣播</a>，這一類的平台就是透過自己的 App 平台收聽廣播。</p><p>就挑一個自己操作上沒有問題的平台先做，有很多節目到最後都是各平台都有放</p><h2 id="編輯軟體"><a class="header-anchor" href="#編輯軟體"> </a>編輯軟體</h2><p>聲音檔的編輯軟體，最常見的是 <a href="https://www.audacityteam.org/" target="_blank" rel="noopener">Audacity</a>，這軟體除了可以編輯外，也可以做為錄音的軟體，所以只要在自己的電腦上安裝這軟體，接上麥克風就可以開始錄製節目了。</p><h2 id="遠端錄音"><a class="header-anchor" href="#遠端錄音"> </a>遠端錄音</h2><p>這部分就有點麻煩，目前能透過網路錄製聲音的工具不多，以下就列出幾個可以錄的</p><ol><li><strong>Zoom</strong>: 這線上開會軟體，有提供分軌錄音的功能，錄製出來的音質也不錯，除了開起來很耗電腦資源外，算是一個不錯的選擇</li><li><strong>Discord</strong>: 這是在打遊戲的人比較知道的通訊軟體，音質跟延遲都有不錯的表現，也有人提供錄音用的 Bot，叫 <a href="https://craig.chat/home/" target="_blank" rel="noopener">Craig</a>，這一個 Bot 也可以做到分軌錄音的功能，但就是將音訊檔儲存在雲端空間，等結束錄音後，Bot 會提供對應的下載網址，使用上也不複雜</li><li><strong><a href="http://anchor.fm" target="_blank" rel="noopener">anchor.fm</a> 手機 App</strong> 有提供多人錄音的功能，沒實際使用過</li></ol><p>如果有其它不錯的遠端錄音方式，也在下方留言交流一下。</p><h1 id="硬體"><a class="header-anchor" href="#硬體"> </a>硬體</h1><p>或許會問一定要有電腦才能製作 Podcast 節目嗎? 其實現在每一個人手邊的手機，就是一個不錯的錄音設備，利用他就可以製作出一個高品質的節目，但還是有一些必須擁有的設備，可以讓節目品質更往上走。</p><h2 id="麥克風"><a class="header-anchor" href="#麥克風"> </a>麥克風</h2><p>一支好的麥克風是很重要的，除了可以將主持人的聲音個性好好地收錄起來，畢竟廣播節目就只有聲音，聲音品質的呈現就非常重要，算是必要投資。但麥克風的價位差異真的很大，至於要選那一種麥克風也是另外一門學問了，這裡就列出最低最低的需求，<strong>手機使用的免持耳機</strong>，至少要有這個吧 。(這個也適用在線上會議，不要在用筆電內建的麥克風了)</p><h2 id="監聽耳機"><a class="header-anchor" href="#監聽耳機"> </a>監聽耳機</h2><p>為什麼要用耳機，是要避免麥克風再次收到由喇叭發出的聲音，其次有些比較好的耳機或是錄音介面有提供監聽的輸出介面，可以聽見自己的聲音呈現的方式也是提升節目品質的重要環節。</p><h2 id="錄音環境"><a class="header-anchor" href="#錄音環境"> </a>錄音環境</h2><p>安靜沒有背景雜音的地方，不要太空曠，因為聲音會反彈會讓麥克風收到的聲音有回音，而且會有空洞的感覺。假如你的房間很空洞，多放點雜物，讓聲音的反彈行為被破壞掉就可以了，或是去買吸音棉貼在講話方向的正前方也是一種方式</p><p>對於外界的環境音，這部分能透過氣密窗或是比較厚的窗簾來做阻隔，在搭配一隻高指向性的麥克風就可以將環境噪音降到最低</p><h1 id="宣傳"><a class="header-anchor" href="#宣傳"> </a>宣傳</h1><p>FB 是一個還不錯的地方，除了自己的空間外，還有很多跟 podcast 相關的社團可以加入，例如: <a href="https://www.facebook.com/groups/497608144141740/" target="_blank" rel="noopener">Podcast Club</a></p><h1 id="我的設備清單"><a class="header-anchor" href="#我的設備清單"> </a>我的設備清單</h1><ul><li>電腦錄音</li><li>Zoom / Discord</li><li>麥克風: Blue Yeti</li><li>監聽耳機: 普通的手機耳麥</li><li>編輯軟體: Audacity</li><li>發佈平台: Anchor</li><li>FB 粉專: <a href="https://www.facebook.com/3Nerds" target="_blank" rel="noopener">三宅一聲</a></li><li>自架網站: <a href="https://www.3nerds.tw" target="_blank" rel="noopener">3 Nerds</a></li></ul><h1 id="希望入手的設備清單"><a class="header-anchor" href="#希望入手的設備清單"> </a>希望入手的設備清單</h1><ul><li>Rode Caster Pro</li><li>Rode podcaster</li><li>Rode podmic</li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="http://blog.baabao.com/search/label/%E6%96%B0%E6%89%8B%E4%B8%8A%E8%B7%AF" target="_blank" rel="noopener">八寶 - 新手上路</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收聽 Podcast 的人比你想像中的還多很多，在台灣也有很多有優質的 Podcast 節目，這裡我整理了一些開自己 Podcast 所需要準備的基本工作&lt;/p&gt;
    
    </summary>
    
      <category term="其它" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="其它" scheme="http://blog.kevinyang.net/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>[Azure] 該如何設定 JSON 物件到 App Servie Configuration 中</title>
    <link href="http://blog.kevinyang.net/2020/04/12/azure-appservice-configuation-with-nest-object/"/>
    <id>http://blog.kevinyang.net/2020/04/12/azure-appservice-configuation-with-nest-object/</id>
    <published>2020-04-11T17:07:31.000Z</published>
    <updated>2021-02-18T02:25:04.951Z</updated>
    
    <content type="html"><![CDATA[<p>我們都知道 Production 的設定檔應該要放在 Azure App Service 或是其他相關的地方，不應該將該設定檔簽入到版控中，但是，當愈到這種設定檔時，App Service 該如何設定呢?</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"AzureAdB2C": &#123;</span><br><span class="line">   "Instance": "https://xxx.xxxx/",</span><br><span class="line">   "ClientId": "...",</span><br><span class="line">   "CallbackPath": "...",</span><br><span class="line">   "Domain": "...",</span><br><span class="line">   "SignUpSignInPolicyId": "..."</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>在 <code>.NET Core</code> 的程式碼內，可以透過 <code>:</code> 的方式取得階層型態的設定檔，例如 <code>AzureAdB2C:Instance</code>，但是在 Linux 的 App Service 是不能使用冒號，所以要用兩個底線代替冒號</p><blockquote><p>In a default Linux container or a custom Linux container, any nested JSON key structure in the app setting name like <code>ApplicationInsights:InstrumentationKey</code> needs to be configured in App Service as <code>ApplicationInsights__InstrumentationKey</code> for the key name. In other words, any <code>:</code> should be replaced by <code>__</code> (double underscore).</p></blockquote><p><img src="image-20200412011534339.png" alt="image-20200412011534339"></p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/zh-tw/azure/app-service/configure-common" target="_blank" rel="noopener">Configure an App Service app in the Azure portal</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我們都知道 Production 的設定檔應該要放在 Azure App Service 或是其他相關的地方，不應該將該設定檔簽入到版控中，但是，當愈到這種設定檔時，App Service 該如何設定呢?&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&quot;AzureAdB2C&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &quot;Instance&quot;: &quot;https://xxx.xxxx/&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &quot;ClientId&quot;: &quot;...&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &quot;CallbackPath&quot;: &quot;...&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &quot;Domain&quot;: &quot;...&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &quot;SignUpSignInPolicyId&quot;: &quot;...&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Azure" scheme="http://blog.kevinyang.net/categories/Azure/"/>
    
    
  </entry>
  
  <entry>
    <title>[.NET Core] Taipei Standard Time 在 Linux 上找不到 ?</title>
    <link href="http://blog.kevinyang.net/2020/04/12/dotnet-core-timezone-on-linux/"/>
    <id>http://blog.kevinyang.net/2020/04/12/dotnet-core-timezone-on-linux/</id>
    <published>2020-04-11T16:57:25.000Z</published>
    <updated>2021-02-18T02:25:04.951Z</updated>
    
    <content type="html"><![CDATA[<p><code>.NET Core</code> 在 Linux 環境上遇到設定時區時，會遇到這一個錯誤訊息 <code>The time zone ID 'Taipei Standard Time' was **not** found on the local computer.</code> ，這一個問題在 mac 上也會遇到，主要是因為以前 <code>.Net</code> 只能跑在 windows 上，所以不會遇到這個問題，而當現在 <code>.NET Core</code> 跑在 Linux 環境上就會遇到這類似的問題</p><a id="more"></a><p>解法很簡單，判斷目前跑的環境是什麼，然後給予正確的時區名稱即可</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span> id = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ?</span><br><span class="line">                <span class="string">"Taipei Standard Time"</span> : <span class="string">"Asia/Taipei"</span>;</span><br><span class="line">TimeZoneInfo tw = TimeZoneInfo.FindSystemTimeZoneById(id);</span><br></pre></td></tr></table></figure><p>當這樣子寫完，問題就解決了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;.NET Core&lt;/code&gt; 在 Linux 環境上遇到設定時區時，會遇到這一個錯誤訊息 &lt;code&gt;The time zone ID &#39;Taipei Standard Time&#39; was **not** found on the local computer.&lt;/code&gt; ，這一個問題在 mac 上也會遇到，主要是因為以前 &lt;code&gt;.Net&lt;/code&gt; 只能跑在 windows 上，所以不會遇到這個問題，而當現在 &lt;code&gt;.NET Core&lt;/code&gt; 跑在 Linux 環境上就會遇到這類似的問題&lt;/p&gt;
    
    </summary>
    
      <category term=".NET Core" scheme="http://blog.kevinyang.net/categories/NET-Core/"/>
    
    
      <category term=".NET Core" scheme="http://blog.kevinyang.net/tags/NET-Core/"/>
    
  </entry>
  
</feed>
