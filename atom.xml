<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CK&#39;s Notepad</title>
  
  
  <link href="http://blog.kevinyang.net/atom.xml" rel="self"/>
  
  <link href="http://blog.kevinyang.net/"/>
  <updated>2023-10-06T12:37:47.301Z</updated>
  <id>http://blog.kevinyang.net/</id>
  
  <author>
    <name>KevinYang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Angular] 官方文件的 HttpTestingController 範例遇到 jest 時，結果不是想像的那樣，小心</title>
    <link href="http://blog.kevinyang.net/2023/10/06/jest-with-httpTestingController/"/>
    <id>http://blog.kevinyang.net/2023/10/06/jest-with-httpTestingController/</id>
    <published>2023-10-06T12:07:29.000Z</published>
    <updated>2023-10-06T12:37:47.301Z</updated>
    
    <content type="html"><![CDATA[<p>今天在寫 http service 測試時，無意間撞到這個問題，分享這個小雷給大家，避免死的不明不白，</p><p>這篇 <a href="https://angular.io/guide/http-test-requests">HTTP client - Test requests</a> 內說明如何使用 <code>HttpTestingController</code> 進行 http request 的測試，而因為後期的專案我都是使用 Nx 來建立，Nx 建立的專案是使用  Jest 來跑 Unit Test. 不知道是幸運還是怎樣，竟然遇到超乎預期的結果</p><span id="more"></span><p>情境是這樣的，測試一個 server 呼叫  API 回傳的結果是否符合預期，寫法是</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">callApi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">catchError</span>(<span class="function">() =&gt;</span> <span class="title function_">of</span>([])),</span><br><span class="line">    <span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x])</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>測試程式碼為</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test api&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mockData = &#123; <span class="attr">name</span>: <span class="string">&#x27;Kevin&#x27;</span> &#125;;</span><br><span class="line">  service.<span class="title function_">callApi</span>().<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(result).<span class="title function_">toEqual</span>([]);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> req = httpTestingController.<span class="title function_">expectOne</span>(<span class="string">&#x27;/data&#x27;</span>);</span><br><span class="line">  req.<span class="title function_">flush</span>(mockData);</span><br><span class="line"></span><br><span class="line">  httpTestingController.<span class="title function_">verify</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述的測試預期結果會是 fail 的，因為 line: 5 的結果理當為 <code>[mockData]</code>，但實際跑完測試的結果卻是 passed</p><p><img src="image-20231006202133288.png" alt="image-20231006202133288"></p><p>這時候第一個想法會是非同步的關係，可能要用到 callback 的方式，所以調整了 test case ，調整後如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;test api&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> mockData = &#123; <span class="attr">name</span>: <span class="string">&#x27;Kevin&#x27;</span> &#125;;</span><br><span class="line">   service.<span class="title function_">callApi</span>().<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">     <span class="attr">next</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">expect</span>(result).<span class="title function_">toEqual</span>([]);</span><br><span class="line">       <span class="title function_">done</span>();</span><br><span class="line">     &#125;,</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> req = httpTestingController.<span class="title function_">expectOne</span>(<span class="string">&#x27;/data&#x27;</span>);</span><br><span class="line">   req.<span class="title function_">flush</span>(mockData);</span><br><span class="line"></span><br><span class="line">   httpTestingController.<span class="title function_">verify</span>();</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>確實也讓 test failed 了</p><p><img src="image-20231006202257967.png" alt="image-20231006202257967"></p><p>但是接著噴了另外一個錯誤訊息, 竟然說 <code>done()</code> 必須要呼叫到，timeout.</p><p><img src="image-20231006202352969.png" alt="image-20231006202352969"></p><p>經過一段時間的研究，發現原來是這個原因</p><blockquote><p>If <code>done()</code> is never called, the test will fail (with timeout error), which is what you want to happen.</p><p>If the <code>expect</code> statement fails, it throws an error and <code>done()</code> is not called. If we want to see in the test log why it failed, we have to wrap <code>expect</code> in a <code>try</code> block and pass the error in the <code>catch</code> block to <code>done</code>. Otherwise, we end up with an opaque timeout error that doesn’t show what value was received by <code>expect(data)</code>.</p></blockquote><p>在 jest 內如果 expect 的結果不符合預期，會噴 exception，所以當使用 <code>done</code> callback 時，需要用 try catch 包起來</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title function_">it</span>(<span class="string">&#x27;test api&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mockData = &#123; <span class="attr">name</span>: <span class="string">&#x27;Kevin&#x27;</span> &#125;;</span><br><span class="line">    service.<span class="title function_">callApi</span>().<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="title function_">expect</span>(result).<span class="title function_">toEqual</span>([]);</span><br><span class="line">          <span class="title function_">done</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">done</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> req = httpTestingController.<span class="title function_">expectOne</span>(<span class="string">&#x27;/data&#x27;</span>);</span><br><span class="line">    req.<span class="title function_">flush</span>(mockData);</span><br><span class="line"></span><br><span class="line">    httpTestingController.<span class="title function_">verify</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這樣改寫完，timeout 的錯誤訊息就沒有再出現了。看來過往沒有特別留意到這塊，真的是太不小心了。所以寫這篇筆記分享給大家</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://jestjs.io/docs/asynchronous#callbacks">https://jestjs.io/docs/asynchronous#callbacks</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在寫 http service 測試時，無意間撞到這個問題，分享這個小雷給大家，避免死的不明不白，&lt;/p&gt;
&lt;p&gt;這篇 &lt;a href=&quot;https://angular.io/guide/http-test-requests&quot;&gt;HTTP client - Test requests&lt;/a&gt; 內說明如何使用 &lt;code&gt;HttpTestingController&lt;/code&gt; 進行 http request 的測試，而因為後期的專案我都是使用 Nx 來建立，Nx 建立的專案是使用  Jest 來跑 Unit Test. 不知道是幸運還是怎樣，竟然遇到超乎預期的結果&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[VSCode] Rest Client Extension</title>
    <link href="http://blog.kevinyang.net/2023/09/02/vscode-rest-client-note/"/>
    <id>http://blog.kevinyang.net/2023/09/02/vscode-rest-client-note/</id>
    <published>2023-09-02T14:30:17.000Z</published>
    <updated>2023-10-06T12:37:47.301Z</updated>
    
    <content type="html"><![CDATA[<p>除了 Postman，在 VS Code 內還有其他類似的套件可以選擇，例如本篇筆記的主角 <code>Rest Client</code></p><span id="more"></span><p><img src="image-20230902223304534.png" alt="image-20230902223304534"></p><p>可以從 VS Code 的 extension market 內搜尋並安裝，使用方式也很簡單，只要檔名的結果是 <code>.http</code> 或是 <code>.rest</code> 都是 <code>Rest Client</code> 可以支援的檔案類型，先用一個簡單的範例作展示</p><p><img src="image-20230902223629295.png" alt="image-20230902223629295"></p><p>真的很簡單使用，但當然不只有這樣，這篇筆記會記錄我在使用上的一些心得或技巧</p><h2 id="筆記心得"><a class="header-anchor" href="#筆記心得"> </a>筆記心得</h2><ol><li><p><code>Content-Type</code> 設定: 在做 POST 或是 PUT 時會傳 JSON 格式為 body 內容，這時候就需要設定  <code>Content-Type</code>，設定方式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST https://jsonplaceholder.typicode.com/todos</span><br><span class="line">Content-Type: application/json</span><br></pre></td></tr></table></figure></li><li><p>可使用 <code>###</code> 來分隔 Request 內容</p></li><li><p><code>#</code> 或是 <code>//</code> 可用來寫註解<img src="image-20230902225112808.png" alt="image-20230902225112808"></p></li><li><p>自定義變數</p><ol><li><p>Environment variables 可定義在 VS Code setting 內，這種變數可以跨檔案使用</p></li><li><p>File variables: 定義在 <code>.http</code> 檔案內</p></li><li><p>Request variables: 將 Request 的內容存在 <code>Request variable</code> 內，供同一個檔案內的其他 request 使用，<code># @name &lt;&lt;request name&gt;&gt;</code>  或是 <code>// @name &lt;&lt;request name&gt;&gt;</code> 定義 request variable</p></li><li><p>透過 <code># @prompt &#123;var1&#125; &#123;description&#125;</code> 或是 <code>// @prompt &#123;var1&#125; &#123;description&#125;</code> 定義，可讓使用者輸入變數值<img src="image-20230902231230878.png" alt="image-20230902231230878"></p></li><li><p>透過 <code>&#123;&#123; variable &#125;&#125;</code> 來使用 variable</p></li><li><p>範例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// File variable</span><br><span class="line">@baseUrl = https://example.com/api </span><br><span class="line"></span><br><span class="line">// Request variable</span><br><span class="line"># @name login</span><br><span class="line">POST &#123;&#123;baseUrl&#125;&#125;/api/login HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">name=foo&amp;password=bar</span><br><span class="line"></span><br><span class="line">// 使用 Request variable</span><br><span class="line">@authToken = &#123;&#123;login.response.headers.X-AuthToken&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>設定 Response Preview 內容，在 VS Code 設定檔內，可以設定 <code>previewOption</code></p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>full</td><td>Default. Full Response is previewed</td></tr><tr><td>headers</td><td>Only response header</td></tr><tr><td>body</td><td>Only response body</td></tr><tr><td>exchange</td><td>Preview the whole HTTP exchange</td></tr></tbody></table><p><img src="image-20230902232818215.png" alt="image-20230902232818215"></p></li><li><p>在 Markdown 內也可以被使用，當使用 code block 時，只要標註為 <code>http</code> 或是 <code>rest</code> 時，REST Client 套件也能認得並可以被執行，要留意的是，該動作沒法再 preview 的畫面上執行，必須是在編輯 <code>md</code> 檔時。變數設定在不同的 code block 一樣可以被吃到，只要是在同一份 markdown 檔案內即可</p><p><img src="image-20230903103750927.png" alt="image-20230903103750927"></p></li></ol><h2 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h2><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">VSCode Extension: Rest Client</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;除了 Postman，在 VS Code 內還有其他類似的套件可以選擇，例如本篇筆記的主角 &lt;code&gt;Rest Client&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="VSCode" scheme="http://blog.kevinyang.net/categories/VSCode/"/>
    
    
    <category term="VSCode" scheme="http://blog.kevinyang.net/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>[Grafana] Faro Web SDK 學習筆記</title>
    <link href="http://blog.kevinyang.net/2023/07/16/faro-web-sdk-study/"/>
    <id>http://blog.kevinyang.net/2023/07/16/faro-web-sdk-study/</id>
    <published>2023-07-16T02:25:17.000Z</published>
    <updated>2023-10-06T12:37:47.301Z</updated>
    
    <content type="html"><![CDATA[<p>Grafana 提供了許多工具讓維運團隊能很清楚的知道系統的相關狀態，針對網頁相關效能的監控，也有提供相關的 solution，就是 <a href="https://grafana.com/oss/faro/">Faro</a></p><p><img src="https://grafana.com/static/assets/img/grafana-faro-oss-dashboard-thm.jpg" alt="grafana faro"></p><p>Grafana Faro 的運作方式如下圖，</p><p><img src="https://grafana.com/static/assets/img/diagrams/grafana-oss-faro-diagram.svg" alt="how does grafana faro work"></p><p>前端開發可以透過提供的 SDK 將相關資訊傳到後面的 Agent/Collect ，就完成了。只是 SDK 雖然簡單套用，裡面有很多細節設定是需要深入研究的，這篇就是這些設定的學習筆記</p><span id="more"></span><h2 id="Faro-Web-SDK"><a class="header-anchor" href="#Faro-Web-SDK"> </a>Faro Web SDK</h2><p><code>@grafana/faro-web-sdk</code> provides instrumentations, metas and transports for use in web applications，安裝使用方法如下</p><ol><li><p>安裝 <code>faro-web-sdk</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @grafana/faro-web-sdk</span><br></pre></td></tr></table></figure></li><li><p>initialize</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initializeFaro &#125; <span class="keyword">from</span> <span class="string">&#x27;@grafana/faro-web-sdk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> faro = <span class="title function_">initializeFaro</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://collector-host:12345/collect&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;secret&#x27;</span>,</span><br><span class="line">  <span class="attr">app</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;frontend&#x27;</span>,</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>url</code>: Grafana Agent 的位置</li><li><code>apiKey</code>: 對應到 Grafana Agent 的 <code>integrations.app_agent_receiver_configs</code> 下的 <code>server.api_key</code> 設定</li><li><code>app</code>:  Web Application 的 meta 資訊，會用於 Grafana Dashboard 上</li></ol></li><li><p>當這樣設定完成後，開啟網頁時，在 network 的地方就會看到 SDK post 相關資訊到設定的 agent 位置</p></li></ol><h3 id="基本用法"><a class="header-anchor" href="#基本用法"> </a>基本用法</h3><p>當遇到需要手動推送資訊時，SDK 也有提供對應的 API 接口</p><ol><li><p>手動推送 log</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// send a log message</span></span><br><span class="line"><span class="comment">// by default info, warn and error levels are captured.</span></span><br><span class="line"><span class="comment">// trace, debug and log are not</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;Hello world&#x27;</span>, <span class="number">123</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">faro.<span class="property">api</span>.<span class="title function_">pushLog</span>([<span class="string">&#x27;Hello world&#x27;</span>, <span class="number">123</span>], &#123; <span class="attr">level</span>: <span class="title class_">LogLevel</span>.<span class="property">Debug</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// log with context</span></span><br><span class="line">faro.<span class="property">api</span>.<span class="title function_">pushLog</span>([<span class="string">&#x27;Sending update&#x27;</span>], &#123;</span><br><span class="line">  <span class="attr">context</span>: &#123;</span><br><span class="line">    <span class="attr">payload</span>: thePayload,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">level</span>: <span class="title class_">LogLevel</span>.<span class="property">TRACE</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>手動送 Exception</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faro.<span class="property">api</span>.<span class="title function_">pushError</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;everything went horribly wrong&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>手動送 Event</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faro.<span class="property">api</span>.<span class="title function_">pushEvent</span>(<span class="string">&#x27;navigation&#x27;</span>, &#123; <span class="attr">url</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>手動送 <code>meaurement</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">faro.<span class="property">api</span>.<span class="title function_">pushMeasurement</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;cart-transaction&#x27;</span>,</span><br><span class="line">  <span class="attr">values</span>: &#123;</span><br><span class="line">    <span class="attr">delay</span>: <span class="number">122</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">4000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>pause/resume Faro</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pause faro, preventing events from being sent</span></span><br><span class="line">faro.<span class="title function_">pause</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// resume sending events</span></span><br><span class="line">faro.<span class="title function_">unpause</span>();</span><br></pre></td></tr></table></figure></li></ol><h3 id="學習筆記"><a class="header-anchor" href="#學習筆記"> </a>學習筆記</h3><ol><li><p>Faro SDK 預設會忽略短時間內相同訊息的事件，不會每一筆都往後面送，如果想要改變這行為，可以設定 <code>dedupe: false</code> (<code>dedupe</code>: A flag for toggling deduplication filter)</p></li><li><p>預設是採 batch sending 的模式，每 250 ms 或是每 50 筆送一次，這些數值也可以設定</p><p><img src="image-20230716114843343.png" alt="image-20230716114843343"></p></li><li><p>上一段提到的手動送資訊到後面的 API，都有額外的參數可以設定，細節可以參閱<a href="https://github.com/grafana/faro-web-sdk/tree/main/packages/core#api">這邊</a></p></li><li><p>很多 SDK 的使用細節說明都寫在 <code>faro-core</code> 的地方，<a href="https://github.com/grafana/faro-web-sdk/blob/main/packages/core/README.md">README</a> 有此去</p></li><li><p>預設有提供 <code>faro-react</code>，其他 framework 如果想要實作類似的效果，可以參考 react 的版本，包含的項目有</p><ol><li>Error Boundary - Provides additional stacktrace for errors</li><li>Component Profiler - Capture every re-render of a component, the un/mounting time etc.</li><li>Router (v4-v6) integration - Send events for all route changes</li><li>SSR support</li></ol><p>以 Angular 來說，應該也可以做到 1~3 點，但我還沒有自己動手實作過，先暫定可以好了</p></li></ol><h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2><p>Faro 提供的是 <code>RUM</code> (Real User Monitoring) 的相關資訊，除了 Grafana，Kibana 和 Sentry 都有提供類似的功能，只是因為自家的 Monitor stack 是 Grafana 為主，所以選擇 Faro 只是為了讓使用的工程師不用在工具中切來切去</p><p>前端效能調教水很深，收集到的這些資訊並不會有 Web 在產生畫面的相關資訊，那些需要回到瀏覽器上做分析，背後的 web vita API 可以參考這一個套件 <a href="https://www.npmjs.com/package/web-vitals">web-vitals</a></p><h2 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h2><ul><li><a href="https://github.com/grafana/faro-web-sdk">Faro Web SDK</a></li><li><a href="https://web.dev/vitals/">Web Vitals</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Grafana 提供了許多工具讓維運團隊能很清楚的知道系統的相關狀態，針對網頁相關效能的監控，也有提供相關的 solution，就是 &lt;a href=&quot;https://grafana.com/oss/faro/&quot;&gt;Faro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grafana.com/static/assets/img/grafana-faro-oss-dashboard-thm.jpg&quot; alt=&quot;grafana faro&quot;&gt;&lt;/p&gt;
&lt;p&gt;Grafana Faro 的運作方式如下圖，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://grafana.com/static/assets/img/diagrams/grafana-oss-faro-diagram.svg&quot; alt=&quot;how does grafana faro work&quot;&gt;&lt;/p&gt;
&lt;p&gt;前端開發可以透過提供的 SDK 將相關資訊傳到後面的 Agent/Collect ，就完成了。只是 SDK 雖然簡單套用，裡面有很多細節設定是需要深入研究的，這篇就是這些設定的學習筆記&lt;/p&gt;</summary>
    
    
    
    <category term="Grafana" scheme="http://blog.kevinyang.net/categories/Grafana/"/>
    
    
    <category term="Grafana" scheme="http://blog.kevinyang.net/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>[讀書筆記][閱讀中] 網站可靠性工程工作手冊｜導入SRE的實用方法</title>
    <link href="http://blog.kevinyang.net/2023/06/24/books-The-Site-Reliability-Workbook/"/>
    <id>http://blog.kevinyang.net/2023/06/24/books-The-Site-Reliability-Workbook/</id>
    <published>2023-06-24T08:08:07.000Z</published>
    <updated>2023-10-06T12:37:47.301Z</updated>
    
    <content type="html"><![CDATA[<p>SRE 真的需要大量的閱讀跟實做，累積經驗才可以得到 SRE 的精髓，只好認真 K 書了</p><p>這篇為 <code>網站可靠性工程工作手冊｜導入SRE的實用方法</code> 這本書的讀書筆記，線上閱讀版跟翻譯書的連結如下</p><ul><li>原文書: <a href="https://sre.google/workbook/table-of-contents/">The Site Reliability Workbook</a></li><li>翻譯書: <a href="https://www.tenlong.com.tw/products/9789865026011">網站可靠性工程工作手冊｜導入SRE的實用方法 (The Site Reliability Workbook)</a></li></ul><p>讀書筆記跟實務上遇到的經驗都會整理一起</p><span id="more"></span><h2 id="實施-SLO"><a class="header-anchor" href="#實施-SLO"> </a>實施 SLO</h2><ul><li>沒有 SLO 就沒有 SRE</li><li>SLI 是一種指標，鑑別服務水準</li><li>度量的比例當作 CLI, 例如: 良好事件的數量除以事件總數</li><li>SLI 因為是比例－所以數值範圍會是 0 ~ 100%</li><li>SLO 是目標百分比, 犯錯預算是 100% - SLO</li><li>制訂 SLI 時，可以用規格和實做兩個層面制訂<ul><li>規格: 覺得對使用者重要的服務產出之評估，是各自獨立不受量測方式影響。例如: 訪問首頁 100 ms 內能載入的比例</li><li>實做: SLI 規格測量方法</li></ul></li><li>SLO 需選擇適當的時窗</li><li>SLO 是服務 external user，是與利害關係人間的協議，SLO 需要被文件化且公開</li><li>建立 error budget 政策 &amp; dashboard</li><li>建立 SLO 遵從度報告 (Dashboard)</li><li>SLO 目標持續改進, 可用 SLO 決策 metrics 來判斷接下來要調整的方向</li></ul><p>參考文件:</p><ul><li><a href="https://sre.google/workbook/slo-document/">Example SLO Document</a></li><li><a href="https://sre.google/workbook/error-budget-policy/">Example Error Budget Policy</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;SRE 真的需要大量的閱讀跟實做，累積經驗才可以得到 SRE 的精髓，只好認真 K 書了&lt;/p&gt;
&lt;p&gt;這篇為 &lt;code&gt;網站可靠性工程工作手冊｜導入SRE的實用方法&lt;/code&gt; 這本書的讀書筆記，線上閱讀版跟翻譯書的連結如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原文書: &lt;a href=&quot;https://sre.google/workbook/table-of-contents/&quot;&gt;The Site Reliability Workbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;翻譯書: &lt;a href=&quot;https://www.tenlong.com.tw/products/9789865026011&quot;&gt;網站可靠性工程工作手冊｜導入SRE的實用方法 (The Site Reliability Workbook)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;讀書筆記跟實務上遇到的經驗都會整理一起&lt;/p&gt;</summary>
    
    
    
    <category term="Reading" scheme="http://blog.kevinyang.net/categories/Reading/"/>
    
    
    <category term="Reading" scheme="http://blog.kevinyang.net/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>[Ansible] 學習 Ansible 之路 - Ansible playbook</title>
    <link href="http://blog.kevinyang.net/2023/05/07/study-ansible-02/"/>
    <id>http://blog.kevinyang.net/2023/05/07/study-ansible-02/</id>
    <published>2023-05-07T02:22:29.000Z</published>
    <updated>2023-10-06T12:37:47.297Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible playbook 可以讓我們用劇本的方式來管理想對 managed node 執行的動作，Ansible playbook 是使用 YAML 的格式來編寫，當然 Ansible 也有提供對應的檢查工具來檢查 playbook 是否有正確編寫。</p><p>這一篇來學習如何寫 Ansible playbook</p><span id="more"></span><h2 id="Playbook"><a class="header-anchor" href="#Playbook"> </a>Playbook</h2><p>建立一個空的 playbook 很簡單，只要建立一個 <code>&lt;xxxx&gt;.yml</code> 檔就算是完成一個 playbook 的建立。內容才是重點，主要會有幾個元素</p><p><img src="image-20230507105006665.png" alt="image-20230507105006665"></p><ol><li><p>劇本名稱</p></li><li><p>執行對象: 這會跟 Inventory 設定檔有關</p><ul><li>Inventory 可以在執行 playbook 時指定，這裡提供一個範本</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line">server1 <span class="attr">ansible_ssh_host</span>=<span class="number">127.0</span>.<span class="number">0.1</span> ansible_ssh_port=<span class="number">32769</span> ansible_ssh_pass=docker</span><br></pre></td></tr></table></figure><ul><li>line 1: <code>[local]</code> 是 inventory group 名稱，也是 hosts 指定的目標，可以依自己的喜好編寫，後面也會有一篇研究如何寫 inventory 檔案</li></ul></li><li><p>任務列表: 會包含一系列要執行的動作，通常會使用 Ansible 所提供的 module 來執行</p><ol><li><code>command</code> 是 Ansible 內建的 module，可以對 hosts 下指令</li><li><code>register</code> 也是 Ansible 內建的 module，可以將回傳訊息記錄在變數內，這邊就是會儲存在 <code>result</code> 這一個變數</li><li>要將變數輸出到 console 上，需要使用 <code>Jinja2</code> 的樣本功能，使用 <code>&#123;&#123; &#125;&#125;</code> 的方式輸出</li></ol></li></ol><h2 id="執行-playbook"><a class="header-anchor" href="#執行-playbook"> </a>執行 playbook</h2><p>在 WSL 的環境內，切換到 playbook 檔案所在得資料夾，執行這段指令，需依實際的狀況作些調整，基本指令結構是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i &lt;inventory 檔案&gt; &lt;playbook 檔案名&gt;</span><br></pre></td></tr></table></figure><p>範例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i hosts hello_world.yml </span><br></pre></td></tr></table></figure><p>如果設定都正確的話，可預期會得到這樣的執行結果</p><p><img src="image-20230507110200351.png" alt="image-20230507110200351"></p><h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2><p>撰寫 Ansible playbook 本身不難，一旦知道我們想要自動化的行為有什麼，相關流程需要怎麼安排，接下來就是找對應的 Ansible module 或是網路上有的參考範例，最後就是整理在 playbook 劇本內。當然更進階的管理辦法或是 playbook 的檔案結構應該要怎麼規劃，就留給各位去研究了。</p><h2 id="補充"><a class="header-anchor" href="#補充"> </a>補充</h2><p>Ansible 有提供 <code>ansible-lint</code> 的工具，可檢查 playbook  的格式是否正確，該工具的 GitHub Repo <a href="https://github.com/ansible/ansible-lint">由此去</a>，<a href="https://ansible-lint.readthedocs.io/">Ansible Lint Documentation</a></p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html#playbook-syntax">Playbook Syntax</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ansible playbook 可以讓我們用劇本的方式來管理想對 managed node 執行的動作，Ansible playbook 是使用 YAML 的格式來編寫，當然 Ansible 也有提供對應的檢查工具來檢查 playbook 是否有正確編寫。&lt;/p&gt;
&lt;p&gt;這一篇來學習如何寫 Ansible playbook&lt;/p&gt;</summary>
    
    
    
    <category term="Ansible" scheme="http://blog.kevinyang.net/categories/Ansible/"/>
    
    
    <category term="Ansible" scheme="http://blog.kevinyang.net/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>[Ansible] 學習 Ansible 之路 - 環境準備篇</title>
    <link href="http://blog.kevinyang.net/2023/05/06/study-ansible-01/"/>
    <id>http://blog.kevinyang.net/2023/05/06/study-ansible-01/</id>
    <published>2023-05-06T07:51:06.000Z</published>
    <updated>2023-10-06T12:37:47.297Z</updated>
    
    <content type="html"><![CDATA[<p>基於種種原因，必須學習 Ansible，這已經脫離之前習慣的領域，所以就用一個新手的心學習這一個工具，聽說是很厲害的工具</p><span id="more"></span><h2 id="Ansible-基本介紹"><a class="header-anchor" href="#Ansible-基本介紹"> </a>Ansible 基本介紹</h2><p><img src="image-20230506160349398.png" alt="image-20230506160349398"></p><ul><li><strong>Control node</strong>: A system on which Ansible is installed. You run Ansible commands such as <code>ansible</code> or <code>ansible-inventory</code> on a control node.</li><li><strong>Managed node</strong>: A remote system, or host, that Ansible controls.</li><li><strong>Inventory</strong>: A list of managed nodes that are logically organized. You create an inventory on the control node to describe host deployments to Ansible.</li></ul><h2 id="準備練習環境"><a class="header-anchor" href="#準備練習環境"> </a>準備練習環境</h2><h3 id="Control-Node"><a class="header-anchor" href="#Control-Node"> </a>Control Node</h3><p>很不幸的是 Windows 本身是無法支援 Ansible control node 的功能，只能透過 WSL2 來執行</p><p>進入 WSL 後，執行下列指令即可完成安裝 <code>Ansible</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3-pip git libffi-dev libssl-dev sshpass -y</span><br><span class="line">pip install --user ansible pywinrm</span><br></pre></td></tr></table></figure><p>安裝成功後，執行 <code>ansible --version</code> 應可看到類似的訊息</p><p><img src="image-20230506161545861.png" alt="image-20230506161545861"></p><p>這樣就表示安裝成功。至於其他作業系統的安裝方式，可以參考 <a href="https://docs.ansible.com/ansible/latest/installation_guide/index.html">Installation Guide</a></p><h3 id="Manage-Node"><a class="header-anchor" href="#Manage-Node"> </a>Manage Node</h3><p>要練習 Ansible 當然也要準備一個可以被測試部署的環境，因為 Docker 是大家的好朋友，所以就準備一個來當 managed node 吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull chusiang/ansible-managed-node:ubuntu-20.04</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name server1 -d -P chusiang/ansible-managed-node:ubuntu-20.04</span><br></pre></td></tr></table></figure><p>啟動後應可看到 <code>server1</code> SSH port 綁定的狀態</p><p><img src="image-20230506163843326.png" alt="image-20230506163843326"></p><h3 id="建立-Ansible-設定檔等"><a class="header-anchor" href="#建立-Ansible-設定檔等"> </a>建立 Ansible 設定檔等</h3><p>接下來我們就可寫第一次 Ansible 設定檔及 Inventory 檔</p><ol><li>建立一個資料夾，並在該資料夾下新增一個 <code>ansible.cfg</code> 的檔案，檔案內容如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">inventory = hosts</span><br><span class="line">remote_user = docker</span><br><span class="line">host_key_checking = False</span><br></pre></td></tr></table></figure><ol start="2"><li>新增 inventory 檔，檔名為 <code>hosts</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server1  ansible_ssh_host=127.0.0.1  ansible_ssh_port=32768 ansible_ssh_pass=docker</span><br><span class="line"></span><br><span class="line">[local]</span><br><span class="line">server1</span><br></pre></td></tr></table></figure><ul><li><code>ansible_ssh_host</code>：請設為本機的 IP。</li><li><code>ansible_ssh_port</code>：請設為 <code>docker ps</code> 時取得的 SSH port。</li><li><code>ansible_ssh_pass</code>：因沒有連線用的 SSH 金鑰，故直接使用密碼的方式進行連線，</li></ul><p><img src="image-20230506172318766.png" alt="image-20230506172318766"></p><h3 id="環境驗證"><a class="header-anchor" href="#環境驗證"> </a>環境驗證</h3><p>當上述動作完成後，該資料夾應該會看到這兩個檔案，接下來就可以執行第一次 ansible 的指令了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure><p>如果設定正確，應可看到這樣的結果回傳</p><p><img src="image-20230506172447298.png" alt="image-20230506172447298"></p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10185111">05. 怎麼用 Docker 練習 Ansible？</a></li><li><a href="https://github.com/chusiang/ansible-managed-node.dockerfile/tree/master/ubuntu-20.04">Dockerfile</a></li><li><a href="https://docs.ansible.com/ansible/latest/installation_guide/index.html">Ansible Install Guide</a></li><li><a href="https://docs.ansible.com/ansible/latest/os_guide/windows_faq.html#windows-faq-ansible">Can Ansible run on Windows</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;基於種種原因，必須學習 Ansible，這已經脫離之前習慣的領域，所以就用一個新手的心學習這一個工具，聽說是很厲害的工具&lt;/p&gt;</summary>
    
    
    
    <category term="Ansible" scheme="http://blog.kevinyang.net/categories/Ansible/"/>
    
    
    <category term="Ansible" scheme="http://blog.kevinyang.net/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Signals 嘗鮮</title>
    <link href="http://blog.kevinyang.net/2023/03/11/angular-signals/"/>
    <id>http://blog.kevinyang.net/2023/03/11/angular-signals/</id>
    <published>2023-03-11T01:45:03.000Z</published>
    <updated>2023-10-06T12:37:47.297Z</updated>
    
    <content type="html"><![CDATA[<p>Angular 嘗試在下一世代中加入新的 reactive 機制，試圖找到取代 zone.js 的方式，因此引進了 <code>signals</code> 來試試看是否能成為下一代 change detection 的選擇。想要嘗試的朋友可以安裝 <code>angular cli v16</code> 的版本</p><span id="more"></span><h2 id="什麼是-Signals"><a class="header-anchor" href="#什麼是-Signals"> </a>什麼是 Signals</h2><p>Signals 不是 Angular team 創造出來的 library，而是引用其他 framework 內所有使用的一個機制，如果沒記錯應該是來自 <a href="https://www.solidjs.com/tutorial/introduction_signals">SolidJS</a></p><blockquote><p><em>Signals</em> are the cornerstone of reactivity in Solid. They contain values that change over time; when you change a signal’s value, it automatically updates anything that uses it.</p></blockquote><p>說是這樣子說，Angular Team 是自己實做整個 Signal 機制，相關的程式碼連結我會附在下面</p><h2 id="如何在-Angular-內使用-Signals"><a class="header-anchor" href="#如何在-Angular-內使用-Signals"> </a>如何在 Angular 內使用 Signals</h2><h3 id="建立-signal-物件"><a class="header-anchor" href="#建立-signal-物件"> </a>建立 signal 物件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, signal &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;....&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>signal</code> 介面</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> signal&lt;T&gt;(<span class="attr">initialValue</span>: T, equal?: <span class="title class_">ValueEqualityFn</span>&lt;T&gt;): <span class="title class_">SettableSignal</span>&lt;T&gt;</span><br></pre></td></tr></table></figure><h3 id="顯示"><a class="header-anchor" href="#顯示"> </a>顯示</h3><p>要取得 signal 物件值的方式很直接，直接當 function 使用即可，接續上面的範例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; count() &#125;&#125; </span><br></pre></td></tr></table></figure><p>這樣就可以在 html 上顯示 count 的值了，或許會問不要在 html render 時寫 function call 嗎，會有效能問題，這裡這樣使用是沒有問題的 (之前有聽 angular team 說為什麼不會有問題，但我忘記理由了)</p><h3 id="更新"><a class="header-anchor" href="#更新"> </a>更新</h3><p>當建立一個 signal 物件後，更新值得方式有三種，<code>set</code> 、<code>update</code>  和 <code>mutate</code></p><ul><li><p>set: Directly set the signal to a new value, and notify any dependents.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">set</span>(<span class="attr">value</span>: T): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure></li><li><p>update: Update the value of the signal based on its current value, and notify any dependents.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="attr">updateFn</span>: <span class="function">(<span class="params">value: T</span>) =&gt;</span> T): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure></li><li><p>mutate: Update the current value by mutating it in-place, and notify any dependents.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mutate</span>(<span class="attr">mutatorFn</span>: <span class="function">(<span class="params">value: T</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, signal &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    Count: &#123;&#123; count() &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;increase()&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;reset()&quot;&gt;reset&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>.<span class="title function_">set</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>.<span class="title function_">update</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> ++c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="進階用法"><a class="header-anchor" href="#進階用法"> </a>進階用法</h2><p>開頭有提到 signals 是一個 reactive library，當然不會只有這種單一值的使用情境，一定會有錯綜複雜的使用情境，這時候會怎麼使用呢</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, signal, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line"> ...</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;Count: &#123;&#123; count() &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Double: &#123;&#123; double() &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line">  double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">count</span>() * <span class="number">2</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>computed</code> 可以讓我們與其他 signal 作互動結合，當 computed 內的 signal 值改變時，此 computed 結果也會跟著改變，使用上算直覺</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">function</span> computed&lt;T&gt;(<span class="attr">computation</span>: <span class="function">() =&gt;</span> T, equal?: <span class="title class_">ValueEqualityFn</span>&lt;T&gt;): <span class="title class_">Signal</span>&lt;T&gt;;</span><br></pre></td></tr></table></figure><p>除了 computed，還有一個是 <code>effect</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">effectFn: () =&gt; <span class="built_in">void</span></span>): <span class="title class_">Effect</span>;</span><br></pre></td></tr></table></figure><p>須留意的是兩者回傳的物件是不一樣的，<code>computed</code> 會回傳一個新的 <code>Signal</code> 物件，但 <code>effect</code> 是回傳一個 <code>Effect</code> 物件，這 Effect 型別的物件可以允許我們停用 <code>effect</code> ，類似 Observable.subscribe 會回傳 subscription 的概念</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">count</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊要留意的是 <code>effect</code> 宣告的地方跟 <code>inject()</code> 是一樣的，只能在 constructor 宣告，不然會噴錯誤訊息給你看</p><p><img src="image-20230407225822130.png" alt="image-20230407225822130"></p><h2 id="RxJS-怎麼辦"><a class="header-anchor" href="#RxJS-怎麼辦"> </a>RxJS 怎麼辦?</h2><p>Signal 的使用方式與 RxJS 其實有很大部分是重疊的，但 RxJS 有很好用的 operators，這時候該怎麼辦呢? 是否有方法能結合兩者。在 GitHub 上面有一個 PR 就是要解決這個問題，Angular team 提供兩個 function，<code>toSignal</code> 和 <code>toObservable</code>，這過這兩個 function  可以將 Observable 和 Signal 物件做彼此轉換，我是覺得這樣就可保留相當的彈性了，當然也要等實際使用在產品才能知道會有那些坑</p><p>[Update] <a href="https://github.com/angular/angular/releases/tag/16.0.0-next.6">Angular  v16.0.0-next.6</a> 實做了 <code>fromObservable</code> 和 <code>fromSignal</code> 兩個方法，想玩的朋友可以更新到新版</p><p>附上範例程式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toObservable</span></span><br><span class="line">count = signal&lt;<span class="built_in">number</span>[]&gt;([]);</span><br><span class="line">double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">count</span>().<span class="property">length</span> * <span class="number">2</span>);</span><br><span class="line">triple$ = <span class="title function_">toObservable</span>(<span class="variable language_">this</span>.<span class="property">count</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> value.<span class="property">length</span> * <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// toSignal</span></span><br><span class="line">counter$ = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>(<span class="number">0</span>);</span><br><span class="line">counter = <span class="title function_">toSignal</span>(<span class="variable language_">this</span>.<span class="property">counter$</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>宣告的位置跟 <code>effect</code> 是一樣的，不然也會噴錯誤訊息給你享用</p><p><img src="image-20230415111504566.png" alt="image-20230415111504566"></p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://github.com/angular/angular/discussions/49090">[Watch This Space] Angular Reactivity with Signals</a></li><li><a href="https://dev.to/this-is-angular/angular-signals-everything-you-need-to-know-2b7g">Angular &amp; signals. Everything you need to know.</a></li><li><a href="https://github.com/angular/angular/tree/main/packages/core/src/signals">Source Code - Signal</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Angular 嘗試在下一世代中加入新的 reactive 機制，試圖找到取代 zone.js 的方式，因此引進了 &lt;code&gt;signals&lt;/code&gt; 來試試看是否能成為下一代 change detection 的選擇。想要嘗試的朋友可以安裝 &lt;code&gt;angular cli v16&lt;/code&gt; 的版本&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Discord] Bot 新手上路</title>
    <link href="http://blog.kevinyang.net/2022/11/20/discord-bot/"/>
    <id>http://blog.kevinyang.net/2022/11/20/discord-bot/</id>
    <published>2022-11-20T02:44:46.000Z</published>
    <updated>2023-10-06T12:37:47.293Z</updated>
    
    <content type="html"><![CDATA[<p>最近接了關於 Bot 開發相關的業務，趁休息時間玩一下 Discord Bot 的開發體驗，將過程記錄一下，搞不好後面還用的到。</p><p>在這之前還是快速介紹一下 Discord。Discord是一款專為社群設計的免費網路即時通話軟體與數位發行平台，在早期很常被遊戲玩家拿來做線上連線時的通訊軟體，現在是很多產品、社群等都會利用 Discord 來經營社群。</p><span id="more"></span><p>既然是平台，本身又提供 Bot 開發的能力，就要好好的探索一下到底 Bot 在 Discord 能做到什麼事情</p><h2 id="建立第一個-Bot"><a class="header-anchor" href="#建立第一個-Bot"> </a>建立第一個 Bot</h2><p>在建立第一個 Bot 之前，假設你是純新手沒有開過 Discord 帳號，可以透過這篇<a href="https://support.discord.com/hc/en-us/articles/360033931551-Getting-Started">說明</a>建立自己的 Discord 帳號。</p><h3 id="Create-Application"><a class="header-anchor" href="#Create-Application"> </a>Create Application</h3><p>進入 <a href="https://discord.com/developers/applications">Developer Portal</a> 並登入應可看到這個畫面</p><p><img src="image-20221120110706291.png" alt="image-20221120110706291"></p><p>點選右上角的 <code>New Application</code> 會跳出建立 Application 的詢問視窗，輸入你想的名字，打勾 agree Terms of services 後，按下 <code>Create</code> 即完成第一個 Application 的建立</p><p><img src="image-20221120110903558.png" alt="image-20221120110903558"></p><p>建立完成後在 <code>Applications</code> 的列表上就可看到剛剛建立的 application，點進去會看到等等開發時所需要的資訊，類似  Application ID 和 Endpoint URL 。</p><h3 id="Config-Bot"><a class="header-anchor" href="#Config-Bot"> </a>Config Bot</h3><p>因為我們要建立 Bot，所以還要多做一個步驟</p><p><img src="image-20221120111248877.png" alt="image-20221120111248877"></p><p><img src="image-20221120111311212.png" alt="image-20221120111311212"></p><p>完成這步驟後，會看到一些可以設定的項目，其中 Token 會是待會開發時需要的資訊，晚點再回來這邊建立新 Token</p><p>Bot 需要取得使用權限及授權範圍，Discord 也很好心的給了建立方式，一樣在 Application 的畫面裡，左邊選單的<code>OAuth2</code> 下的 <code>URL Generator</code>，這頁面上，我們需要設定幾樣東西</p><ul><li>SCOPES: <code>bot</code> 、<code>applications.commands</code></li><li>BOT PERMISSIONS: <code>Send Messages</code> 和 <code>Use Slash Commands</code></li></ul><p><img src="image-20221120112233735.png" alt="image-20221120112233735"></p><p>此畫面的最後面會有一個 <code>GENERATED URL</code> ，複製並貼到瀏覽器上，會開啟一個設定畫面，詢問這一個 Bot 想要加到哪一個伺服器中，就跟著步驟一步一步完成即可</p><h2 id="開發-Bot"><a class="header-anchor" href="#開發-Bot"> </a>開發 Bot</h2><p>雖然官方有提供一個範例程式碼，但我還是想從頭做一次，過程中還是會參考 <a href="https://github.com/discord/discord-example-app">example code</a></p><ol><li><p>建立一個 node express 專案，我這邊使用 NX 來幫忙建立 workspace</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-nx-workspace --preset=express</span><br></pre></td></tr></table></figure><p><img src="image-20221120114918739.png" alt="image-20221120114918739"></p></li><li><p>現在我們有一個可以用的 express app 可以運作，但為了讓 Discord Server 可以將訊息打到我們的 App，需要透過 <code>ngrok</code> 的協助</p><ol><li>啟動 express app on port 3333</li><li>啟動 ngrok 並監聽 port 3333，正確啟動後會取得一個對外網址，這個網址我們要回填到 Discord Application 的 <code>INTERACTIONS ENDPOINT URL</code> 中，當這樣設定完成後，Discord Server 就會將相關的訊息以 webhook 的方式打給我們</li><li>但這裡會發現無法正確儲存，原因是我們還沒有實做對應的 Endpoint 給 discord server 做驗證，下面會完成第一階段的功能</li></ol></li><li><p>假設填入的網址是 <code>https://xxxxxx.ngrok.io/interactions</code>，express 這邊需要實做一個對應的<code>POST</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/interactions&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上一步驟時進行設定儲存時，會出現這個錯誤訊息</p><p><img src="image-20221120121208822.png" alt="image-20221120121208822"></p><p>要排除這個錯誤，需要實做一個 <code>PING-PONG</code> 的回應，實做程式碼如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InteractionResponseType</span>, <span class="title class_">InteractionType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;discord-interactions&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/interactions&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="keyword">type</span>, id, data &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Handle verification requests</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="title class_">InteractionType</span>.<span class="property">PING</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">type</span>: <span class="title class_">InteractionResponseType</span>.<span class="property">PONG</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>有多安裝一個套件 <code>discord-interactions</code></li></ul></li><li><p>這時候回去 discord application 頁面按儲存時還是會失敗，而且 express 這邊也會噴 <code>req.body</code> 是 undefined 的錯誤，還少一個驗證 request 的功能</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>(&#123; <span class="attr">verify</span>: <span class="title class_">VerifyDiscordRequest</span>(process.<span class="property">env</span>.<span class="property">PUBLIC_KEY</span>) &#125;));</span><br></pre></td></tr></table></figure><ul><li><code>PUBLIC_KEY</code> 可以從 Discord Application Detail 頁面中取得，放置 <code>.env</code> 檔案內即可</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; verifyKey &#125; <span class="keyword">from</span> <span class="string">&#x27;discord-interactions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">VerifyDiscordRequest</span>(<span class="params">clientKey</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">req, res, buf, encoding</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> signature = req.<span class="title function_">get</span>(<span class="string">&#x27;X-Signature-Ed25519&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> timestamp = req.<span class="title function_">get</span>(<span class="string">&#x27;X-Signature-Timestamp&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isValidRequest = <span class="title function_">verifyKey</span>(buf, signature, timestamp, clientKey);</span><br><span class="line">    <span class="keyword">if</span> (!isValidRequest) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;Bad request signature&#x27;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Bad request signature&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這段功能補上去後，Discord Application 設定頁面應可正確的儲存了</p></li></ol><h3 id="註冊-Command"><a class="header-anchor" href="#註冊-Command"> </a>註冊 Command</h3><p>上面已經完成最基本與 discord 互動的 Endpoint，接下來就是要是處理 Command 的部分，我們期望是 User 在 Discord 頻道中使用 Bot 來下指令，用一個 <code>test</code> 作為指令行為驗證。使用前要先註冊，這邊有點繁瑣，拆步驟說明</p><ol><li><p>取得 APP_ID: 資訊可以從 Discord Application Detail 頁面上取得</p></li><li><p>GUILD_ID: 這部分稍微麻煩點</p><ol><li><p>首先開啟 Discord 網頁版並切到有 Bot 的 Channel</p></li><li><p>網址大概會長這樣</p><p><img src="image-20221120132856679.png" alt="image-20221120132856679"></p><p>Channels 後面的第一組數字就是我們要的 GUILD_ID 了</p></li></ol></li><li><p>詢問 Channel 是否有註冊過 Commands，如果沒有就註冊</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">HasGuildCommands</span>(<span class="params">appId, guildId, commands</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (guildId === <span class="string">&#x27;&#x27;</span> || appId === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  commands.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> <span class="title class_">HasGuildCommand</span>(appId, guildId, c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">HasGuildCommand</span>(<span class="params">appId, guildId, command</span>) &#123;</span><br><span class="line">  <span class="comment">// API endpoint to get and post guild commands</span></span><br><span class="line">  <span class="keyword">const</span> endpoint = <span class="string">`applications/<span class="subst">$&#123;appId&#125;</span>/guilds/<span class="subst">$&#123;guildId&#125;</span>/commands`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title class_">DiscordRequest</span>(endpoint, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      <span class="keyword">const</span> installedNames = data.<span class="title function_">map</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">      <span class="comment">// This is just matching on the name, so it&#x27;s not good for updates</span></span><br><span class="line">      <span class="keyword">if</span> (!installedNames.<span class="title function_">includes</span>(command[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Installing &quot;<span class="subst">$&#123;command[<span class="string">&#x27;name&#x27;</span>]&#125;</span>&quot;`</span>);</span><br><span class="line">        <span class="title class_">InstallGuildCommand</span>(appId, guildId, command);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&quot;<span class="subst">$&#123;command[<span class="string">&#x27;name&#x27;</span>]&#125;</span>&quot; command already installed`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Installs a command</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">InstallGuildCommand</span>(<span class="params">appId, guildId, command</span>) &#123;</span><br><span class="line">  <span class="comment">// API endpoint to get and post guild commands</span></span><br><span class="line">  <span class="keyword">const</span> endpoint = <span class="string">`applications/<span class="subst">$&#123;appId&#125;</span>/guilds/<span class="subst">$&#123;guildId&#125;</span>/commands`</span>;</span><br><span class="line">  <span class="comment">// install command</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">DiscordRequest</span>(endpoint, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: command &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Command 宣告</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">TEST_COMMAND</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Basic guild command&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>當 express 啟動時執行</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title class_">HasGuildCommands</span>(process.<span class="property">env</span>.<span class="property">APP_ID</span>, process.<span class="property">env</span>.<span class="property">GUILD_ID</span>, [<span class="variable constant_">TEST_COMMAND</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>這段有實做一個 <code>DiscordRequest</code> function，內容如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">&#x27;node-fetch&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">DiscordRequest</span>(<span class="params">endpoint, options</span>) &#123;</span><br><span class="line">  <span class="comment">// append endpoint to root API URL</span></span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://discord.com/api/v10/&#x27;</span> + endpoint;</span><br><span class="line">  <span class="comment">// Stringify payloads</span></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">body</span>) options.<span class="property">body</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(options.<span class="property">body</span>);</span><br><span class="line">  <span class="comment">// Use node-fetch to make requests</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="title class_">Authorization</span>: <span class="string">`Bot <span class="subst">$&#123;process.env.DISCORD_TOKEN&#125;</span>`</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">        <span class="string">&#x27;DiscordBot (https://github.com/discord/discord-example-app, 1.0.0)&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...options,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// throw API errors</span></span><br><span class="line">  <span class="keyword">if</span> (!res.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">status</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return original response</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>需要安裝 <code>node-fetch</code> 套件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-fetch@^2.6.6</span><br></pre></td></tr></table></figure></li><li><p>DISCORD_TOKEN: 來自 Bot 頁面的 Token</p><p><img src="image-20221120133514279.png" alt="image-20221120133514279"></p></li></ul><p>重新啟動 express app，應該可以看到 Command 被成功註冊的訊息，重新啟動一次 app，也可以看到 Command 已經被註冊的訊息。回到 Channel 中輸入 /test 就能看到被註冊的指令了</p><p><img src="image-20221120135115034.png" alt="image-20221120135115034"></p><h3 id="處理-Command"><a class="header-anchor" href="#處理-Command"> </a>處理 Command</h3><p>上一階段把 Command 註冊成功了，express app (Bot Service) 這邊也要實做對應的邏輯</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">type</span> === <span class="title class_">InteractionType</span>.<span class="property">APPLICATION_COMMAND</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = data;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Send a message into the channel where command was triggered from</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">InteractionResponseType</span>.<span class="property">CHANNEL_MESSAGE_WITH_SOURCE</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="comment">// Fetches a random emoji to send from a helper function</span></span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;hello world !&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行結果</p><p><img src="image-20221120135415958.png" alt="image-20221120135415958"></p><h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2><p>初期要設定 Bot 在 Discord 上面跑需要一些設定，在寫這篇筆記時，比較會卡住的點是流程面，Discord 在相關的設定上其實還算簡單，第一關打通後，後面會比較順一點。所以稍微複雜的互動行為就留在下一篇筆記了</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://support.discord.com/hc/en-us/articles/360033931551-Getting-Started">Discord Getting Start</a></li><li><a href="https://discord.com/developers/docs/intro">Discord Developer Portal</a></li><li><a href="https://discord.com/developers/docs/getting-started">Discord 開發 APP QuickStart</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近接了關於 Bot 開發相關的業務，趁休息時間玩一下 Discord Bot 的開發體驗，將過程記錄一下，搞不好後面還用的到。&lt;/p&gt;
&lt;p&gt;在這之前還是快速介紹一下 Discord。Discord是一款專為社群設計的免費網路即時通話軟體與數位發行平台，在早期很常被遊戲玩家拿來做線上連線時的通訊軟體，現在是很多產品、社群等都會利用 Discord 來經營社群。&lt;/p&gt;</summary>
    
    
    
    <category term="BOT" scheme="http://blog.kevinyang.net/categories/BOT/"/>
    
    
    <category term="BOT" scheme="http://blog.kevinyang.net/tags/BOT/"/>
    
    <category term="Discord" scheme="http://blog.kevinyang.net/tags/Discord/"/>
    
  </entry>
  
  <entry>
    <title>[Dapr] 使用 Dapr 開發 - Hello World</title>
    <link href="http://blog.kevinyang.net/2022/11/05/study-dapr-2/"/>
    <id>http://blog.kevinyang.net/2022/11/05/study-dapr-2/</id>
    <published>2022-11-05T03:08:05.000Z</published>
    <updated>2023-10-06T12:37:47.289Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇知道 Dapr 是什麼後，就要進入 Hello World 的世界了，著手寫看看第一個 Dapr 應用程式</p><span id="more"></span><h2 id="環境安裝"><a class="header-anchor" href="#環境安裝"> </a>環境安裝</h2><p>如果沒有安裝過 <code>Dapr CLI</code> 的，可以先安裝，他可以任我們在開發環境上執行、啟動、管理和除錯 Dapr instances。雖然不是必要但建議開發環境要支援 Docker</p><p>步驟如下</p><ol><li><p><a href="https://docs.dapr.io/getting-started/install-dapr-cli/">安裝 Dapr CLI</a></p></li><li><p><a href="https://docs.dapr.io/getting-started/install-dapr-selfhost/">初始化 Dapr</a>。 此步驟會安裝最新的 Dapr 二進位檔和容器映射，以設定您的開發環境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dapr init</span><br></pre></td></tr></table></figure><p><img src="image-20221105194553626.png" alt="image-20221105194553626"></p><p><img src="image-20221105194623033.png" alt="image-20221105194623033"></p><p>環境多準備了這三個 containers，這時候我們就可以準備來開發第一個 Dapr 應用程式</p></li></ol><h2 id="第一個-Dapr-應用程式"><a class="header-anchor" href="#第一個-Dapr-應用程式"> </a>第一個 Dapr 應用程式</h2><p>Dapr 有提供不同語言的 SDK，方便使用者能自然且直覺的與 Dapr 做互動</p><p><img src="image-20221105194821719.png" alt="image-20221105194821719"></p><p>這裡的範例我使用 .net core console 來練習</p><ol><li><p>建立一個 console 程式</p></li><li><p>安裝 <code>Dapr.Client</code> 套件</p></li><li><p>在 <code>program.cs</code> 貼上這段程式碼</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapr.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> storeName = <span class="string">&quot;statestore&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> key = <span class="string">&quot;counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> daprClient = <span class="keyword">new</span> DaprClientBuilder().Build();</span><br><span class="line"><span class="keyword">var</span> counter = <span class="keyword">await</span> daprClient.GetStateAsync&lt;<span class="built_in">int</span>&gt;(storeName, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Counter = <span class="subst">&#123;counter++&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> daprClient.SaveStateAsync(storeName, key, counter);</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>line 6: 建立 dapr Client</li><li>line 7: 取得 <code>counter</code> state</li><li>line 13: 儲存值回 <code>counter</code> state</li></ul></li><li><p>試著用 <code>dapr</code> 指令來執行程式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dapr run --app-id DaprCounter dotnet run</span><br></pre></td></tr></table></figure><p>會看到程式會跑起來，而且也能看到 Counter 的值被持續增加上去，而且當重啟程式後，也會保留上一次的結果繼續  <img src="image-20221105200300957.png" alt="image-20221105200300957"></p><p><img src="image-20221105200334950.png" alt="image-20221105200334950"></p></li></ol><p>使用 <code>dapr run</code> 時，<code>--app-id</code> 很重要，state management building block 是使用這個為 prefix 的值，所以第二次執行不是使用同一個 <code>app-id</code> 則會被視為不同的狀態</p><p>還記得一開始在 <code>dapr init</code> 時，有啟動幾個 container，其中一個是 <code>redis</code>，這也是 dapr 儲存狀態的地方，在上一篇也有提到每一個 building block 後面的元件是可以被抽換的，相關設定檔是透過 yaml 來設定，設定檔儲存位置如下</p><ul><li><p>mac/Linux: <code>$HOME/.dapr/components</code></p></li><li><p>windows: <code>%USERPROFILE%\.dapr\components</code></p><p><img src="image-20221105201130802.png" alt="image-20221105201130802"></p></li></ul><p>從圖片中可以看到有一個 <code>statesotre.yaml</code> 的檔案，內容會是這樣</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">statestore</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">state.redis</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redisHost</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">localhost:6379</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redisPassword</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">actorStateStore</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">scopes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DaprCounter</span></span><br></pre></td></tr></table></figure><ul><li>line 4: 這裡的 name 會對應到上面程式碼的 line 3 <code>const string storeName = &quot;statestore&quot;;</code></li><li>line 15: 可透過 <code>scopes</code> 來限定能存取此元件的應用程式 (<code>app-id</code>)</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇知道 Dapr 是什麼後，就要進入 Hello World 的世界了，著手寫看看第一個 Dapr 應用程式&lt;/p&gt;</summary>
    
    
    
    <category term="Dapr" scheme="http://blog.kevinyang.net/categories/Dapr/"/>
    
    
    <category term="Dapr" scheme="http://blog.kevinyang.net/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>[Dapr] What is Dapr?</title>
    <link href="http://blog.kevinyang.net/2022/11/05/study-dapr-1/"/>
    <id>http://blog.kevinyang.net/2022/11/05/study-dapr-1/</id>
    <published>2022-11-05T01:45:10.000Z</published>
    <updated>2023-10-06T12:37:47.285Z</updated>
    
    <content type="html"><![CDATA[<p>Dapr 在 2019 第一次公開時，那時候版本還是 0.1 時，就有留意到，想不到幾年後，不僅進入 CNCF 還變成很多人推薦的框架，所以重新拾回研究一下 Dapr 的架構及如何使用在工作上</p><span id="more"></span><p>為什麼會回來看 Dapr，最主要的原因是目前的工作，系統都是以微服務的形式跑在自架的 K8s 上，一旦到達一個規模整個管理跟實做上要考慮的事情變的相對複雜，而 Dapr 可以降低這部分的工作並以一致的模式套用在不同的語言跟技術框架上</p><h2 id="What-is-Dapr"><a class="header-anchor" href="#What-is-Dapr"> </a>What is Dapr</h2><p>官網上是這樣子介紹的</p><blockquote><p>APIs for building portable and reliable microservices</p><p>Leverage industry best practices and focus on your application’s logic.</p></blockquote><p><img src="image-20221105101325259.png" alt="image-20221105101325259"></p><p>從圖片上可以知道  Dapr 是走 sidecar 模式，但好家在他底層是使用 go 實做，執行起來也不會太笨重，並提供簡化不少原系統要處理的東西。而且 Dapr sidecar 之間的溝通是採用 <code>gRPC</code> 的模式來降低整體的負擔，將效能影響降至最低</p><h2 id="Dapr-架構"><a class="header-anchor" href="#Dapr-架構"> </a>Dapr 架構</h2><p><img src="dapr-high-level.png" alt="Dapr at 20,000 feet"></p><p>從這張圖尚可知道，原本的應用程式可透過 HTTP 或 gRPC 的方式與 Dapr 的元件溝通，在這模式下，應用程式間的互動會由 <code>代理人</code> Dapr 來處理，之後我會說明為什麼我會將其定義成 <code>代理人</code> 的原因</p><p>Dapr 提供幾個積木供我們使用 (如下表)，讓我們有抽換背後對應的服務 (抽象化)</p><table><thead><tr><th style="text-align:left">Building block</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">State management</td><td style="text-align:left">Support contextual information for long running stateful services.</td></tr><tr><td style="text-align:left">Service invocation</td><td style="text-align:left">Invoke direct, secure service-to-service calls using platform agnostic protocols and well-known endpoints.</td></tr><tr><td style="text-align:left">Publish and subscribe</td><td style="text-align:left">Implement secure, scalable pub/sub messaging between services.</td></tr><tr><td style="text-align:left">Bindings</td><td style="text-align:left">Trigger code from events raised by external resources with bi-directional communication.</td></tr><tr><td style="text-align:left">Observability</td><td style="text-align:left">Monitor and measure message calls across networked services.</td></tr><tr><td style="text-align:left">Secrets</td><td style="text-align:left">Securely access external secret stores.</td></tr><tr><td style="text-align:left">Actors</td><td style="text-align:left">Encapsulate logic and data in reusable actor objects.</td></tr></tbody></table><p><img src="building-blocks-integration.png" alt="Dapr building blocks integration"></p><p>一開始有提到 Dapr 是使用 <code>sidecar</code> 模式與 application 做互動，所以架構會長的像這樣</p><p><img src="sidecar-generic.png" alt="Sidecar architecture"></p><h2 id="Hosting-Environment"><a class="header-anchor" href="#Hosting-Environment"> </a>Hosting Environment</h2><p>Dapr 的執行環境有分 <code>self-hosted</code> 和 <code>container</code> 模式</p><p><img src="self-hosted-dapr-sidecar.png" alt="Self-hosted sidecar architecture"></p><p><img src="kubernetes-hosted-dapr-sidecar.png" alt="Kubernetes-hosted sidecar architecture"></p><p>所以在本機開發環境如果沒有 docker 也還是可以透過 <code>self-hosted</code> 的模式進行開發，不會影響之後的部屬，<code>self-hosted</code> 可透過 Dapr cli 來完成相關的操作 (<a href="https://docs.Dapr.io/getting-started/install-Dapr-cli/">Dapr CLI installer</a>)</p><h3 id="Service-Mesh-Dapr"><a class="header-anchor" href="#Service-Mesh-Dapr"> </a>Service  Mesh &amp; Dapr</h3><p>Service Mesh 是另外一個偉大的坑，其負責範圍其實很多，科普一下</p><blockquote><p>服務網格是一個可設定的基礎結構層，內建功能可處理服務對服務通訊、復原、負載平衡和遙測擷取。 它會將這些考慮的責任移出服務，並移入服務網格層。</p></blockquote><p>Dapr 也遵循一樣的模式，所以接下來的問題會是 Dapr 可以取代原本的 service mesh 嗎? 其實 Dapr 可以與原有的 Service Mesh 共存，負責的業務範圍會不太一樣，Dapr 提供系統服務，service mesh 提供服務間的網路溝通</p><p><img src="dapr-and-service-mesh.png" alt="Dapr and Service Mesh together"></p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://learn.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/">Dapr for .NET Developers</a></li><li><a href="https://docs.Dapr.io/getting-started/install-Dapr-cli/">Dapr CLI installer</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dapr 在 2019 第一次公開時，那時候版本還是 0.1 時，就有留意到，想不到幾年後，不僅進入 CNCF 還變成很多人推薦的框架，所以重新拾回研究一下 Dapr 的架構及如何使用在工作上&lt;/p&gt;</summary>
    
    
    
    <category term="Dapr" scheme="http://blog.kevinyang.net/categories/Dapr/"/>
    
    
    <category term="Dapr" scheme="http://blog.kevinyang.net/tags/Dapr/"/>
    
  </entry>
  
  <entry>
    <title>[OIDC] 瞭解 OIDC 的表層</title>
    <link href="http://blog.kevinyang.net/2022/10/30/oidc-notes/"/>
    <id>http://blog.kevinyang.net/2022/10/30/oidc-notes/</id>
    <published>2022-10-30T00:21:43.000Z</published>
    <updated>2023-10-06T12:37:47.277Z</updated>
    
    <content type="html"><![CDATA[<p>Keycloak 提供了幾種 protocols，OpenID Connect (OIDC)、OAuth 2.0 and SAML。雖然 OIDC &amp; OAuth 2.0 已存在一段時間，但因為沒有使用實做上的情境，所以都沒有花時間去瞭解背後的運作原理，一樣利用週末的時間來做一下功課</p><span id="more"></span><p>根據閱讀多篇文件瞭解，OIDC 是基於 OAuth 2.0 發展出來的，看起來得先看 OAuth 2.0 是什麼</p><p><img src="image-20221030104933158.png" alt="image-20221030104933158"></p><h2 id="OAuth-2-0"><a class="header-anchor" href="#OAuth-2-0"> </a>OAuth 2.0</h2><p>OAuth 2.0 基本上處理 Authorization 的部分，用來控制授權<strong>誰</strong>能存取<strong>資源</strong>，有四個基本元素</p><ol><li><strong>authorization server</strong>: 用來發 access token 的 server</li><li><strong>resource owner</strong>: 有權限能存取資料的使用者</li><li><strong>client</strong>: 將 access token 傳給系統服務的應用程式</li><li><strong>resource server</strong>: 接受 access token 並驗證其合法性</li></ol><p>其他名詞</p><ol><li><strong>authorization grant</strong>: 授權範圍</li><li><strong>access token</strong>: 由 <code>authorization server</code> 發出，會在發請求時附加在進去給 <code>resource server</code></li><li><strong>redirect URI</strong>: 登入後要轉回的路徑</li></ol><h3 id="授權流程"><a class="header-anchor" href="#授權流程"> </a>授權流程</h3><ol><li><p>Authorization Code</p><p><img src="image-20221030091611632.png" alt="image-20221030091611632"></p><p>這算是比較常見的模式，登入畫面會由 <code>authorization server</code> 提供，透過 <code>redirect URI</code> 的方式帶著 <code>authorization code</code> 回到 <code>client</code> 端供後面使用</p><blockquote><p>這流程也是 Keycloak JavaScript adapter 預設行為</p></blockquote></li><li><p>Implicit</p><p><img src="image-20221030091931055.png" alt="image-20221030091931055"></p><p>使用場景是 SPA 或是純前端系統，與 <code>Authorization Code</code> 模式的差異在於 <code>access token</code> 的取得方式，</p><blockquote><p>這模式比較不安全，「透過 URI Fragment 來傳 Access Token ，所以可能會外洩」</p></blockquote></li><li><p>Resource Owner Password Credentials</p><p><img src="image-20221030092328110.png" alt="image-20221030092328110"></p><p>這比較像是過往的 server side 網頁服務</p></li><li><p>Client Credentials</p><p><img src="image-20221030092618674.png" alt="image-20221030092618674"></p><p>適用場景: machine-to-machine (M2M) applications</p></li></ol><p>(圖片出自: <a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E8%AA%8D%E8%AD%98-oauth-2-0-%E4%B8%80%E6%AC%A1%E4%BA%86%E8%A7%A3%E5%90%84%E8%A7%92%E8%89%B2-%E5%90%84%E9%A1%9E%E5%9E%8B%E6%B5%81%E7%A8%8B%E7%9A%84%E5%B7%AE%E7%95%B0-c42da83a6015">[筆記] 認識 OAuth 2.0：一次了解各角色、各類型流程的差異</a>)</p><h2 id="OIDC"><a class="header-anchor" href="#OIDC"> </a>OIDC</h2><p>瞭解基本 OAuth 2.0 後，那 OIDC 又是什麼，一開始提到 <code>OIDC 是基於 OAuth 2.0 發展出來的</code></p><p>先提一下 <code>OAuth 2.0</code> 只有做 <code>Authorization</code> 的部分，並沒有涵蓋<code>Authentication</code> 的部分，這兩者的差異是什麼呢?</p><ul><li>Authorization: 授權使用範圍</li><li>Authentication: 使用者認證，使用者是否存在及使用者是誰，都算在認證的範圍內</li></ul><p><img src="image-20221030093943446.png" alt="image-20221030093943446"></p><p>(圖片來源: <a href="https://openid.net/connect/">https://openid.net/connect/</a>)</p><p>整個的流程大概會是這樣</p><p><img src="image-20221030094329195.png" alt="image-20221030094329195"></p><p>一些會出現在 OIDC 的名詞</p><ul><li><strong>End User</strong>: Human participant.</li><li><strong>Replying Party (RP)</strong>: OAuth 2.0 Client application requiring End-User Authentication and Claims from an OpenID Provider.</li><li><strong>OpenID Provider (OP)</strong>: OAuth 2.0 Authorization Server that is capable of Authenticating the End-User and providing Claims to a Relying Party about the Authentication event and the End-User.</li><li><strong>ID Token</strong>: <a href="https://openid.net/specs/openid-connect-core-1_0.html#JWT">JSON Web Token (JWT)</a> [JWT] that contains Claims about the Authentication event. It MAY contain other Claims.</li><li><strong>UserInfo Endpoint</strong>: Protected Resource that, when presented with an Access Token by the Client, returns authorized information about the End-User represented by the corresponding Authorization Grant. The UserInfo Endpoint URL MUST use the <code>https</code> scheme and MAY contain port, path, and query parameter components.</li></ul><h3 id="常見-flow"><a class="header-anchor" href="#常見-flow"> </a>常見 flow</h3><ol><li><strong>Authorization Code</strong></li><li><strong>Implicit</strong>: with Id_token</li><li><strong>Hybrid</strong>:  Authorization Code+ Implicit</li></ol><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://www.youtube.com/watch?v=996OiexHze0&amp;t=2s">OAuth 2.0 and OpenID Connect (in plain English)</a></li><li><a href="https://kimlin20011.medium.com/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-openid-connect-%E4%B8%80-8701bbf00958">深入淺出 OpenID Connect (一)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Keycloak 提供了幾種 protocols，OpenID Connect (OIDC)、OAuth 2.0 and SAML。雖然 OIDC &amp;amp; OAuth 2.0 已存在一段時間，但因為沒有使用實做上的情境，所以都沒有花時間去瞭解背後的運作原理，一樣利用週末的時間來做一下功課&lt;/p&gt;</summary>
    
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/categories/Keycloak/"/>
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/tags/Keycloak/"/>
    
  </entry>
  
  <entry>
    <title>[Keycloak] WebAPI with Keycloak</title>
    <link href="http://blog.kevinyang.net/2022/10/23/keycloak-note-2/"/>
    <id>http://blog.kevinyang.net/2022/10/23/keycloak-note-2/</id>
    <published>2022-10-23T05:37:00.000Z</published>
    <updated>2023-10-06T12:37:47.277Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇介紹了基本環境設定與 Angular 前端如何套用 Keycloak，但一個完整的流程應該還會包含後端的 API 驗證，這篇會用 C# 的 WebAPI 來做一個簡單範例</p><span id="more"></span><h2 id="New-Keycloak-Client"><a class="header-anchor" href="#New-Keycloak-Client"> </a>New Keycloak Client</h2><p>在 KeyCloak Admin Console 內多新增一個 Client 並把一些設定全部關掉，在最新版的介面裡面已經找不到設定 <code>access type</code> 的介面了，Google 一番後發現只要將所有的 Authentication flow 全部取消掉，就是以前的 Bearer-only 模式</p><p>所謂的 Bearer-only 模式: the application only allows bearer token requests</p><p><img src="image-20221023185121179.png" alt="image-20221023185121179"></p><p>設定完成後可以到同一畫面的右上角取額 setting json 內容</p><p><img src="image-20221023185454979.png" alt="image-20221023185454979"></p><p>將內容複製起來，等等建立在 Core WebAPI 專案的地方用的到</p><h2 id="c-專案"><a class="header-anchor" href="#c-專案"> </a>c# 專案</h2><p>先新增一個 <a href="http://ASP.NET">ASP.NET</a> Core WebAPI 的專案，並安裝 <a href="https://www.nuget.org/packages/Keycloak.AuthServices.Authentication/1.2.1?_src=template">Keycloak.AuthServices.Authentication</a> 套件</p><p>將上個步驟的 adapter config 內容新增到 <code>appsettings.json</code> 檔內，這邊是示範，Production 使用時請依正確做法設定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Logging&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;LogLevel&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Information&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Microsoft.AspNetCore&quot;</span>: <span class="string">&quot;Warning&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;AllowedHosts&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Keycloak&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;realm&quot;</span>: <span class="string">&quot;myrealm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;auth-server-url&quot;</span>: <span class="string">&quot;http://localhost:8080/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ssl-required&quot;</span>: <span class="string">&quot;external&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resource&quot;</span>: <span class="string">&quot;api-client&quot;</span>,</span><br><span class="line">    <span class="string">&quot;public-client&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;confidential-port&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到 <code>Program.cs</code> 檔案內新增 Authentication 的設定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddKeycloakAuthentication(configuration, o =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    o.RequireHttpsMetadata = <span class="literal">false</span>;    </span><br><span class="line">    o.Audience = <span class="string">&quot;account&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>記得在 <code>app.UseAuthorization()</code> 的上方加入 <code>app.UseAuthentication();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.UseAuthentication();</span><br><span class="line">app.UseAuthorization();</span><br></pre></td></tr></table></figure><p>上述完成設定後，就可以到 API 的地方加上 <code>[Authorize]</code> 的標籤</p><p><img src="image-20221023185907306.png" alt="image-20221023185907306"></p><p>一旦加上去後，只要要呼叫這個 API 時，就會檢查 request header 內的 <strong>authorization</strong> 的 <code>Bearer</code> 值是否合法正確</p><h3 id="如果遇到-CORS-問題"><a class="header-anchor" href="#如果遇到-CORS-問題"> </a>如果遇到 CORS 問題</h3><p>如果從 angular application 呼叫 API 時，通常會撞上 CORS 的問題，這時候就得在 <code>Program.cs</code> 加上 <code>Cors</code> 的相關設定，減少大家 google 的時間，這邊就附上最不嚴謹的設定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddPolicy(<span class="string">&quot;policy&quot;</span>,</span><br><span class="line">                    policy =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        policy.AllowAnyOrigin()</span><br><span class="line">                            .AllowAnyHeader()</span><br><span class="line">                            .AllowAnyMethod();</span><br><span class="line">                    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">app.UseCors(<span class="string">&quot;policy&quot;</span>);</span><br></pre></td></tr></table></figure><p>Controller 的部分也需要加上 <code>[EnableCors]</code> 的標籤</p><h3 id="實際呼叫的-Network-截圖"><a class="header-anchor" href="#實際呼叫的-Network-截圖"> </a>實際呼叫的 Network 截圖</h3><p><img src="image-20221023190406972.png" alt="image-20221023190406972"></p><p>在 Web 的部分會多判斷處理 Token 過期的問題，如果後臺有設定可自動 Refresh，那麼在呼叫 API 時就會去做 Token 更新的動作，之後才會進行 API 呼叫 (with authorization: Bearer xxxxxx)</p><p><img src="image-20221023190645948.png" alt="image-20221023190645948"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一篇介紹了基本環境設定與 Angular 前端如何套用 Keycloak，但一個完整的流程應該還會包含後端的 API 驗證，這篇會用 C# 的 WebAPI 來做一個簡單範例&lt;/p&gt;</summary>
    
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/categories/Keycloak/"/>
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/tags/Keycloak/"/>
    
  </entry>
  
  <entry>
    <title>[Keycloak] 環境準備 &amp; 基本設定</title>
    <link href="http://blog.kevinyang.net/2022/10/23/keycloak-note-1/"/>
    <id>http://blog.kevinyang.net/2022/10/23/keycloak-note-1/</id>
    <published>2022-10-23T02:05:13.000Z</published>
    <updated>2023-10-06T12:37:47.273Z</updated>
    
    <content type="html"><![CDATA[<p><code>Keycloak is an open source identity and access management solution</code>. 他能提供 SSO 系統服務，一個簡單的驗證機制可以快速被建立出來，更多資訊可以到<a href="https://www.keycloak.org/">官網</a>上閱讀，那為什麼要寫這篇筆記，主要是想要瞭解開發時，如何與 Keycloak 串接，所以要在本機上面將該環境給準備出來，以供開發使用。</p><span id="more"></span><h2 id="環境架設"><a class="header-anchor" href="#環境架設"> </a>環境架設</h2><p>好家在的是在本機電腦上面啟動一套 Keycloak 的動作很簡單，拜 container 技術的進步，只要一行指令就可以完成安裝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:19.0.3 start-dev</span><br></pre></td></tr></table></figure><ul><li>登入帳號密碼預設為 <code>admin</code> / <code>admin</code></li><li>登入網址: <code>http://localhost:8080</code></li></ul><h2 id="Keycloak-後台基本操作"><a class="header-anchor" href="#Keycloak-後台基本操作"> </a>Keycloak 後台基本操作</h2><p>開啟 <code>http://localhost:8080</code> 會看到這個畫面</p><p><img src="image-20221023102214910.png" alt="image-20221023102214910"></p><p>進入 <code>Administration Console </code> 會先看到登入畫面，帳號密碼如上面說到的 <code>admin</code> / <code>admin</code>，登入帳後密碼後會看到一堆設定選單，我們的主要目的是要測試開發時能串接 Keycloak 的登入功能，所以會做以下幾件事情</p><h3 id="建立-realm"><a class="header-anchor" href="#建立-realm"> </a>建立 realm</h3><p>於左上角的下拉選單中，可以看到 <code>Crate Realm</code>，從這邊進行建立 realm 的動作</p><p><img src="image-20221023103522222.png" alt="image-20221023103522222"></p><p>什麼是 <code>realm</code> ? <code>realm</code> 是一個 workspace 讓你可以管理 users、applications、roles and groups.</p><p><img src="image-20221023103719261.png" alt="image-20221023103719261"></p><p>輸入一個名字後按下 <code>Create</code> 即可完成建立，建立完成後在左上角的下拉選單中就可以看到剛剛所建立的 <code>realm</code></p><h3 id="建立-User"><a class="header-anchor" href="#建立-User"> </a>建立 User</h3><p>切換到剛剛所新增的 <code>realm</code> ，然後點選 <code>Users</code> 來準備建立第一個 User 帳號</p><p><img src="image-20221023103904970.png" alt="image-20221023103904970"></p><p>點 <code>Create new user</code> 後，輸入一些基本資訊，按下 <code>Create</code> 完成新增第一個使用者</p><p><img src="image-20221023104129585.png" alt="image-20221023104129585"></p><p>新增完成後，需要來設定一下登入密碼，在畫面上設定密碼的地方在</p><p><img src="image-20221023104247821.png" alt="image-20221023104247821"></p><p><img src="image-20221023104307523.png" alt="image-20221023104307523"></p><p><img src="image-20221023104339043.png" alt="image-20221023104339043"></p><ul><li><code>Temporary</code> ：使用者於第一次登入時是否要重新設定密碼，預設是 <code>On</code> 表示使用者在第一次登入後是需要變更密碼的</li></ul><p>驗證剛剛設定的 User 是否能正常使用，可以透過開啟 <a href="http://localhost:8080/realms/myrealm/account">Keycloak Account Console</a> 的畫面來進行驗證，如果能正確的登入就代表設定正確</p><h2 id="開發-串接"><a class="header-anchor" href="#開發-串接"> </a>開發 &amp; 串接</h2><p>上述完成後就可以來試著串看看了，當然首發是 Angular</p><h3 id="設定-Client-on-Keycloak"><a class="header-anchor" href="#設定-Client-on-Keycloak"> </a>設定 Client (on Keycloak)</h3><p>我覺得這塊是最困惑的地方，一個地方沒設定好，前端就沒法正常使用了</p><ol><li><p>建立 clients</p><p><img src="image-20221023115522307.png" alt="image-20221023115522307"></p></li><li><p>設定 Client ID，之後在 Angular 設定時需要</p><p><img src="image-20221023115602969.png" alt="image-20221023115602969"></p></li><li><p><code>Capability Config</code> 的頁面先保持預設值</p><p><img src="image-20221023115647040.png" alt="image-20221023115647040"></p></li><li><p><code>Save</code> 完成新增 Client</p></li><li><p>這時候會跳到 Client 的詳細頁面，這個頁面需要多設定一些網址資訊</p><ol><li><strong>Valid redirect URIs</strong> 新增 <code>http://localhost:4200/*</code></li><li><strong>Valid post logout redirect URIs</strong> 新增 <code>http://localhost:4200/*</code></li><li><strong>Web origins</strong> 新增 <code>http://localhost:4200</code></li></ol><p>設定完成後按下 <code>Save</code> 儲存異動</p></li></ol><h3 id="Angular-安裝-Keycloack-library"><a class="header-anchor" href="#Angular-安裝-Keycloack-library"> </a>Angular 安裝 Keycloack library</h3><ol><li><p>假設已經有一個 Angular 專案</p></li><li><p>安裝 library</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install keycloak-angular keycloak-js</span><br></pre></td></tr></table></figure></li><li><p>設定 initial config (<code>app.mdoule.ts</code>)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">APP_INITIALIZER</span>, <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakAngularModule</span>, <span class="title class_">KeycloakService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-angular&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initializeKeycloak</span>(<span class="params">keycloak: KeycloakService</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">    keycloak.<span class="title function_">init</span>(&#123;</span><br><span class="line">      <span class="attr">config</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">realm</span>: <span class="string">&#x27;myrealm&#x27;</span>,</span><br><span class="line">        <span class="attr">clientId</span>: <span class="string">&#x27;ngclient&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">loadUserProfileAtStartUp</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">initOptions</span>: &#123;</span><br><span class="line">        <span class="attr">onLoad</span>: <span class="string">&#x27;check-sso&#x27;</span>,</span><br><span class="line">        <span class="attr">silentCheckSsoRedirectUri</span>:</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span> + <span class="string">&#x27;/assets/silent-check-sso.html&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">KeycloakAngularModule</span>, <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>([])],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">APP_INITIALIZER</span>,</span><br><span class="line">      <span class="attr">useFactory</span>: initializeKeycloak,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">deps</span>: [<span class="title class_">KeycloakService</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>line 12: Keycloak server 位置</p></li><li><p>line 13: 要存取哪一個 <code>realm</code></p></li><li><p>line 14: 使用的 ClientID</p></li><li><p>line 20: <code>slient-check-sso.html</code> 的內容是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      parent.postMessage(location.href, location.origin);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>line 16 ~ 21: 其他關於驗證的設定項目</p></li></ul><p>當上述設定完成後，基本上整個 angular application 已經跟 keycloak 做好連接了</p><p>以下有一個簡單的範例，用來展示 login 前後的操作</p><ul><li><p><code>app.component.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Keycloak Angular Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> *<span class="attr">ngIf</span>=<span class="string">&quot;isLoggedIn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;logout()&quot;</span>&gt;</span>Log out<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!isLoggedIn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;login()&quot;</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User information<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.username&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.firstName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>First name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.firstName &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.lastName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>Last name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.email&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.email &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>E-mail verified<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.emailVerified ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>app.component.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ActivatedRoute</span>, <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-angular&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakProfile</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> isLoggedIn = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">userProfile</span>: <span class="title class_">KeycloakProfile</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> keycloak: KeycloakService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isLoggedIn</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">isLoggedIn</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isLoggedIn</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userProfile</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">loadUserProfile</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">login</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">logout</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>呈現畫面</p><p><img src="image-20221023132329423.png" alt="image-20221023132329423"></p></li></ol><p>而 login 後的 User 資訊到底可以取到什麼程度，也是可以從後台做設定的</p><p><img src="image-20221023132432605.png" alt="image-20221023132432605"></p><h3 id="AuthGuide-HttpInterceptor"><a class="header-anchor" href="#AuthGuide-HttpInterceptor"> </a>AuthGuide &amp; HttpInterceptor</h3><p>所安裝的套件也好心的將這兩區塊的功能，範例程式碼都提供出來了，這裡就不多寫，直接附上連結</p><ul><li><a href="https://github.com/mauriciovigolo/keycloak-angular#authguard">AuthGuard</a></li><li><a href="https://github.com/mauriciovigolo/keycloak-angular#httpclient-interceptor">HttpClient Interceptor</a></li></ul><h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2><p>Keycloak 的設定很多，很多細節需要仔細的研究，但總的來說，功能很強也保有一定的彈性，例如 User Info Storage 的部分可以串接其他的資訊，或是支援其他的 Identity providers 等，開發上的使用也支援很多常見語言，例如 Java、.NET、JavaScript 、Python 等</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://www.keycloak.org/">Keycloak</a></li><li><a href="https://github.com/mauriciovigolo/keycloak-angular">keycloak-angular</a></li><li><a href="https://www.keycloak.org/docs/latest/securing_apps/#_javascript_adapter">Keycloak JavaScript dapter</a></li></ul><p><a href="https://www.keycloak.org/"></a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Keycloak is an open source identity and access management solution&lt;/code&gt;. 他能提供 SSO 系統服務，一個簡單的驗證機制可以快速被建立出來，更多資訊可以到&lt;a href=&quot;https://www.keycloak.org/&quot;&gt;官網&lt;/a&gt;上閱讀，那為什麼要寫這篇筆記，主要是想要瞭解開發時，如何與 Keycloak 串接，所以要在本機上面將該環境給準備出來，以供開發使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/categories/Keycloak/"/>
    
    
    <category term="Keycloak" scheme="http://blog.kevinyang.net/tags/Keycloak/"/>
    
  </entry>
  
  <entry>
    <title>Playwright 探索日記(1) - 初次見面</title>
    <link href="http://blog.kevinyang.net/2022/10/22/playwright-note1/"/>
    <id>http://blog.kevinyang.net/2022/10/22/playwright-note1/</id>
    <published>2022-10-22T02:43:30.000Z</published>
    <updated>2023-10-06T12:37:47.269Z</updated>
    
    <content type="html"><![CDATA[<p>Playwright 是一套 E2E 的測試工具，可以測試多種瀏覽器環境(包含手機)，是一個功能強大且完整的工具</p><span id="more"></span><p>引用官網的介紹</p><p><img src="image-20221022105911680.png" alt="image-20221022105911680"></p><h2 id="專案初始"><a class="header-anchor" href="#專案初始"> </a>專案初始</h2><p>建立一個 playwright 的專案動作很單純，可以透過 <code>npm init</code> 的方式完成，步驟如下</p><ol><li>建立一個資料夾來放 playwright 專案</li><li>開啟命令視窗切換到該資料夾</li><li>執行 <code>npm init playwright@latest</code></li><li>過程中會遇到幾個選擇<ol><li>語言: JavaScript or TypeScript</li><li>測試資料夾的名稱</li><li>是否要加入 GitHub Actions 的指令</li></ol></li><li>等待安裝，即可完成</li></ol><p>等 <code>npm install</code> 結束後即可用 <code>VSCode</code> 開啟該資料夾專案，檔案結構很簡單</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">playwright.config.ts</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br><span class="line">tests/</span><br><span class="line">  example.spec.ts</span><br><span class="line">tests-examples/</span><br><span class="line">  demo-todo-app.spec.ts</span><br></pre></td></tr></table></figure><p><code>playwright.config.ts</code> 和 <code>tests/</code> 下的東西晚點來看，先來跑一下測試與測試報告</p><p>執行測試的指令: <code>npx playwright test</code></p><p>測試報告指令: <code>npx playwright show-report</code></p><h2 id="Playwright-設定檔"><a class="header-anchor" href="#Playwright-設定檔"> </a>Playwright 設定檔</h2><p>在 <code>playwright.config.ts</code> 內充滿了滿滿的註解，想要看不懂設定真的有一定的難度，除了測試檔案資料夾或是 timeout 設定都算基本的，測試環境的設定也是在這個設定檔內，相信這個各位開啟檔案後應該知道怎麼處理了</p><h2 id="測試檔的語法"><a class="header-anchor" href="#測試檔的語法"> </a>測試檔的語法</h2><p>先從預設新增的測試檔案說明起，因為 playwright 提供的 api 功能強大，需要分別研究，現階段先看個感覺</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, expect &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;homepage has Playwright in title and get started link linking to the intro page&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://playwright.dev/&#x27;</span>);</span><br><span class="line">  <span class="comment">// Expect a title &quot;to contain&quot; a substring.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveTitle</span>(<span class="regexp">/Playwright/</span>);</span><br><span class="line">  <span class="comment">// create a locator</span></span><br><span class="line">  <span class="keyword">const</span> getStarted = page.<span class="title function_">getByText</span>(<span class="string">&#x27;Get Started&#x27;</span>);</span><br><span class="line">  <span class="comment">// Expect an attribute &quot;to be strictly equal&quot; to the value.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(getStarted).<span class="title function_">toHaveAttribute</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;/docs/intro&#x27;</span>);</span><br><span class="line">  <span class="comment">// Click the get started link.</span></span><br><span class="line">  <span class="keyword">await</span> getStarted.<span class="title function_">click</span>();</span><br><span class="line">  <span class="comment">// Expects the URL to contain intro.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveURL</span>(<span class="regexp">/.*intro/</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>基本語法結構跟寫 JS Unit test 很像，在 <code>test</code> 內可已有測試描述即要執行的測試程式</li><li><code>page</code> 物件的操作等同操作瀏覽器的一個網頁</li><li>使用 jasmine line 的 expect assertion 的語法來做測試，像是 <code>expect(page).toHaveTitle(/Playwright/);</code></li><li>page 的操作會持續等待結果回來，或是超過 timeout 時間就會噴錯</li><li>也可以執行按鈕的動作或是點選連結的行為</li><li>整個測試流程可讀性還蠻高的</li></ul><h2 id="VSCode-Extension"><a class="header-anchor" href="#VSCode-Extension"> </a>VSCode Extension</h2><p>如果有使用 VSCode，也可以安裝 playwright 的 extension，裝了之後可以讓測試 playwright 更輕鬆</p><p><img src="image-20221022222048276.png" alt="image-20221022222048276"></p><p>看起來就是簡單好用，更多件介紹<a href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright">由此去</a></p><h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2><p>快速掃過官方文件，其實他可以做的不只有 E2E，也還可以做 API Testing，而且不像 <a href="http://cypress.io">cypress.io</a> 一開始就那麼肥大，看起來是一個值得深入研究的工具</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Playwright 是一套 E2E 的測試工具，可以測試多種瀏覽器環境(包含手機)，是一個功能強大且完整的工具&lt;/p&gt;</summary>
    
    
    
    <category term="playwright" scheme="http://blog.kevinyang.net/categories/playwright/"/>
    
    
    <category term="playwright" scheme="http://blog.kevinyang.net/tags/playwright/"/>
    
  </entry>
  
  <entry>
    <title>[RxJS] Config.onUnhandledError</title>
    <link href="http://blog.kevinyang.net/2022/09/18/rxjs-config/"/>
    <id>http://blog.kevinyang.net/2022/09/18/rxjs-config/</id>
    <published>2022-09-18T14:46:59.000Z</published>
    <updated>2023-10-06T12:37:47.269Z</updated>
    
    <content type="html"><![CDATA[<p>今天心血來潮跑去 <code>RxJS</code> 官網晃了一下，無意間看到一個我從沒注意到的好功能，特地寫一篇文章記錄一下，我們在寫 Angular 時會去寫一個 global 的 error handle，主要目的是為了那些未被處理的 exception，而 <code>RxJS</code> 也有一樣的功能，那就是 <code>config</code></p><span id="more"></span><p>先貼上一段 code，直接用程式碼說明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; config, throwError &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line">config.<span class="property">onUnhandledError</span> = <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">warn</span>(err);</span><br><span class="line"></span><br><span class="line"><span class="title function_">throwError</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;error without handle&#x27;</span>).<span class="title function_">subscribe</span>();</span><br><span class="line"><span class="title function_">throwError</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;error with handle&#x27;</span>).<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">error</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>執行效果如下圖</p><p><img src="image-20220918225327395.png" alt="image-20220918225327395"></p><p>光看到這樣是否就覺得有使用他的地方了，而實際在 Angular 內會怎麼使用呢? 因為 <code>config</code> 是 global 設定，所以可以在 root module 定義，剩下的就會自己處理了，十分方便</p><p><img src="image-20220918230230345.png" alt="image-20220918230230345"></p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://rxjs.dev/api/index/interface/GlobalConfig">RxJS config</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天心血來潮跑去 &lt;code&gt;RxJS&lt;/code&gt; 官網晃了一下，無意間看到一個我從沒注意到的好功能，特地寫一篇文章記錄一下，我們在寫 Angular 時會去寫一個 global 的 error handle，主要目的是為了那些未被處理的 exception，而 &lt;code&gt;RxJS&lt;/code&gt; 也有一樣的功能，那就是 &lt;code&gt;config&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Typed Form study notes</title>
    <link href="http://blog.kevinyang.net/2022/09/09/ng14-typed-form/"/>
    <id>http://blog.kevinyang.net/2022/09/09/ng14-typed-form/</id>
    <published>2022-09-09T04:29:45.000Z</published>
    <updated>2023-10-06T12:37:47.269Z</updated>
    
    <content type="html"><![CDATA[<p>Angular 14 推出 Typed Form 的功能，利用中秋放假的時間，好好地將這個功能給仔細玩過一次，掌握好才能在專案上使用到</p><span id="more"></span><h2 id="基本元素"><a class="header-anchor" href="#基本元素"> </a>基本元素</h2><p>Angular 13  有 <code>FormGroup</code>、<code>FormControl</code>、<code>FormArray</code>、<code>FormBuilder</code>，而在 Angular 14 裡原本的這些 <code>FormControl</code> 都會變成 <code>UntypedFormGroup</code>、<code>UntypedFormControl</code>、<code>UnTypedFormArray</code>、<code>UnTypedFormBuilder</code> (透過 ng update 時，Angular 會更換成這些類別)，在 Angular 14 以後的 <code>FormGroup</code>、<code>FormControl</code>、<code>FormArray</code>、<code>FormBuilder</code> 都具有型別了，另外還有一個 <code>FormRecord</code> 的新類別，後面會介紹到他</p><p>使用 Typed Form 的好處是在開發時期就可以知道表單型別，避免一些不必要的錯誤，也可以針對 <code>null</code> 的狀況作防範，有好處就一定有壞處，如果遇到比較動態類型的表單，使用 Typed Form 就比較綁手綁腳，這時候可以退回使用 <code>UnTyped</code> 版本的</p><h2 id="FormControl"><a class="header-anchor" href="#FormControl"> </a>FormControl</h2><p><code>FormControl</code> 在 Typed Form 下多了幾個特性，下面一一說明</p><h3 id="Nullability"><a class="header-anchor" href="#Nullability"> </a>Nullability</h3><p>表單中最基本成員，寫法與 API 跟之前一模一樣</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;myEmail@xxx.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>FormControl</code> 執行  <code>reset()</code>  時，預設會變成 <code>null</code>，但這件事情在 Angular 14 的時候多了一個選項，可以在建立 <code>FormControl</code> 時，設定 <code>&#123;nonNullable: true&#125;</code>，這時候當執行 <code>reset()</code> 時，就會回到一開始建立 <code>FormControl</code> 所賦予的預設值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;myEmail@xxx.com&#x27;</span>, &#123;<span class="attr">nonNullable</span>: <span class="literal">true</span>&#125;); </span><br></pre></td></tr></table></figure><p>這特性很重要，可以避免很多不必要的 null 處理</p><h3 id="Specifying-an-Explicit-Type"><a class="header-anchor" href="#Specifying-an-Explicit-Type"> </a>Specifying an Explicit Type</h3><p>既然是有型別的 <code>FormControl</code>，指定 <code>FormControl</code> 的型別後，一旦設定不符合型別的值就會通知 invalid 了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="literal">null</span>);</span><br><span class="line">email.<span class="title function_">setValue</span>(<span class="string">&#x27;myEmail@xx.com&#x27;</span>); </span><br></pre></td></tr></table></figure><p><img src="image-20220909151348349.png" alt="image-20220909151348349"></p><p>要迴避這問題的解法有兩種</p><ol><li>用空字串做預設值</li><li>設定 <code>FormControl&lt;string | null&gt;</code></li></ol><h2 id="FormArray"><a class="header-anchor" href="#FormArray"> </a>FormArray</h2><p>如果 <code>FormArray</code> 內只會有同一種型別的 Control，可以直接使用 <code>FormArray</code>，如果是多種類型，例如同時有 <code>FormGroup</code>、<code>FormControl</code>，那就要使用 <code>UntypedFormArray</code> 了</p><h2 id="FormGroup"><a class="header-anchor" href="#FormGroup"> </a>FormGroup</h2><p><code>FormGroup</code> 的 value 與 <code>getRawValue</code> 會回傳不同型別的結果，其實也蠻符合應有的行為</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> group = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      <span class="attr">roomId</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = group.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">const</span> rawValue = group.<span class="title function_">getRawValue</span>();</span><br></pre></td></tr></table></figure><p>以這段程式碼來說，<code>value</code> 會自動判斷為這個型別</p><p><img src="image-20220909153051507.png" alt="image-20220909153051507"></p><p>為什麼會有這樣的型別推導呢，理由有兩個</p><ol><li>一開始與初始化時是使用  <code>new FormControl('')</code>，即表示這個 <code>FormControl</code>  的值有可能是 <code>string | null</code>，假設這邊有多設定 <code>nonNullable: true</code> 時，就可以明確知道 <code>FormControl</code> 的值一定不會有 <code>null</code> 發生</li><li>當 <code>FormGroup</code> 裡的 <code>FormControl</code> 是 <code>disabled</code>  時，<code>FormGroup.value</code> 裡就不會有該 <code>FormControl</code> 的值，所以這邊使用 <code>Partial</code> 十分合理</li></ol><p>換句話說，<code>FormGroup.getRawValue()</code> 的回傳值型別推導就會是</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">    <span class="attr">roomId</span>: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>進一步看 <code>FormGroup</code> 的使用指定型別，一旦指定型別後，Angular 就會檢查相關的資料結構，一但有破壞資料結構的行為出現，就會出現錯誤提示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyForm</span> &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">roomId</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> group = <span class="keyword">new</span> <span class="title class_">FormGroup</span>&lt;<span class="title class_">MyForm</span>&gt;(&#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">roomId</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">group.<span class="title function_">removeControl</span>(<span class="string">&#x27;roomId&#x27;</span>); <span class="comment">// error warning</span></span><br></pre></td></tr></table></figure><p>上述範例就是要移除一個必須要存在的 <code>username</code> ，這時候就會出現錯誤提示，反之，如果要額外加入 <code>FormControl</code>，一樣會噴錯，這表示我們可以透過 interface 的定義來保護 <code>FormGroup</code> 最後輸出資料的結構完整性</p><h2 id="FormRecord"><a class="header-anchor" href="#FormRecord"> </a>FormRecord</h2><p>假設我們真的需要動態的新增或移除 <code>FormControl</code> 時該怎麼辦呢?  這時候可以使用 <code>FormRecord</code>，<code>FormRecord</code> 跟 <code>FormGroup</code> 一樣，只是他在型別上就沒有那麼要求了，可以讓我們自由的新增移除 <code>control</code>，但這裡有一個限制就是，只能增修同一種類型的物件，如果想要不同類型物件的增減，就得回到 <code>UntypedFormGroup</code> 了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">fb</span>.<span class="property">record</span>&lt;<span class="title class_">FormControl</span>&lt;<span class="built_in">string</span> | <span class="literal">null</span>&gt;&gt;(&#123;</span><br><span class="line">     <span class="attr">username</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">     <span class="attr">roomId</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">     <span class="attr">address</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h2 id="FormBuilder"><a class="header-anchor" href="#FormBuilder"> </a>FormBuilder</h2><p>預設的 <code>FormBuilder</code> 建立出來的 <code>FormControl</code> 都是 <code>nonNullable: false</code> 的狀態，如果想要 <code>FormControl</code> 都是 <code>nonNullable: true</code> 時，可以使用 <code>NonNullableFormBuilder</code>.，又或者是這樣使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fb = <span class="keyword">new</span> <span class="title class_">FormBuilder</span>();</span><br><span class="line"><span class="keyword">const</span> login = fb.<span class="property">nonNullable</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2><p>上述的文章筆記都是閱讀官方文件，經過理解實際測試後寫下的，下方參考聯結有附上官方文件</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://angular.io/guide/typed-forms">Typed Forms</a></li><li><a href="https://fullstackladder.dev/blog/2022/05/15/angular-14-strict-typed-reactive-forms/">搶先體驗強型別表單(Strict Typed Reactive Forms)</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Angular 14 推出 Typed Form 的功能，利用中秋放假的時間，好好地將這個功能給仔細玩過一次，掌握好才能在專案上使用到&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Obsidian] 使用 Obsidian 來寫 Docusaurus Doc &amp; Blog</title>
    <link href="http://blog.kevinyang.net/2022/08/21/use-obsidian-to-maintian-docusaurus/"/>
    <id>http://blog.kevinyang.net/2022/08/21/use-obsidian-to-maintian-docusaurus/</id>
    <published>2022-08-21T06:50:54.000Z</published>
    <updated>2023-10-06T12:37:47.265Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Obsidian 來寫 <code>Docusaurus</code> 似乎也是個好選擇，以下是我嘗試後的一些設定方式</p><span id="more"></span><h2 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h2><p>因為 Obsidian 可以將資料夾視為一個 Vault，我們可以將 <code>Docusaurus</code> 下的 Doc &amp; Blog 兩個資料夾設定為兩個 vault 使用，這篇文章會使用 <code>blog</code> 來做示範</p><h3 id="Open-Folder-as-Vault"><a class="header-anchor" href="#Open-Folder-as-Vault"> </a>Open Folder as Vault</h3><p>將 blog 資料夾開啟，這時候會在 <code>blog</code> 資料夾下新增 <code>.obsidian</code> 的資料夾，所以在 <code>.gitignore</code> 需要設定排除 <code>.obsidian</code> 資料夾，既然都開啟 <code>.gitignore</code> 了，順便排除 <code>@Templates</code> 資料夾  (可自行命名，是用來存放 Obsidian Template 的地方，等等會講到)</p><h3 id="安裝-community-plugin"><a class="header-anchor" href="#安裝-community-plugin"> </a>安裝 community plugin</h3><p>這裡需要安裝兩個 plugin</p><ol><li><p>Custom attachment Location: 方便我們貼圖時可以將圖片動態指定我們設定的位置，以下是我設定的方式 (可自行設定)</p><p><img src="image-20220821151228868.png" alt="image-20220821151228868"></p><p>因為貼圖路徑的關係，還有一個地方需要配合調整，在 <code>Files &amp; Links</code> 的地方</p><p><img src="image-20220821151341432.png" alt="image-20220821151341432"></p><p>Step 2 需要將連結的格式改為相對路徑，這樣 <code>docusaurus</code> 才能正常判讀檔案位置，當然就不能使用 <code>wikilinks</code> 的格式，所幸這些設定檔都是跟著 Vault 走，所以修改不會影響到其他人</p></li><li><p>mdx as md: 因為 <code>docusurus</code> 支援 md 和 mdx 兩種文件格式，所以 Obsidian 需要安裝這個才可以看到兩種檔案格式</p></li></ol><h2 id="設定-Templates"><a class="header-anchor" href="#設定-Templates"> </a>設定 Templates</h2><p>剛剛在前面 <code>.gitignore</code> 時多排除一個 <code>@Templates</code> 的資料夾，當然現在要多新增一個 <code>@Templates</code> 的資料夾在 Blog 資料夾(Vault) 內，並多做以下兩點設定</p><ol><li><p>Template 為 Core Plugin，預設是開啟狀態，所以 Settings 內可以看到 <code>Templates</code> 的選單</p><p><img src="image-20220821152120598.png" alt="image-20220821152120598"></p></li><li><p>設定 Hotkey，這裡可以依各人喜好設定</p><p><img src="image-20220821152234652.png" alt="image-20220821152234652"></p></li></ol><p>當這些設定完成後，這時候我們就可以來新增一個 Blog Template 供後面新增時使用，在 <code>@Templates</code> 資料夾下新增一個 <code>Note</code>，名稱自取</p><p><img src="image-20220821152401960.png" alt="image-20220821152401960"></p><p>在該篇 Note 內，輸入以下內容，這些內容就可以在之後新增 Notes 時透過 Insert template 的方式將內容加入</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">slug: </span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line">authors: []</span><br><span class="line"><span class="section">tags: []</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>能用變數說明</p><ul><li><code>&#123;&#123;title&#125;&#125;</code>: 目前這篇 Note 的標題</li><li><code>&#123;&#123;date&#125;&#125;</code> 和 <code>&#123;&#123;time&#125;&#125;</code> 是日期變數 - (memo: 這邊沒有使用到)</li></ul><h3 id="使用方式"><a class="header-anchor" href="#使用方式"> </a>使用方式</h3><ol><li>新增一篇 Note 並輸入標題</li><li>使用 Hotkey 來新增 Template，當有多個 templates 時，會出現選單讓我們選擇要套用哪一個</li></ol><h3 id="Templater-plugin"><a class="header-anchor" href="#Templater-plugin"> </a><code>Templater plugin</code></h3><p>這個 plugin 很強大，可以允許我們寫 script 來處理各種 template 樣式，這邊有一個<a href="https://www.youtube.com/watch?v=1eUxQo6Dy7k">介紹影片</a>，<a href="https://silentvoid13.github.io/Templater/introduction.html">plugin 文件</a>，當然如果使用 <code>Templater plugin</code> 剛剛寫的 template 要做些調整</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">slug: </span><br><span class="line">title: &#x27;&lt;% tp.file.title %&gt;&#x27;</span><br><span class="line">authors: []</span><br><span class="line"><span class="section">tags: []</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>另外要留意的是 Hotkey 的部分，<code>Templater</code> 有自己的 Hotkey 設定，所以這邊會建議只使用一套，就看哪一套適合自己的寫作節奏</p><p><img src="image-20220821154520713.png" alt="image-20220821154520713"></p><p><img src="image-20220821154534208.png" alt="image-20220821154534208"></p><h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2><p>當上述這些設定完成後，<code>Dousaurus</code> 的 Doc 或 Blog 的編寫就會更貼近一般文書編輯的模式，圖片，表格等都可以使用 Obsidian 強大的功能來完成編輯</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用 Obsidian 來寫 &lt;code&gt;Docusaurus&lt;/code&gt; 似乎也是個好選擇，以下是我嘗試後的一些設定方式&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Obsidian" scheme="http://blog.kevinyang.net/tags/Obsidian/"/>
    
  </entry>
  
  <entry>
    <title>[Obsidian] 第一次接觸</title>
    <link href="http://blog.kevinyang.net/2022/08/21/obsidian-note-1/"/>
    <id>http://blog.kevinyang.net/2022/08/21/obsidian-note-1/</id>
    <published>2022-08-21T02:49:43.000Z</published>
    <updated>2023-10-06T12:37:47.261Z</updated>
    
    <content type="html"><![CDATA[<p>其實我知道 <code>Obsidian</code> 這工具已經好一段時間了，只是一直都沒有真的去使用他，看了很多文章和影片介紹，覺得是時候給他一個機會，真的去用看看他的功能是否適合在工作上，或是有其他可以使用的情境</p><span id="more"></span><h2 id="安裝-Obsidian"><a class="header-anchor" href="#安裝-Obsidian"> </a>安裝 Obsidian</h2><p>要安裝 Obsidian 很簡單，到<a href="https://obsidian.md/">官網</a>上就可以下載符合自己作業系統的安裝檔</p><p><img src="image-20220821105956550.png" alt="image-20220821105956550"></p><p>安裝完成後，第一次開啟會詢問要建立 <code>Vault</code> 或是選擇 <code>Vault</code> 的位置</p><p><img src="image-20220821110154460.png" alt="image-20220821110154460"></p><p>什麼是 <code>Vault</code> ? <code>Vault</code> 簡單來說就是存放筆記得資料夾位置，因為是第一次使用，就給他一個 Vault 的名稱跟實際檔案要放哪，建立完成後就會看到這一個畫面</p><p><img src="image-20220821110432244.png" alt="image-20220821110432244"></p><p>如果有使用 Typora 的朋友，基本畫面應該還沒熟悉的，但當然還有左邊跟其他功能圖示，這就等之後在一一探索研究了，當然第一件事情就是新增第一則筆記，Obsidian 是使用 Markdown 的格式來寫筆記，不熟悉 Markdown 的可以去學一下，應該 1 小時內就可以學玩了</p><p>新增筆記的方法，點選左上角的檔案圖示</p><p><img src="image-20220821110711236.png" alt="image-20220821110711236"></p><p>給予筆記標題名稱 (即檔名)</p><p><img src="image-20220821110744590.png" alt="image-20220821110744590"></p><p>編輯區如下圖，Obsidian 也支援 Live Preview 的功能，會即時將 Markdown 轉換成顯示模式，這對於寫筆記的節奏其實幫助很大</p><p><img src="image-20220821111028433.png" alt="image-20220821111028433"></p><h2 id=""><a class="header-anchor" href="#"> </a></h2><h2 id="設定調整-Optional"><a class="header-anchor" href="#設定調整-Optional"> </a>設定調整 (Optional)</h2><p>因為自身的使用習慣，還是要調整一下預設設定，例如圖片存放資料夾的位置等，調整設定可以由左下角的齒輪進去</p><p><img src="image-20220821112342482.png" alt="image-20220821112342482"></p><h3 id="設定附件資料夾位置"><a class="header-anchor" href="#設定附件資料夾位置"> </a>設定附件資料夾位置</h3><p><img src="image-20220821114111247.png" alt="image-20220821114111247"></p><h3 id="安裝-Plugin"><a class="header-anchor" href="#安裝-Plugin"> </a>安裝 Plugin</h3><p>Obsidian 之所有強大是因為他支援安裝 plugin，有分官方版與社群版</p><p><img src="image-20220821114234602.png" alt="image-20220821114234602"></p><p>這裡先列出幾個社群熱門的 plugin</p><ol><li><p>Advanced tables: 簡單明瞭，幫助編輯 Markdown Table</p><p><img src="image-20220821114644538.png" alt="image-20220821114644538"></p></li><li><p>Calendar: 如果使用 Obsidian 寫 daily notes 時，安裝 Calendar 可以用月曆的方式呈現 daily notes，這之後在介紹</p></li><li><p>Dataview: 將 Obsidian 的 Vault 當作資料庫看待，使用 Query 語法將筆記整理會出成另外一份表格使用</p></li><li><p>Kanban:看板模式 <a href="https://github.com/mgmeyers/obsidian-kanban">GitHub Repo</a></p><p><img src="image-20220821115414561.png" alt="image-20220821115414561"></p></li><li><p>Excalidraw: Open source 的白板功能 (<a href="https://excalidraw.com/">範例</a>)</p><p><img src="image-20220821115531883.png" alt="image-20220821115531883"></p></li><li><p>Admonition: 這效果在寫文章筆記時真的很棒，可以很清楚的將需要注意的地方用不同的方式標記出來，例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```ad-note</span></span><br><span class="line"><span class="code">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla.</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p><img src="image-20220821115725690.png" alt="image-20220821115725690"></p></li></ol><h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2><p>Obsidian 確實能提供完整的筆記所需要的功能，當然還有更強大的功能，例如筆記與筆記之間的關連呈現，能透過連結的方式將知識庫給建立出來，雖然初期學習門檻有點高，但是一個值得投資的學習項目，網路上也有很多學習資源</p><h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2><ul><li><a href="https://ithelp.ithome.com.tw/users/20131832/ironman/4271">Obsidian 雙向鏈結型筆記工具研究與應用，打造屬於個人的專業知識圖譜 系列</a></li><li><a href="https://www.youtube.com/c/NicolevanderHoeven">YouTube - Nicole van der Hoeven</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;其實我知道 &lt;code&gt;Obsidian&lt;/code&gt; 這工具已經好一段時間了，只是一直都沒有真的去使用他，看了很多文章和影片介紹，覺得是時候給他一個機會，真的去用看看他的功能是否適合在工作上，或是有其他可以使用的情境&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="Obsidian" scheme="http://blog.kevinyang.net/tags/Obsidian/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 測試 ControlContainer with FormArray 版本</title>
    <link href="http://blog.kevinyang.net/2022/08/06/angular-test-controlContainer-with-formarrayname/"/>
    <id>http://blog.kevinyang.net/2022/08/06/angular-test-controlContainer-with-formarrayname/</id>
    <published>2022-08-06T13:20:16.000Z</published>
    <updated>2023-10-06T12:37:47.257Z</updated>
    
    <content type="html"><![CDATA[<p>很久以前寫過一篇關於 <code>ControlContainer</code> 的文章，但那時候太菜不知道怎麼寫測試，今天回頭寫 <code>ControlContainer</code> 配上 <code>formArrayName</code> 時，熊熊發現不知道怎寫測試，稍微有點悲劇，但還好根據官方的測試檔案，還是可以整理出答案，以下就是如何測試有使用 <code>ControlContainer</code> 的 Component</p><span id="more"></span><p>Component 的用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-filter-field</span> <span class="attr">formArrayName</span>=<span class="string">&quot;dynamicFields&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-filter-field</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ts</code>  的部分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FilterFieldComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  formData!: <span class="title class_">FormArray</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> controlContainer: ControlContainer</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span> = <span class="variable language_">this</span>.<span class="property">controlContainer</span>.<span class="property">control</span> <span class="keyword">as</span> <span class="title class_">FormArray</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spec 檔案</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fdescribe</span>(<span class="string">&#x27;FilterFieldComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">FilterFieldComponent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">FilterFieldComponent</span>&gt;;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">formModel</span>: <span class="title class_">FormArray</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">formArrayDir</span>: <span class="title class_">FormArrayName</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = <span class="keyword">new</span> <span class="title class_">FormGroupDirective</span>([], []);</span><br><span class="line">    formModel = <span class="keyword">new</span> <span class="title class_">FormArray</span>([]);</span><br><span class="line">    parent.<span class="property">form</span> = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123; <span class="attr">dynamicFields</span>: formModel &#125;);</span><br><span class="line">    formArrayDir = <span class="keyword">new</span> <span class="title class_">FormArrayName</span>(parent, [], []);</span><br><span class="line">    formArrayDir.<span class="property">name</span> = <span class="string">&#x27;dynamicFields&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">FilterFieldComponent</span>],</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">ReactiveFormsModule</span>],</span><br><span class="line">      <span class="attr">providers</span>: [&#123; <span class="attr">provide</span>: <span class="title class_">ControlContainer</span>, <span class="attr">useValue</span>: formArrayDir &#125;],</span><br><span class="line">      <span class="attr">schemas</span>: [<span class="variable constant_">CUSTOM_ELEMENTS_SCHEMA</span>],</span><br><span class="line">    &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>line 17: 因為 <code>ControlContainer</code> 需要特別去做 mock，所以這邊就手動註冊一下，但如果沒有寫過的人就會卡住，慘，這邊要用哪種型別的值，根據<a href="https://angular.io/api/forms/ControlContainer#controlcontainer">官方 API 文件說明</a>，得知有以下幾種 subclass 可以使用</p><p><img src="image-20220806212706185.png" alt="image-20220806212706185"></p><p>而其中的 <code>FormArrayName</code> 是我想要的類型，接下來的另外一個問題會是，如何建立 <code>FormArrayName</code> Class，這時候就是  line 8 ~ 12 的用途啦，這裡的寫法是參考官方的測試 form directive 的<a href="https://github.com/angular/angular/tree/main/packages/forms/test#L448-L454">測試檔案</a></p><p>以上就是如何測試 <code>ControlContainer</code> 的設定寫法</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很久以前寫過一篇關於 &lt;code&gt;ControlContainer&lt;/code&gt; 的文章，但那時候太菜不知道怎麼寫測試，今天回頭寫 &lt;code&gt;ControlContainer&lt;/code&gt; 配上 &lt;code&gt;formArrayName&lt;/code&gt; 時，熊熊發現不知道怎寫測試，稍微有點悲劇，但還好根據官方的測試檔案，還是可以整理出答案，以下就是如何測試有使用 &lt;code&gt;ControlContainer&lt;/code&gt; 的 Component&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[HowTo] 讀取 WebAPI 資料到 Excel 表內</title>
    <link href="http://blog.kevinyang.net/2022/07/16/excel-load-webapi/"/>
    <id>http://blog.kevinyang.net/2022/07/16/excel-load-webapi/</id>
    <published>2022-07-16T04:14:24.000Z</published>
    <updated>2023-10-06T12:37:47.257Z</updated>
    
    <content type="html"><![CDATA[<p>週五突然想到 Excel 是否能載入 JSON 檔案或是 WebAPI 的資料，因為 PowerBI 可以做到，想說 Excel 應該也可以，所以就來試試看</p><span id="more"></span><p>一樣的，我們拿 <code>[JSONPlaceholder](https://jsonplaceholder.typicode.com/)</code> 所提供的 API 來當作範例資料，使用 <a href="https://jsonplaceholder.typicode.com/posts">https://jsonplaceholder.typicode.com/posts</a> 這組資料</p><h2 id="步驟"><a class="header-anchor" href="#步驟"> </a>步驟</h2><ol><li><p>建立一個空的 Excel 檔案</p></li><li><p>選擇 <code>資料</code> Tab 內的<code>從 web</code></p><p><img src="image-20220716125829631.png" alt="image-20220716125829631"></p></li><li><p>將文章一開始的網址貼入到 URL 內後按下『確定』</p><p><img src="image-20220716132852792.png" alt="image-20220716132852792"></p></li><li><p>會開啟存取 Web 內容的視窗，這邊如果 API 有相關權限設定，可在這邊進行設定</p><p><img src="image-20220716130028794.png" alt="image-20220716130028794"></p></li><li><p>確認後下『連接』，Excel 會去呼叫 API 並取回資料</p></li><li><p>取得資料後會開啟 Power Query 編輯器</p><p><img src="image-20220716130216544.png" alt="image-20220716130216544"></p><p>這時候我們就需要針對取回得資料作一些轉換的設定</p><ol><li><p>點 『到表格』</p><p><img src="image-20220716130621219.png" alt="image-20220716130621219"></p></li><li><p>無分隔符號，直接按下『確定』</p><p><img src="image-20220716130659427.png" alt="image-20220716130659427"></p></li><li><p>這時候畫面會轉換成以下圖片</p><p><img src="image-20220716130731882.png" alt="image-20220716130731882"></p></li><li><p>點選 Column1 旁邊的小圖示，這個動作會開啟另外一個視窗來設定要展開哪些欄位</p><p><img src="image-20220716130806821.png" alt="image-20220716130806821"></p><p><img src="image-20220716130847323.png" alt="image-20220716130847323"></p></li><li><p>如果確認後沒問題就可以按下『確定』。備註: 如果不想要使用原始資料行列名稱當前置詞，可以把設定取消掉</p></li><li><p>瀏覽資料，確認無誤後按下『關閉並載入』即可在 Excel 上看到資料了</p><p><img src="SNAGHTML35f5e08.PNG" alt="img"></p></li><li><p>最終成果</p><p><img src="image-20220716131228238.png" alt="image-20220716131228238"></p><p>如果想要手動更新 API 得資料，單純點選這個圖示即可，或是上方的『重新整理』</p><p><img src="image-20220716131326794.png" alt="image-20220716131326794"></p></li></ol></li></ol><h2 id="修改-Query"><a class="header-anchor" href="#修改-Query"> </a>修改 Query</h2><p>如果想要回頭編輯 Query 的方式，可以從這個地方將 Power Query 編輯器開啟</p><p><img src="image-20220716131657411.png" alt="image-20220716131657411"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;週五突然想到 Excel 是否能載入 JSON 檔案或是 WebAPI 的資料，因為 PowerBI 可以做到，想說 Excel 應該也可以，所以就來試試看&lt;/p&gt;</summary>
    
    
    
    <category term="Office" scheme="http://blog.kevinyang.net/categories/Office/"/>
    
    
    <category term="Office" scheme="http://blog.kevinyang.net/tags/Office/"/>
    
  </entry>
  
</feed>
