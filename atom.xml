<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CK&#39;s Notepad</title>
  
  
  <link href="http://blog.kevinyang.net/atom.xml" rel="self"/>
  
  <link href="http://blog.kevinyang.net/"/>
  <updated>2021-09-12T07:39:41.100Z</updated>
  <id>http://blog.kevinyang.net/</id>
  
  <author>
    <name>KevinYang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Angular] Microfrontend with Module Federation 筆記</title>
    <link href="http://blog.kevinyang.net/2021/09/12/ng-microfrontend-with-webpack-federation/"/>
    <id>http://blog.kevinyang.net/2021/09/12/ng-microfrontend-with-webpack-federation/</id>
    <published>2021-09-12T05:37:26.000Z</published>
    <updated>2021-09-12T07:39:41.100Z</updated>
    
    <content type="html"><![CDATA[<p>其實這觀念在去年由 Manfred Steyer (Angular GDE) 提出來，並花很多心力在研究這一塊的作法，一年過去後因為公司上有可能會使用到這樣的情境，所以就先來研究一下，但也因為晚了一年，現在很多工具和環境上已經好很多，而且該採的雷很多前輩都踩過了，這一篇筆記就是稍微整理一下如何從無到有的將 Angular 環境給設定起來</p><span id="more"></span><h1 id="Requirement"><a class="header-anchor" href="#Requirement"> </a>Requirement</h1><ul><li>Angular 12</li></ul><h1 id="設定"><a class="header-anchor" href="#設定"> </a>設定</h1><ol><li><p>建立一個空的 ng application。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new ng-mfe --create-application=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>建立一個 host (shell) application</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g application shell --routing</span><br></pre></td></tr></table></figure></li><li><p>建立一個 remote application</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g application mfe1 --routing</span><br></pre></td></tr></table></figure></li><li><p>為這兩個 application 加入 <code>@angular-architects/module-federation</code> 套件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ng add @angular-architects/module-federation --project shell --port 5000</span><br><span class="line">ng add @angular-architects/module-federation --project mfe1 --port 3000</span><br></pre></td></tr></table></figure><ol><li>這時候會產生 webpack.config.js 檔案: 用來設定 remote module 使用</li></ol></li></ol><p>到這邊算是基本完成套件的安裝，接下來就是一些 module/component 的設定</p><ol><li><p>在 <code>mfe1</code> application 中新增一個 <code>FlightsModule</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g m flights --project=mfe --routing</span><br></pre></td></tr></table></figure></li><li><p>設定 <code>webpack.config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ModuleFederationPlugin = <span class="built_in">require</span>(<span class="string">&quot;webpack/lib/container/ModuleFederationPlugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mf = <span class="built_in">require</span>(<span class="string">&quot;@angular-architects/module-federation/webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> share = mf.share;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sharedMappings = <span class="keyword">new</span> mf.SharedMappings();</span><br><span class="line">sharedMappings.register(</span><br><span class="line">  path.join(__dirname, <span class="string">&#x27;../../tsconfig.json&#x27;</span>),</span><br><span class="line">  [<span class="comment">/* mapped paths to share */</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">uniqueName</span>: <span class="string">&quot;mfe1&quot;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">runtimeChunk</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,   </span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      ...sharedMappings.getAliases(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> ModuleFederationPlugin(&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// For remotes (please adjust)</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;mfe1&quot;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;remoteEntry.js&quot;</span>,</span><br><span class="line">        <span class="attr">exposes</span>: &#123;</span><br><span class="line">          <span class="string">&quot;./flightModules&quot;</span>: <span class="string">&quot;./projects/mfe1/src/app/flights/flights.module.ts&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="attr">shared</span>: share(&#123;</span><br><span class="line">          <span class="string">&quot;@angular/core&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/common&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/common/http&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/router&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">          ...sharedMappings.getDescriptors()</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;),</span><br><span class="line">    sharedMappings.getPlugin()</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>line 28: host 載入時的 <code>remoteName</code></li><li>line 29: webpack 要產生的 file name</li><li>line 31: expose 的 <code>module</code> 名稱及對應的 module 檔案</li></ul></li><li><p>在 host (shell) 的路由檔設定要 <code>lazyloading</code> 路徑</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loadRemoteModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular-architects/module-federation&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">&#x27;http://localhost:3000/remoteEntry.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: HomeComponent, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;flights&#x27;</span>,</span><br><span class="line">    <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span></span><br><span class="line">      loadRemoteModule(&#123;</span><br><span class="line">        <span class="attr">remoteEntry</span>: URL,</span><br><span class="line">        <span class="attr">remoteName</span>: <span class="string">&#x27;mfe1&#x27;</span>,</span><br><span class="line">        <span class="attr">exposedModule</span>: <span class="string">&#x27;./flightModule&#x27;</span>,</span><br><span class="line">      &#125;).then(<span class="function">(<span class="params">m</span>) =&gt;</span> m.FlightsModule),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [RouterModule.forRoot(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [RouterModule],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRoutingModule</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>line 7 ~ 15 是標準 Lazy loading 的寫法，而 line 10 從原本的 <code>import</code> 改寫成 <code>loadRemoteModule</code> 即可載入遠端的 module 檔案</li><li><code>remoteEmtry</code> 設定遠端主機位置及參考檔案，檔名為上一個步驟中所設定的檔名</li><li><code>remoteName</code> 為上一步驟所設定的 <code>name</code></li><li><code>exposedModule</code> 為上一步驟所設定的 exposes 內的某一個 <code>key</code></li></ul></li></ol><p>最後在調整一下 host 的 <code>AppComponent</code> 的 HTML 內容，例如加上連結到 flights module 等，到這邊算完成一個最小完成單位，可以將兩個 applications 跑起來後看一下執行結果</p><p><img src="image-20210912145552814.png" alt="image-20210912145552814"></p><h1 id="問題探討"><a class="header-anchor" href="#問題探討"> </a>問題探討</h1><p>看起來一起都很簡單，但仔細思考後，其實還有很多東西要考慮，例如各 module 間的版本如何控制、如何共用狀態、部屬的相依性等，這些都是很實際的問題，等著下一篇筆記再來研究吧</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://www.angulararchitects.io/aktuelles/the-microfrontend-revolution-part-2-module-federation-with-angular/"><strong>The Microfrontend Revolution: Module Federation with Angular</strong></a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;其實這觀念在去年由 Manfred Steyer (Angular GDE) 提出來，並花很多心力在研究這一塊的作法，一年過去後因為公司上有可能會使用到這樣的情境，所以就先來研究一下，但也因為晚了一年，現在很多工具和環境上已經好很多，而且該採的雷很多前輩都踩過了，這一篇筆記就是稍微整理一下如何從無到有的將 Angular 環境給設定起來&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Dhall] 學習筆記 001 - 基本知識建立</title>
    <link href="http://blog.kevinyang.net/2021/08/15/dhall-note-001/"/>
    <id>http://blog.kevinyang.net/2021/08/15/dhall-note-001/</id>
    <published>2021-08-15T02:38:34.000Z</published>
    <updated>2021-09-12T07:39:41.096Z</updated>
    
    <content type="html"><![CDATA[<p>Dhall is a <a href="https://docs.dhall-lang.org/discussions/Programmable-configuration-files.html#">programmable configuration language</a> that you can think of as: JSON + functions + types + imports，這樣應該就解釋了什麼是 Dhall 了吧</p><span id="more"></span><p>貼個範例聞香一下</p><p><img src="image-20210815104539412.png" alt="image-20210815104539412"></p><p>左邊是 dhall 的語法，右邊是輸出結果，看起來還簡單明瞭的，接下來就是基本語言的筆記了，至於如何安裝就請按照這<a href="https://docs.dhall-lang.org/tutorials/Getting-started_Generate-JSON-or-YAML.html#installation">文件</a>安裝</p><h1 id="學習筆記"><a class="header-anchor" href="#學習筆記"> </a>學習筆記</h1><ul><li><p>Dhall 要轉換成不同格式，會透過不同的執行程式完成，例如 Dhall -&gt; JSON 就要用 dhall-to-json，要轉換成 YAML 就會用 dhall-to-yaml，這篇筆記看到 dhall-to-json 輸出結果就會是 JSON 格式</p><p><img src="image-20210815135615904.png" alt="image-20210815135615904"></p></li><li><p>Dhall 是一個強型別語言，compiler 會檢查型別是否正確，會將失敗的理由吐回給你，也可以使用 <code>--explain</code> 的 flag 來取得更多的訊息</p><p><img src="image-20210815105527602.png" alt="image-20210815105527602"></p><p><img src="image-20210815105609372.png" alt="image-20210815105609372"></p></li><li><p>支援 type annotations，類似 TypeScript 指定型別的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1, bar = True &#125; : &#123; foo : Natural, bar : Bool &#125;&#x27;</span><br></pre></td></tr></table></figure><p>Type annotations 也可以用指定檔案的方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1, bar = True &#125; : ./schema.dhall&#x27;</span><br></pre></td></tr></table></figure></li><li><p>變數宣告: 使用 <code>let</code> 來進行變數宣告，如上面範例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let home = &#x27;/home/$&#123;user&#125;&#x27;</span><br></pre></td></tr></table></figure></li><li><p>dhall 是 whitespace-insensitive，不像 yaml 一個 space 錯位就壞掉了，因為這樣的特性會有這樣的寫法出現</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span> <span class="keyword">let</span> y = <span class="number">2</span> <span class="keyword">in</span> [x, y]</span><br><span class="line"><span class="comment">// 等同於</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span></span><br><span class="line"><span class="keyword">in</span>  [x, y]</span><br></pre></td></tr></table></figure></li><li><p>一個比較完整的使用範例 (檔案: <code>employee.dhall</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> job = &#123; department = <span class="string">&quot;Data Platform&quot;</span>, title = <span class="string">&quot;Software Engineer&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = &#123; age = <span class="number">23</span>, name = <span class="string">&quot;John Doe&quot;</span>, position = job &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> alice = &#123; age = <span class="number">24</span>, name = <span class="string">&quot;Alice Smith&quot;</span>, position = job &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>  [ john, alice ]</span><br></pre></td></tr></table></figure><p>輸出結果 (執行命令: <code>dhall-to-json --file ./employee.dhall</code>)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;position&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;department&quot;</span>: <span class="string">&quot;Data Platform&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Software Engineer&quot;</span>  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Alice Smith&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;position&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;department&quot;</span>: <span class="string">&quot;Data Platform&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Software Engineer&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>可以寫 function，宣告方式: <code>\(inputName : inputType) -&gt; output</code>，範例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let twice = \(x : Natural) -&gt; [x, x] </span><br><span class="line">in twice 2</span><br><span class="line"></span><br><span class="line">// 輸出結果</span><br><span class="line">[2, 2]</span><br></pre></td></tr></table></figure></li><li><p>record 可以透過 <code>/\</code> 來合併</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1 &#125; /\ &#123; bar = 2&#125;&#x27;</span><br><span class="line"></span><br><span class="line">// 輸出結果</span><br><span class="line">&#123;</span><br><span class="line">   &quot;bar&quot;: 2,</span><br><span class="line">   &quot;foo&quot;: 1, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比較接近現實生活的範例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> smallServer = &#123; cpus = <span class="number">1</span>, gigabytesOfRAM = <span class="number">1</span>, terabytesOfDisk = <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mediumServer = &#123; cpus = <span class="number">8</span>, gigabytesOfRAM = <span class="number">16</span>, terabytesOfDisk = <span class="number">4</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> largeServer = &#123; cpus = <span class="number">64</span>, gigabytesOfRAM = <span class="number">256</span>, terabytesOfDisk = <span class="number">16</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>  [ smallServer /\ &#123; hostName = <span class="string">&quot;eu-west.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;us-east.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;ap-northeast.example.com&quot;</span> &#125;</span><br><span class="line">    , mediumServer /\ &#123; hostName = <span class="string">&quot;us-west.example.com&quot;</span> &#125;</span><br><span class="line">    , smallServer /\ &#123; hostName = <span class="string">&quot;sa-east.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;ca-central.example.com&quot;</span> &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li><li><p>Operators</p><ul><li><code>++</code> 連接兩個字串</li><li><code>#</code> 連接兩個 List</li></ul></li><li><p><code>Optional</code> ，有時候會遇到缺欄位的資料，這時候就要使用 <code>Optional</code> 的表示法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ </span><br><span class="line">  &#123; x = 1, y = None Natural &#125; ,</span><br><span class="line">  &#123; x = 2, y = Some 3 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Some -&gt; 表示這個欄位有可能有 Null 值出現</li><li>None <type> -&gt; 視為 Null 空值</li><li>指令多下 <code>--preserve-null</code> 參數，會將空值輸出 (null)</li></ul></li><li><p>使用 <code>Unions</code> 的方式可以讓清單內有不同型別得資料存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- ./package.dhall</span><br><span class="line"></span><br><span class="line">let Package =</span><br><span class="line">      &lt; Local : &#123; relativePath : Text &#125;</span><br><span class="line">      | GitHub : &#123; repository : Text, revision : Text &#125;</span><br><span class="line">      | Hackage : &#123; package : Text, version : Text &#125;</span><br><span class="line">      &gt;</span><br><span class="line"></span><br><span class="line">in  [ Package.GitHub</span><br><span class="line">        &#123; repository =</span><br><span class="line">            &quot;https://github.com/Gabriel439/Haskell-Turtle-Library.git&quot;</span><br><span class="line">        , revision = &quot;ae5edf227b515b34c1cb6c89d9c58ea0eece12d5&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/optparse-applicative&quot; &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/discrimination&quot; &#125;</span><br><span class="line">    , Package.Hackage &#123; package = &quot;lens&quot;, version = &quot;4.15.4&quot; &#125;</span><br><span class="line">    , Package.GitHub</span><br><span class="line">        &#123; repository = &quot;https://github.com/haskell/text.git&quot;</span><br><span class="line">        , revision = &quot;ccbfabedea1cf5b38ff19f37549feaf01225e537&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/servant-swagger&quot; &#125;</span><br><span class="line">    , Package.Hackage &#123; package = &quot;aeson&quot;, version = &quot;1.2.3.0&quot; &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>mapKey</code> 和 <code>mapValue</code> 就可以做出動態資料，而指令參數 <code>--noMaps</code> 就會單純輸出結果不轉換</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; mapKey = &quot;daniel&quot;, mapValue = &#123; age = 17 &#125; &#125;</span><br><span class="line">, &#123; mapKey = &quot;rebecca&quot;, mapValue = &#123; age = 17 &#125; &#125;</span><br><span class="line">, &#123; mapKey = &quot;aiden&quot;, mapValue = &#123; age = 16 &#125; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>如果要輸出 yaml ，就使用 <code>dhall-to-yaml</code> 來跑 <code>dhall</code> 檔案</p></li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.dhall-lang.org/index.html">Dhall 官方文件</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Dhall is a &lt;a href=&quot;https://docs.dhall-lang.org/discussions/Programmable-configuration-files.html#&quot;&gt;programmable configuration language&lt;/a&gt; that you can think of as: JSON + functions + types + imports，這樣應該就解釋了什麼是 Dhall 了吧&lt;/p&gt;</summary>
    
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="其他" scheme="http://blog.kevinyang.net/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>[K8s 相關] 寫 Helm 技巧筆記</title>
    <link href="http://blog.kevinyang.net/2021/07/28/helm-tips/"/>
    <id>http://blog.kevinyang.net/2021/07/28/helm-tips/</id>
    <published>2021-07-28T15:58:32.000Z</published>
    <updated>2021-09-12T07:39:41.096Z</updated>
    
    <content type="html"><![CDATA[<p>Helm 或許不是現在最新最流行的工具，但公司用這個，所以還是得知道怎麼寫，這邊整理一些撰寫中一些實用小技巧。因為他底層是用 go template，有些語法會跟 Go 很像</p><span id="more"></span><ol><li><p>使用 name template 來降低 template 的雜亂度</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">define</span> <span class="string">&quot;temp.name&quot;</span> &#125;&#125;</span><br><span class="line"><span class="string">...</span></span><br><span class="line">&#123;&#123;<span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用不會輸出到 YAML 的註解表示法: <code>&#123;&#123; /*    /*&#125;&#125;</code></p></li><li><p>需知道 <code>&#123;&#123;-    -&#125;&#125;</code> 中 <code>-</code> 的意思，知道他要去除那邊的空白</p></li><li><p>可以使用 <code>&#123;&#123;- $var  := printf "%s-%s" .Values.xxx .Values.yyy -&#125;&#125;</code> 的寫法來定義範圍區域變數</p></li><li><p>使用 <code>printf</code> 時，要留意資料型別，這部分可查閱  Go <code>printf</code> 的使用辦法</p></li><li><p>在 name template 內如果要使用全域變數時，可加上 <code>$</code> ，例如 <code>&#123;&#123; $.Values.xxxx&#125;&#125;</code></p></li><li><p>使用 name template 時，可以利用 <code>dict</code> 將多組資料傳入 name templates  中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">$data</span> <span class="string">:=</span> <span class="string">dict</span> <span class="string">&quot;key1&quot;</span> <span class="string">value1</span> <span class="string">&quot;key2&quot;</span> <span class="string">value2</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">include</span> <span class="string">&quot;name.template&quot;</span> <span class="string">$data</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">name</span> <span class="string">template</span> <span class="string">內使用傳進來資料的方式</span></span><br><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">define</span> <span class="string">&quot;name.template&quot;</span> &#125;&#125;</span><br><span class="line"><span class="attr">value1:</span> &#123;&#123; <span class="string">.key1</span> &#125;&#125;</span><br><span class="line"><span class="attr">value2:</span> &#123;&#123; <span class="string">.key2</span> &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>range</code> 搭配 Values 中的列表資料，可以快速產生多組設定</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">$item</span> <span class="string">:=</span> <span class="string">.Values.items</span> &#125;&#125;</span><br><span class="line"><span class="attr">value in item:</span> &#123;&#123; <span class="string">$item.value</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">include</span> <span class="string">&quot;name.template&quot;</span> <span class="string">$item</span> &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">end</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>HELM 有一些 Flow control 的運算式可以使用，可參閱 <a href="https://helm.sh/docs/chart_template_guide/control_structures/">Doc</a></p></li><li><p>內建 function 及善用 pipe 可以簡化很多工作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; <span class="string">toYaml</span> <span class="string">.Values.resoureces</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">12</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>轉成 YAML 格式且 indent 12 個空白</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Helm 或許不是現在最新最流行的工具，但公司用這個，所以還是得知道怎麼寫，這邊整理一些撰寫中一些實用小技巧。因為他底層是用 go template，有些語法會跟 Go 很像&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Multi-container Pods</title>
    <link href="http://blog.kevinyang.net/2021/07/18/k8s-note-004/"/>
    <id>http://blog.kevinyang.net/2021/07/18/k8s-note-004/</id>
    <published>2021-07-18T14:21:06.000Z</published>
    <updated>2021-09-12T07:39:41.096Z</updated>
    
    <content type="html"><![CDATA[<p>Multi-container Pods 是另外一個很常見的使用方式，有 4 種模式 <code>Init Pattern</code> 、<code>Sidecar Pattern</code>、<code>Adapter Patter</code> 、<code>Ambassador Pattern</code>。</p><span id="more"></span><p>為什麼會出現這種模式，主要的目的是要讓 container 的工作可以單純化，透過組合的方式來完成原本應該要做的事情</p><h1 id="Init-Pattern"><a class="header-anchor" href="#Init-Pattern"> </a>Init Pattern</h1><ul><li><p>在主要 Container 前執行的 Container</p></li><li><p>只會跑一次</p></li><li><p>init container 完成後才會執行主要的 container</p></li><li><p>基本寫法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ps-init</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">initializer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-ctr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until nslookup pluralsight-ftw; do echo waiting for pluralsight-ftw service; sleep 1; done; echo Service found!&#x27;</span>]</span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web-ctr</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nigelpoulton/web-app:1.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><ul><li><code>initContainers</code> 區塊就是用來定義 init containers 的</li><li>可以有多個 container</li><li>會依序執行</li><li>如果 init container 執行失敗，整個 Pod 會重新開始 (預設值)，可以被修改</li><li>應設定 resource requests &amp; limits</li></ul><h1 id="Sidecar-Pattern"><a class="header-anchor" href="#Sidecar-Pattern"> </a>Sidecar Pattern</h1><p><img src="image-20210718225552049.png" alt="image-20210718225552049"></p><ul><li><p>與 main container 同時執行，平行運作</p></li><li><p>寫法就是在 containers 下有第二個 image 時，基本上就是 sidecar pattern</p></li><li><p>範例:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">git-syncer</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">git-syncer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">k8s.gcr.io/git-sync:v3.1.5</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">init-sync-ctr</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/tmp/git</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>常見用法: Logging</p></li></ul><h1 id="Adapter-Pattern"><a class="header-anchor" href="#Adapter-Pattern"> </a>Adapter Pattern</h1><p><img src="image-20210718225620546.png" alt="image-20210718225620546"></p><ul><li><p>範例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web-ctr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nigelpoulton/nginxadapter:1.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">transformer</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx/nginx-prometheus-exporter</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;-nginx.scrape-uri&quot;</span>,<span class="string">&quot;http://localhost/nginx_status&quot;</span>]</span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9113</span></span><br></pre></td></tr></table></figure></li><li><p>使用另外一個 container 做輸出資料轉換</p></li><li><p>SRP</p></li></ul><h1 id="Ambassador-Pattern"><a class="header-anchor" href="#Ambassador-Pattern"> </a>Ambassador Pattern</h1><p><img src="image-20210718225658971.png" alt="image-20210718225658971"></p><ul><li><p>在 Pod 內的建立起的 proxy</p></li><li><p>Service 只對 Ambassador 做開放</p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Multi-container Pods 是另外一個很常見的使用方式，有 4 種模式 &lt;code&gt;Init Pattern&lt;/code&gt; 、&lt;code&gt;Sidecar Pattern&lt;/code&gt;、&lt;code&gt;Adapter Patter&lt;/code&gt; 、&lt;code&gt;Ambassador Pattern&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Jobs</title>
    <link href="http://blog.kevinyang.net/2021/07/17/k8s-note-003/"/>
    <id>http://blog.kevinyang.net/2021/07/17/k8s-note-003/</id>
    <published>2021-07-17T03:55:12.000Z</published>
    <updated>2021-09-12T07:39:41.096Z</updated>
    
    <content type="html"><![CDATA[<p>K8s 內也可以跑 Jobs 和 CronJobs，這一篇筆記就是在記錄此事</p><span id="more"></span><h1 id="什麼是-Jobs"><a class="header-anchor" href="#什麼是-Jobs"> </a>什麼是 Jobs</h1><ul><li>one time execution</li><li>can run multiple Pods in parallel</li><li>Successful completions are tracked</li></ul><h1 id="什麼是-CronJobs"><a class="header-anchor" href="#什麼是-CronJobs"> </a>什麼是 CronJobs</h1><ul><li>Cron Job creates Jobs on a time-based schedule</li><li>scheduled using the Cron format</li><li>names must be less than 52 characters</li><li><code>* * * * *</code> 為標準 Cron format.<ul><li>第一個 <code>*</code>: min (0~59)</li><li>第二個 <code>*</code>: hour (0~23)</li><li>第三個 <code>*</code>: day of month (1 - 31)</li><li>第四個 <code>*</code>: month (1 - 12) 或 jan, fan, mar,…</li><li>第五個 <code>*</code>: day of week (0 - 6, Sunday = 0 or 7) 或是 sun, mon, tue,…</li></ul></li><li>範例：<ul><li>每週一早上 3 點， <code>0 3 * * 1</code></li><li>每小時: <code>0 * * * *</code> , <code>@hourly</code></li><li>每天: <code>0 0 * * *</code>，<code>@daily</code></li><li>每週: <code>0 0 1 * * </code>，<code>@monthly</code></li><li>每年: <code>0 0 1 1 *</code> ，<code>@yearly</code></li><li>每分鐘: <code>*/1 * * * * </code></li></ul></li><li><a href="https://crontab.guru/">cron format editor 網站</a></li></ul><h1 id="如何建立-Jobs-和-CronJobs"><a class="header-anchor" href="#如何建立-Jobs-和-CronJobs"> </a>如何建立 Jobs 和 CronJobs</h1><ul><li><p>先定義 Jobs</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">completions:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">xxx</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;sh&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;.....&quot;</span></span><br></pre></td></tr></table></figure><ul><li>apiVersion 和 kind  的設定方法如上</li><li>completions: 需要成功執行 Job 的 Pods 數量</li><li>parallelism: 平行執行 Job 的 Pods 數量</li><li>restartPolicy 設定值有<ul><li>Never : Never try to restart</li><li>OnFailure: restart when job fail</li></ul></li><li>command: 執行指令</li></ul></li><li><p>Crobjob YAML 樣本如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">concurrencyPolicy:</span> <span class="string">Allow</span> <span class="comment"># Allow, Forbid, Replace</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&#x27;*/5 * * * *&#x27;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">completions:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">xxx</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;sh&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;.....&quot;</span></span><br></pre></td></tr></table></figure><ul><li>concurrencyPolicy: 是否允許 cronjobs 重疊執行</li><li>schedule: 設定執行時間表 (Cron format)</li><li>使用 <code>jobTemplate</code> 來描述 <code>job</code> 的 template</li></ul></li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/">Jobs</a></li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">CrobJobs</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;K8s 內也可以跑 Jobs 和 CronJobs，這一篇筆記就是在記錄此事&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Deployment Strategies</title>
    <link href="http://blog.kevinyang.net/2021/07/16/k8s-note-002/"/>
    <id>http://blog.kevinyang.net/2021/07/16/k8s-note-002/</id>
    <published>2021-07-16T11:40:37.000Z</published>
    <updated>2021-09-12T07:39:41.092Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes  Deployments 功能很強，可以算是部屬中重要的一環，除了設定部屬的 Pod 資訊外，也可以透過他來做更新或退版的事情，以下是相關筆記</p><span id="more"></span><h1 id="Rolling-Update-Deployments"><a class="header-anchor" href="#Rolling-Update-Deployments"> </a>Rolling Update Deployments</h1><ul><li><p>Deployments 內建有兩種更新方式： Rolling Update (Default) 和 Recreate (會有 down-time)</p></li><li><p>spec 區塊</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><code>replicas</code> : Number of Pod replicas</li><li><code>minReadySeconds</code> : Seconds new Pod should be ready to be considered healthy. 預設值: 0 秒</li><li><code>progressDeadlineSeconds</code>: Seconds to wait before reporting stalled Deployment</li><li><code>revisionHistoryLimit</code>: Number of <code>ReplicaSets</code> that can be rolled back. 預設值 10</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">strategy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">rollingUpdate:</span></span><br><span class="line">    <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><p><code>type</code> 有兩種設定 <code>RollingUpdate</code> 或 <code>Recreate</code></p></li><li><p><code>maxSurge</code>:  Max Pods can exceed the replicas count，預設值: 25%</p><p><img src="image-20210716212233001.png" alt="image-20210716212233001"></p></li><li><p><code>maxUnavaible</code>: Max Pods that are not operational，預設值: 25%</p><p><img src="image-20210716214416118.png" alt="image-20210716214416118"></p></li><li><p>使用 <code>--record</code> 會將執行指令記錄在 Deployment revision history 內</p></li><li><p><code>kubectl rollout status deployment [deployment name]</code> 查詢歷史部屬記錄</p></li><li><p>rollout 相關命令</p><ul><li>rollout status: check deployment status</li><li>rollout history deployment [deployment-name]: view history of a Deployment</li><li>rollout undo -f [deployment file]: rollback a deployment</li><li>rollout undo deployment [deployment-name] --to-revision=n : rollback to 某一版</li></ul></li></ul></li></ul><h1 id="Canary-Deployments"><a class="header-anchor" href="#Canary-Deployments"> </a>Canary Deployments</h1><ul><li><p>同一時間有兩個版本在線上，有主要版本跟要測試的版本，透過設定的方式將部分的流量導向測試版本</p><p><img src="image-20210717094909454.png" alt="image-20210717094909454"></p></li><li><p>分別有 Stable 和 Canary Deployment，有相同的 lable 但可透過第二個 label 來區分</p></li><li><p>Service 只在乎符合 selector 的項目，所以可透過 Deployment 的 replicas 的數量來決定流量百分比</p></li><li><p>如果測試版本通過測試，就將該版本的 replicas 設定為正式環境要的數量，確定有跑起來後，就將原版本的 Deployment 刪除後，就完成版本的轉換</p></li></ul><h1 id="Blue-Green-Deployments"><a class="header-anchor" href="#Blue-Green-Deployments"> </a>Blue-Green Deployments</h1><ul><li><p>新增 V2 版本</p><p><img src="image-20210717113303908.png" alt="image-20210717113303908"></p></li><li><p>測試完成後，將 Public Service 切換至 V2 版本</p><p><img src="image-20210717113323817.png" alt="image-20210717113323817"></p></li><li><p>移除 App V1</p><p><img src="image-20210717113634670.png" alt="image-20210717113634670"></p></li><li><p>需留意的是 Blue/Green 部屬時要留意是否有足夠的 resource 做這件事情</p></li></ul><p>※上面圖片使用皆出自於 <a href="https://app.pluralsight.com/library/courses/kubernetes-developers-deploying-code/table-of-contents">Kubernetes for Developers: Deploying Your Code by Dan Wahlin</a>，十分推薦此課程</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://blog.container-solutions.com/kubernetes-deployment-strategies">Article: Kubernetes deployment strategies by Etienne Tremel</a></li><li><a href="https://www.weave.works/blog/kubernetes-deployment-strategies">Article: Kubernetes Deployment Strategies by weaveworks</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Kubernetes  Deployments 功能很強，可以算是部屬中重要的一環，除了設定部屬的 Pod 資訊外，也可以透過他來做更新或退版的事情，以下是相關筆記&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Big Picture</title>
    <link href="http://blog.kevinyang.net/2021/07/07/k8s-note-001/"/>
    <id>http://blog.kevinyang.net/2021/07/07/k8s-note-001/</id>
    <published>2021-07-07T03:24:25.000Z</published>
    <updated>2021-09-12T07:39:41.088Z</updated>
    
    <content type="html"><![CDATA[<p>終於有機會接觸 Kubernetes (K8s) ，但對於整體的掌握度並沒有很好，所以從頭學起</p><span id="more"></span><h1 id="Kubernetes-Big-Picutre"><a class="header-anchor" href="#Kubernetes-Big-Picutre"> </a>Kubernetes Big Picutre</h1><p>Kubernetes 是一個控制中心，來控制 node，多個 nodes 成一個 clusters，簡單來說就是管理一堆 VM，而每一個 node 內可以跑很多 pod，每一個 pod 內可以跑 container(s)</p><p><img src="image-20210707115306733.png" alt="image-20210707115306733"></p><p><img src="image-20210707115328473.png" alt="image-20210707115328473"></p><p>K8s 就是用來管理這些 Pod 的一種方式，搭配各種需求就會有各式的元素出現</p><p><img src="image-20210707120143894.png" alt="image-20210707120143894"></p><p>而大腦當然需要其他的服務來協助管理眾多的 node，而我們會透過 API Server 對 K8s 進行相關的操作</p><p><img src="image-20210707120512377.png" alt="image-20210707120512377"></p><p>node 當然也會有相關的服務人員跟上頭溝通</p><p><img src="image-20210707120951569.png" alt="image-20210707120951569"></p><ul><li>Kubelet: Agent 與 master 做溝通</li><li>Container Runtime: 用來跑 Pod 的</li><li>Kube-Proxy: 負責網路的部分</li></ul><h1 id="kubectl-命令"><a class="header-anchor" href="#kubectl-命令"> </a>kubectl 命令</h1><ul><li>kubectl version: 檢查 Kubernetes 版本</li><li>kubectl cluster-info: 顯示 Cluster 資訊</li><li>kubectl get all: 取得目前在跑得 pods, deployments, services, etc.</li><li>kubectl run [container-name] --image=[image-name]: 建立 deployement for pod</li><li>kubectl port-forward [pod] [ports]: Forward a port to allow external access</li><li>kubectl expose … : export port for a deployment/pod</li><li>kubectl create [resource]: 建立 resouce</li><li>kubectl apply [resource]: 套用 resouce</li><li>kubectl --help : 顯示出可用的命令列表</li></ul><h1 id="Pods"><a class="header-anchor" href="#Pods"> </a>Pods</h1><ul><li>K8s 內的最小單位</li><li>Container 的執行環境</li><li>organize application 「parts」 into Pods</li><li>擁有自己的 IP、記憶體等資源，Pod 內的 Container 會共用這些資源</li><li>live or die</li><li>can replicate</li></ul><h2 id="container"><a class="header-anchor" href="#container"> </a>container</h2><ul><li>share the same Network namespace</li><li>have the loopback network interface (localhost)</li><li>processes need to bind to different ports (in the same pod)</li></ul><h2 id="建立-Pod"><a class="header-anchor" href="#建立-Pod"> </a>建立 Pod</h2><blockquote><p>kubectl run [podname] --image=[image-name]</p><p>範例: kubectl run webserver --image=nginx:alpine</p></blockquote><ul><li><p>kubectl get pods : List pods</p></li><li><p>kubectl port-forward [name-of-pod] [external port]:[internal port]</p><p><code>kubectl port-forward webserver 8080:80</code></p></li><li><p>kubectl delete pod [name of pod] : 刪除 pod，但如果沒有刪除 deployment，pod 還會在長回來</p></li><li><p>kubectl delete deployment [name of deployment]: 刪除 deployment</p></li></ul><p>Tips:</p><ol><li>如果要拉的 image 不在 dockerhub (預設會去那邊找) 而只有在本地時，需要掛上 <code>–-image-pull-policy=Never</code> <code>，這樣才不會出現 </code><em>ErrImagePull</em>  的錯誤訊息</li></ol><h1 id="使用-YAML"><a class="header-anchor" href="#使用-YAML"> </a>使用 YAML</h1><p>Kubenetes 可以使用 YAML 的設定檔來作部屬</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">rel:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-ngminx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>儲存成 <code>xxx.yml</code> 檔後，可透過以下的指令來建立、修改或刪除相關的服務</p><ul><li><p><code>kubectl create -f xxx.yml</code></p></li><li><p><code>kubectl apply -f xxx.yml</code></p></li><li><p><code>kubectl delete -f xxx.yml</code></p></li></ul><p>更多相關的指令可到網路上查詢</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://www.pluralsight.com/courses/kubernetes-developers-core-concepts">Pluralsight -  Kubernetes for Deveopers: Core Concepts</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;終於有機會接觸 Kubernetes (K8s) ，但對於整體的掌握度並沒有很好，所以從頭學起&lt;/p&gt;</summary>
    
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/categories/K8s/"/>
    
    
    <category term="K8s" scheme="http://blog.kevinyang.net/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>[Kotlin]學習筆記 - Types</title>
    <link href="http://blog.kevinyang.net/2021/06/19/kotlin-note-003/"/>
    <id>http://blog.kevinyang.net/2021/06/19/kotlin-note-003/</id>
    <published>2021-06-19T02:43:10.000Z</published>
    <updated>2021-09-12T07:39:41.088Z</updated>
    
    <content type="html"><![CDATA[<p>繼續學習 Kotin，本篇筆記會紀錄 Types</p><p>這裡的 Types 就是常聽到的 Class 和 interface</p><span id="more"></span><h1 id="筆記"><a class="header-anchor" href="#筆記"> </a>筆記</h1><h2 id="Interface"><a class="header-anchor" href="#Interface"> </a>Interface</h2><ol><li><p>預設皆為 public</p></li><li><p>interface 有 basic definitions、default methods、properties</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(hours: <span class="type">Int</span>, mins: <span class="type">Int</span> = <span class="number">0</span>, secs: <span class="type">Int</span> =<span class="number">0</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(time: <span class="type">KevinTime</span>)</span></span> = setTime(time.hours, time.mins, time.secs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要 implement 一個 interface 是使用 <code>:</code> 來表示 implements</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YetiTime</span>: <span class="type">Time &#123;&#125;</span></span></span><br></pre></td></tr></table></figure></li><li><p>實做一個 interface 的 method 要使用 <code>override</code> keyword</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YetiTime</span>: <span class="type">Time &#123;</span></span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(hours: <span class="type">Int</span>, mins: <span class="type">Int</span>, secs: <span class="type">Int</span>)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>multiple implements</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(hours: <span class="type">Int</span>, mins: <span class="type">Int</span> = <span class="number">0</span>, secs: <span class="type">Int</span> = <span class="number">0</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(time: <span class="type">KevinTime</span>)</span></span> = setTime(time.hours, time.mins,  time.secs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">EndOfTheWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(time: <span class="type">KevinTime</span>)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YetiTime</span> : <span class="type">Time</span>, <span class="type">EndOfTheWorld &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(time: <span class="type">KevinTime</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;Time&gt;.setTime(time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(hours: <span class="type">Int</span>, mins: <span class="type">Int</span>, secs: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>,</code> 來實現多 interface implements</li><li>可使用 <code>super&lt;T&gt;.xxx</code> 來決定使用哪一個 interface 的 default methods</li></ul></li></ol><h2 id="Classes"><a class="header-anchor" href="#Classes"> </a>Classes</h2><ol><li><p><code>final</code> 、<code>public</code> by default - apply to class and functions</p></li><li><p>使用 <code>open</code> keyword 讓 function 可以被 override，讓 Class 可以被繼承</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firstName: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> lastName: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;<span class="variable">$firstName</span> <span class="variable">$lastName</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>with <code>abstract</code> keyword，該 class 或 function 就必須被 implement</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = Person() <span class="comment">// 出現 Error: Cannot create an instance of an abstract class</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firstName: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> lastName: String = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;<span class="variable">$firstName</span> <span class="variable">$lastName</span>&quot;</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAddress</span><span class="params">()</span></span>: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="type">Person</span></span>() &#123;    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAddress</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>sealed Class:  represent restricted class hierarchies that provide more control over inheritance</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">Operation</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Add</span></span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Operation()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Subtract</span></span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Operation()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Multiply</span></span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Operation()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Divide</span></span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Operation()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">(x: <span class="type">Int</span>, op: <span class="type">Operation</span>)</span></span> = <span class="keyword">when</span> (op) &#123;</span><br><span class="line">    <span class="keyword">is</span> Operation.Add -&gt;      x + op.value</span><br><span class="line">    <span class="keyword">is</span> Operation.Subtract -&gt; x - op.value</span><br><span class="line">    <span class="keyword">is</span> Operation.Multiply -&gt; x * op.value</span><br><span class="line">    <span class="keyword">is</span> Operation.Divide -&gt;   x / op.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>很像 Enum</li><li>可以搭配 <code>when</code> 做 pattern match</li></ul></li><li><p>可以透過 <code>construction parameters</code> 定義 class property (Primary Constructor)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String)</span><br><span class="line"><span class="keyword">val</span> kevin = Person(<span class="string">&quot;Kevin&quot;</span>)</span><br><span class="line">println(kevin.name)</span><br></pre></td></tr></table></figure></li><li><p>可以設定第二組 constructor</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>): <span class="keyword">this</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用預設值</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>Data Classes: 會自動實做 equals, hashCode, toString methods，且又是 immutable class 再加上 copy method</p></li></ol>   <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Meeting</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> location:String)</span><br><span class="line"><span class="keyword">val</span> aMeeting = Meeting(<span class="string">&quot;A Meeting&quot;</span>, <span class="string">&quot;Taiwan&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> bMeeting = Meeting(<span class="string">&quot;A Meeting&quot;</span>, <span class="string">&quot;Taiwan&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> anotherMeeting = aMeeting.copy(location = <span class="string">&quot;Japan&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// equal: </span></span><br><span class="line">aMeeting == bMeeting <span class="comment">// true</span></span><br><span class="line"><span class="comment">// ToString</span></span><br><span class="line">println(aMeeting.ToString()) <span class="comment">// Meeting(name=A Meeting, location=Taiwan)</span></span><br></pre></td></tr></table></figure><ul><li>equal: 會比對 data class 內得資料是否相同</li><li>ToString() 會印出文字而非 hashCode</li><li>可以使用 copy 來建立另外一個 data class</li></ul><h2 id="Objects"><a class="header-anchor" href="#Objects"> </a>Objects</h2><ol><li><p><code>object</code> keyword 用來建立 singleton</p></li><li><p>定義與建立發生在同一時間</p></li><li><p>object 可以有 properties, methods, initializers 但就是不能有 constructors</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span></span>(<span class="keyword">val</span> id: <span class="built_in">Int</span>, <span class="keyword">val</span> title: String)</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Courses&#123;</span><br><span class="line">    <span class="keyword">var</span> allCourses = arrayListOf&lt;Course&gt;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">enrole</span><span class="params">(courseName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    Courses.allCourses</span><br><span class="line">    .filter &#123; it.title == courseName &#125;</span><br><span class="line">    .firstOrNull()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>object 可以在 class 內出現，而此時他的 scope 會是該 class 內</p></li><li><p>companion object: Factory object and static members</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">createNormalPerson</span><span class="params">(name: <span class="type">String</span>)</span></span>: NormalPerson &#123;</span><br><span class="line">            <span class="keyword">return</span> NormalPerson(name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> normalPerson = Person.createNormalPerson(<span class="string">&quot;XXX&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>@JvmStatic</code> to mark as static method for Java compiler</p></li></ol><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://carterchen247.medium.com/kotlin%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97-sealed-class-82eccf890ac0">Sealed Class</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;繼續學習 Kotin，本篇筆記會紀錄 Types&lt;/p&gt;
&lt;p&gt;這裡的 Types 就是常聽到的 Class 和 interface&lt;/p&gt;</summary>
    
    
    
    <category term="Kotlin" scheme="http://blog.kevinyang.net/categories/Kotlin/"/>
    
    
    <category term="Kotlin" scheme="http://blog.kevinyang.net/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[Kotlin]學習筆記 - Functions</title>
    <link href="http://blog.kevinyang.net/2021/06/16/kotlin-note-002/"/>
    <id>http://blog.kevinyang.net/2021/06/16/kotlin-note-002/</id>
    <published>2021-06-16T11:56:22.000Z</published>
    <updated>2021-09-12T07:39:41.088Z</updated>
    
    <content type="html"><![CDATA[<p>繼續學習 Kotin，本篇筆記會紀錄 Functions</p><h1 id="主要特性"><a class="header-anchor" href="#主要特性"> </a>主要特性</h1><ol><li>不需要存活在 Class 內</li><li>使用 <code>fun</code> 關鍵字</li><li>參數可以設定預設值</li><li>可以使用 named parameters</li><li>可以擴充既有 types</li></ol><span id="more"></span><h1 id="筆記"><a class="header-anchor" href="#筆記"> </a>筆記</h1><ol><li><p>Function 宣告</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>: String</code> 宣告變數或回傳型別為何</li></ul></li><li><p>支援 Expessions 型態</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> message = <span class="keyword">if</span>(a&gt;b) <span class="string">&quot;a&quot;</span> <span class="keyword">else</span> <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>如何在 Java 內呼叫 Function</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cky</span><br><span class="line"><span class="comment">// Util.kt 檔案</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>編譯後，Java 會看成這樣，之後就跟使用其他 static function 的方法是一樣的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class UtilKt() &#123;</span></span><br><span class="line"><span class="comment">//    static boolean display(String message) &#123; ... &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cky.UtilKt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UtilKt.display(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以透過 <code>@file:JvmName(&quot;SomeClassName&quot;)</code> 的方式來改變 Jvm 看 Kotlin function 的方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@file:JvmName</span>(<span class="string">&quot;SomeClassName&quot;</span>)</span><br><span class="line"><span class="keyword">package</span> com.cky</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>會轉換成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class SomeClassName &#123;</span></span><br><span class="line"><span class="comment">//    static boolean display(String message) &#123; ... &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cky.SomeClassName;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SomeClassName.display(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Default Parameters 在 C# 或是其他語言已經存在一段時間，但在 Java 並沒有這樣的觀念，而 Kotlin 的 Function 是可以設定預設值的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span> = <span class="string">&quot;World&quot;</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    display() <span class="comment">// 顯示 Hello world</span></span><br><span class="line">    display(<span class="string">&quot;Kevin&quot;</span>) <span class="comment">// 顯示 Hello Kevin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因為 Java 沒有 Defatul Parameters 的觀念，所以當上面的 function 要在 Java 中使用，有兩種方式，</p><ol><li>有多少參數傳就傳多少</li><li>加上 <code>@JvmOverloads</code></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span> = <span class="string">&quot;World&quot;</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Named Parameters，這一個觀念在其他語言也有存在， 正常在傳參數的時候，都是依 function 設計時的順序傳，而 Named Parameters 時，就可以使用指定名稱的方式傳</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span> = <span class="string">&quot;World&quot;</span>, logLevel: <span class="type">Int</span> = <span class="number">1</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   display(logLevel = <span class="number">2</span>, message = <span class="string">&quot;Kevin&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Named Parameters 不能和 Position Parameters 混用</li><li>Named Parameters 順序不重要</li><li>Java 呼叫時，不能使用指定名稱傳值</li></ul></li><li><p>Extension Functions 的概念也存在於 C# 中，可以讓我們針對既有 Types / classes 擴充功能，例如: <code>&quot;abc&quot;.myCustomFunction()</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Hello <span class="variable">$this</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Kevin&quot;</span>.hello()) <span class="comment">// Hello Kevin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>line2: this 表示此 extension function 所接收到的值，以此範例就是 line 6 的 <code>&quot;Kevin&quot;</code></li></ul></li><li><p>Infix Functions</p><ul><li>Member or extension function</li><li>Have a single parameter</li><li>Marked with infix keyword</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 沒有使用 infix</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> h1 = Header(<span class="string">&quot;H1&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> h2 = Header(<span class="string">&quot;H2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> h3 = h1.plus(h2)</span><br><span class="line">    println(h3.Name) <span class="comment">//H1H2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span></span>(<span class="keyword">var</span> Name: String) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Header.<span class="title">plus</span><span class="params">(other: <span class="type">Header</span>)</span></span>: Header &#123;</span><br><span class="line">    <span class="keyword">return</span> Header(<span class="keyword">this</span>.Name + other.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 infix</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> h1 = Header(<span class="string">&quot;H1&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> h2 = Header(<span class="string">&quot;H2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> h3 = h1 plus h2 <span class="comment">// &lt;= 主要差異</span></span><br><span class="line">    println(h3.Name) <span class="comment">//H1H2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span></span>(<span class="keyword">var</span> Name: String) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> Header.<span class="title">plus</span><span class="params">(other: <span class="type">Header</span>)</span></span>: Header &#123;</span><br><span class="line">    <span class="keyword">return</span> Header(<span class="keyword">this</span>.Name + other.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以透過 infix 來 overloading operators (不建議大量使用)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Header.<span class="title">plus</span><span class="params">(other: <span class="type">Header</span>)</span></span>: Header &#123;</span><br><span class="line">    <span class="keyword">return</span> Header(<span class="keyword">this</span>.Name + other.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> h1 = Header(<span class="string">&quot;H1&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> h2 = Header(<span class="string">&quot;H2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> h3 = h1 + h2 <span class="comment">// 可以使用 + operator</span></span><br><span class="line">    println(h3.Name) <span class="comment">//H1H2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Tail Recursive Functions</p><ol><li>使用 <code>tailrec</code> keyword</li><li>必須要是正確型態 (corret form)</li><li>符合上面的條件，Kotlin 就會優化 Recursive Functions</li></ol></li></ol><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li>Kotlin Fundamentals | Plurasight</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;繼續學習 Kotin，本篇筆記會紀錄 Functions&lt;/p&gt;
&lt;h1 id=&quot;主要特性&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#主要特性&quot;&gt; &lt;/a&gt;主要特性&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;不需要存活在 Class 內&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;fun&lt;/code&gt; 關鍵字&lt;/li&gt;
&lt;li&gt;參數可以設定預設值&lt;/li&gt;
&lt;li&gt;可以使用 named parameters&lt;/li&gt;
&lt;li&gt;可以擴充既有 types&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Kotlin" scheme="http://blog.kevinyang.net/categories/Kotlin/"/>
    
    
    <category term="Kotlin" scheme="http://blog.kevinyang.net/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[Kotlin]學習筆記 - Hello World</title>
    <link href="http://blog.kevinyang.net/2021/06/14/kotlin-note-001/"/>
    <id>http://blog.kevinyang.net/2021/06/14/kotlin-note-001/</id>
    <published>2021-06-14T05:50:03.000Z</published>
    <updated>2021-09-12T07:39:41.088Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin 這語言名字最近一直出現在我的雷達中，但由於之前都不是走 Java 開發體系，當然就不會放在心上，但由於現在的工作基本上是走 Java 技術線，只好摸摸鼻子先來研究一下 Kotlin 這語言了</p><span id="more"></span><h1 id="What-is-Kotlin"><a class="header-anchor" href="#What-is-Kotlin"> </a>What is Kotlin?</h1><ul><li>跑在 JVM 上，是 JVM Language</li><li>Object Oriented</li><li>Functional, support Higher order function</li><li>Less ceremony than Java, 語法比 Java 簡潔</li></ul><h2 id="建立學習環境"><a class="header-anchor" href="#建立學習環境"> </a>建立學習環境</h2><p>這邊使用 IntelliJ 來做學習 Kotlin 的環境工具</p><ol><li>New Project with Kotlin Template<ol><li>Project Name: 隨意</li><li>Project Template: Application</li><li>Project JSK 我選擇 1.8</li></ol></li><li>Next -&gt; Finish 建立 Kotlin 專案</li></ol><p>在 <code>src</code> 資料夾下會看到 <code>main/kotlin</code> 得資料夾但沒有 kotlin 檔案，所以先增一個 <code>main.kt</code>  (<code>.kt</code> 為 Kotlin 檔案的附檔名)</p><p><img src="image-20210614141411321.png" alt="image-20210614141411321"></p><p>在該檔案內增加一個 main function</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要執行這一個檔案時， 需要先新增一個執行設定檔，Run -&gt; Edit Configurations -&gt; Add New Configuration</p><p><img src="image-20210614141641413.png" alt="image-20210614141641413"></p><p>以上設定完後就能執行了。</p><p><img src="image-20210614141715897.png" alt="image-20210614141715897"></p><h2 id="建立第一個-package"><a class="header-anchor" href="#建立第一個-package"> </a>建立第一個 package</h2><p>一樣在 Source root 資料夾上新增一個 Kotlin 檔案，這時候可以連同輸入 package 的名稱，例如 <code>com.cky.Person</code></p><p><img src="image-20210614142141788.png" alt="image-20210614142141788"></p><p>這時候就會產生一個 <code>Person.kt</code> 檔案，並且建立 <code>com/cky</code> 得資料夾</p><p><img src="image-20210614142331342.png" alt="image-20210614142331342"></p><p>使用方式如其他 import package 一樣</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.cky.Person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line"> println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"> <span class="keyword">val</span> person = Person(<span class="string">&quot;kevin&quot;</span>)</span><br><span class="line"> println(<span class="string">&quot;Name is <span class="subst">$&#123;kevin.Name&#125;</span>&quot;</span>)</span><br><span class="line"> person.display()    </span><br><span class="line"> person.displayWithLamda(::println) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Display: <span class="variable">$name</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">displayWithLamda</span><span class="params">(func: (<span class="type">s</span>: <span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">        func(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="筆記"><a class="header-anchor" href="#筆記"> </a>筆記</h1><ol><li><p>建立一個 class instance  不需要 <code>new</code> keyword</p></li><li><p>使用 <code>var</code> and <code>val</code> 來決定變數是否能被重新定義，就像 <code>let</code> 和 <code>const</code>，也可在 class 定義 property 時使用</p><ul><li><code>var</code> ==&gt; <code>let</code> : mutable</li><li><code>val</code> ==&gt; <code>const</code> : immutable</li></ul></li><li><p>string template 的使用法，使用方法如下，這裡的寫法跟 Dart 一樣</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(<span class="keyword">val</span> name: <span class="type">string</span>)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;display: <span class="variable">$name</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或是</span><br><span class="line">   println(<span class="string">&quot;display: <span class="subst">$&#123;person.name&#125;</span>&quot;</span>); <span class="comment">// 通常用於比較複雜的值，例如 $&#123;objectClass.prop&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>if expression</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="keyword">if</span>(q.answer == q.correctAnswer) &#123; <span class="string">&quot;Correct&quot;</span> &#125; <span class="keyword">else</span> &#123; <span class="string">&quot;Wrong&quot;</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>null handle, Kotlin 會盡量讓使用者不要遇到 null 的問題，所以例如 String 是一個 non-null value. 如果要讓 property 可以接受 null 時，就要搭配 <code>?</code></p></li></ol>   <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> answer: string? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同樣也可以使用 <code>?.</code> 的方式來判斷是否能繼續往下執行，這點跟 TypeScript 的 <code>?.</code> 是一樣的功能</p>   <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> q: Question? = Question()</span><br><span class="line">q?.answer = <span class="string">&quot;42&quot;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>沒有 <code>switch</code> 只有 <code>when</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> answer: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">val</span> correctAnswer = <span class="string">&quot;Answer&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">printResult</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 等同 if(q.answer == q.correctAnswer) &#123; &quot;Correct&quot; &#125; else &#123; &quot;Wrong&quot; &#125; </span></span><br><span class="line">        <span class="keyword">when</span> (answer) &#123;</span><br><span class="line">            correctAnswer -&gt; print(<span class="string">&quot;Correct&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span> -&gt; print(<span class="string">&quot;Wrong&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本概念跟 <code>switch</code> 一樣，也可以做到 pattern match 的效果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">whatItIs</span><span class="params">(any: <span class="type">Any</span>)</span></span> = <span class="keyword">when</span> (any) &#123;</span><br><span class="line">    <span class="keyword">is</span> String -&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> firstLetter = any.first()        <span class="comment">// smart cast, any is String now</span></span><br><span class="line">        println(<span class="string">&quot;It seems like words, it is <span class="variable">$any</span> and the first word is <span class="variable">$firstLetter</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> doubleValue = any * <span class="number">2</span>        <span class="comment">// smart cast, any is Int now</span></span><br><span class="line">        println(<span class="string">&quot;It seems like a number, <span class="variable">$any</span> and multiply 2 is <span class="variable">$doubleValue</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> -&gt; println(<span class="string">&quot;Whatever&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多的寫法留在之後再深入研究</p></li><li><p>try block 的寫法也可以跟 If Expression 一樣</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number: <span class="built_in">Int</span>? = <span class="keyword">try</span> &#123; </span><br><span class="line">  Integer.parseInt(q.answer)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e: NumberFormatException) &#123;</span><br><span class="line">  <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>looping</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// range of value</span></span><br><span class="line"><span class="keyword">var</span> range = <span class="number">1.</span><span class="number">.10</span></span><br><span class="line"><span class="keyword">var</span> range = <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for loop</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line">    println(i) <span class="comment">// 1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span> step <span class="number">2</span>) &#123;</span><br><span class="line">println(i) <span class="comment">// 10,8,6,4,2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 1 to 9 不包含 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loop list</span></span><br><span class="line"><span class="keyword">var</span> numbers = listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loop list with index</span></span><br><span class="line"><span class="keyword">for</span>((index, element) <span class="keyword">in</span> numbers.withIndex()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loop through map</span></span><br><span class="line"><span class="keyword">for</span>((key, value) <span class="keyword">in</span> map) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>No Checked Exception，但仍可透過 try catch 的方式捕捉到 exception</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Kotlin 這語言名字最近一直出現在我的雷達中，但由於之前都不是走 Java 開發體系，當然就不會放在心上，但由於現在的工作基本上是走 Java 技術線，只好摸摸鼻子先來研究一下 Kotlin 這語言了&lt;/p&gt;</summary>
    
    
    
    <category term="Kotlin" scheme="http://blog.kevinyang.net/categories/Kotlin/"/>
    
    
    <category term="Kotlin" scheme="http://blog.kevinyang.net/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>[How-to] 如何寫一份 JSON Schema</title>
    <link href="http://blog.kevinyang.net/2021/06/06/how-to-write-json-schema/"/>
    <id>http://blog.kevinyang.net/2021/06/06/how-to-write-json-schema/</id>
    <published>2021-06-06T02:49:01.000Z</published>
    <updated>2021-09-12T07:39:41.088Z</updated>
    
    <content type="html"><![CDATA[<p>當要驗證 JSON 資料格式是否正確，有幾種做法</p><ol><li>丟給後端去驗證</li><li>寫個 JSON Schema 做驗證(前端就可以先檢查了)</li></ol><p>JSON Schema 是什麼？他有點像以前 XSD (用來描述 XML 結構的檔案，也有驗證的效果)，除了可以用來驗證 JSON 資料格式是否正確，也可以用來驗證 YAML 檔案的格式。</p><span id="more"></span><h1 id="基本語法"><a class="header-anchor" href="#基本語法"> </a>基本語法</h1><p>所以如何寫一個 JSON Schema，我們需要寫另外一份 JSON 來描述未來想要驗證的 JSON 資料格式為何，型態為何，可以輸入得資料有哪些等，下面就跟大家一起整理相關的語法筆記 (部分範例來自 JSON Schema 網站，連結在參考資料)</p><p>假設有一個 JSON 資料長這樣</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;productId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;productName&quot;</span>: <span class="string">&quot;A green door&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">12.50</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: [ <span class="string">&quot;home&quot;</span>, <span class="string">&quot;green&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一個基本的 JSON schema 長這樣</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://json-schema.org/draft/2020-12/schema&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;$id&quot;</span>: <span class="string">&quot;https://example.com/product.schema.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Product&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;A product in the catalog&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>keyword<ul><li><code>$schema</code>: 參考的 JSON schema 是哪一個版本</li><li><code>$id</code>: 這份 JSON schema 存放的位置</li></ul></li><li>annotation<ul><li><code>title</code>，<code>description</code> 描述說明此份 schema 的用途</li></ul></li><li>validation keyword<ul><li><code>type</code> : 資料格式型態，可以描述的型態有 <code>null</code>、 <code>boolean</code>、 <code>object</code>、 <code>array</code>、 <code>number</code>、 <code>string</code>、 <code>integer</code></li></ul></li></ul><p>上面是設定跟說明這份 schema 的用途，類似 metadata，至於如何描述資料結構，描述方法如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;productId&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The unique identifier for a product&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;productName&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Name of the product&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;productId&quot;</span>, <span class="string">&quot;productName&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>validation keyword<ul><li><code>properties</code> 用來描述此 <code>Object</code> 內有哪些欄位</li><li><code>required</code> 用來設定哪些欄位是必填的</li></ul></li></ul><h2 id="更多語法"><a class="header-anchor" href="#更多語法"> </a>更多語法</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;price&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The price of the product&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;exclusiveMinimum&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>數字型別</li><li>不能是 0 (用 <a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.2.5"><code>exclusiveMinimum</code></a> 規則排除)</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;tags&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Tags for the product&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;array&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;items&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;minItems&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;uniqueItems&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此為陣列型別的欄位</li><li>陣列 內得資料格式，使用 <a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.1.2"><code>items</code></a> 定義</li><li>至少要有一筆資料 (<a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.4.2"><code>minItems</code></a> 來設定最少筆數)</li><li>且不能重複 (<a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.4.3"><code>uniqueItems</code></a> 檢查)</li></ul><h2 id="Nesting-data-structures"><a class="header-anchor" href="#Nesting-data-structures"> </a>Nesting data structures</h2><p>不難，一樣式套用上面的規則，做法是一樣的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dimensions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;length&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;width&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;height&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;length&quot;</span>, <span class="string">&quot;width&quot;</span>, <span class="string">&quot;height&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References-schema"><a class="header-anchor" href="#References-schema"> </a>References schema</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;warehouseLocation&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Coordinates of the warehouse where the product is located.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;https://example.com/geographical-location.schema.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>$ref</code> 指定 schema 的參考路徑，可以是外部或內部 (<a href="https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00#section-8.2.4">spec</a>)</p><ul><li><p>外部參考: 使用 URI Reference</p></li><li><p>內部參考: 使用 <code>#/路徑</code> 的方式，搭配 <code>$defs</code> 使用</p><p><img src="image-20210606115417347.png" alt="image-20210606115417347"></p></li></ul></li></ul><h1 id="進階語法"><a class="header-anchor" href="#進階語法"> </a>進階語法</h1><ul><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.2.3"><code>additionalProperties</code></a>: 是否有其他額外的欄位，<code>false</code> 時，JSON 得資料必須符合 schema 所定義的 <code>properties</code></li><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.2.2"><code>patternProperties</code></a>: 用 Regex 來描述 Property 名稱規則及對應得資料格式</li><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.2.1.3"><code>oneOf</code></a> 符合定義規則的其中一項<ul><li>MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.</li><li>An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword’s value.</li></ul></li><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.8.2.4"><code>$defs</code></a> 搭配 <code>$ref</code> 使用 (舊版名稱為: <code>definitions</code>)<ul><li>MUST be an object. Each member value of this object MUST be a valid JSON Schema.</li><li>reserves a location for schema authors to inline re-usable JSON Schemas into a more general schema.</li></ul></li><li><a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.1.2"><code>enum</code></a>: 設定可以使用的值有哪些</li><li>MUST be an array and at least one element.</li><li>An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword’s array value.</li><li><a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.3.3"><code>pattern</code></a>: 使用 Regex 設定可以輸入資料的格式 (format)</li></ul><p>完整範例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;$id&quot;</span>: <span class="string">&quot;https://example.com/entry-schema&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://json-schema.org/draft/2020-12/schema&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;JSON Schema for an fstab entry&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;storage&quot;</span> ],</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;storage&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;oneOf&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;#/$defs/diskDevice&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;#/$defs/diskUUID&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;#/$defs/nfs&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;$ref&quot;</span>: <span class="string">&quot;#/$defs/tmpfs&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;fstype&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;ext3&quot;</span>, <span class="string">&quot;ext4&quot;</span>, <span class="string">&quot;btrfs&quot;</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;array&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;minItems&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;items&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;uniqueItems&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;readonly&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;boolean&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;$defs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;diskDevice&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;disk&quot;</span> ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;device&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;^/dev/[^/]+(/[^/]+)*$&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;type&quot;</span>, <span class="string">&quot;device&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;diskUUID&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;disk&quot;</span> ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;label&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;^[a-fA-F0-9]&#123;8&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;12&#125;$&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;type&quot;</span>, <span class="string">&quot;label&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;nfs&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: &#123; <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;nfs&quot;</span> ] &#125;,</span><br><span class="line">        <span class="attr">&quot;remotePath&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;^(/[^/]+)+$&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;server&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;oneOf&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;hostname&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;ipv4&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;ipv6&quot;</span> &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;type&quot;</span>, <span class="string">&quot;server&quot;</span>, <span class="string">&quot;remotePath&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tmpfs&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: &#123; <span class="attr">&quot;enum&quot;</span>: [ <span class="string">&quot;tmpfs&quot;</span> ] &#125;,</span><br><span class="line">        <span class="attr">&quot;sizeInMB&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;minimum&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">&quot;maximum&quot;</span>: <span class="number">512</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: [ <span class="string">&quot;type&quot;</span>, <span class="string">&quot;sizeInMB&quot;</span> ],</span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要知道更多 JSON Schema 語法的寫法，可以到 <code>JSON Schema Store</code> 內去瞭解，裡面列出很多現在常用的服務，很多都是用來驗證 YAML 格式是否正確，或是閱讀這篇<a href="https://json-schema.org/understanding-json-schema/">文件</a></p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ol><li><a href="https://json-schema.org/">JSON Schema</a></li><li><a href="https://json-schema.org/specification.html">JSON Schema specification</a></li><li><a href="https://www.schemastore.org/json/">JSON Schema Store</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;當要驗證 JSON 資料格式是否正確，有幾種做法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;丟給後端去驗證&lt;/li&gt;
&lt;li&gt;寫個 JSON Schema 做驗證(前端就可以先檢查了)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JSON Schema 是什麼？他有點像以前 XSD (用來描述 XML 結構的檔案，也有驗證的效果)，除了可以用來驗證 JSON 資料格式是否正確，也可以用來驗證 YAML 檔案的格式。&lt;/p&gt;</summary>
    
    
    
    <category term="How-to" scheme="http://blog.kevinyang.net/categories/How-to/"/>
    
    
    <category term="How-to" scheme="http://blog.kevinyang.net/tags/How-to/"/>
    
  </entry>
  
  <entry>
    <title>[NATS] Messaging architecture - 影片筆記</title>
    <link href="http://blog.kevinyang.net/2021/05/08/nats-study-1/"/>
    <id>http://blog.kevinyang.net/2021/05/08/nats-study-1/</id>
    <published>2021-05-08T06:39:36.000Z</published>
    <updated>2021-09-12T07:39:41.084Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作上碰到了 Messaging 架構面的開發，或許對很多人來說這已經是很基本的常識，但對我來說這是新東西，所以看個影片將裡面提到的觀念筆記下來</p><span id="more"></span><h1 id="Messaging-架構"><a class="header-anchor" href="#Messaging-架構"> </a>Messaging 架構</h1><p><img src="image-20210508152057858.png" alt="image-20210508152057858"></p><ul><li>message had payload and subject</li><li>Subject names are extremely important (描述目標) -</li><li>Producers - message 建立者 (publishers)<ul><li>Publisher may specify an optional reply, it change message type from notify to request</li></ul></li><li>Subscribe: receive messages matching a subscription<ul><li>can specify a queue group name</li><li>can specify how many messages to receive before auto-canceling (big deal)</li><li>can specify wildcards, ex: <code>pokenats.*.*.hb.100</code>, <code>pokenats.eden-services.&gt;</code><ul><li><code>*</code> matches any value in that element</li><li><code>&gt;</code> matches all elements that follow, only valid at the end of subject</li></ul></li></ul></li><li>NATS Server<ul><li>Clustered servers/cluster-aware clients<ul><li>Build-in resiliency and high availability</li><li>Client will auto connect to another server in the cluster if one NATS server is down.</li></ul></li><li>Text-base protocol (payload is an array of bytes)<ul><li>use telnet to explore</li></ul></li><li>Monitorable on a dedicated port - returning JSON data to describing the state of the server</li><li>Server protects itself first<ul><li>Auto-pruning of slow/non-responsive client</li><li>Disconnect clients that send bad protocol messages</li></ul></li><li>at most once delivery</li><li>messages stored until number or size limits are reached</li><li>Subscribers can request messages sent earlier<ul><li>Start with first/last/n-th/etc message</li></ul></li><li>Durable subscriptions<ul><li>Resume previous session</li></ul></li><li>At least once delivery</li></ul></li><li>Three simple patterns<ul><li>Publish-subscribe (基本行為)</li><li>Queueing (變化型)</li><li>Request-Reply (變化型)</li></ul></li></ul><p><img src="image-20210508154237496.png" alt="image-20210508154237496"></p><p>利用 Subject Name 來區分事件所對應的行為，<strong>事件名稱很重要</strong></p><h1 id="實做練習"><a class="header-anchor" href="#實做練習"> </a>實做練習</h1><ol><li><p>在 windows 電腦上要架設一個 NATS 服務，有 Docker 後一切都變簡單了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nats-main -p 4222:4222 -p 6222:6222 -p 8222:8222 nats</span><br></pre></td></tr></table></figure></li><li><p>如果沒有安裝過 NestJS CLI  的可以參考這篇<a href="https://docs.nestjs.com/#installation">文件</a>，這裡我建立了兩個 NestJS App，一個是 Client, 一個是 Server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nest new app-client</span><br><span class="line">nest new app-server</span><br></pre></td></tr></table></figure><ul><li>基本上，這邊命名為 client、server 沒什麼意義，因為在 Messaging 的世界裡，每一個都是 Client 或是 Server (因為都可以發訊息或接收訊息)</li></ul></li><li><p>在兩個專案中都安裝以下套件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i --save @nestjs/microservices</span><br><span class="line">npm i --save nats@^1.4.12</span><br></pre></td></tr></table></figure><ul><li>留意: <code>nats</code> 套件 1.x 和 2.x 版的 API 是不相容</li></ul></li><li><p>設定 NATS Server 連線資訊</p><ul><li>main.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NestFactory &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; natsConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./nats.config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> NestFactory.create(AppModule);</span><br><span class="line"></span><br><span class="line">  app.connectMicroservice(natsConfig);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> globalPrefix = <span class="string">&#x27;api&#x27;</span>;</span><br><span class="line">  app.setGlobalPrefix(globalPrefix);</span><br><span class="line">  <span class="keyword">const</span> port = process.env.port || <span class="number">3333</span>; <span class="comment">// Port 可改</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.startAllMicroservicesAsync();</span><br><span class="line">  <span class="keyword">await</span> app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Listening at http://localhost:&#x27;</span> + port + <span class="string">&#x27;/&#x27;</span> + globalPrefix);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">bootstrap();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>nats.config.ts</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NatsOptions, Transport &#125; from &#x27;@nestjs/microservices&#x27;;</span><br><span class="line"></span><br><span class="line">export const natsConfig: NatsOptions = &#123;</span><br><span class="line">  transport: Transport.NATS,</span><br><span class="line">  options: &#123;</span><br><span class="line">    url: process.env.NATS_URL || &#x27;nats:<span class="comment">//localhost:4222&#x27;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>Client 設定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Module &#125; from &#x27;@nestjs/common&#x27;;</span><br><span class="line">import &#123; ClientsModule &#125; from &#x27;@nestjs/microservices&#x27;;</span><br><span class="line">import &#123; AppController &#125; from &#x27;./app.controller&#x27;;</span><br><span class="line">import &#123; AppService &#125; from &#x27;./app.service&#x27;;</span><br><span class="line">import &#123; natsConfig &#125; from &#x27;./nats.config&#x27;;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ClientsModule.register([&#123;</span><br><span class="line">      name: &#x27;MATH_SERVICE&#x27;,</span><br><span class="line">      ...natsConfig,</span><br><span class="line">    &#125;])</span><br><span class="line">  ],</span><br><span class="line">  controllers: [AppController],</span><br><span class="line">  providers: [AppService],</span><br><span class="line">&#125;)</span><br><span class="line">export class AppModule &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Client 是用來發送訊息的，如果只是單純監聽事件，就不需要設定這個<ul><li><code>client.emit([subject], [payload])</code> :  event-driven messaging</li><li><code>client.send([subject], [payload])</code> :  request-response messaging</li></ul></li></ul></li><li><p>Controller 設定</p><ol><li>發送端</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="meta">@Inject</span>(<span class="string">&#x27;MATH_SERVICE&#x27;</span>) <span class="keyword">private</span> client: ClientProxy,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Inject('MATH_SERVICE')</code> 對應 <code>AppModule</code> 所註冊的名稱，可自行更換</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum(data: <span class="built_in">number</span>[]): Observable&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.client.send&lt;<span class="built_in">number</span>&gt;(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;sum&#x27;</span> &#125;, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>發送一個 Event ，Subject Name: <code>&#123;cmd: 'sum'&#125;</code>，payload 是一個數字陣列</li></ul><ol start="2"><li>接收端</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MessagePattern</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;sum&#x27;</span> &#125;)</span><br><span class="line">sum(data: <span class="built_in">number</span>[]): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;MinionAppController: sum&#x27;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.minionAppService.sum(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>@MessagePattern([subject])</code> 決定要監聽的 Subject  種類</li></ul></li></ol><h1 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h1><ul><li><a href="https://www.youtube.com/watch?v=SLb4rdI5lIM">NATS for Modern Messaging and Microservices</a></li><li><a href="https://docs.nats.io/">NATS 官網</a></li><li><a href="https://hub.docker.com/_/nats">NATS Docker Image</a></li><li><a href="https://docs.nestjs.com/microservices/nats#nats">NestJS - NATS</a></li><li>範例程式<ul><li><a href="https://github.com/chgc/nats-nest-studyDemo/tree/client">Client</a></li><li><a href="https://github.com/chgc/nats-nest-studyDemo/tree/server">Server</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近工作上碰到了 Messaging 架構面的開發，或許對很多人來說這已經是很基本的常識，但對我來說這是新東西，所以看個影片將裡面提到的觀念筆記下來&lt;/p&gt;</summary>
    
    
    
    <category term="NATS" scheme="http://blog.kevinyang.net/categories/NATS/"/>
    
    
    <category term="NATS" scheme="http://blog.kevinyang.net/tags/NATS/"/>
    
  </entry>
  
  <entry>
    <title>[Azure DevOps] 用 API 來建立 WorkItems - Angular 篇</title>
    <link href="http://blog.kevinyang.net/2021/04/18/devops-api-angular-version/"/>
    <id>http://blog.kevinyang.net/2021/04/18/devops-api-angular-version/</id>
    <published>2021-04-18T12:01:51.000Z</published>
    <updated>2021-09-12T07:39:41.084Z</updated>
    
    <content type="html"><![CDATA[<p>當網路速度慢遇上要大量開  Work Items 時，就會有一種想下班的念頭，還好 Azure DevOps 有提供 API 可以讓我們用程式來建立 Work Items，雖然剛開始有點小麻煩，但弄通後就還好，所以這邊就筆記一下起手式</p><span id="more"></span><h1 id="OAuth"><a class="header-anchor" href="#OAuth"> </a>OAuth</h1><p>當呼叫 API 時，還是得通過驗證才能操作 API，這邊可以簡單的透過建立 <code>Personal access tokens</code> 的方式來完成權限控管及驗證等功能，至於如何在 Azure DevOps 建立 PAT，我相信網路上已經有很多文章在講怎麼操作了</p><p>每一個操作的 API 也有說明所需的權限，範例<img src="image-20210418201316995.png" alt="image-20210418201316995"></p><h1 id="API-操作"><a class="header-anchor" href="#API-操作"> </a>API 操作</h1><p>這邊我使用 Angular 作為範例程式 ，先用一個 API 的操作來說明</p><h2 id="取得-iterations"><a class="header-anchor" href="#取得-iterations"> </a>取得 iterations</h2><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/work/iterations/list?view=azure-devops-rest-6.0">API - Work - Iterations</a></li></ul><p>根據 API 文件得知，呼叫 <code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/&#123;team&#125;/_apis/work/teamsettings/iterations?api-version=6.0</code> 可以取得開 project 下的 iterations 資訊，</p><p>程式碼的部分如下(以下的程式碼會產生錯誤)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">baseUrl = <span class="string">&#x27;`https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;&#x27;</span>; </span><br><span class="line"><span class="function"><span class="title">getIterations</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http.get(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/work/teamsettings/iterations?api-version=<span class="subst">$&#123;<span class="built_in">this</span>.apiVersion&#125;</span>`</span>);    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>organization</code> 和 <code>project</code> 請配合自己的 DevOps 專案修改</li><li>這段程式碼當在呼叫 API 時會出現錯誤，原因是沒有授權的關係</li></ul><p>來調整一下呼叫的 header 資訊，加入之前所建立的 PAT</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getIterations</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.http.get(</span><br><span class="line">     <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/work/teamsettings/iterations?api-version=<span class="subst">$&#123;<span class="built_in">this</span>.apiVersion&#125;</span>`</span>,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">headers</span>: <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">         <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">       &#125;),</span><br><span class="line">     &#125;</span><br><span class="line">   );    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>Headers 的部分加入 <code>Authorization</code> 的內容</li><li>PAT 需要轉換成 Base64 的格式</li><li><code>PAT:$&#123;token&#125;</code> 的 <code>PAT:</code> 是必要的</li><li>重新執行即可取回所要的資訊</li></ul><p>每次呼叫 API 時後面都要加上 <code>api-version</code> 資訊，其實有點麻煩，這資訊可以改放到 headers 內</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">      <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">      <span class="string">&#x27;X-TFS-FedAuthRedirect&#x27;</span>: <span class="string">&#x27;Suppress&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;api-version&#x27;</span>: <span class="string">&#x27;6.0&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="建立-Work-Item"><a class="header-anchor" href="#建立-Work-Item"> </a>建立 Work Item</h2><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20items/create?view=azure-devops-rest-6.0">API - Work Items - Create</a></li></ul><blockquote><p>POST <a href="https://dev.azure.com/%7Borganization%7D/%7Bproject%7D/_apis/wit/workitems/$%7Btype%7D?api-version=6.0">https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/${type}?api-version=6.0</a></p></blockquote><p>第一次看到 <code>$&#123;type&#125;</code> 的時候，我也搞不懂要放入什麼，經過一陣亂測試，終於知道要放什麼東西了 ，在網頁上面要新增一個 Work Item 時，可以選得類別會依開發模式來決定，基本操作都是一樣的</p><p><img src="image-20210418205023231.png" alt="image-20210418205023231"></p><p>如果要建立一個 <code>Task</code>，網址會是</p><p><code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/_apis/wit/workitems/$Task</code></p><p>如果是 <code>Issue</code>，網址則會是</p><p><code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/_apis/wit/workitems/$Issue</code></p><p>這樣子說明應該可以瞭解 <code>$&#123;type&#125;</code> 要怎麼改了</p><p>另外一個要注意的地方是 Request Body 的 Content-Type 需要設定為 <code>application/json-patch+json</code></p><p><img src="image-20210418205307166.png" alt="image-20210418205307166"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">    <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">    <span class="string">&#x27;api-version&#x27;</span>: <span class="built_in">this</span>.apiVersion,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>範例程式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">createWorkItem</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.http.post(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/wit/workitems/$Task`</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.Title&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;Title here&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.Description&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;desc here&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/Microsoft.VSTS.Common.Priority&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.IterationPath&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;apiDemo\\w001&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ], &#123;</span><br><span class="line">        <span class="attr">headers</span>: <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">            <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">            <span class="string">&#x27;api-version&#x27;</span>: <span class="built_in">this</span>.apiVersion,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>可以修改的 path ，可參閱 <a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20item%20types%20field/list?view=azure-devops-rest-6.0">API - work item fields</a>，但不是所有的欄位都可以設定，這部分就請各位自己測試了</li></ul><h2 id="Update-Work-Item"><a class="header-anchor" href="#Update-Work-Item"> </a>Update Work Item</h2><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20items/update?view=azure-devops-rest-6.0">API - Work Item Update</a></li></ul><blockquote><p>PATCH <a href="https://dev.azure.com/%7Borganization%7D/_apis/wit/workitems/%7Bid%7D?api-version=6.0">https://dev.azure.com/{organization}/_apis/wit/workitems/{id}?api-version=6.0</a></p></blockquote><p>用一個 Related Work 的範例來說明更新 Work Item</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addLink</span>(<span class="params">parent, ...childrend</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.http.patch(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/wit/workitems/<span class="subst">$&#123;parent&#125;</span>`</span>, [</span><br><span class="line">    ...childrend.map(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/relations/-&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: &#123;</span><br><span class="line">          <span class="attr">rel</span>: <span class="string">&#x27;System.LinkTypes.Related&#x27;</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseUrl&#125;</span>/wit/workItems/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">attributes</span>: &#123;</span><br><span class="line">            <span class="attr">comment</span>: <span class="string">&#x27;adding another task&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],  &#123;</span><br><span class="line">      <span class="attr">headers</span>: <span class="keyword">new</span> HttpHeaders(&#123;</span><br><span class="line">          <span class="attr">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="built_in">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">          <span class="string">&#x27;api-version&#x27;</span>: <span class="built_in">this</span>.apiVersion,</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 API 文件中有提供更多範例可以參考</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/?view=azure-devops-rest-6.0">azure-devops-rest</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;當網路速度慢遇上要大量開  Work Items 時，就會有一種想下班的念頭，還好 Azure DevOps 有提供 API 可以讓我們用程式來建立 Work Items，雖然剛開始有點小麻煩，但弄通後就還好，所以這邊就筆記一下起手式&lt;/p&gt;</summary>
    
    
    
    <category term="Azure DevOps" scheme="http://blog.kevinyang.net/categories/Azure-DevOps/"/>
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Azure-DevOps/Angular/"/>
    
    
    <category term="Azure DevOps" scheme="http://blog.kevinyang.net/tags/Azure-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>[Teams] 關於 MessageCard Action 的一些事情</title>
    <link href="http://blog.kevinyang.net/2021/03/26/teams-messagecard-action-action/"/>
    <id>http://blog.kevinyang.net/2021/03/26/teams-messagecard-action-action/</id>
    <published>2021-03-26T23:48:54.000Z</published>
    <updated>2021-09-12T07:39:41.084Z</updated>
    
    <content type="html"><![CDATA[<p>Teams 可以讓使用者透過 Incoming Webhooks 的方式將資訊以 JSON 的方式傳入並用卡片的形式呈現，而卡片的內容也可以定義一些動作讓使用者做操作，例如收集資訊並回傳到指定的服務去(API)，但到底要怎麼傳，跟怎麼驗證，這部分的文件被藏在我認為還蠻角落的地方，透過這篇筆記稍微整理一下</p><span id="more"></span><blockquote><p>注意: 這邊所紀錄的內容的資料來源是 <code>Legacy actionable message card reference </code></p></blockquote><h1 id="MessageCard"><a class="header-anchor" href="#MessageCard"> </a>MessageCard</h1><p>挑幾個跟 Action 比較有關的欄位出來</p><ul><li><code>correlationId</code> : log 使用，在 HttpPost 時，會以 <code>Card-Correlation-Id</code> 紀錄，應和 <code>Action-Request-Id</code> 一同被紀錄起來供後續使用，<code>Action-Request-Id</code> 由 Office 365 產生，可以用來查使用者的執行哪一個動作</li><li><code>potentialAction</code> ：希望操作的動作會定義在這一個區塊，數量最多能放 4 個動作。在 Section 裡也可以放 <code>potentialAction</code></li></ul><h2 id="Action-行為"><a class="header-anchor" href="#Action-行為"> </a>Action 行為</h2><p>Action 可以有下列幾種行為模式</p><ul><li>OpenUri</li><li>HttpPost</li><li>ActionCard</li><li>InvokeAddInCommand</li></ul><h3 id="OpenUri"><a class="header-anchor" href="#OpenUri"> </a>OpenUri</h3><p><strong>功能</strong>: 打開網址或 APP</p><p><strong>建議</strong>:</p><ol><li>使用此方式提供使用者另開網站，而非將連結放到主文內</li><li>至少附上一個連結，讓使用者可以看到更多資訊</li><li>應為 <code>potentialAction</code> 的最後一個動作</li></ol><p><strong>格式</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;OpenUri&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Learn More&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;targets&quot;</span>: [&#123;</span><br><span class="line">        <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://docs.microsoft.com/outlook/actionable-messages&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>name</code> : 按鈕顯示名稱，使用動詞命名</p></li><li><p><code>targets</code>: 可以針對使用者設備的作業系統版本提供對應的連結</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;targets&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;default&quot;</span>, <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://yammer.com/.../123&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;iOS&quot;</span>, <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;yammer://u/123&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;android&quot;</span>, <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;yammer://u/123&quot;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h3 id="HttpPost"><a class="header-anchor" href="#HttpPost"> </a>HttpPost</h3><p>這一個應該會是最常用的行為，基本上就是做一個 API 呼叫</p><p><strong>功能</strong>: 呼叫外部 web 服務</p><p><strong>驗證</strong>: 如需驗證發送者的身份，除了可以在 URL 後面掛 token 驗證外，也可以參考此<a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/security-requirements#verifying-that-requests-come-from-microsoft">文件</a>內的方式</p><p><strong>格式</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Save&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://docs.microsoft.com/outlook/actionable-messages&quot;</span></span><br><span class="line">    <span class="string">&quot;body&quot;</span> : <span class="string">&quot;payload content&quot;</span></span><br><span class="line">    <span class="string">&quot;headers&quot;</span>: [...],</span><br><span class="line">    <span class="attr">&quot;bodyContentType&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>body</strong> 是呼叫 HttpPost 要傳的內容，下面會介紹搭配 <code>ActionCard</code> 的方式做出動態收集資料的行為</li><li><strong>bodyContentType</strong>: 預設為 <code>application/json</code> ，另外一個有效的設定值為 <code>application/x-www-form-urlencoded</code></li><li><strong>headers</strong>: 就字面上意思，想要在發 HttpPost 時放在 header 區塊的資訊</li></ul><p><strong>執行過程</strong>: 整個 <code>HttpPost</code> 的發送行為會由微軟代為發送，並不是由 Client 端直接發送，這也是為什麼在驗證篇的文件中，提到可以驗證 http requests 是否來自微軟</p><h3 id="被呼叫服務的回應方式"><a class="header-anchor" href="#被呼叫服務的回應方式"> </a>被呼叫服務的回應方式</h3><p>當被呼叫的服務執行完動作時，需要給 Teams 一些回應，以下有幾點文件上提到的小叮嚀</p><ul><li>Response 的 header 中，要加入 <code>CARD-ACTION-STATUS</code>，而資訊應清晰，不需要加呼叫者的名字或是執行時間，因為這部分的資訊會被自動加上</li><li>Refresh Card: 可回傳一個完整的 MessageCard 內容來更新使用者發出動作的同一卡片資訊，例如移除原本卡片中的動作項目，或是更新同張卡片上的資訊內容<ul><li>重點: 在 Header 加入 <code>CARD-UPDATE-IN-BODY: TRUE</code></li><li>不要使用 Refresh Cards 做精靈式回答的工作</li><li>至少包含一個 <code>OpenUri</code> 連結回原本系統</li></ul></li></ul><h3 id="ActionCard"><a class="header-anchor" href="#ActionCard"> </a>ActionCard</h3><p><img src="trello-example-expanded-explained.png" alt="trello-example-expanded-explained"></p><p><strong>功能</strong>: 收集使用者輸入資訊，收集到的資訊可用在 <code>HttpPost</code> 和 <code>OpenUri</code></p><p><strong>格式</strong>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ActionCard&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;TextInput&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;comment&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;isRequired&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;isMultiline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Action&#x27;s name prop.&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://yammer.com/comment?postId=123&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;body&quot;</span>: <span class="string">&quot;comment=&#123;&#123;comment.value&#125;&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>isRequried</code> : 欄位是否必填</li><li><code>value</code>: 預設值</li><li>line 17: 使用大括弧包住變數，可使用變數的來源為 <code>inputs</code> 區塊定義的物件並以 input 的 <code>id</code> 為變數名稱，格式 <code>&#123;&#123;<id of input>.value&#125;&#125;</code></li></ul><p>可使用的輸入欄位型態有</p><ul><li><p>TextInput</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;TextInput&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;comment&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;isMultiline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;maxLength&quot;</span>: <span class="number">250</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>isMultiline</code> : 為 true 時會顯示 textarea, 為 false 時會顯示 input</li><li><code>maxLength</code>: 設定可輸入文字的上限值</li></ul></li><li><p>DateInput</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;DateInput&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;dueDate&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;includeTime&quot;</span>: <span class="literal">false</span></span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>includeTime</code> : 是否要顯示時間設定</li></ul></li><li><p>MultichoiceInput</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;MultichoiceInput&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pick an option&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;isMultiSelect&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;style&quot;</span>: <span class="string">&quot;expanded&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;choices&quot;</span>: [</span><br><span class="line">    &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;Choice 1&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;1&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;Choice 2&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;2&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;Choice 3&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;3&quot;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>isMultiSelect</code>: 設定為 <code>true</code> 時，會顯示成 checkbox ，當設定為 <code>false</code> 時，會顯示成 radio 。預設值為 `false</li><li><code>style</code>: 當 <code>isMultiSelect</code> 為 false 時且 style 設定為 <code>expanded</code> ，畫面會盡量將選項全部顯示。預設值為 <code>normal</code></li></ul></li></ul><h3 id="InvokeAddInCommand"><a class="header-anchor" href="#InvokeAddInCommand"> </a>InvokeAddInCommand</h3><p>這行為目前看起來只能用在 Offie Add-in，暫時不研究，Reference: <a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference?WT.mc_id=DOP-MVP-5002680#invokeaddincommand-action">InvokeAddInCommand action</a></p><h2 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h2><p>範例一</p><p><img src="trello-example-explained.png" alt="trello-example-explained"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;summary&quot;</span>: <span class="string">&quot;Card \&quot;Test card\&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;themeColor&quot;</span>: <span class="string">&quot;0078D7&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Card created: \&quot;Name of card\&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sections&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span>: <span class="string">&quot;David Claux&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span>: <span class="string">&quot;9/13/2016, 3:34pm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span>: <span class="string">&quot;https://connectorsdemo.azurewebsites.net/images/MSC12_Oscar_002.jpg&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;facts&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Board:&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;Name of board&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;List:&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;Name of list&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Assigned to:&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;(none)&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Due date:&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;(none)&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;potentialAction&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ActionCard&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Set due date&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;DateInput&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;dueDate&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Select a date&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ActionCard&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Move&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;MultichoiceInput&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;move&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Pick a list&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;choices&quot;</span>: [</span><br><span class="line">            &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;List 1&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;l1&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">&quot;display&quot;</span>: <span class="string">&quot;List 2&quot;</span>, <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;l2&quot;</span> &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;ActionCard&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Add a comment&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;TextInput&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;comment&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;isMultiline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Enter your comment&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;actions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;HttpPOST&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;@type&quot;</span>: <span class="string">&quot;OpenUri&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;View in Trello&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;targets&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;os&quot;</span>: <span class="string">&quot;default&quot;</span>, <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://...&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>範例二</p><p><img src="twitter-example-explained.png" alt="twitter-example-explained"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;themeColor&quot;</span>: <span class="string">&quot;0078D7&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;sections&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span>: <span class="string">&quot;**Elon Musk**&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span>: <span class="string">&quot;@elonmusk - 9/12/2016 at 5:33pm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span>: <span class="string">&quot;https://pbs.twimg.com/profile_images/782474226020200448/zDo-gAo0.jpg&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityText&quot;</span>: <span class="string">&quot;Climate change explained in comic book form by xkcd xkcd.com/1732&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span>: <span class="string">&quot;**Mark Knopfler**&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span>: <span class="string">&quot;@MarkKnopfler - 9/12/2016 at 1:12pm&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span>: <span class="string">&quot;https://pbs.twimg.com/profile_images/378800000221985528/b2ebfafca6fd7b565fdf3bf4ccdb4dc9.jpeg&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activityText&quot;</span>: <span class="string">&quot;Mark Knopfler features on B.B King&#x27;s all-star album of Blues greats, released on this day in 2005...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="驗證"><a class="header-anchor" href="#驗證"> </a>驗證</h1><ul><li><p>Action URL 必須是 HTTPS</p></li><li><p>可以驗證 hearer token 是否合法</p></li><li><p>可驗證 <code>aud</code> 是否與目前 service base URL 相符</p></li><li><p>可使用 URL 掛載 token 的方式作驗證</p></li><li><p>bearer token 包含了 AAD Office 365 User 資訊</p></li></ul><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference?WT.mc_id=DOP-MVP-5002680">Legacy actionable message card reference</a></li><li><a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/security-requirements?WT.mc_id=DOP-MVP-5002680">Security requirements for actionable messages in Office 365</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Teams 可以讓使用者透過 Incoming Webhooks 的方式將資訊以 JSON 的方式傳入並用卡片的形式呈現，而卡片的內容也可以定義一些動作讓使用者做操作，例如收集資訊並回傳到指定的服務去(API)，但到底要怎麼傳，跟怎麼驗證，這部分的文件被藏在我認為還蠻角落的地方，透過這篇筆記稍微整理一下&lt;/p&gt;</summary>
    
    
    
    <category term="Teams" scheme="http://blog.kevinyang.net/categories/Teams/"/>
    
    
    <category term="Teams" scheme="http://blog.kevinyang.net/tags/Teams/"/>
    
  </entry>
  
  <entry>
    <title>[Teams] 訊息傳遞 - webhooks and connectors</title>
    <link href="http://blog.kevinyang.net/2021/03/20/teams-and-messages/"/>
    <id>http://blog.kevinyang.net/2021/03/20/teams-and-messages/</id>
    <published>2021-03-20T01:44:43.000Z</published>
    <updated>2021-09-12T07:39:41.076Z</updated>
    
    <content type="html"><![CDATA[<p>Teams 可透過 webhook and connectors 的方式來做訊息的交換，但對於每一種的使用及限制真的很不熟，所以將透過此筆記來釐清其中的關係</p><span id="more"></span><p>Teams 的應用程式中可以看到**連接器(connector)**的項目可以新增，其中有很多與第三方服務的連接器，而 <code>Incoming WebHook</code> 是我們一定要加入的功能，畢竟想要傳訊息到 Teams，這一條路是要開通的</p><h1 id="Webhooks-and-Connectors"><a class="header-anchor" href="#Webhooks-and-Connectors"> </a>Webhooks and Connectors</h1><p>根據官網文件指出，webhooks and connectors 有以下四種</p><h2 id="Outgoing-webhooks"><a class="header-anchor" href="#Outgoing-webhooks"> </a>Outgoing webhooks</h2><p>使用者可以透過 <code>Outgoing webhooks</code> 送 request 到自己設定的服務，並取回相對應的回應。以下重點整理</p><ul><li><p><strong>Scoped configuration</strong>: scoped on a team-by-team basis</p></li><li><p><strong>Reacive messaging</strong>: 透過 <code>@mentioned</code> 的方式啟動 <code>Outgoing webooks</code></p></li><li><p>被呼叫的服務只有 5 秒鐘可以回應</p></li><li><p><strong>Standard HTTP message exchange</strong>: 回傳的訊息會加在原本的訊息下 (as reply)</p></li><li><p>可回傳 message, 例如 單純文字或卡片</p></li><li><p>不能被包在 Teams app 內</p></li><li><p>適用情境特地的團隊工作流程，但不適用於資料量比較大的事件上，因為有回應時間上的限制</p></li><li><p>運作方式跟寫 bots 很像，但不一定要使用 Bot Framework</p></li><li><p><strong>Litmited Microsoft Teams API Message support</strong>: messages send to web service, but don’t have access to APIs like list of chnnels or the channel roster in team</p></li><li><p>註冊 Outgoing Webhooks 的地方</p><ul><li><p>在團隊 -&gt; 管理團隊 -&gt; 應用程式</p><p><img src="SNAGHTML1767ab8d.PNG" alt="img"></p><p><img src="image-20210320104530920.png" alt="image-20210320104530920"></p><p>建立完成後，會取得一個安全性金鑰，需要之後用來驗證資訊安全性使用，更多細節請參閱下一點</p></li><li><p>安全性</p><p><img src="image-20210320104740607.png" alt="image-20210320104740607"></p><p><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-outgoing-webhook#2-create-a-method-to-verify-the-outgoing-webhook-hmac-token">文件</a></p><p><a href="https://youtu.be/EqodWkS5PYM?t=358">Live Demo</a></p></li><li><p>參考文件</p><ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-outgoing-webhook">Create an outgoing webhook</a></li></ul></li></ul></li></ul><h2 id="Connectors"><a class="header-anchor" href="#Connectors"> </a>Connectors</h2><p>允許使用者訂閱服務的通知訊息</p><ul><li>會有對應的 https 網址</li></ul><h2 id="Incoming-webhooks"><a class="header-anchor" href="#Incoming-webhooks"> </a>Incoming webhooks</h2><ul><li><p>最單純的 Connector</p></li><li><p>Incoming webhooks 是根據團隊開放使用 (新增應用程式)</p></li><li><p>Independent HTTPs messaging support: present clear &amp; consisten messages with cards</p></li><li><p>Secure resource definition: message included as JSON paylods; prevents malicious code injetion</p></li><li><p>Actionable messaging support: send messages as text-based or rich cards</p></li><li><p>Markdown Support，不支援 HTML 語法</p></li><li><p>範例回應樣式</p><p><img src="image-20210320110740485.png" alt="image-20210320110740485"></p><p><img src="image-20210320110803618.png" alt="image-20210320110803618"></p></li><li><p>參考資料</p><ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using">Sending messages to connectors and webhooks</a></li></ul></li></ul><h2 id="Office-365-Connectors"><a class="header-anchor" href="#Office-365-Connectors"> </a>Office 365 Connectors</h2><ul><li>可以被打包上架的 Connectors</li><li>可以有自己的設定頁面</li><li>messages type: Office 365 Connector cards</li><li>可以收集安裝 Connectors 的設定資料以供後續發訊息使用</li><li>參考資料<ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-creating">Creating Office 365 Connectors for Microsoft Teams</a></li></ul></li></ul><h2 id="Rate-limiting-for-Connectors"><a class="header-anchor" href="#Rate-limiting-for-Connectors"> </a>Rate limiting for Connectors</h2><table><thead><tr><th style="text-align:left">Time (seconds)</th><th style="text-align:left">Maximum allowed requests</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left">60</td></tr><tr><td style="text-align:left">3600</td><td style="text-align:left">100</td></tr><tr><td style="text-align:left">7200</td><td style="text-align:left">150</td></tr><tr><td style="text-align:left">86400</td><td style="text-align:left">1800</td></tr></tbody></table><ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/rate-limit#best-practices">Best Practice Doc</a></li></ul><h1 id="Cards"><a class="header-anchor" href="#Cards"> </a>Cards</h1><p>卡片訊息在 Teams 內很常見，而 Adaptive cards 算是比較新的卡片格式，但在 Connectors、Bots、Messaging extension 下分別有些限制</p><ul><li>Adaptive cards in incoming webhooks 的限制<ul><li>All native adaptive card schema elements, except <code>Action.Submit</code>, are fully supported.</li><li>The supported actions are <a href="https://adaptivecards.io/explorer/Action.OpenUrl.html"><strong>Action.OpenURL</strong></a>, <a href="https://adaptivecards.io/explorer/Action.ShowCard.html"><strong>Action.ShowCard</strong></a>, and <a href="https://adaptivecards.io/explorer/Action.ToggleVisibility.html"><strong>Action.ToggleVisibility</strong></a>.</li></ul></li><li>更多卡片類型及限制的說明文件: <a href="https://docs.microsoft.com/zh-tw/microsoftteams/platform/task-modules-and-cards/cards/cards-reference#adaptive-card">網址</a></li></ul><p>目前的狀態: Adaptive Cards 遇上 Incoming webhooks 的支援度基本上是不能用的，支援完整度最好的是 Bots in Teams，只能透過 message 附件的方式包進去，可是這樣子的作法畫面就很醜 (<a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using#the-flow-for-sending-adaptive-cards-via-an-incoming-webhook-is-as-follows">範例</a>)，可惜</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/what-are-webhooks-and-connectors">文件: What are webhooks and connectors?</a></li><li><a href="https://www.youtube.com/watch?v=EqodWkS5PYM">影片: Connect web services to Microsoft Teams with webhooks and Office 3655 Connectors</a></li><li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/task-modules-and-cards/what-are-cards">文件: Cards</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Teams 可透過 webhook and connectors 的方式來做訊息的交換，但對於每一種的使用及限制真的很不熟，所以將透過此筆記來釐清其中的關係&lt;/p&gt;</summary>
    
    
    
    <category term="Teams" scheme="http://blog.kevinyang.net/categories/Teams/"/>
    
    
    <category term="Teams" scheme="http://blog.kevinyang.net/tags/Teams/"/>
    
  </entry>
  
  <entry>
    <title>[Azure DevOps] Pipeline 建置時跨 Repo 情境下該如何處理呢?</title>
    <link href="http://blog.kevinyang.net/2021/03/17/azure-devops-build-pipeline-resource/"/>
    <id>http://blog.kevinyang.net/2021/03/17/azure-devops-build-pipeline-resource/</id>
    <published>2021-03-17T14:51:35.000Z</published>
    <updated>2021-09-12T07:39:41.076Z</updated>
    
    <content type="html"><![CDATA[<p>在工作上遇到一個情況就是一個系統的前後端是分在兩個 Repository 的，但前端的檔案需要被包進後端的程式中做後續的發佈，就在思考該如何處理這個問題，終於想出一個還不錯簡單的方式</p><span id="more"></span><p>在 Pipeline 建置時，可以將打包出來的結果 Publish 成 Pipeline Artifact，yaml 的寫法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">artifactName:</span> <span class="string">&#x27;ngApp&#x27;</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)/dist/front-website&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>artifactName</code> : 打包出來的檔案名稱</li><li><code>PathtoPublish</code>：要打包的檔案資料夾位置</li></ul><p>到後端的 Repository 的 Pipeline 的 Task 中，可以利用 <code>Download Pipeline Artifact</code> 的 Task 來下載某一個專案下的某一個 Pipeline 發佈的 Artifact，這一個任務可以將編譯建置後的結果跨專案的使用，真的很方便</p><p><img src="image-20210317230842327.png" alt="image-20210317230842327"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadPipelineArtifact@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download Pipeline Artifact&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">buildType:</span> <span class="string">specific</span></span><br><span class="line">    <span class="attr">project:</span> <span class="string">&#x27;&lt;project-id&gt;&#x27;</span></span><br><span class="line">    <span class="attr">definition:</span> <span class="number">13</span></span><br><span class="line">    <span class="attr">specificBuildWithTriggering:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allowPartiallySucceededBuilds:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">artifactName:</span> <span class="string">ngAPP</span></span><br><span class="line">    <span class="attr">targetPath:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)/backend/wwwroot&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>targetPath</code> 下載目標路徑</li></ul><p>由於可能會有先後順序的問題，這時候也可以搭配 Triggers 中的 <code>Build completion </code> 來做到 Pipeline 間的連動</p><p><img src="image-20210317231019398.png" alt="image-20210317231019398"></p><p>途中的設定執行的順序是，當 <code>FrontCode</code> Pipeline 完成後會觸發執行 <code>PipelineTest</code> 的 Pipeline 。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在工作上遇到一個情況就是一個系統的前後端是分在兩個 Repository 的，但前端的檔案需要被包進後端的程式中做後續的發佈，就在思考該如何處理這個問題，終於想出一個還不錯簡單的方式&lt;/p&gt;</summary>
    
    
    
    <category term="Azure DevOps" scheme="http://blog.kevinyang.net/categories/Azure-DevOps/"/>
    
    
    <category term="Azure DevOps" scheme="http://blog.kevinyang.net/tags/Azure-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>[Rust] Rust 學習筆記 - 基本概念篇</title>
    <link href="http://blog.kevinyang.net/2021/02/23/rust-note-2/"/>
    <id>http://blog.kevinyang.net/2021/02/23/rust-note-2/</id>
    <published>2021-02-23T02:20:10.000Z</published>
    <updated>2021-09-12T07:39:41.076Z</updated>
    
    <content type="html"><![CDATA[<p>繼上篇猜數字的練習範例中，大致上可以感受到 Rust 這語言的個性，但還是得知道語言的型別、語法及流程控制的方法，所以這邊筆記會針對 <a href="https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html">Command Programming Concepts 章節</a> 的內容擷取我覺得需要記下來的重點</p><span id="more"></span><h1 id="Variables-and-Mutability"><a class="header-anchor" href="#Variables-and-Mutability"> </a>Variables and Mutability</h1><ul><li><p>變數宣告後，預設皆為不可改變的狀態 (Immutable)，如果需要一個可以被改變的變數，必須加上 <code>mut</code> 的關鍵字</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// immutable</span></span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// 這行會出錯</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> b = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;can be changed&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>變數的型別必須要一致，直到重新被宣告 <a href="https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#shadowing">(Shadowing)</a></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> a = a.len(); </span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> b = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line">b = b.len(); <span class="comment">// 型別不一致，會發生錯誤</span></span><br></pre></td></tr></table></figure></li><li><p>variables 與 constants 的差異有以下幾點</p><ul><li>constants 不能使用 <code>mut</code></li><li>constants 使用 <code>const</code> 宣告而且必須指定型別，範例: <code>const MAX_POINTS: u32 = 100_000;</code></li><li>constants 只能被宣告一次</li></ul></li></ul><h1 id="Data-Types"><a class="header-anchor" href="#Data-Types"> </a>Data Types</h1><h2 id="Scalar-Type"><a class="header-anchor" href="#Scalar-Type"> </a>Scalar Type</h2><p>Rust 的標準型別 (scalar type) 有四種: <code>integers</code>、<code>floating-point numbers</code>、 <code>Booleans</code>、<code>characters</code>。</p><h3 id="Integer"><a class="header-anchor" href="#Integer"> </a>Integer</h3><ul><li><p>分為 signed (<code>i</code>) 和 unsigned (<code>u</code>)</p></li><li><p>有 8-bit、16-bit、32-bit、64-bit、128-bit、arch 長度</p></li><li><p>8 ~ 128 bit 的範圍算法說明如下</p><blockquote><p>Each signed variant can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive, where <em>n</em> is the number of bits that variant uses. So an <code>i8</code> can store numbers from -(27) to 27 - 1, which equals -128 to 127. Unsigned variants can store numbers from 0 to 2n - 1, so a <code>u8</code> can store numbers from 0 to 28 - 1, which equals 0 to 255.</p><p>Additionally, the <code>isize</code> and <code>usize</code> types depend on the kind of computer your program is running on: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.</p></blockquote></li><li><p>可以使 <code>_</code> 來增加數字的閱讀性，例如: <code>100_000</code> 等同於 <code>100000</code></p></li></ul><h3 id="floating-point"><a class="header-anchor" href="#floating-point"> </a>floating-point</h3><ul><li><code>f32</code> 和 <code>f64</code> 兩種 floating-point type</li><li>根據 <code>IEEE-754</code>  標準 (<a href="https://zh.wikipedia.org/wiki/IEEE_754">wiki</a>)</li></ul><h3 id="Boolean"><a class="header-anchor" href="#Boolean"> </a>Boolean</h3><ul><li><p>如一般使用 <code>true</code> 和 <code>false</code> 兩種結果，大小為 <code>1 byte</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> f: <span class="built_in">bool</span> = <span class="literal">false</span>; <span class="comment">// with explicit type annotation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Character"><a class="header-anchor" href="#Character"> </a>Character</h3><ul><li><p>基本文字型使用雙引號包起來，而 <code>character</code> 使用單引號，跟 C# 一樣</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> z = <span class="string">&#x27;ℤ&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> heart_eyed_cat = &#x27;😻&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Compound-Types"><a class="header-anchor" href="#Compound-Types"> </a>Compound Types</h2><h3 id="Tuple"><a class="header-anchor" href="#Tuple"> </a>Tuple</h3><ul><li><p>宣告方式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tup1 = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> tup2: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解構 tuple</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tup = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接使用 index 讀取 tuple</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> five_hundred = x.<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> six_point_four = x.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> one = x.<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="Array"><a class="header-anchor" href="#Array"> </a>Array</h3><ul><li><p>宣告方式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>; <span class="number">5</span>]; <span class="comment">// [1,1,1,1,1]</span></span><br></pre></td></tr></table></figure></li><li><p>with 型別及長度宣告</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: [<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure></li><li><p>從 0 開始，超過陣列長度會造成錯誤</p></li></ul><h1 id="Functions"><a class="header-anchor" href="#Functions"> </a>Functions</h1><ul><li><p>宣告方式: <code>fn</code></p></li><li><p>命名方式: <code>snake case</code>，範例: <code>fn another_function()&#123; &#125;</code></p></li><li><p>Function parameters 的設定方式</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    another_function(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">another_function</span></span>(x: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Expression in Function</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y = &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>&#123; &#125;</code> 來建立一個新的 scope</li><li>line 6: 沒有分號結尾，視為 <code>expression</code> 會被 return</li></ul></li><li><p>Function 需回傳 <code>values</code> 或是 <code>expressions</code>，沒有 <code>void</code> 的概念</p></li></ul><h1 id="Comments"><a class="header-anchor" href="#Comments"> </a>Comments</h1><ul><li><p>註解符號為 : <code>//</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// I’m feeling lucky today</span></span><br><span class="line">    <span class="keyword">let</span> lucky_number = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Control-Flow"><a class="header-anchor" href="#Control-Flow"> </a>Control Flow</h1><p>流程控制有 <code>if</code> 和 <code>loops</code> 兩種方法</p><h2 id="if"><a class="header-anchor" href="#if"> </a>if</h2><ul><li><p>語法，<code>if</code> 後面的條件不需要使用 <code>( )</code> 包起來</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有 <code>else if</code> 這種東西</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 4&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 3&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 2&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is not divisible by 4, 3, or 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以搭配 <code>let</code> 使用，但回傳的型別必須一致</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of number is: &#123;&#125;&quot;</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="loops"><a class="header-anchor" href="#loops"> </a>loops</h2><p>有三種 loops 的方式: <code>loop</code>、<code>while</code>、<code>for</code></p><ul><li><p>loop</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The result is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> number = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);</span><br><span class="line"></span><br><span class="line">        number -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;LIFTOFF!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> a.iter() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>Rust 沒有像 C# 擁有很多不同型別或是程式語法，但這些都算是基本需要掌握的，如果有地方理解錯誤也請讓我知道，感謝</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;繼上篇猜數字的練習範例中，大致上可以感受到 Rust 這語言的個性，但還是得知道語言的型別、語法及流程控制的方法，所以這邊筆記會針對 &lt;a href=&quot;https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html&quot;&gt;Command Programming Concepts 章節&lt;/a&gt; 的內容擷取我覺得需要記下來的重點&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="http://blog.kevinyang.net/categories/Rust/"/>
    
    
    <category term="Rust" scheme="http://blog.kevinyang.net/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>[Rust] Rust 學習筆記 - 跟著文件寫猜數字</title>
    <link href="http://blog.kevinyang.net/2021/02/19/rust-note-1/"/>
    <id>http://blog.kevinyang.net/2021/02/19/rust-note-1/</id>
    <published>2021-02-19T03:51:01.000Z</published>
    <updated>2021-09-12T07:39:41.072Z</updated>
    
    <content type="html"><![CDATA[<p>Rust 這語言關注他有一段時間，但都沒有真正的動手寫看看，趁年後還沒那麼多事情時，來學習一下，或許日後可以用他來寫 web assembly</p><span id="more"></span><h1 id="環境安裝"><a class="header-anchor" href="#環境安裝"> </a>環境安裝</h1><p>Rust 的執行環境基本上就依<a href="https://www.rust-lang.org/zh-TW/learn/get-started">官網</a>的安裝步驟做就可以了，如果是 Windows 的環境，當在執行 <code>cargo build</code> 時，有可能會出現 <code>link.exe</code> 找不到的錯誤訊息，通常這個問題跟電腦環境沒裝 <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">C++ Build Tools</a> 有關</p><p>開發工具的部分，選擇性還蠻多的，以我目前的環境，是直接選擇 VSCode + Rust 擴充套件進行學習環境</p><h1 id="建立新專案"><a class="header-anchor" href="#建立新專案"> </a>建立新專案</h1><p>安裝完 Rust 後，會有 <code>cargo</code> 的命令可以使用，跟 Angular CLI 的 <code>ng</code> 類似，可以用他來打包、開發、等工作</p><p><img src="image-20210219120226176.png" alt="image-20210219120226176"></p><p>建立專案的指令是 <code>cargo new &lt;project_name&gt;</code>，建立完成後專案資料夾下會有這些檔案</p><p><img src="image-20210219120327131.png" alt="image-20210219120327131"></p><ul><li><code>Cargo.toml</code> : 用來記載專案資訊，相依套件等資訊，類似 <code>package.json</code></li><li><code>Cargo.lock</code>: 用來紀錄套件安裝等資訊，類似 <code>package-lock.json</code></li><li><code>target</code> 資料夾：建置後(<code>cargo build</code>) 的輸出資料夾</li><li><code>src</code> 資料夾：程式放置位置</li><li><code>src/main.rs</code> : 主要進入點</li></ul><p>想執行程式時，使用 <code>cargo run</code> 的指令就可以了</p><h1 id="猜數字-官方範例"><a class="header-anchor" href="#猜數字-官方範例"> </a>猜數字(官方範例)</h1><ul><li><a href="https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html">文件位置</a></li></ul><p>當打開 <code>main.rs</code> 檔案，裡面只有一個 function ，這個是程式的初始執行的方法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要從 console 上接收到使用者輸入得資料時，就要使用到內建的 <code>io</code> 方法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io; <span class="comment">// 引用 package, library, namespace (就那個意思)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Guess the number!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">    io::stdin()</span><br><span class="line">        .read_line(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .expect(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>line 8: 建立一個可以被變更的文字型態的變數，</p><ul><li>使用 <code>mut</code> 關鍵字設定變數為可變更的</li></ul></li><li><p>line 10 ~ 11: 接收使用者輸入得資料，並存放到 <code>guess</code> 變數中</p><ul><li>使用 <code>&amp;</code> 建立一個 reference</li></ul></li><li><p>line 12: 需處理當 <code>read_line</code> 失敗時需要回傳什麼結果，這是 Rust 處理 Exception 的方式，可以思考成這樣</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> guess;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   guess = Console.Readline();   </span><br><span class="line">&#125; catch &#123;</span><br><span class="line">   guess = <span class="string">&quot;Failed to read line&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>必須處理 Error 的部分，不然 compiler 會跟你抱怨</p><p><img src="image-20210219135909589.png" alt="image-20210219135909589"></p></li></ul></li><li><p>line 14: 使用 <code>&#123;&#125;</code> 來空出變數要顯示的位置，當有多個時，會依序顯示</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x: &#123;&#125;, y: &#123;&#125;&quot;</span>, x, y);</span><br></pre></td></tr></table></figure></li></ul><h2 id="引用套件"><a class="header-anchor" href="#引用套件"> </a>引用套件</h2><p>使用其他相依套件的方式很簡單，就在 <code>Cargo.toml</code> 中將套件名稱與版本設定上去即可，類似 npm 的概念，rust 也有自己的 package 管理機制，可以上 <a href="https://crates.io/">crates.io</a> 搜尋套件，&lt;在這練習範例中，使用了 <code>rand</code> 這一個 package</p><p><img src="image-20210219140316275.png" alt="image-20210219140316275"></p><p>搜尋後再右邊有 install 的方式，只要複製貼到 <code>Cargo.toml</code> 的 <code>dependencies</code> 下即可</p><h2 id="使用套件"><a class="header-anchor" href="#使用套件"> </a>使用套件</h2><p>在 <code>main.rs</code>  裡要建立一個介於 1~ 100 的亂數，寫法如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> secret_number = rand::thread_rng().gen_range(<span class="number">1</span>..<span class="number">100</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><ul><li><a href="https://docs.rs/rand/0.8.3/rand/trait.Rng.html">gen_range API</a></li></ul><p>※備註一，Rust  不喜歡沒有使用的東西留在程式碼內，如果有那種沒使用的變數發生時，編譯時會出現下面的警示訊息</p><p><img src="image-20210219141201642.png" alt="image-20210219141201642"></p><h2 id="比較數字"><a class="header-anchor" href="#比較數字"> </a>比較數字</h2><p>Rust 有內建比較數字的方法 <code>std::cmp::Ordering;</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">let</span> secret_number = rand::thread_rng().gen_range(<span class="number">1</span>..<span class="number">100</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">match</span> guess.cmp(&amp;secret_number) &#123;</span><br><span class="line">        Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">        Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">        Ordering::Equal =&gt; <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>match</code> : Pattern Matching 的關鍵字 (很常出現的一種寫法)</p></li><li><p><code>secret_number</code> 為數字型，<code>guess</code> 為文字型，line 10 的比較會跳出錯誤訊息</p><p><img src="image-20210219141553593.png" alt="image-20210219141553593"></p></li></ul><p>基於上面的原因，我們需要將 guess 轉換成數字型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> guess: <span class="built_in">u32</span> = guess.trim().parse().expect(<span class="string">&quot;Please type a number!&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>trim()</code> 會將 <code>\n</code> 或是空白給清除掉</p></li><li><p><code>parse()</code> 將文字轉換成數字，由於宣告變數時，有指定型別, <code>: u32</code> ，所以會轉換成 <code>u32</code> 型別</p></li><li><p><code>expect(....)</code>，當發生 exception 時，會顯示裡面的文字</p><p><img src="image-20210219142058900.png" alt="image-20210219142058900"></p></li></ul><h2 id="持續進行遊戲直到猜對"><a class="header-anchor" href="#持續進行遊戲直到猜對"> </a>持續進行遊戲直到猜對</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">       io::stdin()</span><br><span class="line">           .read_line(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">           .expect(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> guess: <span class="built_in">u32</span> = guess.trim().parse().expect(<span class="string">&quot;Please type a number!&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">match</span> guess.cmp(&amp;secret_number) &#123;</span><br><span class="line">           Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">           Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">           Ordering::Equal =&gt; &#123;</span><br><span class="line">               <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>line 1：新增 loop 迴圈</li><li>line 17: 猜對時跳出迴圈</li></ul><p>上面的寫法針對 <code>line 12</code> 輸入不是可轉換成數字的情況下，還是會被迫結束程式，所以要修正一下寫法</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> guess: <span class="built_in">u32</span> = <span class="keyword">match</span> guess.trim().parse() &#123;</span><br><span class="line">            <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>再次透過 pattern match 的方式，調整遇到 <code>Err</code> 時要做的行為，這樣就不會因為轉換失敗造成程式被強制中斷了。</p><h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1><p>到這邊是官網提供的一個算是完整的簡單範例，也可以從中觀察到 Rust 這語言的特性，自己在第一次寫時並沒有遇到太卡的地方，很多觀念都可以從其他語言延用，可以算是一個嚴謹但又不會讓你寫得很囉唆。第一印象是好的</p><p>接下來就會往更深層去瞭解這語言的其他部分，例如型別、流程控制、跟程式結構等，下篇見。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rust 這語言關注他有一段時間，但都沒有真正的動手寫看看，趁年後還沒那麼多事情時，來學習一下，或許日後可以用他來寫 web assembly&lt;/p&gt;</summary>
    
    
    
    <category term="Rust" scheme="http://blog.kevinyang.net/categories/Rust/"/>
    
    
    <category term="Rust" scheme="http://blog.kevinyang.net/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] Angular 在 VSCode Extension (Webview) 內做頁面切換</title>
    <link href="http://blog.kevinyang.net/2021/02/05/angular-vscode-extension-page-navigate/"/>
    <id>http://blog.kevinyang.net/2021/02/05/angular-vscode-extension-page-navigate/</id>
    <published>2021-02-05T16:22:09.000Z</published>
    <updated>2021-09-12T07:39:41.072Z</updated>
    
    <content type="html"><![CDATA[<p>繼上一篇環境基礎設定完成後，這篇先來筆記一下要如何做頁面切換，有哪些地方需要留意的</p><span id="more"></span><p>首先要知道在 VSCode Extension Webview 的環境並不是一個 web server 而是檔案，所以我們就不能使用預設的路由設定模式，而必須改為 hash 模式 (<code>HashLocationStrategy</code>)，設定方式如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> RouterModule.forRoot(routes, &#123;</span><br><span class="line">      <span class="attr">useHash</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>在到 <code>index.html</code> 的地方，調整 base 路徑的部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到這邊基本上 Angular 的路由就可以正常運作了</p><p>或許會問說，那 LazyLoading 的部分呢? 很抱歉，在 VSCode Extension Webview 內是不能使用的，所以 <code>loadChildren</code> 的寫法要改成這樣</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> ProductModule &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;繼上一篇環境基礎設定完成後，這篇先來筆記一下要如何做頁面切換，有哪些地方需要留意的&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] 把 Angular 網站放到 VSCode Extension 內</title>
    <link href="http://blog.kevinyang.net/2021/02/05/ng-vscode-extension-webview/"/>
    <id>http://blog.kevinyang.net/2021/02/05/ng-vscode-extension-webview/</id>
    <published>2021-02-05T13:33:51.000Z</published>
    <updated>2021-09-12T07:39:41.072Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天我分享了一個 YouTube  的影片，該影片大致上的內容是如何使用 VSCode Extension 使用 Webview API，既然可以用 webview 的方式來呈現網頁，那顯示一個 Angular App 也是很正常的事情，但環境設定上要怎麼調整呢? 這篇筆記就來整理一下</p><span id="more"></span><h1 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h1><ol><li><p>首先先建立一個 Angular 的專案 (這應該不用講要用什麼指令了吧)</p></li><li><p>打開 <code>package.json</code>，新增以下內容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;publisher&quot;</span>: <span class="string">&quot;publisher-name&quot;</span>,</span><br><span class="line"><span class="string">&quot;engines&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;vscode&quot;</span>: <span class="string">&quot;^1.53.0&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;categories&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;Other&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;activationEvents&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;onCommand:angular-webview.start&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;./dist/ext-src/extension.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;contributes&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;commands&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;angular-webview.start&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Open Webview&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;category&quot;</span>: <span class="string">&quot;CK&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;#&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>categories</code> 、<code>activationEvents</code>、<code>contributes</code> 的區塊內容請配合 VS Code Extension 開發規範做調整</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="attr">&quot;@types/vscode&quot;</span>: <span class="string">&quot;^1.53.0&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;vscode-test&quot;</span>: <span class="string">&quot;^1.5.0&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;vsce&quot;</span>: <span class="string">&quot;^1.83.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改完後記得要執行 <code>npm install</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">...</span><br><span class="line">   <span class="comment">// 修改</span></span><br><span class="line">   <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;ng build --prod --output-hashing none &amp;&amp; tsc -p tsconfig.extension.json&quot;</span>,</span><br><span class="line">   <span class="comment">// 新增指令</span></span><br><span class="line">   <span class="attr">&quot;package&quot;</span>: <span class="string">&quot;vsce package&quot;</span>,</span><br><span class="line">   <span class="attr">&quot;vscode:prepublish&quot;</span>: <span class="string">&quot;npm run build &amp;&amp; tsc -p tsconfig.extension.json&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>.vscodeignore</code> 檔案 (可根據狀況調整)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">!dist</span><br><span class="line">.vscode</span><br><span class="line">e2e</span><br><span class="line">ext-src</span><br><span class="line">node_modules</span><br><span class="line">src</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>.vscode</code> 資料夾並新增 <code>launch.json</code> 檔案</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line"><span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Run Extension&quot;</span>,</span><br><span class="line"><span class="attr">&quot;type&quot;</span>: <span class="string">&quot;extensionHost&quot;</span>,</span><br><span class="line"><span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line"><span class="attr">&quot;args&quot;</span>: [</span><br><span class="line"><span class="string">&quot;--extensionDevelopmentPath=$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;outFiles&quot;</span>: [</span><br><span class="line"><span class="string">&quot;$&#123;workspaceFolder&#125;/out/**/*.js&quot;</span></span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增 <code>ext-src</code> 資料夾，並在該資料夾下新增 <code>extension.ts</code> 檔案</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vscode <span class="keyword">from</span> <span class="string">&#x27;vscode&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Manages webview panels</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebPanel</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Track the currently panel. Only allow a single panel to exist at a time.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> currentPanel: WebPanel | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> viewType = <span class="string">&#x27;angular&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> panel: vscode.WebviewPanel;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> extensionPath: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> builtAppFolder: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> disposables: vscode.Disposable[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="title">createOrShow</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    extensionPath: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: vscode.ExtensionContext</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> column = vscode.window.activeTextEditor</span><br><span class="line">      ? vscode.window.activeTextEditor.viewColumn</span><br><span class="line">      : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a panel, show it.</span></span><br><span class="line">    <span class="comment">// Otherwise, create angular panel.</span></span><br><span class="line">    <span class="keyword">if</span> (WebPanel.currentPanel) &#123;</span><br><span class="line">      WebPanel.currentPanel.panel.reveal(column);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      WebPanel.currentPanel = <span class="keyword">new</span> WebPanel(</span><br><span class="line">        extensionPath,</span><br><span class="line">        column || vscode.ViewColumn.One,</span><br><span class="line">        context</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WebPanel.currentPanel;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    extensionPath: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    column: vscode.ViewColumn,</span></span></span><br><span class="line"><span class="params"><span class="function">    context: vscode.ExtensionContext</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.extensionPath = extensionPath;</span><br><span class="line">    <span class="built_in">this</span>.builtAppFolder = <span class="string">&#x27;dist/cklab&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create and show a new webview panel</span></span><br><span class="line">    <span class="built_in">this</span>.panel = vscode.window.createWebviewPanel(</span><br><span class="line">      WebPanel.viewType,</span><br><span class="line">      <span class="string">&#x27;My Angular Webview&#x27;</span>,</span><br><span class="line">      column,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Enable javascript in the webview</span></span><br><span class="line">        <span class="attr">enableScripts</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// And restrict the webview to only loading content from our extension&#x27;s `media` directory.</span></span><br><span class="line">        <span class="attr">localResourceRoots</span>: [</span><br><span class="line">          vscode.Uri.file(path.join(<span class="built_in">this</span>.extensionPath, <span class="built_in">this</span>.builtAppFolder)),</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the webview&#x27;s initial html content</span></span><br><span class="line">    <span class="built_in">this</span>.panel.webview.html = <span class="built_in">this</span>._getHtmlForWebview(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Listen for when the panel is disposed</span></span><br><span class="line">    <span class="comment">// This happens when the user closes the panel or when the panel is closed programatically</span></span><br><span class="line">    <span class="built_in">this</span>.panel.onDidDispose(<span class="function">() =&gt;</span> <span class="built_in">this</span>.dispose(), <span class="literal">null</span>, <span class="built_in">this</span>.disposables);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle messages from the webview</span></span><br><span class="line">    <span class="built_in">this</span>.panel.webview.onDidReceiveMessage(</span><br><span class="line">      <span class="function">(<span class="params">message: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (message.command) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;alert&#x27;</span>:</span><br><span class="line">            vscode.window.showErrorMessage(message.text);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="built_in">this</span>.disposables</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">dispose</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    WebPanel.currentPanel = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clean up our resources</span></span><br><span class="line">    <span class="built_in">this</span>.panel.dispose();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.disposables.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> x = <span class="built_in">this</span>.disposables.pop();</span><br><span class="line">      <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        x.dispose();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns html of the start page (index.html)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">_getHtmlForWebview</span>(<span class="params">context: vscode.ExtensionContext</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// path to dist folder</span></span><br><span class="line">    <span class="keyword">const</span> appDistPath = path.join(<span class="built_in">this</span>.extensionPath, <span class="built_in">this</span>.builtAppFolder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get path to index.html file from dist folder</span></span><br><span class="line">    <span class="keyword">const</span> indexPath = path.join(appDistPath, <span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read index file from file system</span></span><br><span class="line">    <span class="keyword">let</span> indexHtml = fs.readFileSync(indexPath, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Get all link prefixed by href or src</span></span><br><span class="line">    <span class="keyword">const</span> matchLinks = <span class="regexp">/(href|src)=&quot;([^&quot;]*)&quot;/g</span>;</span><br><span class="line">    <span class="comment">// 2. Transform the result of the regex into a vscode&#x27;s URI format</span></span><br><span class="line">    <span class="keyword">const</span> toUri = <span class="function">(<span class="params">_: <span class="built_in">string</span>, prefix: <span class="string">&#x27;href&#x27;</span> | <span class="string">&#x27;src&#x27;</span>, link: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// For &lt;base href=&quot;#&quot; /&gt;</span></span><br><span class="line">      <span class="keyword">if</span> (link === <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>=&quot;<span class="subst">$&#123;link&#125;</span>&quot;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// For scripts &amp; links</span></span><br><span class="line">      <span class="keyword">const</span> _path = path.join(appDistPath, link);</span><br><span class="line">      <span class="keyword">const</span> uri = vscode.Uri.file(_path);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>=&quot;<span class="subst">$&#123;<span class="built_in">this</span>.panel.webview[<span class="string">&#x27;asWebviewUri&#x27;</span>](uri)&#125;</span>&quot;`</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update the base URI tag</span></span><br><span class="line">    indexHtml = indexHtml.replace(matchLinks, toUri);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indexHtml;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) </span>&#123;</span><br><span class="line">  context.subscriptions.push(</span><br><span class="line">    vscode.commands.registerCommand(<span class="string">&#x27;angular-webview.start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      WebPanel.createOrShow(context.extensionPath, context);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this method is called when your extension is deactivated</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deactivate</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>line 49: 請根據自己 Angular 專案輸出資料夾路徑做調整</li><li>line 138: 跟著 <code>package.json</code> 的指令註冊一起調整命令名稱</li></ul></li><li><p>新增 <code>tsconfig.extension.json</code> 檔案</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;ext-src&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;.vscode/*&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>到這邊應算是完成最基本的 VS Code Extension 環境的設定，如何看是否有設定成功，可以執行以下步驟</p><ol><li><p>開 Terminal 執行 <code>npm run build</code></p></li><li><p>按 F5 進入 Debug 模式，這時候會開啟一個新的 VS Code 視窗</p></li><li><p>執行所設定的啟動指令，以這個範例來說就是 <code>CK: Open Webview</code></p><p><img src="image-20210205215343080.png" alt="image-20210205215343080"></p></li><li><p>成功後的顯示畫面</p><p><img src="image-20210205215408533.png" alt="image-20210205215408533"></p></li></ol><p>至於在 VS Code Webview 的環境下，Angular 開發上有什麼需要注意的事項，這部分就留到下一篇筆記了</p><h1 id="打包套件"><a class="header-anchor" href="#打包套件"> </a>打包套件</h1><p>如果都寫完要發布成可以安裝的擴充套件時，可以執行 <code>npm run package</code> 就會產生一個 <code>VSIX</code> 的安裝檔案</p><h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1><ul><li><a href="https://www.youtube.com/watch?v=a5DX5pQ9p5M">How to Code a VSCode Extension</a></li><li><a href="https://code.visualstudio.com/api/get-started/your-first-extension">VSCode Extension Get Started</a></li><li><a href="https://code.visualstudio.com/api/extension-guides/webview">VSCode Webview API</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;前幾天我分享了一個 YouTube  的影片，該影片大致上的內容是如何使用 VSCode Extension 使用 Webview API，既然可以用 webview 的方式來呈現網頁，那顯示一個 Angular App 也是很正常的事情，但環境設定上要怎麼調整呢? 這篇筆記就來整理一下&lt;/p&gt;</summary>
    
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/categories/Angular/"/>
    
    
    <category term="Angular" scheme="http://blog.kevinyang.net/tags/Angular/"/>
    
  </entry>
  
</feed>
