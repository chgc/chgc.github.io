<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Phalcon] Using View</title>
    <url>/2013/10/08/study-note-phalcon-using-view/</url>
    <content><![CDATA[<p>#Hierarchical Rendering
Phalcon當在使用View的時候，執行的順序是</p>
<ol>
<li>app/views/index.volt</li>
<li>app/views/layouts/指定.volt(有[指定時][1]，才會發生)</li>
<li>
app/views/layouts/{{controllerName}}.volt 
</li>
<li>
app/views/{{controllerName}}/xxx.volt
</li>
</ol>
<p>依造這種順序，</p>

在index.volt裡面的{{content()}}，就會去呼叫app/views/layouts裡面的內容, 然後再app/views/layouts裡面的{{content()}}就是呼叫app/views/{{controllerName}}/xxx.volt的內容

<p>在Controller裡面所設定的變數，則上述三種xxx.volt都可以用</p>
<p>[1]: 如果要指定template時, 可以用下列的方式設定, 這樣子就會去讀取app/views/layouts/common.volt的內容了,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function initialize()</span><br><span class="line">  &#123;</span><br><span class="line">      $this-&gt;view-&gt;setTemplateAfter(&#x27;common&#x27;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

這一個指定template的動作，執行順序會插在app/views/index.volt跟app/views/layouts/{{controllerName}}.volt中間

<hr>
<p>#Using Partials</p>
<p>如果想要在view中間插入partials的方式很簡單</p>
<p>如果是使用volt語法的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; partial(view path) &#125;&#125;</span><br><span class="line">//with parameters </span><br><span class="line">&#123;&#123; partial(view path, [&#x27;links&#x27;: $links]) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>一般的語法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php $this-&gt;partial(view path) ?&gt;</span><br><span class="line">//with parameters </span><br><span class="line">&lt;?php $this-&gt;partial(view path, array(&#x27;id&#x27; =&gt; $site-&gt;id, &#x27;size&#x27; =&gt; &#x27;big&#x27;)) ?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Phalcon</category>
      </categories>
      <tags>
        <tag>Phalcon</tag>
      </tags>
  </entry>
  <entry>
    <title>[Memo]常用git指令</title>
    <url>/2013/10/09/memo-common-git-commands/</url>
    <content><![CDATA[<ol>
<li>commit your code</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;xxxx&quot; </span><br></pre></td></tr></table></figure>
<ol start="2">
<li>merge your branch to master
以master為主要branch</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge [module name]&lt;= this should be branch name</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">3. update</span><br></pre></td></tr></table></figure>
<p>git pull origin master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">檢查是否有conflict要修</span><br><span class="line"></span><br><span class="line">4. push至origin</span><br></pre></td></tr></table></figure>
<p>git push origin master:[module name]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 通知alvin合併</span><br><span class="line"></span><br><span class="line">6. 拉別人的code</span><br></pre></td></tr></table></figure>
<p>git add remote kyo /home/kyo/web/mc2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">7. 直接合併於目前的branch  EX. 拉KYO的master</span><br></pre></td></tr></table></figure>
<p>git pull remote kyo master</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">8. 拉成新的branch EX. 拉KYO的master為自己的kyo branch </span><br></pre></td></tr></table></figure>
<p>git fetch remote kyo master:kyo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">9. git 環境設定</span><br><span class="line"></span><br><span class="line">###設定個人資訊</span><br></pre></td></tr></table></figure>
<p>git config --global <a href="http://user.name">user.name</a> 「Your Name」</p>
<p>git config --global user.email <a href="mailto:you@example.com">you@example.com</a></p>
<pre><code>
###設定git環境

cd ~ #進入個人home目錄 
ex./home/fish
vi .gitconfig 

####編輯git環境檔，貼上以下環境設定變數

[color]
 
 branch = auto
 
 diff = auto
 
 status = auto

[color &quot;branch&quot;]

  current = yellow reverse
 
  local = yellow 

  remote = green

[color &quot;diff&quot;]
 
 meta = yellow bold
 
 frag = magenta bold
 
 old = red bold
 
 new = green bold

[color &quot;status&quot;]

  added = green
 
  changed = red</code></pre>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>[Phalcon] Using Model</title>
    <url>/2013/10/09/phalcon-using-model/</url>
    <content><![CDATA[<p>In Phalcon Model system. 是根據ORM的架構，讓資料表物件化，讓在資料讀取或是寫入的動作上，可以利用物件的特性去操作。</p>
<h1 id="初始設定"><a class="header-anchor" href="#初始設定"> </a>初始設定</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Database connection is created based in the parameters defined in the configuration file</span><br><span class="line"> */</span><br><span class="line">$di-&gt;set(&#x27;db&#x27;, function() use ($config) &#123;</span><br><span class="line">	return new DbAdapter(array(</span><br><span class="line">		&#x27;host&#x27; =&gt; $config-&gt;database-&gt;host,</span><br><span class="line">		&#x27;username&#x27; =&gt; $config-&gt;database-&gt;username,</span><br><span class="line">		&#x27;password&#x27; =&gt; $config-&gt;database-&gt;password,</span><br><span class="line">		&#x27;dbname&#x27; =&gt; $config-&gt;database-&gt;dbname</span><br><span class="line">	));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上列的動作會開啟與資料庫中間的連線關係，$config會去讀取所指定的設定文件</p>
<p>Model文件預設的命名方式為table名稱，例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Rebots extends \Phalcon\Mvc\Model</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官方文件建議，要在Model文件中描述資料表的欄位，以減少使用伺服器的記憶體資源。</p>
<p>如果Model的名稱與資料庫資料表名稱不同時，可以透過以下的方式重新設定所關聯的資料表名稱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function initialize()</span><br><span class="line">&#123;</span><br><span class="line">	$this-&gt;setSource(&#x27;Rebots&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">#於Controller中使用Model讀取資料</span><br><span class="line"></span><br><span class="line">讀取清單的方式有幾種</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>ModelName::find(condition)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">當找到筆資料時，所回傳的物件可以直接修改後，並儲存(Update)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$result = ModelName::find(『id=1』);
$result-&gt;fieldName = 「something something」;
$result-&gt;save(); &lt;=將資料回傳至資料庫中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">新增動作</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$result = new ModelName();
$result-&gt;fieldName = 「something something」;
$result-&gt;save();</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">刪除動作</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$result = ModelName::find(condition);
if ($result != false) {
// 執行刪除
if ($result-&gt;delete() == false) {<br>
echo 「Delete Failed」;
foreach ($result-&gt;getMessages() as $message) {
echo $message, 「\n」;
}
} else {
echo 「Deleted successfully!」;
}
}</p>
<pre><code></code></pre>
]]></content>
      <categories>
        <category>Phalcon</category>
      </categories>
      <tags>
        <tag>Phalcon</tag>
      </tags>
  </entry>
  <entry>
    <title>[Phalcon] Work with Router</title>
    <url>/2013/10/10/phalcon-work-with-router/</url>
    <content><![CDATA[<h1 id="啟動方式"><a class="header-anchor" href="#啟動方式"> </a>啟動方式</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$di-&gt;set(&#x27;router&#x27;, function () &#123;</span><br><span class="line">    $router = new \Phalcon\Mvc\Router();</span><br><span class="line">    $router-&gt;add(&quot;/:controller/:action/:params&quot;, array(</span><br><span class="line">        &#x27;controller&#x27; =&gt; 1,</span><br><span class="line">        &#x27;action&#x27; =&gt; 2,</span><br><span class="line">        &#x27;params&#x27; =&gt; 3</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    return $router;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="Defining-Route"><a class="header-anchor" href="#Defining-Route"> </a>Defining  Route</h1>
<table>
<thead>
<tr>
<th style="text-align:left">Placeholder</th>
<th style="text-align:left">Regular Expression</th>
<th style="text-align:left">Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/:module</td>
<td style="text-align:left">/([a-zA-Z0-9_-]+)</td>
<td style="text-align:left">Matches a valid module name with alpha-numeric characters only</td>
</tr>
<tr>
<td style="text-align:left">/:controller</td>
<td style="text-align:left">/([a-zA-Z0-9_-]+)</td>
<td style="text-align:left">Matches a valid controller name with alpha-numeric characters only</td>
</tr>
<tr>
<td style="text-align:left">/:action</td>
<td style="text-align:left">/([a-zA-Z0-9_]+)</td>
<td style="text-align:left">Matches a valid action name with alpha-numeric characters only</td>
</tr>
<tr>
<td style="text-align:left">/:params</td>
<td style="text-align:left">(/.<em>)</em></td>
<td style="text-align:left">Matches a list of optional words separated by slashes. Use only this placeholder at the end of a route</td>
</tr>
<tr>
<td style="text-align:left">/:namespace</td>
<td style="text-align:left">/([a-zA-Z0-9_-]+)</td>
<td style="text-align:left">Matches a single level namespace name</td>
</tr>
<tr>
<td style="text-align:left">/:int</td>
<td style="text-align:left">/([0-9]+)</td>
<td style="text-align:left">Matches an integer parameter</td>
</tr>
</tbody>
</table>
<p>/:params : 只能放在router的最後面</p>
<p>#controller內取得route裡面參數的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;dispatcher-&gt;getParam(0);</span><br><span class="line">$this-&gt;dispatcher-&gt;getParam(&#x27;paraName&#x27;);</span><br><span class="line">$this-&gt;dispatcher-&gt;getParams(); &lt;=array</span><br></pre></td></tr></table></figure>
<p>#如果是/?var=value</p>
<p>就用原本$_GET[『』]的方式取值就可以了</p>
]]></content>
      <categories>
        <category>Phalcon</category>
      </categories>
      <tags>
        <tag>Phalcon</tag>
      </tags>
  </entry>
  <entry>
    <title>[Laravel] Study Note.</title>
    <url>/2013/10/16/laravel-study-note/</url>
    <content><![CDATA[<p>#database config path</p>
<p>/app/config/database.php</p>
<p>#star up path</p>
<p>serverName/laravel/public</p>
<hr>
<p>#php artisan migrate
這裡migrate的觀念與EntityFramework 5 Code First的觀念相同。</p>
<h2 id="migrate-install"><a class="header-anchor" href="#migrate-install"> </a>migrate:install</h2>
<p>安裝Migration table, 會在資料庫中創建一個migrateion table, 紀錄migration版本</p>
<h2 id="migrate-make-somethingsomething"><a class="header-anchor" href="#migrate-make-somethingsomething"> </a>migrate:make somethingsomething</h2>
<p>建立新版的資料庫異動檔案</p>
<h2 id="migrate"><a class="header-anchor" href="#migrate"> </a>migrate</h2>
<p>執行資料庫格式升級 --&gt; function up()</p>
<h2 id="migrate-rollback"><a class="header-anchor" href="#migrate-rollback"> </a>migrate:rollback</h2>
<p>執行資料庫格式降級 --&gt; function down()</p>
<h2 id="migrate-table-file-location-app-database-migrations"><a class="header-anchor" href="#migrate-table-file-location-app-database-migrations"> </a>migrate table file location : app/database/migrations/</h2>
<figure class="highlight php"><figcaption><span>升級動作</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// create new table</span></span><br><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>, function(<span class="variable">$table</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">create</span>();</span><br><span class="line"> <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">increments</span>(<span class="string">&#x27;id&#x27;</span>);<span class="comment">//id fields with AUTO_INCREMENT</span></span><br><span class="line"> <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="string">&#x27;email&#x27;</span>);<span class="comment">//email field with varchar(255)</span></span><br><span class="line"> <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="string">&#x27;real_name&#x27;</span>,<span class="number">100</span>);<span class="comment">//real_field with varchar(100)</span></span><br><span class="line"> <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line"> <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">timestamps</span>();<span class="comment">// created_at,updated_at timestamps(2 fields)</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="code￼1"><a class="header-anchor" href="#code￼1"> </a><figure class="highlight php"><figcaption><span>降級動作</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//Drop Table</span></span><br><span class="line">	<span class="title class_">Schema</span>::<span class="title function_ invoke__">drop</span>(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></h2>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[Laravel] Controllers</title>
    <url>/2013/10/17/laravel-controllers/</url>
    <content><![CDATA[<h2 id="Controller"><a class="header-anchor" href="#Controller"> </a>Controller</h2>
<p>Controllers是用來處理商業邏輯及資料與view之間的介面(負責將資料input//output 給model，與資料庫的溝通就交給model去處理了)</p>
<p>controller需要配合route的設定才可被view呼叫使用。</p>
<p>例如:
route::get(『something』,『someController@someaction』)</p>
<p>當使用者跑到 <a href="http://website/something%E6%99%82">http://website/something時</a>, 就會呼叫route內所對應的controller及action.</p>
<p>發現，這種指定的方式，當頁面很多的時候就會變得很麻煩。 所以laravel的route提供另外一種指定的方式</p>
<p>route::controller(『something』,『someController』)</p>
<p>此種設定的方式，適用於restFUL的controller, (get,post,put,delete)四種交換模式的相關動作。</p>
<p>一般而言，只是讀取一個頁面的時候，都是透過 get的method取得回應的。所以在controller內action的命名，
就是用getSomection()為命名的方式，網址就是http://website/something/someaction (小寫, Controller內的action name 是大寫). 如果action的名稱是SomeAction時，<strong>注意 是兩個大寫字母</strong> 網址就會變成 <a href="http://website/something/some-action">http://website/something/some-action</a> (破折號作為連結的符號)</p>
<p>同理: 如果遇到form post時, 就是呼叫postSomeaction()</p>
<p>以上為controller的基本呼叫方式。</p>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[VFP]Prog Cache </title>
    <url>/2013/10/20/vfp-prog-cache/</url>
    <content><![CDATA[<blockquote>
<p>From the VFP9 helpfile:</p>
</blockquote>
<blockquote>
<p>Specifies the amount of memory (address space) in pages that Visual FoxPro allocates at startup or a Visual FoxPro MTDLL COM Server allocates per thread for the internal program cache (memory used to run programs). Each page of memory is equal to 64K so the default setting equates to an allocation a little over 9MB. As the cache is filled, Visual FoxPro will try to flush it to remove unused items. It is possible that Visual FoxPro cannot free enough memory in which case an Error 1202 is generated (Program is too large). Adjusting the PROGCACHE setting can prevent this error from occurring.</p>
</blockquote>
<blockquote>
<p>Note:
While this setting can be used for the Visual FoxPro development product or normal runtime applications, it is primarily intended for MTDLL COM Servers where many threads are often created for a single server. In Visual FoxPro 9.0, the default value for MTDLL COM Servers is -2.</p>
</blockquote>
<blockquote>
<p>When the value of nMemoryPages is greater than 0, Visual FoxPro allocates a fixed program cache. You can specify between 1 and 65000.</p>
</blockquote>
<blockquote>
<p>If you specify 0 for nMemoryPages, no program cache is used. Instead, Visual FoxPro uses dynamic memory allocation based on determinations made by the operating system.</p>
</blockquote>
<blockquote>
<p>If you pass a value for nMemoryPages that is less than 0, Visual FoxPro uses dynamic memory allocation but is limited to the specified memory (nMemoryPages * 64K). When the limit is reach, Visual FoxPro will flush allocated programs to free memory.</p>
</blockquote>
<blockquote>
<p>You can call SYS(3065) to determine the current PROGCACHE setting. CLEAR PROGRAM will attempt to clear unreferenced code regardless of this setting.</p>
</blockquote>
<blockquote>
<p>Note:
The Visual FoxPro OLE DB Provider ignores this setting since it uses dynamic memory allocation (PROGCACHE=0).</p>
</blockquote>
<blockquote>
<p>Default: 144 (-2 for MTDLL)</p>
</blockquote>
<blockquote>
<p>「The setting is the number of pages of memory you want allocated. Each page is equivalent to 64K of memory. You can set the PROGCACHE from 1 to 65,000 (positive or negative) to designate how much memory is allocated. If you specify zero, no program cache is used and VFP uses dynamic memory allocation determined by the operating system. If you set the PROGCACHE to a negative number, VFP uses dynamic memory allocation, but is limited to the number of memory pages you specified. The default setting is 144 (over 9 megabytes) for single-threaded EXEs and the VFP IDE, and -2 (128 kilobytes) for a multi-threaded DLL. The VFP OLE DB Provider does not use this setting because it uses dynamic memory allocation.」</p>
</blockquote>
<p>Ref: <a href="http://fox.wikis.com/wc.dll?Wiki~ProgCache">http://fox.wikis.com/wc.dll?Wiki~ProgCache</a></p>
]]></content>
      <categories>
        <category>VFP</category>
      </categories>
      <tags>
        <tag>VFP</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTML5] Blob</title>
    <url>/2013/10/26/html5-blob/</url>
    <content><![CDATA[<p>#BEFORE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder ||</span><br><span class="line">                     window.MozBlobBuilder || window.MSBlobBuilder;</span><br><span class="line">window.URL = window.URL || window.webkitURL;</span><br><span class="line"></span><br><span class="line">var bb = new BlobBuilder();</span><br><span class="line">bb.append(&#x27;body &#123; color: red; &#125;&#x27;);</span><br><span class="line">var blob = bb.getBlob(&#x27;text/css&#x27;);</span><br><span class="line"></span><br><span class="line">var link = document.createElement(&#x27;link&#x27;);</span><br><span class="line">link.rel = &#x27;stylesheet&#x27;;</span><br><span class="line">link.href = window.URL.createObjectURL(blob);</span><br><span class="line"></span><br><span class="line">document.body.appendChild(link);</span><br></pre></td></tr></table></figure>
<p>#NOW</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.URL = window.URL || window.webkitURL;</span><br><span class="line"></span><br><span class="line">var blob = new Blob([&#x27;body &#123; color: red; &#125;&#x27;], &#123;type: &#x27;text/css&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">var link = document.createElement(&#x27;link&#x27;);</span><br><span class="line">link.rel = &#x27;stylesheet&#x27;;</span><br><span class="line">link.href = window.URL.createObjectURL(blob);</span><br><span class="line">document.body.appendChild(link);</span><br></pre></td></tr></table></figure>
<p>#SO</p>
<p>Just New Blob()…no more BlobBuilder()</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>[Laravel] Blade template</title>
    <url>/2013/10/26/laravel-blade-template/</url>
    <content><![CDATA[<p>two ways to use it</p>
<p>#1 use blade on controller</p>
<p>in controller, you need to assign a template for controller.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$layout</span> = <span class="string">&#x27;layouts.master&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>and then in each function action. assign whatever need to assign for show content on template. like in blade template. I have a content section. Therefore, i need to set a value or view to 「Content」</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;layout-&gt;content = something <span class="keyword">or</span> <span class="title class_">View</span>::<span class="title function_ invoke__">make</span>(<span class="string">&#x27;something&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>in blade template. there are 2 ways to define var.</p>
<ol>
<li>
<p>@yield(『something』)</p>
</li>
<li>

</li>
</ol>
<p>if use first method; then in view, it needs to create a section something. ex</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@section(&#x27;content&#x27;)</span><br><span class="line">xxxx</span><br><span class="line">@endsction</span><br></pre></td></tr></table></figure>
<p>for method 2. no need to create a section to contain page content.</p>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC] ASP.NET MVC 開啟加速</title>
    <url>/2013/10/31/aspnet-mvc-aspnet-mvc-open-to-accelerate/</url>
    <content><![CDATA[<h1 id="ASP-NET-MVC有一個特性，就是如果第一次使用的時候，會經歷iis需要complie的窘境。"><a class="header-anchor" href="#ASP-NET-MVC有一個特性，就是如果第一次使用的時候，會經歷iis需要complie的窘境。"> </a><a href="http://ASP.NET">ASP.NET</a> MVC有一個特性，就是如果第一次使用的時候，會經歷iis需要complie的窘境。</h1>
<p>因為上述的關係，所以有需要從寫法和設定上面做調整。</p>
<p>可參閱</p>
<p><a href="http://stackoverflow.com/questions/2246251/how-to-improve-asp-net-mvc-application-performance">http://stackoverflow.com/questions/2246251/how-to-improve-asp-net-mvc-application-performance</a></p>
<p><a href="http://www.slideshare.net/rudib/aspnet-mvc-performance">http://www.slideshare.net/rudib/aspnet-mvc-performance</a></p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] Start Study Python - 序</title>
    <url>/2013/11/10/python-start-study-python/</url>
    <content><![CDATA[<p>因為Visual Studio 2013可以用來寫python, 所以決定開始來學習python看看。看這個語言能帶給我怎樣的驚喜</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>[python]筆記1</title>
    <url>/2013/11/11/python-note-1/</url>
    <content><![CDATA[<p>#String</p>
<p>string可以用 『』 or 「」 在 '『裡面可以用&quot;, 在&quot;&quot; 裡面可以用』</p>
<p>string連結的方式 + or 空白</p>
<p>但是如果是要連結變數和文字，則需要使用 +。數字和文字不可以做連接。</p>
<p>string[x] 可以直接將文字轉成陣列, 然後直接讀取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">0</span>]  <span class="comment"># character in position 0</span></span><br><span class="line"><span class="string">&#x27;P&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">5</span>]  <span class="comment"># character in position 5</span></span><br><span class="line"><span class="string">&#x27;n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[-<span class="number">1</span>]  <span class="comment"># last character</span></span><br><span class="line"><span class="string">&#x27;n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[-<span class="number">2</span>]  <span class="comment"># second-last character</span></span><br><span class="line"><span class="string">&#x27;o&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[-<span class="number">6</span>]</span><br><span class="line"><span class="string">&#x27;P&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">0</span>:<span class="number">2</span>]  <span class="comment"># characters from position 0 (included) to 2 (excluded)</span></span><br><span class="line"><span class="string">&#x27;Py&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">2</span>:<span class="number">5</span>]  <span class="comment"># characters from position 2 (included) to 5 (excluded)</span></span><br><span class="line"><span class="string">&#x27;tho&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[:<span class="number">2</span>] + word[<span class="number">2</span>:]</span><br><span class="line"><span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[:<span class="number">4</span>] + word[<span class="number">4</span>:]</span><br><span class="line"><span class="string">&#x27;Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[:<span class="number">2</span>]  <span class="comment"># character from the beginning to position 2 (excluded)</span></span><br><span class="line"><span class="string">&#x27;Py&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[<span class="number">4</span>:]  <span class="comment"># characters from position 4 (included) to the end</span></span><br><span class="line"><span class="string">&#x27;on&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[-<span class="number">2</span>:] <span class="comment"># characters from the second-last (included) to the end</span></span><br><span class="line"><span class="string">&#x27;on&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word[::-<span class="number">1</span>] <span class="comment"># reverse a string</span></span><br><span class="line"><span class="string">&#x27;nohtyp&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(word) <span class="comment"># length of a string</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"></span><br><span class="line">+---+---+---+---+---+---+</span><br><span class="line"> | P | y | t | h | o | n |</span><br><span class="line"> +---+---+---+---+---+---+</span><br><span class="line"> <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span></span><br><span class="line">-<span class="number">6</span>  -<span class="number">5</span>  -<span class="number">4</span>  -<span class="number">3</span>  -<span class="number">2</span>  -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>輸出文字:</p>
<ol>
<li>v2.7 : print 『xxxxx』</li>
<li>v3.3 : print(『xxxx』)</li>
</ol>
<p>文字重複顯示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;something&#x27;*3</span><br><span class="line">&#x27;somethingsomethingsomething&#x27;</span><br></pre></td></tr></table></figure>
<p>#Number
計算方式: 先乘除後加減，有內算到外，有左到右</p>
<p>number分interger and float, 區分方法是有沒有使用小數點</p>
<p>+ - * : 加，減，乘</p>
<p>除有兩個方法:</p>
<ol>
<li>/ : 傳回 float</li>
<li>//: 傳回 integer</li>
</ol>
<p>% : 傳回餘數
** : 次方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 7/4</span><br><span class="line">1.75</span><br><span class="line">&gt;&gt;&gt; 7//4</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 7%4</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 2**10</span><br><span class="line">1024</span><br></pre></td></tr></table></figure>
<p>a = b: 將b值指定給a</p>
<p>在interactive mode，可以利用 _ 取得上次的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 1+2</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 1+_</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<h1 id="Lists"><a class="header-anchor" href="#Lists"> </a>Lists</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; squares = [1, 2, 4, 9, 16, 25]</span><br><span class="line">&gt;&gt;&gt; squares</span><br><span class="line">[1, 2, 4, 9, 16, 25]</span><br><span class="line">&gt;&gt;&gt; squares[1]</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; squares[-1]</span><br><span class="line">25</span><br></pre></td></tr></table></figure>
<p>基本操作可以參考string的部分，一樣可以使用 + 做lists的連結</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list.append(value) # add value to the list</span><br></pre></td></tr></table></figure>
<p>二維陣列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; n = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; x = [a, n]</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">[[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], [1, 2, 3]]</span><br><span class="line">&gt;&gt;&gt; x[0]</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">&gt;&gt;&gt; x[0][1]</span><br><span class="line">&#x27;b&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>[python] 20131112</title>
    <url>/2013/11/12/python-20131112/</url>
    <content><![CDATA[<p>#demo program</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,b=0,1     # 指定值至變數中</span><br><span class="line">while b&lt;10:                 # 迴圈</span><br><span class="line">...     print(b, end=&#x27;,&#x27;)   # 顯示文字，結尾加上,</span><br><span class="line">...     a,b=b,a+b           # 指定值至變數中</span><br><span class="line"></span><br><span class="line">1,1,2,3,5,8,                # 輸出結果</span><br></pre></td></tr></table></figure>
<p>#Control Flow Tools</p>
<h2 id="if"><a class="header-anchor" href="#if"> </a>if</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if x&lt;0:</span><br><span class="line">    something something</span><br><span class="line">elif condition:</span><br><span class="line">    something something</span><br><span class="line">else:</span><br><span class="line">    something something</span><br></pre></td></tr></table></figure>
<h2 id="for"><a class="header-anchor" href="#for"> </a>for</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">words=[&#x27;cat&#x27;,&#x27;window&#x27;,&#x27;defenestrate&#x27;]</span><br><span class="line">for w in words:</span><br><span class="line">    print(w,len(w))</span><br><span class="line"></span><br><span class="line">cat 3</span><br><span class="line">window 6</span><br><span class="line">defenestrate 12</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for w in words[:]:  # Loop over a slice copy of the entire list.</span><br><span class="line">...     if len(w) &gt; 6:</span><br><span class="line">...         words.insert(0, w) # 將值插入至list中</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; words</span><br><span class="line">[&#x27;defenestrate&#x27;, &#x27;cat&#x27;, &#x27;window&#x27;, &#x27;defenestrate&#x27;]</span><br></pre></td></tr></table></figure>
<h2 id="range"><a class="header-anchor" href="#range"> </a>range()</h2>
<p>range()主要的目的是要創造一個連續值的list, 例如 range(10)=[0,1,2,3,4,5,6,8,9]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in range(5): # range(5) = range(0,5)</span><br><span class="line">...     print(i)</span><br><span class="line">... </span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for i in range(5,9):</span><br><span class="line">...     print(i)</span><br><span class="line">... </span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for i in range(0,10,2): # = for(i=0;i&lt;10;i=i+2) step 2</span><br><span class="line">...     print(i)</span><br><span class="line">...     </span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line"># 使用在文字陣列上</span><br><span class="line">&gt;&gt;&gt; a = [&#x27;Mary&#x27;, &#x27;had&#x27;, &#x27;a&#x27;, &#x27;little&#x27;, &#x27;lamb&#x27;]</span><br><span class="line">&gt;&gt;&gt; for i in range(len(a)):</span><br><span class="line">...     print(i,a[i])</span><br><span class="line">... </span><br><span class="line">0 Mary</span><br><span class="line">1 had</span><br><span class="line">2 a</span><br><span class="line">3 little</span><br><span class="line">4 lamb</span><br></pre></td></tr></table></figure>
<h2 id="break-continue-else-in-Loops"><a class="header-anchor" href="#break-continue-else-in-Loops"> </a>break, continue, else in Loops</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for n in range(2,10):</span><br><span class="line">    for x in range(2,n):</span><br><span class="line">        if n%x ==0:</span><br><span class="line">            print(n, &#x27;equals&#x27;, x, &#x27;*&#x27;, n//x)</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        print(n, &#x27;is a prime number&#x27;)        </span><br></pre></td></tr></table></figure>
<p>else: 是對應到 for x in range(2,n):
意義: a try statement’s else clause runs when no exception occurs</p>
<p>#python coding style</p>
<ol>
<li>
<p>Use 4-space indentation, and no tabs.</p>
<p>4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.</p>
</li>
<li>
<p>Wrap lines so that they don’t exceed 79 characters.</p>
<p>This helps users with small displays and makes it possible to have several code files side-by-side on larger displays.</p>
</li>
<li>
<p>Use blank lines to separate functions and classes, and larger blocks of code inside functions.</p>
</li>
<li>
<p>When possible, put comments on a line of their own.</p>
</li>
<li>
<p>Use docstrings.
「」&quot; something something something 「」&quot;
可以被呼叫by function.<strong>doc</strong></p>
</li>
<li>
<p>Use spaces around operators and after commas, but not directly inside bracketing constructs: a = f(1, 2) + g(3, 4).</p>
</li>
<li>
<p>Name your classes and functions consistently; the convention is to use CamelCase for classes and lower_case_with_underscores for functions and methods. Always use self as the name for the first method argument (see A First Look at Classes for more on classes and methods).</p>
</li>
<li>
<p>Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case.</p>
</li>
<li>
<p>Likewise, don’t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>[python]20131113</title>
    <url>/2013/11/13/python20131113/</url>
    <content><![CDATA[<p>#Data Structures
List的控制</p>
<p>x=value
i=index position
L=list</p>
<ul>
<li>list.append(x) : 在結尾的地方新增一筆資料</li>
<li>list.extend(L) : 新增資料by list</li>
<li>list.insert(i,x) : 插入資料</li>
<li>list.remove(x) : 移除所輸入的x值</li>
<li>list.pop([i]) : 移除所指定index position的值;如果沒有指定[i]時，則傳回並移除最後一筆紀錄(後進先出)</li>
<li>list.clear() : 清除list</li>
<li>list.index(x) : x值的位置, 如果沒有找到則傳回錯誤</li>
<li>list.count(x) : x值的數量</li>
<li>list.sort() : 排序</li>
<li>list.reverse() : 反轉</li>
<li>list.copy() : 複製list</li>
</ul>
<p>後進先出 : list.pop()
先進先出 : deque
deque([list])後，在操作pop或append時，多出了popleft(), appendleft(), extendleft()的方法
用法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;from collections import deque</span><br><span class="line">&gt;&gt;&gt; queue = deque([&quot;Eric&quot;, &quot;John&quot;, &quot;Michael&quot;])</span><br><span class="line">&gt;&gt;&gt; queue</span><br><span class="line">deque([&#x27;Eric&#x27;, &#x27;John&#x27;, &#x27;Michael&#x27;])</span><br><span class="line">&gt;&gt;&gt; queue.append(&quot;Kevin&quot;)</span><br><span class="line">deque([&#x27;Eric&#x27;, &#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;Kevin&#x27;])</span><br><span class="line">&gt;&gt;&gt; queue.appendleft(&quot;Steve&quot;)</span><br><span class="line">deque([&#x27;Steve&#x27;, &#x27;Eric&#x27;, &#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;Kevin&#x27;])</span><br><span class="line">&gt;&gt;&gt; queue.popleft()</span><br><span class="line">&#x27;Steve&#x27;</span><br><span class="line">&gt;&gt;&gt; queue</span><br><span class="line">deque([&#x27;Eric&#x27;, &#x27;John&#x27;, &#x27;Michael&#x27;, &#x27;Kevin&#x27;])</span><br></pre></td></tr></table></figure>
<p>#List Comprehensions
##(計算x) for x in list if condition</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x**2 for x in range(10)]</span><br><span class="line">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [x**2 for x in range(10) if x%2==0]</span><br><span class="line">[0, 4, 16, 36, 64]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]</span><br><span class="line">[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; matrix = [</span><br><span class="line">...     [1, 2, 3, 4],</span><br><span class="line">...     [5, 6, 7, 8],</span><br><span class="line">...     [9, 10, 11, 12],</span><br><span class="line">... ]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; [[row[i] for row in matrix] for i in range(4)]</span><br><span class="line">[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; list(zip(*matrix))</span><br><span class="line">[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]</span><br></pre></td></tr></table></figure>
<p>#del
移除list中的值by Index</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]</span><br><span class="line">&gt;&gt;&gt; del a[0]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 66.25, 333, 333, 1234.5]</span><br><span class="line">&gt;&gt;&gt; del a[2:4]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 66.25, 1234.5]</span><br><span class="line">&gt;&gt;&gt; del a[:]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>
<p>del can also be used to delete entire variables: 變數消滅</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [-1, 1, 66.25, 333, 333, 1234.5]</span><br><span class="line">&gt;&gt;&gt; del a</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#x27;a&#x27; is not defined</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>[python] 20131114</title>
    <url>/2013/11/14/python-20131114/</url>
    <content><![CDATA[<h1 id="Tuples"><a class="header-anchor" href="#Tuples"> </a>Tuples</h1>
<p>很像list,但是一旦建立後值就沒有辦法被更改 (ex. list[1]= 『b』 &lt;=會出錯)
用途: 用來儲存一些常用(const)變數</p>
<h1 id="Set"><a class="header-anchor" href="#Set"> </a>Set</h1>
<p>set會將重複得值給排除掉(有distinct的味道)
建立set的方式有set() 或 a= {『something』,『something』}
如果要建立空的set，只能透過set()的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = set(&#x27;abracadabra&#x27;)</span><br><span class="line">&gt;&gt;&gt; b = set(&#x27;alacazam&#x27;)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#x27;d&#x27;, &#x27;r&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#x27;m&#x27;, &#x27;l&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;z&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; a^b  # value in a or b not in both, 不含兩邊都有值</span><br><span class="line">&#123;&#x27;r&#x27;, &#x27;z&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;l&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; a-b # value in a not b</span><br><span class="line">&#123;&#x27;d&#x27;, &#x27;b&#x27;, &#x27;r&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; a|b # value in a or b</span><br><span class="line">&#123;&#x27;r&#x27;, &#x27;z&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;l&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; a&amp;b # value in a and b</span><br><span class="line">&#123;&#x27;a&#x27;, &#x27;c&#x27;&#125;</span><br></pre></td></tr></table></figure>
<p>#Dictionaries
as c# Dictionary&lt;string, string&gt;
操作方式</p>
<ul>
<li>指定: dict[key]= value</li>
<li>刪除: del dict[key]</li>
<li>列表: list(dict.key())</li>
<li>排序: sorted(dict.key())</li>
</ul>
<p>建立的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; dict([(&#x27;sape&#x27;, 4139), (&#x27;guido&#x27;, 4127), (&#x27;jack&#x27;, 4098)])</span><br><span class="line">&#123;&#x27;sape&#x27;: 4139, &#x27;jack&#x27;: 4098, &#x27;guido&#x27;: 4127&#125;</span><br><span class="line">&gt;&gt;&gt; dict(sape=4139, guido=4127, jack=4098)</span><br><span class="line">&#123;&#x27;sape&#x27;: 4139, &#x27;jack&#x27;: 4098, &#x27;guido&#x27;: 4127&#125;</span><br></pre></td></tr></table></figure>
<p>##looping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; knights = &#123;&#x27;gallahad&#x27;: &#x27;the pure&#x27;, &#x27;robin&#x27;: &#x27;the brave&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; for k, v in knights.items():</span><br><span class="line">...     print(k, v)</span><br><span class="line">...</span><br><span class="line">gallahad the pure</span><br><span class="line">robin the brave</span><br></pre></td></tr></table></figure>
<p>#More on Conditions
比較的方法:</p>
<ul>
<li>in, not in</li>
<li>is, is not</li>
<li>and, or : 當遇到第一個成立條件時，就跳出了</li>
</ul>
<p>比較可以連續串接: eg: a&lt;b==c tests whether a is thess then b and moreover b equals c</p>
<p>比較的順序: 左到右</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>[工作筆記]網際網路電子發票開立流程</title>
    <url>/2013/11/14/electronic-invoices-via-the-internet-opening-process/</url>
    <content><![CDATA[<p>民國103年1月1日起，網際網路電子發票開始限制發票字軌只能使用丁種字軌，然後又推說如果利用網際網路電子發票開立B2B交易情形，只能接受丁種字軌，這表示，另外一方也必須用網際網路電子發票…看來國稅局在103年度要強推B2B的電子發票了。</p>
<p>不管怎樣，這個也是一個趨勢，雖然現在開立的方法或是平台（還得獎…這好笑了吧, 請個F2E處理一下你的頁面吧。還是說設計者都沒有自己操作過)都還很鳥，如果要利用媒體檔上傳的方式，這個門檻又很高，因為那個該死的規格書又寫的很艱澀。（只是要罵一下)…</p>
<h1 id="帳號申請網址：電子發票整合服務平台"><a class="header-anchor" href="#帳號申請網址：電子發票整合服務平台"> </a>帳號申請網址：<a href="https://www.einvoice.nat.gov.tw/?CSRT=4242273227480015138">電子發票整合服務平台</a></h1>
<p>還是稍微整理一下開立流程：</p>
<h1 id="一般開立"><a class="header-anchor" href="#一般開立"> </a>一般開立</h1>
<ol>
<li>賣方開立發票</li>
<li>買方收到開立通知</li>
<li>買方接收開立發票</li>
<li>賣方收到接收通知</li>
<li>完成開立動作</li>
</ol>
<h1 id="退回發票"><a class="header-anchor" href="#退回發票"> </a>退回發票</h1>
<ol>
<li>賣方開立發票</li>
<li>買方收到通知</li>
<li>買方退回發票</li>
<li>賣方確認發票退回</li>
<li>完成動作</li>
</ol>
<h1 id="作廢發要"><a class="header-anchor" href="#作廢發要"> </a>作廢發要</h1>
<ol>
<li>賣方作廢發票</li>
<li>買方收到通知</li>
<li>買方確認發票作廢</li>
<li>完成動作</li>
</ol>
<h2 id="B2B交換資料，發票狀態有幾種，其意義為何？"><a class="header-anchor" href="#B2B交換資料，發票狀態有幾種，其意義為何？"> </a>B2B交換資料，發票狀態有幾種，其意義為何？</h2>
<p>銷項發票狀態
開立　：已新增發票，尚未憑證寄送
已寄送：已憑證寄送，資料傳送中
已讀取：買方已讀取 尚未完成進項發票寄送確認
已確認：買方已完成進項發票寄送確認
進項發票狀態
開立　　　：賣方已憑證寄送發票，買方尚未讀取
已讀取　　：買方已讀取發票，尚未完成進項發票寄送確認
確認寄送中：進項發票寄送確認，資料傳送中
已確認　　：買方已完成進項發票寄送確認</p>
<h2 id="買方營業人若無工商憑證是否可接收發票？"><a class="header-anchor" href="#買方營業人若無工商憑證是否可接收發票？"> </a>買方營業人若無工商憑證是否可接收發票？</h2>
<p>請賣方營業人至基本資料／交易對象資料維護建立買方資料並設定交易暗語，買方即可以交易暗語寄送發票。
惟作廢發票及發票退回確認僅能使用憑證接收，不得使用交易暗語接收。</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>電子發票</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularJS] Validation</title>
    <url>/2013/11/24/angularjs-validation/</url>
    <content><![CDATA[<p>#Form Validation with angularJs
Basic:
in .js
$scope.form = {}
$scope.form.$valid ==&gt; 判斷form(name=「form」)內的物件是否有驗證有錯誤的物件存在</p>
<p>用法:
formName.inputFieldName.property</p>
<p><strong>Unmodified form</strong>
A boolean property that tells us if the user has modified the form. This is true if the user hasn’t touched the form, and false if they have:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">formName.inputFieldName.$pristine;</span><br></pre></td></tr></table></figure>
<p><strong>Modified form</strong>
A boolean property if and only if the user has actually modified the form. This is set regardless of validations on the form:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">formName.inputFieldName.$dirty</span><br></pre></td></tr></table></figure>
<p><strong>Valid form</strong>
A boolean property that tells us that the form is valid or not. If the form is currently valid, then this will be true:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">formName.inputFieldName.$valid</span><br></pre></td></tr></table></figure>
<p><strong>Invalid form</strong>
A boolean property that tells us that the form is invalid. If the form is currently invalid, then this will be true:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">formName.inputFieldName.$invalid</span><br></pre></td></tr></table></figure>
<p>The last two properties are particularly useful for showing or hiding DOM elements. They are also very useful when setting a class on a particular form.</p>
<p><strong>Errors</strong>
Another useful property that AngularJS makes available to us is the $error object. This object contains all of the validations on a particular form and if they are valid or invalid. To get access to this property, use the following syntax:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">formName.inputfieldName.$error</span><br></pre></td></tr></table></figure>
<p>###Addtional CSS classes
ng-valid Is set if the form is valid.
ng-invalid Is set if the form is invalid.
ng-pristine Is set if the form is pristine.
ng-dirty Is set if the form is dirty.</p>
<p>##Input Validation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">       ng-model=&quot;&#123;string&#125;&quot;</span><br><span class="line">       [name=&quot;&#123;string&#125;&quot;]</span><br><span class="line">       [required]</span><br><span class="line">       [ng-required=&quot;&#123;boolean&#125;&quot;]</span><br><span class="line">       [ng-minlength=&quot;&#123;number&#125;&quot;]</span><br><span class="line">       [ng-maxlength=&quot;&#123;number&#125;&quot;]</span><br><span class="line">       [ng-pattern=&quot;&#123;string&#125;&quot;]</span><br><span class="line">       [ng-change=&quot;&#123;string&#125;&quot;]&gt;</span><br><span class="line">&lt;/input&gt;</span><br></pre></td></tr></table></figure>
<p>####可驗證項目(內建)
requried
ng-minlength
ng-maxlength</p>
<p>####$error所對應的項目
formName.inputfieldName.$error.requried
formName.inputfieldName.$error.minlength
formName.inputfieldName.$error.maxlength</p>
]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC] ADD TYPESCRIPT Complier</title>
    <url>/2013/11/26/aspnet-mvc-add-typescript-complier/</url>
    <content><![CDATA[<h1 id="In-projectname-csproj-新增"><a class="header-anchor" href="#In-projectname-csproj-新增"> </a>In projectname.csproj 新增</h1>
<pre><code> &lt;PropertyGroup Condition=&quot;'$(Configuration)' == 'Debug'&quot;&gt;
    &lt;TypeScriptTarget&gt;ES3&lt;/TypeScriptTarget&gt;
    &lt;TypeScriptIncludeComments&gt;true&lt;/TypeScriptIncludeComments&gt;
    &lt;TypeScriptSourceMap&gt;true&lt;/TypeScriptSourceMap&gt;
    &lt;TypeScriptModuleKind&gt;AMD&lt;/TypeScriptModuleKind&gt;
  &lt;/PropertyGroup&gt;
  &lt;PropertyGroup Condition=&quot;'$(Configuration)' == 'Release'&quot;&gt;
    &lt;TypeScriptTarget&gt;ES3&lt;/TypeScriptTarget&gt;
    &lt;TypeScriptIncludeComments&gt;false&lt;/TypeScriptIncludeComments&gt;
    &lt;TypeScriptSourceMap&gt;false&lt;/TypeScriptSourceMap&gt;
    &lt;TypeScriptModuleKind&gt;AMD&lt;/TypeScriptModuleKind&gt;
  &lt;/PropertyGroup&gt;
  &lt;Import Project=&quot;$(VSToolsPath)\TypeScript\Microsoft.TypeScript.targets&quot; /&gt;
</code></pre>
<p>在重新載入專案</p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC] Play with Grunt (typescript ...)</title>
    <url>/2013/11/26/aspnet-mvc-play-with-grunt/</url>
    <content><![CDATA[<p>#Grunt
Need: Node.js installed</p>
<p>Install Steps</p>
<ol>
<li>Installing the CLI
run command</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>edit package.json and Gruntfile.js</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;grunt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.4.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;grunt-ts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="run-npm-install-in-command"><a class="header-anchor" href="#run-npm-install-in-command"> </a>run npm install in command</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">grunt</span>) &#123;</span><br><span class="line">  <span class="comment">// load the task</span></span><br><span class="line">  grunt.<span class="title function_">loadNpmTasks</span>(<span class="string">&#x27;grunt-ts&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Configure grunt here</span></span><br><span class="line"></span><br><span class="line">  grunt.<span class="title function_">initConfig</span>(&#123;</span><br><span class="line">    <span class="attr">ts</span>: &#123;</span><br><span class="line">      <span class="attr">dev</span>: &#123;</span><br><span class="line">        <span class="comment">// a particular target</span></span><br><span class="line">        <span class="attr">src</span>: [<span class="string">&#x27;app/**/*.ts&#x27;</span>], <span class="comment">// The source typescript files, http://gruntjs.com/configuring-tasks#files</span></span><br><span class="line">        <span class="attr">html</span>: [<span class="string">&#x27;app/**/*.html&#x27;</span>], <span class="comment">// The source html files, https://github.com/basarat/grunt-ts#html-2-typescript-support</span></span><br><span class="line">        <span class="attr">reference</span>: <span class="string">&#x27;./reference.ts&#x27;</span>, <span class="comment">// If specified, generate this file that you can use for your reference management</span></span><br><span class="line">        <span class="attr">out</span>: <span class="string">&#x27;app/app.js&#x27;</span>, <span class="comment">// If specified, generate an out.js file which is the merged js file</span></span><br><span class="line">        <span class="attr">watch</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  grunt.<span class="title function_">registerTask</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;ts:dev&#x27;</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="run-grunt-in-command"><a class="header-anchor" href="#run-grunt-in-command"> </a>run grunt in command</h3>
<p>這樣子 grunt 就會監控 在 app 資料夾下的 ts 檔案異動，並同時做 complie 的動作，如果有錯誤，會產生 complie error 的訊息。</p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 4</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>[python] small script -- 讀電子報，擷取文章，轉錄</title>
    <url>/2013/11/29/pythonsmall-script-read-electronic-newspapers-ripping-the-article-transcription/</url>
    <content><![CDATA[<p>#流程</p>
<ol>
<li>從gmail裡面讀取電子報(特定的寄件者)</li>
<li>取得郵件內容</li>
<li>分析html</li>
<li>取得所要的部份(s)</li>
<li>將要轉錄的文章發布到wordpress上</li>
<li>將已處理的信件從收件夾中移到另一個資料夾中</li>
<li>結束作業</li>
</ol>
<p>#開發環境
python 3.3</p>
<p>#有用到的package</p>
<ul>
<li>imaplib --&gt; 用來處理imap type email</li>
<li>email   --&gt; email結構</li>
<li>re</li>
<li>BeautifulSoup4 --&gt; work with python 3.3 --&gt; from bs4 import BeautifulSoup</li>
<li>wordpress_xmlrpc --&gt; 透過xmlrpc的方式新增文章</li>
</ul>
<h1 id="所遇到的問題"><a class="header-anchor" href="#所遇到的問題"> </a>所遇到的問題</h1>
<ol>
<li>編碼
a. 信件
b. 信件內容</li>
<li>html形式的email裡面藏有\xa0 , 還是因為編碼的關係</li>
</ol>
<p>其實在使用bs4的過程中，也是花最多時間的地方是如何讓中文正常的顯示出來。其實在第一段要取得信件裡的內容時，就遇到中文編碼的問題。</p>
<p>demo code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import imaplib,email,re</span><br><span class="line">from email.header import decode_header</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from wordpress_xmlrpc import Client,WordPressPost,WordPressPost,WordPressTerm</span><br><span class="line">from wordpress_xmlrpc.methods import posts</span><br><span class="line">from wordpress_xmlrpc.methods.posts import NewPost,EditPost</span><br><span class="line">from wordpress_xmlrpc.methods.users import GetUserInfo</span><br><span class="line"></span><br><span class="line"># 這樣子可以傳回中文字</span><br><span class="line">def decode_subject(subject,encoding):</span><br><span class="line">    if encoding == None:</span><br><span class="line">        return subject</span><br><span class="line">    else:</span><br><span class="line">        return subject.decode(encoding)  </span><br><span class="line"># 用意跟上面的一樣, 只是為了處理編碼的問題</span><br><span class="line">def showmessage(mail):</span><br><span class="line">    if mail.is_multipart():</span><br><span class="line">        for part in mail.get_payload():</span><br><span class="line">            showmessage(part)</span><br><span class="line">    else:</span><br><span class="line">        type = mail.get_content_charset()        </span><br><span class="line">        if type == None:</span><br><span class="line">            return mail.get_payload()</span><br><span class="line">        else:</span><br><span class="line">            try:</span><br><span class="line">                return mail.get_payload(decode=1).decode(type)</span><br><span class="line">            except UnicodeDecodeError:</span><br><span class="line">                return mail</span><br><span class="line">                </span><br><span class="line">conn = imaplib.IMAP4_SSL(&quot;imap.gmail.com&quot;, 993)</span><br><span class="line">conn.login(&#x27;account&#x27;,&#x27;password)</span><br><span class="line">conn.select(&quot;inbox&quot;) # connect to inbox.</span><br><span class="line">typ, data = conn.search(None, &#x27;ALL&#x27;)</span><br><span class="line">try:   </span><br><span class="line">    for num in data[0].split()[-1:]: #從最新的信件開始讀起</span><br><span class="line">        typ, msg_data = conn.fetch(num, &#x27;(RFC822)&#x27;)</span><br><span class="line">        for response_part in msg_data:</span><br><span class="line">            if isinstance(response_part, tuple):                </span><br><span class="line">                msg = email.message_from_string(response_part[1].decode())              </span><br><span class="line">                subject,encoding = decode_header(msg[&#x27;subject&#x27;])[0]               </span><br><span class="line">                mailsubject = decode_subject(subject,encoding)</span><br><span class="line">                #_from = msg[&#x27;from&#x27;]                </span><br><span class="line">                body = showmessage(msg) # 編碼轉換</span><br><span class="line">                # 分析並將轉錄到wordpress上</span><br><span class="line">                for link in soup.find_all(&quot;table&quot;)[8:]:#start with 8th table element                            content = link.encode(&#x27;big5&#x27;).decode(&#x27;cp950&#x27;)</span><br><span class="line">                    if content.find(&#x27;class=&quot;contentword&quot;&#x27;) &gt; -1:</span><br><span class="line">                        news = BeautifulSoup(content)                      </span><br><span class="line">                        for part in news.find_all(&#x27;tr&#x27;):</span><br><span class="line">                            td = part.find_all(&quot;td&quot;)</span><br><span class="line">                            title = td[0].get_text()</span><br><span class="line">                            puretext = re.sub(&#x27;(\xa0)+&#x27;,&#x27; &#x27;,td[1].get_text())</span><br><span class="line">                            if title == &#x27;公布日期&#x27;:                               </span><br><span class="line">                                publishdate = puretext</span><br><span class="line">                            elif title==&#x27;標題&#x27;:</span><br><span class="line">                                posttitle = puretext</span><br><span class="line">                            elif title==&#x27;詳細內容&#x27;:</span><br><span class="line">                                postcontent = puretext</span><br><span class="line">                        postToWP.post(posttitle,postcontent,&quot;post tag&quot;)</span><br><span class="line">        move_mail(conn,num,&#x27;Archive.Today&#x27;)</span><br><span class="line">finally:</span><br><span class="line">    try:</span><br><span class="line">        conn.close()</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">    conn.logout()    </span><br></pre></td></tr></table></figure>
<p>在3.3裡, email.message_from_string 傳進去的文字如果不加decode，會傳錯誤訊息出來。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">email.message_from_string(response_part[1].decode())</span><br></pre></td></tr></table></figure>
<p>發布文章到wordpress
參考網址: <a href="http://python-wordpress-xmlrpc.readthedocs.org/en/latest/index.html">http://python-wordpress-xmlrpc.readthedocs.org/en/latest/index.html</a></p>
<pre><code>class postToWP:
    def post(title,content,tag):
        client = Client('http://blog url//xmlrpc.php', 'username', 'password')        
        post = WordPressPost()
        post.title = title
        post.content = content
        post.terms_names = &#123;
        'post_tag': [tag],              # 標籤(Tag)
        'category': [tag],              # 分類(Categories)
        &#125;      
        post.post_status = 'publish'    # 如果沒有這一個，就會是草稿狀態
        post.id = client.call(NewPost(post))
</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>[Phalcon] Complie Phalcon.so for php 5.4.2</title>
    <url>/2013/12/07/phalcon-complie-phalconso-for-php-542/</url>
    <content><![CDATA[<p>緣由：Bluhost決定將所有的php版本升級到5.4.20, <a href="http://xn--phalcon-325mq38fs4girtdmq0q8cxujd6qc6b.so">那這樣子的行為會讓phalcon.so</a>（php 5.3.27版本) 失效，然後問Bluehost, 他們不會提供降級的服務，也不會幫忙complie <a href="http://phalcon.so">phalcon.so</a>…所以，自己做。</p>
<p>作法：設定一個跟網頁空間一樣的環境, same os and php version, 然後在編譯phalcon, 成功編譯後上傳phalcon.so到主機上面。</p>
<p>步驟：
我是選擇centos6版，下載與主機服務商一樣作業位元的作業系統. (64bit or 32bit)</p>
<ol>
<li><a href="http://isoredirect.centos.org/centos/6/isos/x86_64/">http://isoredirect.centos.org/centos/6/isos/x86_64/</a> &lt;= 64位元的版本</li>
<li>用Vmware將centos裝起來.</li>
<li>安裝完成後，用root的帳號登入，開啟terminal window</li>
<li>由於第一次安裝，所以先執行 <code>yum update</code> 讓系統先將所有的套件更新到最新的狀態</li>
<li><code>yum groupinstall &quot;Development Tools&quot;</code> 安裝一些跟開發有關係的元件，例如 git (必須安裝)</li>
<li>安裝rpm yum repository information, 因為php5.4是在不同的repository. 安裝方式如下
<code>rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm</code></li>
<li>可以用 <code>yum list | grep php</code> 顯示跟php有關的套件。php54w就是我們要安裝的套件</li>
<li>要安裝以下套件 <code>yum install php54w php54w-mysql php54w-devel</code></li>
<li>利用git取得phalcon <code>git clone --depth=1 git://github.com/phalcon/cphalcon.git</code></li>
<li><code>cd cphalcon/build</code></li>
<li><code>./install</code></li>
<li>如果complie成功, 會出現下面的畫面
<img src="http://user-image.logdown.io/user/4862/blog/4871/post/165992/pIQa0NU7TnS8y1vSpiA5_2013-12-8%20%E4%B8%8A%E5%8D%88%2012-38-32.png" alt="2013-12-8 上午 12-38-32.png"></li>
<li>complie完後的檔案可以在build/modules/紅色框起來的資料夾下面看到
<img src="http://user-image.logdown.io/user/4862/blog/4871/post/165992/Qbwn0tyLTWqy6AOx2dGO_2013-12-8%20%E4%B8%8A%E5%8D%88%2012-39-07.png" alt="2013-12-8 上午 12-39-07.png"></li>
<li>將phalcon.so複製到網頁空間主機php放extensions的資料夾下，<a href="http://xn--php-158d869sixva.xn--iniphalcon-kj3qx7v.so">並編輯php.ini啟動phalcon.so</a></li>
<li>打完收工</li>
</ol>
]]></content>
      <categories>
        <category>Phalcon</category>
      </categories>
      <tags>
        <tag>Phalcon</tag>
      </tags>
  </entry>
  <entry>
    <title>[工作筆記] Linq筆記 - 取得最後一筆的聊天紀錄</title>
    <url>/2014/01/21/note-linq-notes/</url>
    <content><![CDATA[<p>目的： 取得最後一筆的聊天紀錄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var result = (from o in db.messages</span><br><span class="line">							let msgFrom = o.fromUid == uid</span><br><span class="line">							let msgTo = o.toUid == uid</span><br><span class="line">							where msgFrom || msgTo</span><br><span class="line">							group o by msgTo ? o.fromUid : o.toUid into grp</span><br><span class="line">							let lastDate = grp.Max(m =&gt; m.createDate)</span><br><span class="line">							from p in grp</span><br><span class="line">							where p.createDate == lastDate</span><br><span class="line">							select new viewMessage</span><br><span class="line">							&#123;</span><br><span class="line">								uid = p.fromUid == uid ? p.toUid : p.fromUid,</span><br><span class="line">								name = p.fromUid == uid ? p.toemployees.name : p.fromemployees.name,</span><br><span class="line">								msg = p.msg,</span><br><span class="line">								lastdate = p.createDate,</span><br><span class="line">								unread = p.unread</span><br><span class="line">							&#125;).AsEnumerable();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Linq</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularJS]AngularJs-20140129</title>
    <url>/2014/01/28/note-angularjs-20140129/</url>
    <content><![CDATA[<h1 id="location-Service-window-location"><a class="header-anchor" href="#location-Service-window-location"> </a>$location Service (window.location)</h1>
<p>用途: redirect action</p>
<h2 id="path"><a class="header-anchor" href="#path"> </a>path()</h2>
<p>使用者可以使用『上一頁』的功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$location.path(); // 取得目前的路徑</span><br><span class="line"></span><br><span class="line">$location.path(&#x27;path&#x27;);//改變路徑</span><br></pre></td></tr></table></figure>
<h2 id="replace"><a class="header-anchor" href="#replace"> </a>replace()</h2>
<p>使用者沒有辦法使用『上一頁』</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$location.path(&#x27;path&#x27;);</span><br><span class="line">$locaton.replace();</span><br><span class="line"> </span><br><span class="line">// or </span><br><span class="line"> </span><br><span class="line">$location.path(&#x27;path&#x27;).replace()</span><br></pre></td></tr></table></figure>
<h2 id="absUrl"><a class="header-anchor" href="#absUrl"> </a>absUrl()</h2>
<p>取得完整的路徑</p>
<h2 id="hash"><a class="header-anchor" href="#hash"> </a>hash()</h2>
<p>取得 # 之後的內容</p>
<h2 id="search"><a class="header-anchor" href="#search"> </a>search()</h2>
<p>get/set search part of the current URL</p>
<h2 id="url"><a class="header-anchor" href="#url"> </a>url()</h2>
<p>get the URL of the current page</p>
]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[WEB]Zen Coding style筆記</title>
    <url>/2014/01/30/zen-coding-style-notes/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>符號</th>
<th>說明</th>
</tr>
</thead>
<tbody>
<tr>
<td>#</td>
<td>id屬性</td>
</tr>
<tr>
<td>.</td>
<td>class屬性</td>
</tr>
<tr>
<td>[]</td>
<td>自訂屬性</td>
</tr>
<tr>
<td>&gt;</td>
<td>子元素</td>
</tr>
<tr>
<td>+</td>
<td>兄弟元素</td>
</tr>
<tr>
<td>^</td>
<td>升層</td>
</tr>
<tr>
<td>*</td>
<td>複製數量</td>
</tr>
<tr>
<td>$</td>
<td>增量變數</td>
</tr>
<tr>
<td>$$</td>
<td>增量變數(2位數)</td>
</tr>
<tr>
<td>{}</td>
<td>文字節點</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>[VFP]Vartype() </title>
    <url>/2014/02/11/vfp-vartype/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>Return value</th>
<th>Data Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>C</td>
<td>Character, Memo, Varchar, Varchar (Binary)</td>
</tr>
<tr>
<td>D</td>
<td>Date</td>
</tr>
<tr>
<td>G</td>
<td>General</td>
</tr>
<tr>
<td>L</td>
<td>Logical</td>
</tr>
<tr>
<td>N</td>
<td>Numeric, Float, Double, or Integer</td>
</tr>
<tr>
<td>O</td>
<td>Object</td>
</tr>
<tr>
<td>Q</td>
<td>Blob,Varbinary</td>
</tr>
<tr>
<td>T</td>
<td>DateTime</td>
</tr>
<tr>
<td>U</td>
<td>Unknown or variable does not exist</td>
</tr>
<tr>
<td>X</td>
<td>Null</td>
</tr>
<tr>
<td>Y</td>
<td>Currency</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>VFP</category>
      </categories>
      <tags>
        <tag>VFP</tag>
      </tags>
  </entry>
  <entry>
    <title>[C#]  編碼慣例</title>
    <url>/2014/02/18/c-coding-conventions/</url>
    <content><![CDATA[<p>節錄於MSDN</p>
<ul>
<li>使用預設的程式碼編輯器設定 (智慧型縮排、四個字元縮排、將定位點儲存為空格)。</li>
<li>每行只撰寫一個陳述式。</li>
<li>每行只撰寫一個宣告。</li>
<li>如果連續行沒有自動縮排，則會將它們縮排一個定位停駐點 (四個空格)。</li>
<li>在方法定義與屬性定義之間加入至少一個空白行。</li>
<li>使用括號在運算式中撰寫子句，如下列程式碼所示。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ((val1 &gt; val2) &amp;&amp; (val1 &gt; val3))</span><br><span class="line">&#123;</span><br><span class="line">    // Take appropriate action.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>#註解慣例</p>
<ul>
<li>將註解放到另一行，不放在程式碼行的結尾。</li>
<li>以大寫字母做為註解文字開頭。</li>
<li>以句號結束註解文字。</li>
<li>在註解分隔符號 (//) 與註解文字之間插入一個空格，如下列範例所示。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// The following declaration creates a query. It does not run</span><br><span class="line">// the query.</span><br></pre></td></tr></table></figure>
<ul>
<li>不在註解周圍建立格式化的星號區塊。</li>
</ul>
<p>#語言方針</p>
<ul>
<li>當指派右邊的變數型別很明顯，或是不需要精確的型別時，使用隱含型別的區域變數。</li>
<li>指派右邊的型別不明顯時，不要使用 var。</li>
<li>不要倚賴變數名稱來指定變數的型別。 它可能是不正確的。</li>
<li>避免使用 var 取代 dynamic。</li>
<li>使用隱含型別判斷 for 和 foreach 迴圈中迴圈變數的型別。</li>
<li>進行比較時，若要略過不必要的比較以避免例外狀況並提升效能，請使用 &amp;&amp; 取代 &amp;，以及使用 || 取代 |。</li>
<li>使用簡潔的物件執行個體化形式搭配隱含型別，如以下宣告中所示。</li>
<li>使用物件初始設定式簡化物件建立。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var instance1 = new ExampleClass();</span><br><span class="line"></span><br><span class="line">// Object initializer.</span><br><span class="line">var instance3 = new ExampleClass &#123; Name = &quot;Desktop&quot;, ID = 37414, </span><br><span class="line">    Location = &quot;Redmond&quot;, Age = 2.3 &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>#＃ LINQ查詢</p>
<ul>
<li>使用有意義的名稱做為查詢變數的名稱。 下列範例會使用 seattleCustomers 代表位於西雅圖的客戶。</li>
<li>使用多個 from 子句，而不要使用 join 子句來存取內部集合。 例如，Student 物件集合中，每一個物件都可能包含考試分數集合。 執行下列查詢時，會傳回每一個高於 90 分的分數，以及得到該分數的學生名字。</li>
</ul>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularJS] ng-repeat 結束時觸發其他動作</title>
    <url>/2014/02/19/angular-at-the-end-of-ng-repeat-trigger-other-actions/</url>
    <content><![CDATA[<p>如果想要知道ng-repeat什麼時候結束，可以透過$last的值知道最後的值是什麼，但是如果要觸發另外一個method…就…需要另外寫directive來處理這類的事情</p>
<p>參閱網路上的資料整理成以下的code</p>
<p>因為是用typescript寫的，如果要轉換，就自行在轉換吧</p>
<p>directive:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">directives.directive(&#x27;onFinishRender&#x27;, function ($timeout) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        restrict: &#x27;A&#x27;,</span><br><span class="line">        link: function (scope, element, attr) &#123;</span><br><span class="line">            if (scope.$last === true) &#123;</span><br><span class="line">                $timeout(function () &#123;</span><br><span class="line">                    scope.$emit(attr.onFinishRender);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>controller:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 監控 attr.onFinishRender(傳進去的值)=&gt;這裡用scrollToEnd</span><br><span class="line">this.$scope.$on(&#x27;scrollToEnd&#x27;, () =&gt; &#123;</span><br><span class="line">             // do whatever you want                </span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
<p>html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div ng-repeat=&quot;item in items&quot; on-finish-render=&quot;scrollToEnd&quot;&gt;</span><br><span class="line">blah blah balh</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h2 id="同場加映"><a class="header-anchor" href="#同場加映"> </a>同場加映</h2>
<p>忘了從那一版開始
ng-repeat有 <strong>ng-repeat-start</strong> and <strong>ng-repeat-end</strong>
用法是, 可以更漂亮的處理要repeat的樣板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;header ng-repeat-start=&quot;item in items&quot;&gt;</span><br><span class="line">  Header &#123;&#123; item &#125;&#125;</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;div class=&quot;body&quot;&gt;</span><br><span class="line">  Body &#123;&#123; item &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer ng-repeat-end&gt;</span><br><span class="line">  Footer &#123;&#123; item &#125;&#125;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>
<p>可上官網上面參閱用法  <a href="http://code.angularjs.org/1.2.10/docs/api/ng.directive:ngRepeat">http://code.angularjs.org/1.2.10/docs/api/ng.directive:ngRepeat</a></p>
]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[工作筆記] 資本公積</title>
    <url>/2014/02/20/note-capital-surplus/</url>
    <content><![CDATA[<h1 id="資本公積"><a class="header-anchor" href="#資本公積"> </a>資本公積</h1>
<p>資本公積是指由股東投入、但不能構成股本或實收資本的資金部分，主要包括股本溢價、接受捐贈實物資產、投入資本匯兌損益、法定財產重估增值以及投資準備金等。</p>
<p>資本公積的來源，按其用途主要包括兩類：
一、超過票面金額發行股票所得之溢額。</p>
<ol>
<li>以超過面額發行普通股或特別股溢價：無。</li>
<li>公司因企業合併而發行股票取得他公司股權或資產淨值所產生股本溢價：無。惟，合併基準日在97.12.31前案件，合併股本溢價來源屬消滅公司帳載未分配盈餘部分，如用以配發股票或現金給股東，仍屬股東股利所得。</li>
<li>庫藏股票交易溢價：有。</li>
<li>轉換公司債相關應付利息補償金於約定賣回期間屆滿日可換得普通股市價高於約定賣回價格時轉列金額：無。</li>
<li>因認股權證行使所得股本發行價格超過面額部分：無。</li>
<li>特別股或公司債轉換為普通股，原發行價格或帳面價值大於所轉換普通股面額差額：無。</li>
<li>附認股權公司債行使普通股認股權證分攤價值：無。</li>
<li>特別股收回價格低於發行價格差額：可能有。惟廣義而言，特別股的發行價格高於收回價格部分，也是股東的出資額，可否不視為股東有所得？</li>
<li>認股權證逾期未行使而將其帳面餘額轉列者：有。</li>
<li>因股東逾期未繳足股款而沒收已繳股款：可能有。惟廣義而言，沒收股款也是股東的出資額，可否不視為股東有所得？</li>
<li>公司因企業分割而發行股票取得他公司營業或資產淨值所產生股本溢價：無。</li>
<li>公司因股份轉換而發行股票取得他公司股份或股權所產生股本溢價：可能有。依財政部91.8.19台財稅第0910454466號涵意旨，股本溢價來源屬他公司轉換前帳載未分配餘者，如用以分配股票或現金給股東，屬股東股利所得，惟此函釋合理性，有待斟酌。</li>
</ol>
<p>二、受領贈與之所得。</p>
<ol>
<li>受領股東贈與本公司已發行股票：可能有。但廣義而言，此部分也是股東的出資額，可否不視為股東有所得？</li>
<li>股東依股權比例放棄債權或依股權比例捐贈資產：可能無。</li>
</ol>
<p>資本公積的主要用途有兩個，</p>
<ol>
<li>轉增資本</li>
<li>彌補虧損。</li>
</ol>
<h1 id="盈餘公積-公司法-237條"><a class="header-anchor" href="#盈餘公積-公司法-237條"> </a>盈餘公積(公司法:237條)</h1>
<blockquote>
<p>公司於完納一切稅捐後，分派盈餘時，應先提出百分之十為法定盈餘公積。但法定盈餘公積，已達資本總額時，不在此限。
除前項法定盈餘公積外，公司得以章程訂定或股東會議決，另提特別盈餘公積。
公司負責人違反第一項規定，不提法定盈餘公積時，各科新臺幣六萬元以下罰金。</p>
</blockquote>
<blockquote>
<p>惟依據銀行法第50條規定，銀行於完納一切稅捐後分派盈餘時，應先提30％為法定盈餘公積，另證券金融公司亦比照銀行提列30％法定盈餘公積，此為較特殊處。</p>
</blockquote>
<h3 id="種類"><a class="header-anchor" href="#種類"> </a>種類</h3>
<ol>
<li>法定盈餘公積: 指依公司法或其他相關法令規定自盈餘中指撥之公積</li>
<li>特別盈餘公積: 因特定目的（如平衡盈餘分派、擴充改良設備或作為償債準備）依公司章程或股東會決議提存之公積。</li>
</ol>
<h3 id="用途-公司法239條第1項暨232條第2項、241條第3項規定"><a class="header-anchor" href="#用途-公司法239條第1項暨232條第2項、241條第3項規定"> </a>用途 (公司法239條第1項暨232條第2項、241條第3項規定)</h3>
<ul>
<li>彌補虧損</li>
<li>分配(僅限法定盈餘公積)</li>
</ul>
<ol>
<li>為於公司無盈餘時，以法定盈餘公積超過實收資本額50％之部分派充股息及紅利</li>
<li>為法定盈餘公積已達實收資本50％者，得保留法定盈餘公積達實收資本50％之半數，其餘部分得以撥充資本，而股東依原有股份比例發給新股。</li>
</ol>
<p>###其他備註</p>
<ul>
<li>補累積虧損之順序，宜先動用法定盈餘公積，次為特別盈餘公積，最後為資本公積。</li>
<li>特別盈餘公積得用於彌補虧損，惟於原提列特別盈餘公積之原因消除前，如曾以特別盈餘公積彌補虧損者，於未來有盈餘之年度，應先就特別盈餘公積不足數額補足提列，始得分派盈餘</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>會計</tag>
      </tags>
  </entry>
  <entry>
    <title>[C#] work with xml and xsd</title>
    <url>/2014/02/26/c-work-with-xml-and-xsd/</url>
    <content><![CDATA[<h1 id="1-在xsd裡描述minOccurs-0-時-所建立的xml裡面要手動控制是否輸出value"><a class="header-anchor" href="#1-在xsd裡描述minOccurs-0-時-所建立的xml裡面要手動控制是否輸出value"> </a>1.在xsd裡描述minOccurs=&quot;0&quot;時 , 所建立的xml裡面要手動控制是否輸出value</h1>
<p>c#可以用class轉換成xml, 但是在class裡面的property並不是每一個都需要輸出，有些事非必要性的欄位。
這需要在property欄位另外加上一個欄位來做設定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class demo&#123;</span><br><span class="line">	public string field1;</span><br><span class="line">  public string field2;</span><br><span class="line">  public customEnum field3;</span><br><span class="line">  // 以下這行是關鍵</span><br><span class="line">  [XmlIgnore]</span><br><span class="line">  public bool field3Specified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="語法是-propertyNameSpecified"><a class="header-anchor" href="#語法是-propertyNameSpecified"> </a>語法是 propertyNameSpecified</h2>
<p>[XmlIgnore] : 功用是在輸出xml時，忽略此欄位</p>
<p>依上列的案例來說，如果 field3Specified=true, 則輸出field3欄位, 如果設定成false, 則不輸出field3</p>
<h1 id="2-使用xsd-exe將-xsd檔案轉換成class"><a class="header-anchor" href="#2-使用xsd-exe將-xsd檔案轉換成class"> </a>2.使用xsd.exe將.xsd檔案轉換成class</h1>
<p>在visual studio tools下-&gt; 命令視窗 -&gt; xsd</p>
<p>ref: <a href="http://msdn.microsoft.com/en-us/library/x6c1kb0s(v=vs.110).aspx">http://msdn.microsoft.com/en-us/library/x6c1kb0s(v=vs.110).aspx</a></p>
<p>將.xsd檔案轉換成class的方式為</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xsd file.xsd /c</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>IIS_Parallels_Win8_Mac.txt</title>
    <url>/2014/03/01/iis-parallels-win8-mactxt/</url>
    <content><![CDATA[<ol>
<li>
<p>In your Windows 8 VM, go to Control Panel &gt; System &gt; Advanced system settings &gt; Computer Name and click Change.  Name this whatever you like, e.g. 「windows」.  Restart your VM.</p>
</li>
<li>
<p>Open CMD or Powershell as administrator.  Add a URL ACL entry for your new name on the port of your choice, e.g.
netsh http add urlacl url=http://windows:8080/ user=everyone</p>
</li>
<li>
<p>Open CMD or Powershell as administrator.  Add an inbound firewall rule for this new port.  In Windows 8, the syntax is:
netsh advfirewall firewall add rule name=「IISExpressWeb」 dir=in action=allow protocol=TCP localport=8080</p>
</li>
</ol>
<p>In Windows 7, the syntax is:
netsh firewall add portopening TCP 8080 IISExpressWeb enable ALL</p>
<ol start="4">
<li>
<p>Edit your IISExpress applicationhost.config file, typically found at your Documents\IISExpress\config\applicationhost.config.  Find your site under sites, and add a binding to the port using your machine name, e.g.
<bindings>
<binding protocol="http" bindingInformation="*:8080:localhost" /> <!-- This will be here already, genereated by VS -->
<binding protocol="http" bindingInformation="*:8080:windows" /> <!-- Add this -->
</bindings></p>
</li>
<li>
<p>Startup IISExpress with Visual Studio, hit your URL from a browser on your Mac/VM Host, e.g. <a href="http://windows:8080">http://windows:8080</a></p>
</li>
<li>
<p>Revel in your magnificence.</p>
</li>
</ol>
<p>More info here:
<a href="http://stackoverflow.com/questions/3313616/iis-express-enable-external-request">http://stackoverflow.com/questions/3313616/iis-express-enable-external-request</a>
<a href="http://stackoverflow.com/questions/5442551/iisexpress-returns-a-503-error-from-remote-machines">http://stackoverflow.com/questions/5442551/iisexpress-returns-a-503-error-from-remote-machines</a>
<a href="http://www.hanselman.com/blog/WorkingWithSSLAtDevelopmentTimeIsEasierWithIISExpress.aspx">http://www.hanselman.com/blog/WorkingWithSSLAtDevelopmentTimeIsEasierWithIISExpress.aspx</a></p>
<p>Ref: <a href="https://gist.github.com/justingarrick/6322779">https://gist.github.com/justingarrick/6322779</a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>IIS</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC] 利用OData+EF做分頁</title>
    <url>/2014/03/18/web-use-odata-ef-page/</url>
    <content><![CDATA[<p>當網頁要讀取一個很大量的資料時，通常都會透過分頁的方式來顯示資料。
如果透過WebApi+OData的特性來做分頁，作法很單純
設定 WebApiConfig.cs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//加入</span><br><span class="line">config.EnableQuerySupport();</span><br></pre></td></tr></table></figure>
<p>假設原本的API寫法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Route(&quot;api/Customer&quot;)]</span><br><span class="line">public IEnumerable&lt;customers&gt; Getcustomers()</span><br><span class="line">&#123;            </span><br><span class="line">   return db.customers.AsEnumerable();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Route(&quot;api/Customer&quot;)]        </span><br><span class="line">public IQueryable&lt;customers&gt; Getcustomers()</span><br><span class="line">&#123;            </span><br><span class="line">   return db.customers.AsQueryable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那在client端要呼叫api的url中，在加上OData的查詢語法來取得所要的資料區段，來達成分頁的效果</p>
<table>
<thead>
<tr>
<th>指令</th>
<th style="text-align:left">說明</th>
<th style="text-align:left">範例</th>
</tr>
</thead>
<tbody>
<tr>
<td>top</td>
<td style="text-align:left">結果挑出最前面的幾筆</td>
<td style="text-align:left">?$top=3</td>
</tr>
<tr>
<td>skip</td>
<td style="text-align:left">略過幾筆。可用於分頁顯示</td>
<td style="text-align:left">?$skip=10</td>
</tr>
<tr>
<td>orderby</td>
<td style="text-align:left">排序</td>
<td style="text-align:left">?$orderby=SupplierID,ProductID</td>
</tr>
<tr>
<td>filter</td>
<td style="text-align:left">篩選</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td style="text-align:left">gt : &gt; , 大於</td>
<td style="text-align:left">$filter=ProductID gt 10</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">lt :  &lt; , 小於</td>
<td style="text-align:left">$filter=ProductID lt 10</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">ge : &gt;=, 大於等於</td>
<td style="text-align:left">$filter=ProductID ge 10</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">le : &lt;=, 小於等於</td>
<td style="text-align:left">$filter=ProductID le 10</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">eq : =, 等於</td>
<td style="text-align:left">$filter=ProductID eq 10</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">ne : &lt;&gt;, 不等於</td>
<td style="text-align:left">$filter=ProductID ne 10</td>
</tr>
</tbody>
</table>
<p>參考資料: <a href="http://msdn.microsoft.com/en-us/library/windowsazure/gg312156.aspx">http://msdn.microsoft.com/en-us/library/windowsazure/gg312156.aspx</a></p>
<h4 id="如果要利用OData取得所有的資料筆數時，上述的寫法沒有辦法做到，所以要稍微改寫一下原本的寫法"><a class="header-anchor" href="#如果要利用OData取得所有的資料筆數時，上述的寫法沒有辦法做到，所以要稍微改寫一下原本的寫法"> </a>如果要利用OData取得所有的資料筆數時，上述的寫法沒有辦法做到，所以要稍微改寫一下原本的寫法</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Route(&quot;api/Customer&quot;)]   </span><br><span class="line"> public PageResult&lt;customers&gt; Getcustomers(ODataQueryOptions&lt;customers&gt; options)</span><br><span class="line">     &#123;           </span><br><span class="line">         var results = options.ApplyTo(db.customers.AsQueryable());</span><br><span class="line">         return new PageResult&lt;customers&gt;(</span><br><span class="line">            results as IEnumerable&lt;customers&gt;, // Items</span><br><span class="line">            Request.GetNextPageLink(), // NextPageLink</span><br><span class="line">            Request.GetInlineCount()); // Count</span><br><span class="line">     &#125;        </span><br></pre></td></tr></table></figure>
<p>要傳入的東西是一樣的，但是回傳的結果會變成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;Items&quot;:[data....],</span><br><span class="line">   &quot;NextPageLink&quot;: null,</span><br><span class="line">   &quot;Count&quot;: 12345</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以在接收時要再調整</p>
<h3 id="當-filter的查詢欄位是guid時"><a class="header-anchor" href="#當-filter的查詢欄位是guid時"> </a>當$filter的查詢欄位是guid時</h3>
<p>所送出的值前面要加上 <strong>guid</strong> 的關鍵字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?$filter=field eq guid&#x27;&lt;value&gt;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[Android Studio]platform not found</title>
    <url>/2014/04/07/android-studio-platform-not-found/</url>
    <content><![CDATA[<p>Ref from G+</p>
<blockquote>
<p>Ater upgrading to AS 0.5.4 I am getting this error 「Failed to set up SDK
Error:Module 『AndroinoTerm』: platform 『android-18』 not found」 while I already have android-18 installed. My sdk path is correctly setup and I am also able to run my project successfully. Does Anybody else having this issue ?</p>
</blockquote>
<p>Solution:
1. Change sdk folder location
2. update sdk path in android studio
3. change back to original location
4. update sdk path setting in android studio again
5. problem solved</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>[C#]Design Pattern for .NET Programmers</title>
    <url>/2014/04/28/c-what-is-lambda-expressions-action-func-and-predicate/</url>
    <content><![CDATA[<p>#NOTE: Youtube link: <a href="http://youtu.be/S8XL1L_1Lyw">http://youtu.be/S8XL1L_1Lyw</a></p>
<ul>
<li>Abstract Factory</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Patterns</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        public static Object Create(string className, Dictionary&lt;String, Object&gt; values)</span><br><span class="line">        &#123;</span><br><span class="line">            Type type = Type.GetType(className);</span><br><span class="line">            Object instance = Activator.CreateInstance(type);</span><br><span class="line">            foreach (var entry in values)</span><br><span class="line">            &#123;</span><br><span class="line">                type.GetProperty(entry.Key).SetValue(instance, entry.Value, null);</span><br><span class="line">            &#125;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(Create(&quot;Patterns.Book&quot;, new Dictionary&lt;string, object&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                &#123;&quot;Title&quot;, &quot;Some titles&quot;&#125;,</span><br><span class="line">                &#123;&quot;Pages&quot;, 100&#125;</span><br><span class="line">            &#125;));</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(Create(&quot;Patterns.CD&quot;, new Dictionary&lt;string, object&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                &#123;&quot;Title&quot;, &quot;Some CD&quot;&#125;,</span><br><span class="line">                &#123;&quot;Volume&quot;, 12&#125;</span><br><span class="line">            &#125;));           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Book</span><br><span class="line">    &#123;</span><br><span class="line">        public string Title &#123; get; set; &#125;</span><br><span class="line">        public int Pages &#123; get; set; &#125;</span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            return string.Format(&quot;Book &#123;0&#125; &#123;1&#125;&quot;, Title, Pages);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class CD</span><br><span class="line">    &#123;</span><br><span class="line">        public string Title &#123; get; set; &#125;</span><br><span class="line">        public int Volume &#123; get; set; &#125;</span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            return string.Format(&quot;CD &#123;0&#125; &#123;1&#125;&quot;, Title, Volume);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Cascade Pattern</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Patterns</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;           </span><br><span class="line">            // Sect I</span><br><span class="line">            //Mailer mailer = new Mailer();</span><br><span class="line">            //mailer.from(&quot;abc@mail.com&quot;);</span><br><span class="line">            //mailer.to(&quot;ddd@outlook.com&quot;);</span><br><span class="line">            //mailer.subject(&quot;subjeccccttt&quot;);</span><br><span class="line">            //mailer.message(&quot;contents blah blah&quot;);</span><br><span class="line">            //mailer.send();</span><br><span class="line"></span><br><span class="line">            // Sect II- Cascade way</span><br><span class="line">            new Mailer().from(&quot;abc@mail.com&quot;)</span><br><span class="line">                        .to(&quot;ddd@outlook.com&quot;)</span><br><span class="line">                        .subject(&quot;subjeccccttt&quot;)</span><br><span class="line">                        .message(&quot;contents blah blah&quot;)</span><br><span class="line">                        .send();</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    // Sect I</span><br><span class="line">    //class Mailer</span><br><span class="line">    //&#123;</span><br><span class="line">    //    public void to(string toAdrr) &#123; &#125;</span><br><span class="line">    //    public void from(string fromAddr) &#123; &#125;</span><br><span class="line">    //    public void subject(string sub)&#123;&#125;</span><br><span class="line">    //    public void message(string msg) &#123; &#125;</span><br><span class="line">    //    public void send() &#123; &#125;</span><br><span class="line">    //&#125;</span><br><span class="line"></span><br><span class="line">    // Sect II</span><br><span class="line">    class Mailer</span><br><span class="line">    &#123;</span><br><span class="line">        public Mailer to(string toAdrr) &#123; return this; &#125;</span><br><span class="line">        public Mailer from(string fromAddr) &#123; return this; &#125;</span><br><span class="line">        public Mailer subject(string sub) &#123; return this; &#125;</span><br><span class="line">        public Mailer message(string msg) &#123; return this; &#125;</span><br><span class="line">        public void send() &#123; &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Pluggable Behavior</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Patterns</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static int totalValues(int[] values)</span><br><span class="line">        &#123;</span><br><span class="line">            int total = 0;</span><br><span class="line">            foreach (var value in values)</span><br><span class="line">            &#123;</span><br><span class="line">                total += value;</span><br><span class="line">            &#125;</span><br><span class="line">            return total;</span><br><span class="line">        &#125;</span><br><span class="line">        static int totalEvenValues(int[] values)</span><br><span class="line">        &#123;</span><br><span class="line">            int total = 0;</span><br><span class="line">            foreach (var value in values)</span><br><span class="line">            &#123;</span><br><span class="line">                if (value % 2 == 0) total += value;</span><br><span class="line">            &#125;</span><br><span class="line">            return total;</span><br><span class="line">        &#125;</span><br><span class="line">        static int totalOddValues(int[] values)</span><br><span class="line">        &#123;</span><br><span class="line">            int total = 0;</span><br><span class="line">            foreach (var value in values)</span><br><span class="line">            &#123;</span><br><span class="line">                if (value % 2 != 0) total += value;</span><br><span class="line">            &#125;</span><br><span class="line">            return total;</span><br><span class="line">        &#125;</span><br><span class="line">        static int totalSelectValues(int[] values, Func&lt;int, bool&gt; selector)</span><br><span class="line">        &#123;</span><br><span class="line">            int total = 0;</span><br><span class="line">            foreach (var value in values)</span><br><span class="line">            &#123;                </span><br><span class="line">                // pass value(first param) into function and return second param value</span><br><span class="line">                if (selector(value)) total += value;</span><br><span class="line">            &#125;</span><br><span class="line">            return total;</span><br><span class="line">        &#125;</span><br><span class="line">        // </span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            int[] values = new int[] &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(totalValues(values));</span><br><span class="line">            Console.WriteLine(totalEvenValues(values));</span><br><span class="line">            Console.WriteLine(totalOddValues(values));</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;==================&quot;);</span><br><span class="line">            // re-write</span><br><span class="line">            // define functioin in lambda format</span><br><span class="line">            // ref: http://msdn.microsoft.com/zh-tw/library/bb397687(v=vs.110).aspx</span><br><span class="line">            Console.WriteLine(totalSelectValues(values, (value) =&gt; true));</span><br><span class="line">            Console.WriteLine(totalSelectValues(values, (value) =&gt; value % 2 == 0));</span><br><span class="line">            Console.WriteLine(totalSelectValues(values, (value) =&gt; value % 2 != 0));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Execute Around Method Pattern</li>
</ul>
<p><strong>part1</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Patterns</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        class Resource</span><br><span class="line">        &#123;</span><br><span class="line">            public Resource()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Creating...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            public void op1()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;op1...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            public void op2()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;op2...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            ~Resource()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;cleanup exensive resource&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                Resource resource = new Resource();</span><br><span class="line">                resource.op1();</span><br><span class="line">                resource.op2();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;out of the block&quot;);         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果:
<img src="http://farm6.staticflickr.com/5580/14064551455_dd5b4aa881_o.png" alt="執行結果"></p>
<p><strong>part2 (with using())</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Patterns</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        class Resource : IDisposable</span><br><span class="line">        &#123;</span><br><span class="line">            public Resource()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Creating...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            public void op1()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;op1...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            public void op2()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;op2...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            ~Resource()</span><br><span class="line">            &#123;</span><br><span class="line">                Clearnup();</span><br><span class="line">            &#125;</span><br><span class="line">            public void Dispose()</span><br><span class="line">            &#123;</span><br><span class="line">                Clearnup();</span><br><span class="line">                GC.SuppressFinalize(this);</span><br><span class="line">            &#125;</span><br><span class="line">            private void Clearnup()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;cleanup exensive resource&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            // this require class that implement IDisposable</span><br><span class="line">            using (Resource resource = new Resource())</span><br><span class="line">            &#123;</span><br><span class="line">                resource.op1();</span><br><span class="line">                resource.op2();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;out of the block&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>執行結果
<img src="http://farm3.staticflickr.com/2898/14061421201_8488f6081d_o.png" alt=""></p>
<p><strong>part3 with Execute Around Method Pattern</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace Patterns</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        class Resource</span><br><span class="line">        &#123;</span><br><span class="line">            //Call Resource class from here</span><br><span class="line">            public static void Use(Action&lt;Resource&gt; block)</span><br><span class="line">            &#123;</span><br><span class="line">                Resource resouce = new Resource();</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    block(resouce);</span><br><span class="line">                &#125;</span><br><span class="line">                finally</span><br><span class="line">                &#123;</span><br><span class="line">                    resouce.Clearnup();</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //change public to protected</span><br><span class="line">            // can&#x27;t new class in normal way : class _class = new class()</span><br><span class="line">            protected Resource()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Creating...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            public void op1()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;op1...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            public void op2()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;op2...&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            private void Clearnup()</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;cleanup exensive resource&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;            </span><br><span class="line">            &#123;</span><br><span class="line">                Resource.Use(</span><br><span class="line">                    (resource) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        resource.op1();</span><br><span class="line">                        resource.op2();</span><br><span class="line">                    &#125;);                </span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;out of the block&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>執行結果
<img src="http://farm8.staticflickr.com/7321/14084736613_7b95ec6720_o.png" alt=""></p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC]HTMLHelper work with AngularJs</title>
    <url>/2014/04/30/aspnet-mvc-htmlhelper-work-with-angularjs/</url>
    <content><![CDATA[<p>當要在htmlHelper裡面使用angularjs的屬性時, 原本的ng-model變成ng_model, 將 <strong>-</strong> 變成 <strong>_</strong> 即可</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Html.DropDownList(&quot;dropdown&quot;, (IEnumerable&lt;SelectListItem&gt;)ViewBag.items, new &#123; ng_model = &quot;currentSelect&quot;, ng_change = &quot;selectChanges()&quot; &#125;)</span><br><span class="line"></span><br><span class="line">會產生</span><br><span class="line">&lt;select id=&quot;dropdown&quot; name=&quot;dropdown&quot; ng-change=&quot;selectChanges()&quot; ng-model=&quot;currentSelect&quot;&gt;</span><br><span class="line">  &lt;options&gt;something&lt;/options&gt;*n</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[EF6] Entity Framework 6 Code First Migrations with Multiple Data Contexts (轉)</title>
    <url>/2014/05/04/ef6-entity-framework-6-code-first-migrations-with-multiple-data-contexts-change/</url>
    <content><![CDATA[<p>Ref: <a href="http://www.dotnet-tricks.com/Tutorial/entityframework/2VOa140214-Entity-Framework-6-Code-First-Migrations-with-Multiple-Data-Contexts.html">http://www.dotnet-tricks.com/Tutorial/entityframework/2VOa140214-Entity-Framework-6-Code-First-Migrations-with-Multiple-Data-Contexts.html</a></p>
<h2 id="如何動態產生Database"><a class="header-anchor" href="#如何動態產生Database"> </a>如何動態產生Database</h2>
<p>如果利用Code first的方式，搭配DbMigration即可完成工作</p>
<ul>
<li>DBContext.cs</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class DemoContext : DbContext</span><br><span class="line">    &#123;</span><br><span class="line">        public DemoContext() &#123; &#125;</span><br><span class="line">        public DemoContext(string ConnectionString)</span><br><span class="line">            : base(ConnectionString)</span><br><span class="line">        &#123;            </span><br><span class="line">            Database.SetInitializer(new CustomInitializer());</span><br><span class="line">            Database.Initialize(true);</span><br><span class="line">        &#125;        </span><br><span class="line">        public DbSet&lt;Blog&gt; Blogs &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>CustomInitializer.cs</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity.Infrastructure;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity.Migrations;</span><br><span class="line"><span class="keyword">using</span> System.Data.Entity.Migrations.Infrastructure;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Configuration</span> : <span class="title">DbMigrationsConfiguration</span>&lt;<span class="title">DemoContext</span>&gt;</span><br><span class="line">&#123;        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Configuration</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AutomaticMigrationsEnabled = <span class="literal">true</span>;</span><br><span class="line">        MigrationsDirectory = <span class="string">@&quot;Migration&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Seed</span>(<span class="params">DemoContext context</span>)</span></span><br><span class="line">    &#123;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">CustomInitializer</span> : <span class="title">IDatabaseInitializer</span>&lt;<span class="title">DemoContext</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitializeDatabase</span>(<span class="params">DemoContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!context.Database.Exists() || !context.Database.CompatibleWithModel(<span class="literal">false</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">            configuration.TargetDatabase = <span class="keyword">new</span> DbConnectionInfo(context.Database.Connection.ConnectionString, <span class="string">&quot;System.Data.SqlClient&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> migrator = <span class="keyword">new</span> DbMigrator(configuration);                </span><br><span class="line">            migrator.Update();                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>client端</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using (var db = new AtaBookContext(connection1))&#123;&#125;</span><br><span class="line">using (var db = new AtaBookContext(connection2))&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>connection1和connection2分別指到不同的資料庫，EF就會根據連線字串的設定產生相對應的資料庫</p>
]]></content>
      <categories>
        <category>Entity Framework</category>
      </categories>
      <tags>
        <tag>EF6</tag>
      </tags>
  </entry>
  <entry>
    <title>[EF6] BulkInsert</title>
    <url>/2014/05/13/ef6-bulkinsert/</url>
    <content><![CDATA[<h2 id="處理狀況"><a class="header-anchor" href="#處理狀況"> </a>處理狀況</h2>
<p>當要同一時間新增大量資料時，如果單純用EF的新增方式，速度會讓人吐血。
所以需要透過BulkInsert的方式處理，但是又不想自己另外寫ado的方式處理，所以就要透過extenstion的方式，
讓EF的功能加強一下</p>
<p>##安裝 EntityFramework.BulkInsert-ef6</p>
<p><a href="https://www.nuget.org/packages/EntityFramework.BulkInsert-ef6/6.0.2.7">Nuget</a></p>
<p>##參考文件</p>
<p><a href="http://efbulkinsert.codeplex.com/">http://efbulkinsert.codeplex.com/</a></p>
<p>##(用法)Demo Code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using(context db = new context())&#123;</span><br><span class="line">     // 原本會用</span><br><span class="line">     // db.tables.AddRange(entities);</span><br><span class="line">     // 改用</span><br><span class="line">     db.BulkInsert(entities);</span><br><span class="line">     </span><br><span class="line">     db.SaveChanges();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##執行結果
<strong>非常快速</strong></p>
]]></content>
      <categories>
        <category>Entity Framework</category>
      </categories>
      <tags>
        <tag>EF6</tag>
      </tags>
  </entry>
  <entry>
    <title>[參考] OData 101: Using the [NotMapped] attribute to exclude Enum properties</title>
    <url>/2014/07/07/reference-odata-101-using-the-notmapped-attribute-to-exclude-enum-properties/</url>
    <content><![CDATA[<p>使用OData時如果遇到model裡面有自訂欄位是資料庫不存在時，就會出現錯誤</p>
<p>解決方案請參閱此篇文章</p>
<p><a href="http://blogs.msdn.com/b/odatateam/archive/2012/08/29/odata-101-using-the-notmapped-attribute-to-exclude-enum-properties.aspx">OData 101: Using the [NotMapped] attribute to exclude Enum properties</a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>OData</tag>
      </tags>
  </entry>
  <entry>
    <title>[Web] Local Storage</title>
    <url>/2014/07/17/web-local-storage/</url>
    <content><![CDATA[<p>javascript基本操作html5的 local storage方法
<img src="http://user-image.logdown.io/user/4862/blog/4871/post/210650/xi3DOygTnagKxZHig8Yw_image_thumb.png" alt="image_thumb.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// set item val</span><br><span class="line">window.localstorage.setItem(key,value);</span><br><span class="line">window.localstorage.getItem(key);</span><br><span class="line">window.localstorage.removeItem(key);</span><br><span class="line">window.localstorage.clear();</span><br></pre></td></tr></table></figure>
<p>如果要把array object存入到localstorage裡面，需要把object轉換成文字.所以可透過json的方法來處理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.stringify(object);</span><br><span class="line">JSON.parse(value);</span><br></pre></td></tr></table></figure>
<p>ref:</p>
<p><a href="http://www.w3schools.com/html/html5_webstorage.asp">http://www.w3schools.com/html/html5_webstorage.asp</a></p>
<p><a href="http://blog.roodo.com/rocksaying/archives/15967715.html">http://blog.roodo.com/rocksaying/archives/15967715.html</a></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC]OData PageResult v4</title>
    <url>/2014/07/31/aspnet-mvc-odata-pageresult-v4/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ODataHttpRequestMessageExtensions.GetNextPageLink 和 </span><br><span class="line">ODataHttpRequestMessageExtensions.GetInlineCount 都過時了..</span><br></pre></td></tr></table></figure>
<p>要改用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request.ODataProperties().NextLink,</span><br><span class="line">Request.ODataProperties().TotalCount</span><br></pre></td></tr></table></figure>
<p>ODataProperties 需要使用
<strong>System.Web.Http.OData.Extensions</strong> 或 <strong>System.Web.OData.Extensions</strong> 命名空間</p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC]WebApi回傳值得表示</title>
    <url>/2014/07/30/aspnet-mvc-webapi-return-worth/</url>
    <content><![CDATA[<p><a href="http://asp.net">asp.net</a> mvc webapi 2 提供了 IHttpActionResult 這個界面</p>
<p>這個界面的效果基本上是跟HttpResponseMessage是一樣的
但是在回傳值的表示有些微的不一樣,以下是整理表</p>
<table>
<thead>
<tr>
<th>IHttpActionResult</th>
<th>HttpResponseMessage Request.CreateResponse(HttpStatusCode)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ok()</td>
<td>HttpStatusCode.OK</td>
</tr>
<tr>
<td>InternalServerError()</td>
<td>HttpStatusCode.InternalServerError</td>
</tr>
<tr>
<td>NotFound()</td>
<td>HttpStatusCode.NotFound</td>
</tr>
</tbody>
</table>
<p>more on <a href="http://msdn.microsoft.com/zh-tw/library/system.web.http.apicontroller_methods(v=vs.118).aspx">http://msdn.microsoft.com/zh-tw/library/system.web.http.apicontroller_methods(v=vs.118).aspx</a></p>
<p>這樣子寫起來就乾淨很多了</p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[VS2013] Introducing Gulp, Grunt, Bower, and npm support for Visual Studio [REF]</title>
    <url>/2014/09/04/vs2013-introducing-gulp-grunt-bower-and-npm-support-for-visual-studio-ref/</url>
    <content><![CDATA[<p>文章參考: <a href="http://www.hanselman.com/blog/IntroducingGulpGruntBowerAndNpmSupportForVisualStudio.aspx">http://www.hanselman.com/blog/IntroducingGulpGruntBowerAndNpmSupportForVisualStudio.aspx</a></p>
<p>需要條件
VS2013 update 3 installed</p>
<p>Visual Studio Extension</p>
<ol>
<li>[TRX - Task Runner Explorer](TRX - Task Runner Explorer)</li>
<li><a href="http://visualstudiogallery.msdn.microsoft.com/65748cdb-4087-497e-a394-2e3449c8e61e">NPM/NBower Package Intellisense </a> :  Search for online NPM and Bower packages directly with Intellisense</li>
<li><a href="http://visualstudiogallery.msdn.microsoft.com/dcbc5325-79ef-4b72-960e-0a51ee33a0ff">Grunt Launcher</a></li>
</ol>
<p>操作方式:
請參考 <a href="http://www.hanselman.com/blog/IntroducingGulpGruntBowerAndNpmSupportForVisualStudio.aspx">http://www.hanselman.com/blog/IntroducingGulpGruntBowerAndNpmSupportForVisualStudio.aspx</a></p>
<p>好處:</p>
<p>不用再開一個command window 來跑grunt or gulp command, 所有的動作可以在VS裡面完成了
VS2013對於前端網頁的開發支援程度愈來越好了</p>
]]></content>
      <categories>
        <category>Visual Studio</category>
      </categories>
      <tags>
        <tag>VS2015</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularJS] 粗心的錯誤 Error: error:infdig</title>
    <url>/2014/10/08/angular-careless-mistakes-errorerrorinfdig/</url>
    <content><![CDATA[<p>angular在寫ng-repeat的時後, 因為想要利用 filter的功能將過濾後的資料集拿到不同區塊使用, 把function 寫到ng-repeat裡面。 像是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng-repeat=&quot;item in processData((items | filter: someCondition))&quot;</span><br></pre></td></tr></table></figure>
<p>這一個粗心的錯誤會讓angular產生<strong>Error: error:infdig,Infinite $digest Loop</strong>的錯誤訊息</p>
<p>這個訊息的產生原因是當ng-repeat每跑一次, 會觸發processData fuction =&gt; 因為值改變，所以又會觸發$digest. 然後當$digest的次數太多之後，就會發生錯誤訊息, 執行效率也會變得非常的不好。</p>
<p>所以回到angularjs的頁面裡找到這個<a href="">https://docs.angularjs.org/error/$rootScope/infdig</a></p>
<p>下面的說明就有提到這個現象.</p>
<blockquote>
<p>Since getUsers() returns a new array, Angular determines that the model is different on each $digest cycle, resulting in the error. The solution is to return the same array object if the elements have not changed:</p>
</blockquote>
<p>解決的方式就是不要在ng-repeat裡面寫function. 但如果要達到相同的效果, 可以先將過濾後的結果存到一個變數中, 然後在去操作那個變數就不會產生這個錯誤了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng-repeat=&quot;item in (someVar = items | filter: someCondition)&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure] SQL Azure 規格調整比較</title>
    <url>/2014/10/08/azure-sql-azure-specs-adjusted/</url>
    <content><![CDATA[<p>今天在將資料庫搬到Azure的環境上面，然後遇到了一個選擇的困擾.
原本SQL Azure的規格有兩種. Web和Business
新的規格有三種Basic, Standard, Premium.
相關的規格說明請參閱<a href="">http://azure.microsoft.com/zh-tw/pricing/details/sql-database/</a></p>
<p>所以我就先試試看Basic方案，結果：速度一個慢, 但是比Web規格便宜 （真的不建議使用，用這個不如用S0)
Web的速度只有Premium 2可以跟的上, 價錢就是一個不可思議</p>
<p>那S0呢? 我嘗試後的結果是在可以接受的範圍內。但是價錢比Web貴了一點.
之後的規格，基本上就是價錢決定效能。</p>
<p>那我又想說如果自己用VM架設sql server呢…哈, 更貴. Orz. 直接放棄不考慮</p>
<p>最後只好還是繼續用要被淘汰的Web規格。然後抱著希望說等明年Web規格退休後，Azure可以提供更優價錢可以接受的選項。</p>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
      </tags>
  </entry>
  <entry>
    <title>[ngCordova] Move File</title>
    <url>/2014/10/15/cordova-file/</url>
    <content><![CDATA[<p>When move file in ngCordova or Cordova, it will need 2 plugins.</p>
<ol>
<li>cordova plugin add org.apache.cordova.file</li>
<li>cordova plugin add org.apache.cordova.file-transfer</li>
</ol>
<p>basic usage.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cordovaFile.downloadFile(source, filepath, true, &#123;&#125;).then(function(result) &#123;</span><br><span class="line">            // Success! </span><br><span class="line">        &#125;, function(err) &#123;</span><br><span class="line">            // Error</span><br><span class="line">        &#125;, function(progress) &#123;</span><br><span class="line">            // constant progress updates</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>it’s same as</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fileTransfer = new FileTransfer();</span><br><span class="line">var uri = encodeURI(source);</span><br><span class="line">fileTransfer.download(uri,filePath,</span><br><span class="line">function (entry) &#123;</span><br><span class="line">// success</span><br><span class="line">&#125;,</span><br><span class="line">function (error) &#123;</span><br><span class="line">// error</span><br><span class="line">&#125;,</span><br><span class="line">trustAllHosts, options);</span><br></pre></td></tr></table></figure>
<p>if you want to use it with $cordovaCamera.getPicture(), you will need to resolve FILE_URI first, and use it as source.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getImageFileName(image) &#123;</span><br><span class="line">        window.resolveLocalFileSystemURL(image,</span><br><span class="line">            function(entry) &#123;</span><br><span class="line">                var uri = entry.toURL();</span><br><span class="line">                entry.file(function(file) &#123;</span><br><span class="line">                    var fileName = file.name;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://docs.phonegap.com/en/3.3.0/cordova_file_file.md.html#FileEntry">API Document#File Entry</a></p>
<p>another problem is filepath.
basePath can find it by below code. and filepath need a filename at the end.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cordovaFile.createDir(directory, false).then(function(entry) &#123;</span><br><span class="line">            // Success! </span><br><span class="line">            alert(entry.toURL());</span><br><span class="line">        &#125;, function(err) &#123;</span><br><span class="line">            // An error occured. Show a message to the user</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Library</category>
      </categories>
      <tags>
        <tag>ngCordova</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure] DocumentDB</title>
    <url>/2014/11/02/azure-documentdb/</url>
    <content><![CDATA[<p>使用Azure新的NoSQL – DocumentDB(還在preview版本中)</p>
<p>怎們建立網頁上面有說. 這裡只記錄一些操作上的動作</p>
<ul>
<li>DocumentDB裡面有分幾個元素 Database, DocumentCollection, document</li>
</ul>
<p>元素之間的關係</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Database -&gt; DocumentCollection(with id name=xxxx)  -&gt; document(s)</span><br><span class="line">         -&gt; DocumentCollection(with id name=xxxx)  -&gt; document(s)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">* 檢查database是否已存在</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>string dataBaseName = 「testDB」;
var client = new DocumentClient(new Uri(EndpointUrl), AuthorizationKey);</p>
<p>var database = client.CreateDatabaseQuery().FirstOrDefault(db =&gt; <a href="http://db.Id">db.Id</a> == dataBaseName);</p>
<p>if (database == null)
{
database = await client.CreateDatabaseAsync(
new Database
{
Id = dataBaseName
});
}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 這個寫法如果用在webapi上面，會有出現等不到回應的情形發生，所以解決方法是變成同步, 寫法會變成</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>database = client.CreateDatabaseAsync(new Database{Id = dataBaseName}).Result;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 檢查DocumentCollection是否已經建立</span><br><span class="line"></span><br><span class="line">從上面知道如果要檢查Database是否已經建立, 要利用CreateDatabaseQuery(), </span><br><span class="line">同樣的， 如果要檢查Document是否已經建立, 就要用 CreateDocumentCollectionQuery(database.CollectionsLink)</span><br><span class="line"></span><br><span class="line">[MSDN -- DocumentServiceQueryable.CreateDatabaseQuery](http://msdn.microsoft.com/en-us/library/azure/microsoft.azure.documents.linq.documentservicequeryable.createdatabasequery.aspx)</span><br><span class="line"></span><br><span class="line">[MSDN -- DocumentServiceQueryable.CreateDocumentCollectionQuery Method](http://msdn.microsoft.com/en-us/library/azure/microsoft.azure.documents.linq.documentservicequeryable.createdocumentcollectionquery.aspx)</span><br><span class="line"></span><br><span class="line">* 建立Document</span><br><span class="line"></span><br><span class="line">new a class object and save into DocumentCollection</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>User _user = new User(){name=『abc』};
var document1 = await client.CreateDocumentAsync(documentCollectionLink, _user);</p>
<p>這裡的documentCollectionLink是指
DocumentCollection collection = client.CreateDocumentCollectionQuery(database.SelfLink).FirstOrDefault(db =&gt; <a href="http://db.Id">db.Id</a> == dataBaseName);
或者是剛新增出來的collection
DocumentCollection collection = client.CreateDocumentCollectionAsync(database.SelfLink,
new DocumentCollection
{
Id = 「some name」
});</p>
<p>documentCollectionLink = collection.SelfLink;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 更新Document</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>var doc = Client.CreateDocumentQuery<Document>(Favorscollection.DocumentsLink)
.Where(d =&gt; <a href="http://d.Id">d.Id</a> == id)
.AsEnumerable()
.FirstOrDefault();</p>
<p>return Client.ReplaceDocumentAsync(doc.SelfLink, item);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 刪除Document</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>var doc = Client.CreateDocumentQuery<Document>(Favorscollection.DocumentsLink)
.Where(d =&gt; <a href="http://d.Id">d.Id</a> == id)
.AsEnumerable()
.FirstOrDefault();</p>
<p>return Client.DeleteDocumentAsync(doc.SelfLink);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 查詢Document</span><br><span class="line"></span><br><span class="line">可以用Linq的語法來做查詢或是用sql的語法也可以</span><br><span class="line"></span><br><span class="line">[[DOC] Query DocumentDB](http://azure.microsoft.com/zh-tw/documentation/articles/documentdb-sql-query/)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Client.CreateDocumentQuery<viewModel>(Favorscollection.DocumentsLink)
.Where(m =&gt; m.lastName == 「xxxx」)
.ToList()</p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure] Azure Storage 2.0 – Some blob changes to be aware of -Ref</title>
    <url>/2014/11/06/azure-ref-azure-storage-20-some-blob-changes-to-be-aware-of/</url>
    <content><![CDATA[<p>Reference Website Url
<a href="http://happyfunpartytime.com/2012/11/azure-storage-2-0-some-blob-changes-to-be-aware-of/">http://happyfunpartytime.com/2012/11/azure-storage-2-0-some-blob-changes-to-be-aware-of/</a></p>
<p>大綱:</p>
<p>如果從官網上面抄下來的範例如果直接貼在vs裡面，會出現錯誤，那根據原本字面上的意思來找相類似的method來用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CloudBlob thumbnailBlob = objContainer.GetBlobReference(filename);</span><br></pre></td></tr></table></figure>
<p>換成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var thumbnailBlob = objContainer.GetBlobReferenceFromServer(filename);</span><br></pre></td></tr></table></figure>
<p>結果，一直給我跑404.</p>
<p>這GetBlobReserenceFromServer的用意是去server上面找filename的blob reference回來. 所以當我們要建立新的blob, 這就文不對題了。 所以要改用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CloudBlockBlob blob = objContainer).GetBlockBlobReference(filename);</span><br></pre></td></tr></table></figure>
<p>這樣子就okey了.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blob.UploadFile(fileData.LocalFileName);</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<p>這個也改掉了, 要改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CloudBlockBlob.UploadFromFile(filenameWithPath, FileMode)</span><br></pre></td></tr></table></figure>
<p>CloudBlockBlob也有提供不同的上傳方式，請參閱<a href="http://msdn.microsoft.com/en-us/library/microsoft.windowsazure.storage.blob.cloudblockblob_methods.aspx">MSDN</a></p>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javsscript] for loop VS forEach when there is async function</title>
    <url>/2014/11/10/javsscript-for-loop-vs-foreach-when-there-is-async-function/</url>
    <content><![CDATA[<p>今天在檢查一段程式的時候，再跑一段根據array的資料新增或更新到資料庫中，卻發現都是更新同一筆紀錄
原本的寫法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(var i=0; i &lt; arr.length; i++)&#123;</span><br><span class="line">	db.insert(xxx).then(function()&#123;</span><br><span class="line">     ...</span><br><span class="line">     all insert the same record</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這是因為javascript async non-blocking的關係，所以資料庫新增自己跑自己的，for迴圈跑自己的，當新增時要取資料庫裡面資料時，會取到不對的值</p>
<p>解法：用array.forEach來替代for loop</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.forEach(function(item,idx)&#123;</span><br><span class="line">	db.insert(xxx).then(function()&#123;</span><br><span class="line">  		...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當我改寫成這樣子後，就正常了</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularJS] 混亂的html5mode</title>
    <url>/2014/11/11/angular-chaos-html5mode/</url>
    <content><![CDATA[<p>Angular裡面有一個方法可以把# (hash tag) 給拿掉，那就是將html5mode開啟</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$locationProvider.html5Mode(true).hashPrefix(&#x27;!&#x27;)</span><br><span class="line"></span><br><span class="line">// 這應該會要求設定&lt;base href=&quot;/&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>但是如果angular <a href="http://xn--routeasp-v86nf61j5rd02h.net">route是架構在asp.net</a> mvc上面，那就會有route打架的情形發生, 或著reload page會出現頁面錯誤的訊息
網路上面的資訊也有很多種版本，以下我也提供一下我的版本</p>
<p>主要重點, asp.net的routeConfig裡面也要同時間定義angular route的部份，但是controller/action是指到index page</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">routes.MapRoute(&quot;member_edit&quot;,</span><br><span class="line">             &quot;member/edit/&#123;.Catchall&#125;&quot;,</span><br><span class="line">             new &#123; controller = &quot;Home&quot;, action = &quot;Index&quot; &#125;,</span><br><span class="line">             namespaces: new[] &#123; &quot;Demo.Areas.member.Controllers&quot; &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.state(&#x27;main.edit&#x27;, &#123;</span><br><span class="line">           url: &#x27;edit/:id&#x27;,</span><br><span class="line">           views: &#123;</span><br><span class="line">               &#x27;list@main&#x27;: &#123;</span><br><span class="line">                   controller: &#x27;editFavorController&#x27;,</span><br><span class="line">                   controllerAs: &#x27;vm&#x27;,</span><br><span class="line">                   templateUrl: &#x27;Home/EditFavor&#x27;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure>
<p>這樣子的設定, 可以讓其他頁面直接用網址的方式開啟那個頁面(請搜尋 deep link angualr)</p>
<p>當設定完成後，卻又發現另外一個問題，問題是, 我在選單連結的部份，有一些是要跑mvc本身的actionlink的動作, 但是angular會先處理 &lt; a &gt; 的動作，所以要跳過這個動作，可以利用 <strong>window.location.replace</strong> 來處理</p>
]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure] Website Always On</title>
    <url>/2014/11/24/azure-website-always-on/</url>
    <content><![CDATA[<p>當mvc website第一次讀取的速度都會很慢，這個原因是因為要做complie的動作，
那如何避免這個現象發生呢,</p>
<ol>
<li>將azure website的規格升級到basic以上的規格並開啟alowasy on.</li>
<li>寫webjob(請參考這篇文章http://wp.sjkp.dk/windows-azure-websites-and-cloud-services-slow-on-first-request/)</li>
<li>利用http://www.thecloudup.com/, 幫你做第二點事情(免費)</li>
</ol>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
      </tags>
  </entry>
  <entry>
    <title>[Laravel] Laravel with Angular</title>
    <url>/2015/01/04/laravel-laravel-with-angular/</url>
    <content><![CDATA[<p>當laravel想要好好的跟angular在一起時，Route都是他們之間的第三者。
前一陣子有發現一個還不錯的方式可以讓Laravel的Route失效。那就是利用</p>
<pre><code>App::missing(function($exception)
&#123;	
	return View::make('index');
&#125;);
```

這樣子的設定，就可以不用讓Laravel一直回傳index頁面. 如果需要其他路由設定時，就直接在上面新增即可.

當這樣子設定時，html頁面就可以放在public folder下面，不用使用blade template. 好處是，不用再多學習blade的語法。angular的操作也比較直覺。</code></pre>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kinect] 開始學習寫Kinect App ( 零 )</title>
    <url>/2015/01/22/kinect-began-to-learn-to-write-a-kinect-app/</url>
    <content><![CDATA[<p>Xbox One 同時推出Kinect v2，提供更強大的硬體功能及軟體功能, 剛好手上的案子也差不多到一個段落了。
所以決定來學習Kinect的開發</p>
<p>前置準備</p>
<ol>
<li>Kinect for windows</li>
<li>如果已經有了xbox one, 可以只買kinect adapter轉接器就可以了 <a href="http://buy.gamer.com.tw/atmItem.php?sn=17700">巴哈</a></li>
<li>Kinect sdk 2</li>
</ol>
<p>硬體需求</p>
<ol>
<li>CPU: i7(建議)</li>
<li>RAM: 4GB(建議)</li>
<li>GPU: DirectX11 (必須)</li>
<li>USB 3.0（必須)</li>
<li>OS: Windows 8.0/8.1(必須)</li>
</ol>
<p>詳細細節請參考<a href="http://www.microsoft.com/en-us/kinectforwindows/">官方網站</a></p>
<p>已經買了adapter, 等東西寄到後就可以開始學習了</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kinect] Day 1 - 讓程式碼先能動</title>
    <url>/2015/01/29/kinect-day-1/</url>
    <content><![CDATA[<h2 id="Kinect-Data-Source"><a class="header-anchor" href="#Kinect-Data-Source"> </a>Kinect Data Source</h2>
<pre><code>- Color
- Infrared
- Depth
- Body
- BodyIndex    
</code></pre>
<h2 id="For-Windows-8-1-App"><a class="header-anchor" href="#For-Windows-8-1-App"> </a>For Windows 8.1 App</h2>
<pre><code>- 開啟microphone, webcam權限
- 加入WindowsPreview.Kinect
- 建置CPU設定為x86
</code></pre>
<h2 id="取得kinectSensor的方式"><a class="header-anchor" href="#取得kinectSensor的方式"> </a>取得kinectSensor的方式</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.sensor = KinectSensor.GetDefault();</span><br><span class="line">this.sensor.Open();</span><br><span class="line">this.sensor.Close();</span><br></pre></td></tr></table></figure>
<h2 id="Readers"><a class="header-anchor" href="#Readers"> </a>Readers</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InfraredFrameReader reader = this.sensor.InfraredFrameSource.OpenReader();</span><br><span class="line">reader.FrameArrived += InfraredReaderFrameArrvied;</span><br></pre></td></tr></table></figure>
<h2 id="Frame-references"><a class="header-anchor" href="#Frame-references"> </a>Frame references</h2>
<pre><code>- Send in frame event args
- AcquireFrame : access to the actual frame
- RelativeTime : allow to templorally correlate frames
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void InfraredReaderFrameArrvied(InfraredFrameReader sender, InfraredFrameArrivedEventArgs args)</span><br><span class="line">&#123;</span><br><span class="line">		using (InfraredFrame frame = args.FrameReference.AcquireFrame())</span><br><span class="line">    &#123;</span><br><span class="line">      if (frame != null)</span><br><span class="line">      &#123;</span><br><span class="line">      // Get What you need from the frame</span><br><span class="line">      </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Frame"><a class="header-anchor" href="#Frame"> </a>Frame</h2>
<pre><code>- Gives access to the frame data
    - Make a local copy of access the underlying buffer directly
- Contains metadata for the frame
    - Color, Format, width, height,etc.
- Important: Not Disposing frames will cause you to not receive more frames
</code></pre>
<h2 id="Demo-Code"><a class="header-anchor" href="#Demo-Code"> </a>Demo Code</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Runtime.InteropServices.WindowsRuntime;</span><br><span class="line">using Windows.Foundation;</span><br><span class="line">using Windows.Foundation.Collections;</span><br><span class="line">using Windows.UI.Xaml;</span><br><span class="line">using Windows.UI.Xaml.Controls;</span><br><span class="line">using Windows.UI.Xaml.Controls.Primitives;</span><br><span class="line">using Windows.UI.Xaml.Data;</span><br><span class="line">using Windows.UI.Xaml.Input;</span><br><span class="line">using Windows.UI.Xaml.Media;</span><br><span class="line">using Windows.UI.Xaml.Navigation;</span><br><span class="line">using WindowsPreview.Kinect;</span><br><span class="line">using Windows.UI.Xaml.Media.Imaging;</span><br><span class="line"></span><br><span class="line">namespace KinectStudy_01</span><br><span class="line">&#123;    </span><br><span class="line">    public sealed partial class MainPage : Page</span><br><span class="line">    &#123;</span><br><span class="line">        public MainPage()</span><br><span class="line">        &#123;</span><br><span class="line">            this.InitializeComponent();  </span><br><span class="line">            this.Loaded += MainPage_Loaded;         </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"> 			  KinectSensor sensor;</span><br><span class="line">        InfraredFrameReader reader;</span><br><span class="line">        ushort[] irData;</span><br><span class="line">        byte[] irDateConverted;</span><br><span class="line">        WriteableBitmap irBitmap;    </span><br><span class="line"></span><br><span class="line">				private void MainPage_Loaded(object sender, RoutedEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            sensor = KinectSensor.GetDefault();</span><br><span class="line">            reader = sensor.InfraredFrameSource.OpenReader();</span><br><span class="line">            FrameDescription fd = sensor.InfraredFrameSource.FrameDescription;</span><br><span class="line">            irData = new ushort[fd.LengthInPixels];</span><br><span class="line">            irDateConverted = new byte[fd.LengthInPixels * 4];</span><br><span class="line">            irBitmap = new WriteableBitmap(fd.Width, fd.Height);</span><br><span class="line">            image.Source = irBitmap;</span><br><span class="line"></span><br><span class="line">            sensor.Open();</span><br><span class="line">            reader.FrameArrived += InfraredReaderFrameArrvied;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">        private void InfraredReaderFrameArrvied(InfraredFrameReader sender, InfraredFrameArrivedEventArgs args)</span><br><span class="line">        &#123;</span><br><span class="line">            using (InfraredFrame frame = args.FrameReference.AcquireFrame())</span><br><span class="line">            &#123;</span><br><span class="line">                if (frame != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    // Get What you need from the frame</span><br><span class="line">                    frame.CopyFrameDataToArray(irData);</span><br><span class="line">                    for (int i = 0; i &lt; irData.Length; i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        byte intensity = (byte)(irData[i] &gt;&gt; 8);</span><br><span class="line">                        irDateConverted[i * 4] = intensity;</span><br><span class="line">                        irDateConverted[i * 4 + 1] = intensity;</span><br><span class="line">                        irDateConverted[i * 4 + 2] = intensity;</span><br><span class="line">                        irDateConverted[i * 4 + 3] = 255;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    irDateConverted.CopyTo(irBitmap.PixelBuffer);</span><br><span class="line">                    irBitmap.Invalidate();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Demo2"><a class="header-anchor" href="#Demo2"> </a>Demo2</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Runtime.InteropServices.WindowsRuntime;</span><br><span class="line">using Windows.Foundation;</span><br><span class="line">using Windows.Foundation.Collections;</span><br><span class="line">using Windows.UI.Xaml;</span><br><span class="line">using Windows.UI.Xaml.Controls;</span><br><span class="line">using Windows.UI.Xaml.Controls.Primitives;</span><br><span class="line">using Windows.UI.Xaml.Data;</span><br><span class="line">using Windows.UI.Xaml.Input;</span><br><span class="line">using Windows.UI.Xaml.Media;</span><br><span class="line">using Windows.UI.Xaml.Navigation;</span><br><span class="line">using WindowsPreview.Kinect;</span><br><span class="line">using Windows.UI.Xaml.Media.Imaging;</span><br><span class="line"></span><br><span class="line">using Windows.UI.Xaml.Shapes;</span><br><span class="line">using Windows.UI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">namespace KinectStudy_01</span><br><span class="line">&#123;</span><br><span class="line">    public sealed partial class MainPage : Page</span><br><span class="line">    &#123;</span><br><span class="line">        KinectSensor sensor;</span><br><span class="line">        InfraredFrameReader reader;</span><br><span class="line">        ushort[] irData;</span><br><span class="line">        byte[] irDateConverted;</span><br><span class="line">        WriteableBitmap irBitmap;</span><br><span class="line"></span><br><span class="line">        Body[] bodies;</span><br><span class="line">        MultiSourceFrameReader msfr;</span><br><span class="line"></span><br><span class="line">        public MainPage()</span><br><span class="line">        &#123;</span><br><span class="line">            this.InitializeComponent();</span><br><span class="line">            this.Loaded += MainPage_Loaded;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void MainPage_Loaded(object sender, RoutedEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            sensor = KinectSensor.GetDefault();</span><br><span class="line">            reader = sensor.InfraredFrameSource.OpenReader();</span><br><span class="line">            FrameDescription fd = sensor.InfraredFrameSource.FrameDescription;</span><br><span class="line">            irData = new ushort[fd.LengthInPixels];</span><br><span class="line">            irDateConverted = new byte[fd.LengthInPixels * 4];</span><br><span class="line">            irBitmap = new WriteableBitmap(fd.Width, fd.Height);</span><br><span class="line">            image.Source = irBitmap;</span><br><span class="line"></span><br><span class="line">            bodies = new Body[6];</span><br><span class="line">            msfr = sensor.OpenMultiSourceFrameReader(FrameSourceTypes.Body | FrameSourceTypes.Infrared);</span><br><span class="line">            msfr.MultiSourceFrameArrived += msfr_MultiSourceFrameArrived;</span><br><span class="line"></span><br><span class="line">            sensor.Open();            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void msfr_MultiSourceFrameArrived(MultiSourceFrameReader sender, MultiSourceFrameArrivedEventArgs args)</span><br><span class="line">        &#123;</span><br><span class="line">            using (MultiSourceFrame frame = args.FrameReference.AcquireFrame())</span><br><span class="line">            &#123;</span><br><span class="line">                if (frame != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    using (BodyFrame bodyframe = frame.BodyFrameReference.AcquireFrame())</span><br><span class="line">                    &#123;</span><br><span class="line">                        using (InfraredFrame ifFrame = frame.InfraredFrameReference.AcquireFrame())</span><br><span class="line">                        &#123;</span><br><span class="line">                            if (bodyframe != null &amp;&amp; ifFrame != null)</span><br><span class="line">                            &#123;</span><br><span class="line">                                // Get What you need from the frame</span><br><span class="line">                                ifFrame.CopyFrameDataToArray(irData);</span><br><span class="line">                                for (int i = 0; i &lt; irData.Length; i++)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    byte intensity = (byte)(irData[i] &gt;&gt; 8);</span><br><span class="line">                                    irDateConverted[i * 4] = intensity;</span><br><span class="line">                                    irDateConverted[i * 4 + 1] = intensity;</span><br><span class="line">                                    irDateConverted[i * 4 + 2] = intensity;</span><br><span class="line">                                    irDateConverted[i * 4 + 3] = 255;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                irDateConverted.CopyTo(irBitmap.PixelBuffer);</span><br><span class="line">                                irBitmap.Invalidate();</span><br><span class="line">																</span><br><span class="line">                                // 取得身體的相關資料</span><br><span class="line">                                bodyframe.GetAndRefreshBodyData(bodies);</span><br><span class="line">                                bodyCanvas.Children.Clear();</span><br><span class="line">                                foreach (Body body in bodies)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    if (body.IsTracked)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        // 取得頭的關節位置</span><br><span class="line">                                        Joint headJoint = body.Joints[JointType.Head];</span><br><span class="line">                                        if (headJoint.TrackingState == TrackingState.Tracked)</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            // 轉換成DepthSpacePoint</span><br><span class="line">                                            DepthSpacePoint dsp = sensor.CoordinateMapper.MapCameraPointToDepthSpace(headJoint.Position);</span><br><span class="line">                                            // 在該位置上畫圓圈</span><br><span class="line">                                            Ellipse headCircle = new Ellipse() &#123; Width = 50, Height = 50, Fill = new SolidColorBrush(Color.FromArgb(255, 255, 0, 0)) &#125;;</span><br><span class="line">                                            bodyCanvas.Children.Add(headCircle);</span><br><span class="line">                                            Canvas.SetLeft(headCircle, dsp.X - 25);</span><br><span class="line">                                            Canvas.SetTop(headCircle, dsp.Y - 25);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Kinect</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularJS] Directive筆記一下</title>
    <url>/2015/02/02/angular-directive-notes/</url>
    <content><![CDATA[<h2 id="Scope"><a class="header-anchor" href="#Scope"> </a>Scope</h2>
<p>Text Binding : @
Two-way Binding: =
Method binding (One-way Binding): &amp;</p>
<h2 id="Ref-website"><a class="header-anchor" href="#Ref-website"> </a>Ref website</h2>
<ol>
<li><a href="http://blog.johnsonlu.org/angularjs-directive/">http://blog.johnsonlu.org/angularjs-directive/</a></li>
<li><a href="https://umur.io/angularjs-directives-using-isolated-scope-with-attributes/">https://umur.io/angularjs-directives-using-isolated-scope-with-attributes/</a></li>
</ol>
]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[React] 文章Memo</title>
    <url>/2015/02/11/react-article-memo/</url>
    <content><![CDATA[<p><a href="http://techbrij.com/realtime-voting-react-js-asp-net-signalr" title="Realtime Voting App with ASP.NET SignalR, React.js and D3.js">Realtime Voting App with ASP.NET SignalR, React.js and D3.js</a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>[Laravel] Laravel 5.0 with Angular</title>
    <url>/2015/02/23/laravel-laravel-50-with-angular/</url>
    <content><![CDATA[<p>之前有寫過一篇有關<a href="http://cky.logdown.com/posts/248326/laravel-laravel-with-angular" title="[Laravel] Laravel with Angular">[Laravel] Laravel with Angular</a>, 但是這個方法在Laravel 5.0裡面是不合用的</p>
<p>所以laravel 5.0的作法如下
在 app/Exceptions/Handler.php 裡修改render function</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function render($request, Exception $e)</span><br><span class="line">	&#123;</span><br><span class="line">		if ($e instanceof \Symfony\Component\HttpKernel\Exception\NotFoundHttpException)</span><br><span class="line">			return response()-&gt;view(&#x27;index&#x27;)-&gt;header(&#x27;Content-Type&#x27;, &#x27;text/html&#x27;);</span><br><span class="line">		return parent::render($request, $e);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>這個效果等於laravel 4.x的app::missing</p>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>laravel 5</tag>
      </tags>
  </entry>
  <entry>
    <title>[Laravel] Download file, but server doenst have php_fileinfo</title>
    <url>/2015/03/12/laravel-download-file-but-server-doenst-have-php-fileinfo/</url>
    <content><![CDATA[<p>Response::Download() in Laravel 4.x needs php_fileinfo extension. Sometimes web hosting server doesn’t have that extension on, althought it’s default for php 5.4.</p>
<p>so the way to work around is make a response, and add header to it. See code below</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file = File::get($filepath);</span><br><span class="line">$response = Response::make($file, 200);</span><br><span class="line">$response-&gt;header(&#x27;Content-Type&#x27;, $item-&gt;mime);</span><br><span class="line">$response-&gt;header(&#x27;Content-Disposition&#x27;,&#x27;attachment;filename=&quot;&#x27;.$filename.&#x27;&quot;&#x27;);</span><br><span class="line">return $response;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel 4</tag>
      </tags>
  </entry>
  <entry>
    <title>[ngCordova] socialSharing - to Line</title>
    <url>/2015/03/18/ngcordova-socialsharing-to-line/</url>
    <content><![CDATA[<p>when use ngCordova socialSharing plugin. there is a method 『canShareVia』 which can share to specific social application by it’s appPackageName.</p>
<p>To Line(<a href="http://line.me">http://line.me</a>) the packageName is <strong>jp.naver.line.android</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var lineAppPackageName = &#x27;jp.naver.line.android&#x27;;</span><br><span class="line">$cordovaSocialSharing</span><br><span class="line">            .shareVia(lineAppPackageName, content, subject, null, &#x27;&#x27;)</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Library</category>
      </categories>
      <tags>
        <tag>ngCordova</tag>
      </tags>
  </entry>
  <entry>
    <title>[HTML] 讓span可以focus</title>
    <url>/2015/03/25/html-span-to-focus/</url>
    <content><![CDATA[<p>HTML裡有也Element是沒有辦法focus, 原因是因為它們預設的tabindex是-1
所以要讓他們能focus, 只要改變tabindex=0. 就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span tabindex=0&gt;something&lt;/span&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularJS] ASP.NET MVC with angular Html5Mode</title>
    <url>/2015/03/29/angular-aspnet-mvc-with-angular-html5mode/</url>
    <content><![CDATA[<p>經過一段時間的實驗. 在別的framework找到可以讓backend的route支援angular html5mode了.
基本方式是如果我路由規則沒有定義的，全部指向index頁面(有ng-view的)</p>
<p>所以基於這個原則. mvc的路由規則就要稍微調整一下.
將原本的DefaultApp修改一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 舊</span><br><span class="line"> routes.MapRoute(</span><br><span class="line">                name: &quot;DefaultApp&quot;,</span><br><span class="line">                url: &quot;&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;&quot;,</span><br><span class="line">                defaults: new &#123; controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional &#125;</span><br><span class="line">            );</span><br><span class="line">// 新</span><br><span class="line"> routes.MapRoute(</span><br><span class="line">                name: &quot;DefaultApp&quot;,</span><br><span class="line">                url: &quot;app/&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;&quot;,</span><br><span class="line">                defaults: new &#123; controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional &#125;</span><br><span class="line">            );</span><br></pre></td></tr></table></figure>
<p>然後新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">routes.Add(new SingleRoute());</span><br></pre></td></tr></table></figure>
<p>SingleRoute Class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SingleRoute : RouteBase</span><br><span class="line">    &#123;</span><br><span class="line">        public override RouteData GetRouteData(HttpContextBase httpContext)</span><br><span class="line">        &#123;</span><br><span class="line">            var data = new RouteData(this, new MvcRouteHandler());</span><br><span class="line">            data.Values.Add(&quot;controller&quot;, &quot;Home&quot;);</span><br><span class="line">            data.Values.Add(&quot;action&quot;, &quot;Index&quot;);</span><br><span class="line">            return data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)</span><br><span class="line">        &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Client angular side:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$stateProvider</span><br><span class="line">         .state(&#x27;state1&#x27;, &#123;</span><br><span class="line">             url: &quot;/state1&quot;,</span><br><span class="line">             templateUrl: &quot;app/Home/state1&quot; &lt;= mvc route rule</span><br><span class="line">        &#125;)</span><br><span class="line">$locationProvider.html5Mode(true).hashPrefix(&#x27;!&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上</p>
]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Mono] Install Mono</title>
    <url>/2015/04/30/mono-install-mono-40/</url>
    <content><![CDATA[<p>取得最新的Mono
<a href="http://www.mono-project.com/download/">http://www.mono-project.com/download/</a></p>
<p>Building Mono From a Git Source Code Checkout</p>
<p>To build Mono in 64 bit mode instead use:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH=$PREFIX/bin:$PATH</span><br><span class="line">git clone https://github.com/mono/mono.git</span><br><span class="line">cd mono</span><br><span class="line">./autogen.sh --prefix=$PREFIX --disable-nls</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Mono</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC] OAuth</title>
    <url>/2015/05/24/aspnet-mvc-oauth/</url>
    <content><![CDATA[<p>reference url
- <a href="https://github.com/IdentityModel/Thinktecture.IdentityModel/tree/master/samples/OWIN/ResourceAuthorization">Thinktecture.IdentityModel Sample Owin</a></p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 5</tag>
      </tags>
  </entry>
  <entry>
    <title>[WebDeploy] Microsoft.Web.Deployment.BuiltinTypesCache Throws an Exception on Deployment </title>
    <url>/2015/05/29/webdeploy-microsoftwebdeploymentbuiltintypescache-throws-an-exception-on-deployment/</url>
    <content><![CDATA[<p>when use vs2013 deploy website to azure.</p>
<p>error message</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The type initializer for &#x27;Microsoft.Web.Microsoft.Web.Deployment.DeploymentManager&#x27; threw an exception.  The type initializer for &#x27;Microsoft.Web.Microsoft.Web.Deployment.BuiltinTypesCache&#x27; threw an exception.</span><br></pre></td></tr></table></figure>
<p>fix:</p>
<p>uninstall <strong>dbsqlpackage provider</strong> . this packages no longer support.</p>
]]></content>
      <categories>
        <category>Visual Studio</category>
      </categories>
      <tags>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>[EF] Connection resiliency</title>
    <url>/2015/06/12/ef-connection-resiliency/</url>
    <content><![CDATA[<pre><code>- connection retry policy
- works great with async
- four modes
    - DefaultExcutionStrategy
    - DefaultSqlExecutionStrategy
    - DbExecutionStrategy
    - SqlAzureExecutionStrategy
- throws RetryLimitExceededException
</code></pre>
<p>##Configuration</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyConfiguration : DbConfiguration </span><br><span class="line">&#123; </span><br><span class="line">    public MyConfiguration() </span><br><span class="line">    &#123; </span><br><span class="line">        SetExecutionStrategy(&quot;System.Data.SqlClient&quot;, </span><br><span class="line">        () =&gt; new SqlAzureExecutionStrategy(1, TimeSpan.FromSeconds(30))); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://msdn.microsoft.com/zh-tw/library/system.data.entity.sqlserver.sqlazureexecutionstrategy(v=vs.113).aspx">MSDB</a></p>
<p><a href="https://msdn.microsoft.com/en-us/data/dn456835.aspx">參考網址</a></p>
]]></content>
      <categories>
        <category>Entity Framework</category>
      </categories>
      <tags>
        <tag>Entity Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[VFP] 讀ini檔案</title>
    <url>/2015/06/24/vfp-read-ini-files/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">********************</span><br><span class="line">****讀取ini file****</span><br><span class="line">********************</span><br><span class="line">function getinit(mfilename,msection,mentry)</span><br><span class="line">    local lcinifile,lcvalue,lcbuffer,luentryvalue,lnnumbytes</span><br><span class="line"></span><br><span class="line">*-- DECLARE DLL statements for reading/writing to private INI files</span><br><span class="line">    declare integer GetPrivateProfileString in Win32API ;</span><br><span class="line">        string cSection, string cKey, string cDefault, string @cBuffer, ;</span><br><span class="line">        integer nBufferSize, string cINIFile</span><br><span class="line"></span><br><span class="line">    local minivalue, mresult, mbuffersize</span><br><span class="line">    mbuffersize = 255</span><br><span class="line">    minivalue = spac(mbuffersize)</span><br><span class="line">    mresult=getprivateprofilestring(msection,mentry,&quot;*NULL*&quot;,@minivalue,mbuffersize,mfilename)</span><br><span class="line">    minivalue=substr(minivalue,1,mresult)</span><br><span class="line">    if minivalue=&quot;*NULL*&quot;</span><br><span class="line">        minivalue=.null.</span><br><span class="line">    endif</span><br><span class="line">    return minivalue</span><br><span class="line">endfun</span><br></pre></td></tr></table></figure>
<p>demo config ini file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[section]</span><br><span class="line">entryName=return value</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>VFP</category>
      </categories>
      <tags>
        <tag>VFP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Devexpress] How to bind a objec to bindingsource in WEB xtrareport</title>
    <url>/2015/06/30/devexpress-how-to-bind-a-objec-to-bindingsource-in-web-xtrareport/</url>
    <content><![CDATA[<p>Bindingsource物件是屬於winform的，所以在web環境下的design time是沒有辦法直接設定物件到datasource的屬性裡
所以這部分需要手動加進去，作法是進入 xxx.Designer.cs的InitializeComponent()加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.bindingSource1.DataSource = typeof(Object); // replace with the object you want</span><br></pre></td></tr></table></figure>
<p>這樣子回到設計模式就會出現可以設定的binding物件了</p>
<p>^^</p>
]]></content>
      <categories>
        <category>Library</category>
      </categories>
      <tags>
        <tag>Devexpress</tag>
      </tags>
  </entry>
  <entry>
    <title>[MVC] 當MVC遇上exe檔(需要讀取網路磁碟機時)</title>
    <url>/2015/07/13/mvc-when-the-mvc-in-exe-file-need-to-read-when-a-network-drive/</url>
    <content><![CDATA[<p>最近要寫一個api，其功能需要呼叫一個exe執行檔然後取得該檔回傳的dbf檔案
但是該執行檔又需要讀取網路磁碟機的檔案。這IIS就會卡住了。不管權限怎麼設定都過不去。</p>
<p>所以只好繞路解決了. 解法是: 建立另外一個selfhost的webapi (console mode), 在該api下執行該執行檔就可以正常運作了，因為不是透過IIS. 然後網站去呼叫那個自行運作的webapi取回結果.</p>
<p>雖然有點麻煩，但是至少解決問題了。(浪費我兩天的生命)</p>
<p>關於selft的webapi建立方式，請參考<a href="http://www.asp.net/web-api/overview/older-versions/self-host-a-web-api">webapi selfhost</a></p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 5</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET 5] 學習筆記</title>
    <url>/2015/08/07/aspnet-5-study-notes/</url>
    <content><![CDATA[<p>##需求</p>
<ul>
<li>Visual Studio 2015</li>
</ul>
<p>##Note</p>
<h4 id="所有的參考都需要手動加入-所以新功課會是了解每一個參考裡面有的功能是什麼"><a class="header-anchor" href="#所有的參考都需要手動加入-所以新功課會是了解每一個參考裡面有的功能是什麼"> </a>所有的參考都需要手動加入, 所以新功課會是了解每一個參考裡面有的功能是什麼</h4>
<pre><code>1. Microsoft.AspNet.Diagnostics =&gt; MiddleWare to handle request(ex: welcomepage, errorpage)
2. Microsoft.AspNet.StaticFiles =&gt; 顯示靜態網頁
</code></pre>
<p>Microsoft.AspNet.Diagnostics Example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// app.useXXXXX</span><br><span class="line">      app.UseWelcomePage();</span><br><span class="line">      app.UseErrorPage();</span><br></pre></td></tr></table></figure>
<h4 id="project-json"><a class="header-anchor" href="#project-json"> </a>project.json</h4>
<p>網站所有的設定都會在這個檔案裏面做設定, 包含dependencies, webroot, exclude, frameworks, etc.</p>
<h5 id="Commands"><a class="header-anchor" href="#Commands"> </a>Commands</h5>
<p><img src="https://farm1.staticflickr.com/260/20362531726_fc27690c27_o.png" alt=""></p>
<h4 id="新增MVC功能"><a class="header-anchor" href="#新增MVC功能"> </a>新增MVC功能</h4>
<ul>
<li>project.json
add 「Microsoft.AspNet.Mvc」 to dependencies</li>
<li>startup.cs</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	services.AddMvc();</span><br><span class="line">	services.Configure&lt;MvcOptions&gt;(options =&gt; &#123; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">&#123;   </span><br><span class="line">	app.UseMvc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要設定mvc route時, 在startup.cs的configure裡(in c# 6 syntax)</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">app.UseMvc(routes=&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               routes.MapRoute(</span><br><span class="line">                   name: <span class="string">&quot;Default&quot;</span>,</span><br><span class="line">                   template: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="建立Configuration"><a class="header-anchor" href="#建立Configuration"> </a>建立Configuration</h4>
<ul>
<li>dependence:
「Microsoft.Framework.Configuration.UserSecrets」</li>
<li>Useage:</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IHostingEnvironment env, IApplicationEnvironment appEnv</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 設定ConfiurationBuilder</span></span><br><span class="line"> <span class="keyword">var</span> configurationBuilder = <span class="keyword">new</span> ConfigurationBuilder(appEnv.ApplicationBasePath);</span><br><span class="line">  configurationBuilder.AddJsonFile(<span class="string">&quot;config.json&quot;</span>);</span><br><span class="line">  configurationBuilder.AddEnvironmentVariables();</span><br><span class="line">  <span class="comment">// 必須執行Build才能建立Configuration物件</span></span><br><span class="line">  <span class="keyword">var</span> config = configurationBuilder.Build(); </span><br><span class="line">  <span class="comment">// Build後</span></span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">value</span> = config.<span class="keyword">get</span>(<span class="string">&quot;key&quot;</span>);	      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用TagHelpers"><a class="header-anchor" href="#使用TagHelpers"> </a>使用TagHelpers</h4>
<p>如果想要使用MVC內建的TagHelper, 幾個需要加入的dependencies</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Microsoft.AspNet.Mvc.TagHelpers&quot;: &quot;6.0.0-rc1-final&quot;,</span><br><span class="line">&quot;Microsoft.AspNet.Tooling.Razor&quot;: &quot;1.0.0-rc1-final&quot; &lt;= 在vs編輯時會將tag的部分顯示成不同的顏色及其他功能</span><br></pre></td></tr></table></figure>
<p>然後在_ViewImports.cshtml加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@addTagHelper &quot;*, Microsoft.AspNet.Mvc.TagHelpers&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC CORE</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET] ReportViewer的遠端報表路徑設定</title>
    <url>/2015/10/11/aspnet-reportviewer-remote-report-path-setting/</url>
    <content><![CDATA[<p>###ReportViewer的遠端報表的設定方式</p>
<ol>
<li>如果需要設定登入使用者的權限時, 需要實作IReportServerCredentials, 但是如果需要就抄下面的Code
用法:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ReportViewer1.ServerReport.ReportServerCredentials = New CustomReportCredentials(username, password, domain)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Imports System.Net</span><br><span class="line">Public Class CustomReportCredentials</span><br><span class="line">    Implements Microsoft.Reporting.WebForms.IReportServerCredentials</span><br><span class="line"></span><br><span class="line">    &#x27; local variable for network credential</span><br><span class="line">    Private strUserName As String</span><br><span class="line">    Private strPassWord As String</span><br><span class="line">    Private strDomainName As String</span><br><span class="line">    Public Sub New(ByVal UserName As String, ByVal PassWord As String, ByVal DomainName As String)</span><br><span class="line">        strUserName = UserName</span><br><span class="line">        strPassWord = PassWord</span><br><span class="line">        strDomainName = DomainName</span><br><span class="line">    End Sub</span><br><span class="line">    Public ReadOnly Property ImpersonationUser() As System.Security.Principal.WindowsIdentity Implements Microsoft.Reporting.WebForms.IReportServerCredentials.ImpersonationUser</span><br><span class="line">        Get</span><br><span class="line">            &#x27; not use ImpersonationUser</span><br><span class="line">            Return Nothing</span><br><span class="line">        End Get</span><br><span class="line">    End Property</span><br><span class="line">    Public ReadOnly Property NetworkCredentials() As System.Net.ICredentials Implements Microsoft.Reporting.WebForms.IReportServerCredentials.NetworkCredentials</span><br><span class="line">        Get</span><br><span class="line">            &#x27; use NetworkCredentials</span><br><span class="line">            Return New NetworkCredential(strUserName, strPassWord, strDomainName)</span><br><span class="line">        End Get</span><br><span class="line">    End Property</span><br><span class="line">    Public Function GetFormsCredentials(ByRef authCookie As System.Net.Cookie, ByRef userName As String, ByRef password As String, ByRef authority As String) As Boolean Implements Microsoft.Reporting.WebForms.IReportServerCredentials.GetFormsCredentials</span><br><span class="line">        &#x27; not use FormsCredentials unless you have implements a custom autentication.</span><br><span class="line">        authCookie = Nothing</span><br><span class="line">        password = authority = Nothing</span><br><span class="line">        Return False</span><br><span class="line">    End Function</span><br><span class="line">End Class</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>ServerReportUrl要指定SSRS的Report Server URL, 而不是Report Manager URL。因為這個URL的錯誤，讓我一直遇到404的錯誤.
ex: <a href="http://serverIP/ReportServer">http://serverIP/ReportServer</a></p>
</li>
<li>
<p>ReportPath就是根據Root的相對應位置而設定，不需要.rdlc(localReport就需要搭配附檔名)</p>
</li>
<li>
<p>如果有參數要設定, 使用方式如下</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dim objParms As New System.Collections.ObjectModel.Collection(Of ReportParameter)</span><br><span class="line">objParms.Add(New ReportParameter(&quot;param1&quot;, &quot;param1 value&quot;))</span><br><span class="line">ReportViewer1.ServerReport.SetParameters(objParms)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 5</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] 學ES2015(ES6) &amp; Typescript - 環境準備</title>
    <url>/2015/10/17/javascript-es6/</url>
    <content><![CDATA[<h1 id="準備練習環境"><a class="header-anchor" href="#準備練習環境"> </a>準備練習環境</h1>
<ol>
<li>VSCode</li>
<li>Gulp</li>
<li>browersync</li>
<li>Typescript</li>
</ol>
<h2 id="設定項目"><a class="header-anchor" href="#設定項目"> </a>設定項目</h2>
<ol>
<li>tsconfig.json</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;compilerOptions&quot;: &#123;</span><br><span class="line">		&quot;target&quot;: &quot;ES5&quot;,</span><br><span class="line">		&quot;module&quot;: &quot;amd&quot;,</span><br><span class="line">		&quot;sourceMap&quot;: false,</span><br><span class="line">		&quot;watch&quot;: true,</span><br><span class="line">		&quot;outDir&quot;: &quot;public/&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>tasks.json</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">	&quot;command&quot;: &quot;gulp&quot;,</span><br><span class="line">	&quot;isShellCommand&quot;: true,</span><br><span class="line">	&quot;tasks&quot;: [</span><br><span class="line">		&#123;</span><br><span class="line">			&quot;taskName&quot;: &quot;watch&quot;,</span><br><span class="line">			&quot;isBuildCommand&quot;: true,</span><br><span class="line">			&quot;showOutput&quot;: &quot;silent&quot;,</span><br><span class="line">			&quot;problemMatcher&quot;: &quot;$tsc&quot;			</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>gulpfile.js</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var gulp = require(&#x27;gulp&#x27;),</span><br><span class="line">	browserSync = require(&#x27;browser-sync&#x27;).create(),</span><br><span class="line">	typescript = require(&#x27;gulp-tsc&#x27;);</span><br><span class="line">	</span><br><span class="line">gulp.task(&#x27;browser-sync&#x27;,function()&#123;</span><br><span class="line">	browserSync.init(&#123;</span><br><span class="line">		server:&#123;</span><br><span class="line">			baseDir:&quot;./&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)	</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;compile&#x27;,function()&#123;</span><br><span class="line">	gulp.src([&#x27;src/**/*.ts&#x27;])</span><br><span class="line">	    .pipe(typescript())</span><br><span class="line">		.pipe(gulp.dest(&#x27;public/&#x27;))</span><br><span class="line">		.pipe(browserSync.reload(&#123;stream:true&#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;watch&#x27;,[&#x27;browser-sync&#x27;],function()&#123;</span><br><span class="line">	gulp.watch([&#x27;src/**/*.ts&#x27;],[&#x27;compile&#x27;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;default&#x27;,[&#x27;watch&#x27;]);</span><br></pre></td></tr></table></figure>
<p>gulpfile會做兩件事情</p>
<ol>
<li>當ts檔案有異動的時候做Compile並輸出到public的資料夾下</li>
<li>透過browsersync更新瀏覽器</li>
</ol>
<p>這樣子就可以專心來練習javascript了</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES2015</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] ES2015 - Arrow function, String templates, let, const</title>
    <url>/2015/10/18/javascript-es2015-arror-function-string-templates-let/</url>
    <content><![CDATA[<p>在ES2015裡面，幾個比較大的改變Part1</p>
<h2 id="Arrow-Function"><a class="header-anchor" href="#Arrow-Function"> </a>Arrow Function</h2>
<p>人真的可以在懶惰一點，為了不要寫__function__這幾個字，就有 ()=&gt;{} 的出現。這就是Arror Function
跟Lambda的表示法很像, 真的用法也是跟那個一樣</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Old</span><br><span class="line">var old = function(n) &#123;</span><br><span class="line">    return n * n;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// with Arror Functions express 1</span><br><span class="line">let new_1 = (n) =&gt; n * n;</span><br><span class="line"></span><br><span class="line">// with arror function express 2</span><br><span class="line">let new_2 = (n) =&gt; &#123;</span><br><span class="line">	return n * n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>另外一個要注意的是Arrow Scope的問題,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var hendrik = &#123;</span><br><span class="line">    this.name = &quot;Hendrik&quot;;</span><br><span class="line">    </span><br><span class="line">    sayHello: (names) =&gt; &#123;</span><br><span class="line">        names.forEach((name)=&gt;&#123;</span><br><span class="line">          console.log(`$&#123;this.name&#125; greets $&#123;name&#125;`);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">hendrik.sayHello([&#x27;frikkie&#x27;]);</span><br><span class="line">// output </span><br><span class="line">// hendrik greets frikkie</span><br></pre></td></tr></table></figure>
<h2 id="String-templates"><a class="header-anchor" href="#String-templates"> </a>String templates</h2>
<p>最快樂的事情非屬這個, 文字串的組合可以用 ` (鍵盤左上角流水符號的那個鍵), 可以讓你多行編輯文字字串
在配合 ${變數} 來將變數顯示在文字裡面。 這樣子就不用一堆的 『加號』 來串文字了，超快樂的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// old</span><br><span class="line">function sayHello(name, surname)&#123;</span><br><span class="line">    console.log(&#x27;hello there &#x27; + name + &#x27; &#x27; + surname + &#x27;, the time is now &#x27; + new Date());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// new way </span><br><span class="line">function sayHello_new(name, surname)&#123;</span><br><span class="line">    console.log(`hello there $&#123;name&#125; $&#123;surname&#125;, </span><br><span class="line">    the time is now $&#123;new Date()&#125;`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>FYI: 新版的C#/VB.net也有將此功能加入，已經可以不用string.format + 無數的{流水號}了</p>
<h2 id="Let"><a class="header-anchor" href="#Let"> </a>Let</h2>
<p><strong>非常重要</strong> 要將使用var來定義變數的改用let來定義變數, 這樣子就可以避免同樣名稱的變數在不同的scope被覆蓋的情形發生</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//=== old ===</span><br><span class="line"> var </span><br><span class="line">     name = &#x27;Fido&#x27;,</span><br><span class="line">     breed = &#x27;schnauzer&#x27;,</span><br><span class="line">     owners = [&#x27;Hendrik&#x27;, &#x27;Alice&#x27;]</span><br><span class="line"> ;</span><br><span class="line"> </span><br><span class="line"> console.log(name + &#x27;(&#x27; + breed + &#x27;):&#x27;);</span><br><span class="line"> </span><br><span class="line"> for(var i = 0; i &lt; owners.length; i++)&#123;</span><br><span class="line">     var name = owners[i];</span><br><span class="line"> </span><br><span class="line">     console.log(&#x27;Owner &#x27; + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(name);</span><br><span class="line">//output</span><br><span class="line">// Fido(schnauzer):</span><br><span class="line">// Owner Hendrik</span><br><span class="line">// Owner Alice</span><br><span class="line">// Alice (被改變掉了)</span><br><span class="line"></span><br><span class="line">//=== new ===</span><br><span class="line">let fname = &#x27;Fido&#x27;,</span><br><span class="line">    breed = &#x27;schnauzer&#x27;,</span><br><span class="line">    owners = [&#x27;Hendrik&#x27;, &#x27;Alice&#x27;]</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">console.log(`$&#123;fname&#125; ($&#123;breed&#125;):`);</span><br><span class="line"></span><br><span class="line">for(let i = 0; i &lt; owners.length; i++)&#123;</span><br><span class="line">    let fname = owners[i];</span><br><span class="line">    console.log(`Owner $&#123;fname&#125;`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(fname);</span><br><span class="line">// output:</span><br><span class="line">// Fido (schnauzer):</span><br><span class="line">// Owner Hendrik</span><br><span class="line">// Owner Alice</span><br><span class="line">// Fido</span><br></pre></td></tr></table></figure>
<h2 id="const"><a class="header-anchor" href="#const"> </a>const</h2>
<p>常數，當變數一旦被指定為const時，就不可以被改變了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const pi = Math.PI;</span><br><span class="line"></span><br><span class="line">pi = 123;</span><br><span class="line">// this will cause error message</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES2015</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] ES2015 - Destructuring</title>
    <url>/2015/10/18/javascript-es2015-let/</url>
    <content><![CDATA[<h1 id="Destructuring"><a class="header-anchor" href="#Destructuring"> </a>Destructuring</h1>
<p>可以將值從陣列或是物件裡取出並設定到變數上</p>
<h2 id="syntax"><a class="header-anchor" href="#syntax"> </a>syntax</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[a, b] = [1, 2]</span><br><span class="line">[a, b, ...rest] = [1, 2, 3, 4, 5]</span><br><span class="line">&#123;a, b&#125; = &#123;a:1, b:2&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Destructuring-arrays"><a class="header-anchor" href="#Destructuring-arrays"> </a>Destructuring arrays</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var foo = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;];</span><br><span class="line"></span><br><span class="line">// without destructuring</span><br><span class="line">var one   = foo[0];</span><br><span class="line">var two   = foo[1];</span><br><span class="line">var three = foo[2];</span><br><span class="line"></span><br><span class="line">// with destructuring</span><br><span class="line">var [one, two, three] = foo;</span><br></pre></td></tr></table></figure>
<p>其他用法
1.Multiple-value returns</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">    return [1, 2];</span><br><span class="line">&#125;</span><br><span class="line">var a, b;</span><br><span class="line">[a, b] = f();</span><br><span class="line">console.log(&quot;A is &quot; + a + &quot; B is &quot; + b);</span><br></pre></td></tr></table></figure>
<p>2.Ignoring some returned values</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">    return [1, 2, 3];</span><br><span class="line">&#125;</span><br><span class="line">var a, b;</span><br><span class="line">[a, ,b] = f();</span><br><span class="line">console.log(&quot;A is &quot; + a + &quot; B is &quot; + b);</span><br><span class="line">// A is 1 B is 3</span><br></pre></td></tr></table></figure>
<p>3.衍伸用法: Pulling values from a regular expression match</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var url = &quot;https://developer.mozilla.org/en-US/Web/JavaScript&quot;;</span><br><span class="line"></span><br><span class="line">var parsedURL = /^(\w+)\:\/\/([^\/]+)\/(.*)$/.exec(url);</span><br><span class="line">var [, protocol, fullhost, fullpath] = parsedURL;</span><br><span class="line"></span><br><span class="line">console.log(protocol); // logs &quot;https&quot;</span><br></pre></td></tr></table></figure>
<h2 id="Destructuring-objects"><a class="header-anchor" href="#Destructuring-objects"> </a>Destructuring objects</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var o = &#123;p: 42, q: true&#125;;</span><br><span class="line">var &#123;p, q&#125; = o;</span><br><span class="line"></span><br><span class="line">console.log(p); // 42</span><br><span class="line">console.log(q); // true </span><br></pre></td></tr></table></figure>
<p>另外一種用法, 將物件裡的值設定到新的變數名稱上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// syntax</span><br><span class="line">// &#123;object.propertyName: VariableName&#125; = object</span><br><span class="line"></span><br><span class="line">// Assign new variable names</span><br><span class="line">var o = &#123;p: 42, q: true&#125;;</span><br><span class="line">var &#123;p: foo, q: bar&#125; = o;</span><br><span class="line"></span><br><span class="line">console.log(foo); // 42</span><br><span class="line">console.log(bar); // true  </span><br></pre></td></tr></table></figure>
<p>衍生用法: Function argument defaults</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var [missing = true] = [];</span><br><span class="line">console.log(missing);</span><br><span class="line">// true</span><br><span class="line"></span><br><span class="line">var &#123; message: msg = &quot;Something went wrong&quot; &#125; = &#123;&#125;;</span><br><span class="line">console.log(msg);</span><br><span class="line">// &quot;Something went wrong&quot;</span><br><span class="line"></span><br><span class="line">var &#123; x = 3 &#125; = &#123;&#125;;</span><br><span class="line">console.log(x);</span><br><span class="line">// 3</span><br><span class="line"></span><br><span class="line">function removeBreakpoint(&#123; url, line, column &#125;=&#123;&#125;) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function drawES6Chart(&#123;size = &#x27;big&#x27;, cords = &#123; x: 0, y: 0 &#125;, radius = 25&#125; = &#123;&#125;) </span><br><span class="line">&#123;</span><br><span class="line">  console.log(size, cords, radius);</span><br><span class="line">  // do some chart drawing</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawES6Chart(&#123;</span><br><span class="line">  cords: &#123; x: 18, y: 30 &#125;,</span><br><span class="line">  radius: 30</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>另外一種情境 Module (non-ES6) loading</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const &#123; Loader, main &#125; = require(&#x27;toolkit/loader&#x27;);</span><br></pre></td></tr></table></figure>
<p>REF: <a href="https://gist.github.com/mikaelbr/9900818">Several demos and usages for ES6 destructuring.</a></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>ES2015</tag>
      </tags>
  </entry>
  <entry>
    <title>[Windows 10] 郵件APP的熱鍵們</title>
    <url>/2015/10/18/windows-10-hot-key-mail-app/</url>
    <content><![CDATA[<h1 id="懶得再去微軟的網站找了，所以在此備註"><a class="header-anchor" href="#懶得再去微軟的網站找了，所以在此備註"> </a>懶得再去微軟的網站找了，所以在此備註</h1>
<p>CTRL+SHIFT+G 在交談中切換重要屬性
CTRL+D, DEL 刪除交談
退格鍵 封存交談
CTRL+Q 標示為已讀取
CTRL+U 標示為未讀取
CTRL+R 回覆目前郵件
CTRL+SHIFT+R 全部回覆
CTRL+F 轉寄目前郵件
CTRL+E,F3 搜尋
Alt+C 接受會議邀請
Alt+D 拒絕會議邀請
Alt+N 暫訂會議邀請
CTRL+N 建立新的電子郵件
CTRL+SHIFT+M 建立新的電子郵件
CTRL+SHIFT+V 移到檢視
CTRL+1 切換至 [郵件]
CTRL+2 切換至 [行事曆]
CTRL+SHIFT+I 切換至 [收件匣]
CTRL+SHIFT+O 切換至 [寄件匣]</p>
<p>ALT+I 新增附件
CTRL+M 手動同步帳戶
F9 手動同步帳戶
CTRL+ + 放大
CTRL+ - 縮小
ALT+S 傳送郵件
Ctrl + Enter 傳送郵件
F6 在區域間移動
F7 切換鍵盤瀏覽</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Tip</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET] 透過ajax的方式向webapi下載檔案</title>
    <url>/2015/10/20/aspnet-download-files-use-ajax-to-the-webapi/</url>
    <content><![CDATA[<p>現在SPA的網站越來越盛行，下載檔案的功能在ajax下是有點麻煩，但是感謝HTML5下的Blob功能。網路上就有相對應的js功能出來
所以，引用這位大大的程式 (<a href="https://github.com/eligrey/FileSaver.js">https://github.com/eligrey/FileSaver.js</a>)，其相關限制都有在該專案上描述</p>
<p>所以使用方法如下
(Client端)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$http.post(&#x27;api url&#x27;, query, &#123; responseType: &#x27;arraybuffer&#x27; &#125;).then(function (response) &#123;        </span><br><span class="line">            var filename = (filename);</span><br><span class="line">            var expectedMediaType = (file-Content-Type);</span><br><span class="line">            openSaveAsDialog(filename, response.data, expectedMediaType);</span><br><span class="line">&#125;);      </span><br><span class="line">                </span><br><span class="line">function openSaveAsDialog(filename, content, mediaType) &#123;</span><br><span class="line">        var blob = new Blob([content], &#123; type: mediaType &#125;);</span><br><span class="line">        saveAs(blob, filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>重點</strong> : responseType 要設定為 arraybuffer</p>
<p>(Server端)
Webapi要回傳的httpresponseMessage內容如下, 不好意思程式碼是VB, 因為這個專案是用VB開發的，但是基本觀念的一樣的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dim response As HttpResponseMessage = New HttpResponseMessage()</span><br><span class="line">       &#x27; _ms 是 MemoryStream, 這裡是因為要將NPOI所產生的excel檔做下載, 然而我將NPOI所產生出來的東西</span><br><span class="line">       &#x27; 存入到 MemoryStream裡, 重點是ByteArrayContent</span><br><span class="line">       Dim _filename as string = (filename)</span><br><span class="line">       If _ms IsNot Nothing Then</span><br><span class="line">           response.Content = New ByteArrayContent(_ms.ToArray())</span><br><span class="line">       End If</span><br><span class="line">       response.Content.Headers.ContentType = New Headers.MediaTypeHeaderValue(&quot;application/octet-stream&quot;)</span><br><span class="line">       response.Content.Headers.ContentDisposition = New Headers.ContentDispositionHeaderValue(&quot;attachment&quot;) With &#123;.FileName = HttpUtility.UrlPathEncode(_filename)&#125;</span><br><span class="line">       Return Task.FromResult(response)</span><br></pre></td></tr></table></figure>
<p>以上的動作就可以讓ajax的call直接做下載檔案的動作，就不用另外產生一個form然後做post到新視窗後再下載了 ^^</p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC 5</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] ES2015 - Default args, Spread operator</title>
    <url>/2015/10/24/javascript-es2015/</url>
    <content><![CDATA[<h2 id="Default-args"><a class="header-anchor" href="#Default-args"> </a>Default args</h2>
<p>可以將在function的參數給予預設值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fnWithDefaultArg(a,b=[])&#123;</span><br><span class="line">    // some codes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spread-operator"><a class="header-anchor" href="#Spread-operator"> </a>Spread operator</h2>
<p>The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fn(a,b,c)&#123;</span><br><span class="line">  // some codes</span><br><span class="line">&#125;</span><br><span class="line">var args = [1,2,3];</span><br><span class="line">fn(...args); &lt;= spread operator</span><br></pre></td></tr></table></figure>
<p>A more powerful array literal</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var parts = [&#x27;shoulders&#x27;, &#x27;knees&#x27;];</span><br><span class="line">var lyrics = [&#x27;head&#x27;, ...parts, &#x27;and&#x27;, &#x27;toes&#x27;]; // [&quot;head&quot;, &quot;shoulders&quot;, &quot;knees&quot;, &quot;and&quot;, &quot;toes&quot;]</span><br></pre></td></tr></table></figure>
<p>A better push</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr1 = [0, 1, 2];</span><br><span class="line">var arr2 = [3, 4, 5];</span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>[Javascript] ES2015 - Classes, Class inheritance</title>
    <url>/2015/10/26/javascript-es2015-class/</url>
    <content><![CDATA[<h2 id="Classes"><a class="header-anchor" href="#Classes"> </a>Classes</h2>
<p>Class的組成元素:</p>
<ol>
<li>
<p>Constructor</p>
</li>
<li>
<p>Prototype methods:</p>
</li>
<li>
<p>Static methods: 不需要New class就可以使用, 類似C#的Static</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Polygon &#123;</span><br><span class="line">  constructor(height, width) &#123;</span><br><span class="line">    this.height = height;</span><br><span class="line">    this.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  get area() &#123;</span><br><span class="line">    return this.calcArea()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  calcArea() &#123;</span><br><span class="line">    return this.height * this.width;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  static distance(a, b) &#123;</span><br><span class="line">        const dx = a.x - b.x;</span><br><span class="line">        const dy = a.y - b.y;</span><br><span class="line"></span><br><span class="line">        return Math.sqrt(dx*dx + dy*dy);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Hoisting: Class並沒有Hoisting特性，所以需要先定義才可以使用，這點須注意</strong></p>
<h2 id="Class-inheritance"><a class="header-anchor" href="#Class-inheritance"> </a>Class inheritance</h2>
<p>Class也可以有繼承的性質
範例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal &#123; </span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  speak() &#123;</span><br><span class="line">    console.log(this.name + &#x27; makes a noise.&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">  speak() &#123;</span><br><span class="line">    console.log(this.name + &#x27; barks.&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Super的用法"><a class="header-anchor" href="#Super的用法"> </a>Super的用法</h3>
<p>Super用來呼叫Parent的function</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Cat &#123; </span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  speak() &#123;</span><br><span class="line">    console.log(this.name + &#x27; makes a noise.&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Lion extends Cat &#123;</span><br><span class="line">  speak() &#123;</span><br><span class="line">    super.speak(); // &lt;= this call Cat&#x27;s speak function</span><br><span class="line">    console.log(this.name + &#x27; roars.&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularJS] ngOptions in 1.4</title>
    <url>/2015/11/08/angular-ngoptions-in-14/</url>
    <content><![CDATA[<p>之前沒有特別留意ngOptions在1.4版裡面修正了一些東西，包含track by的用法
先簡單的描述一下狀況</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$scope.options = [</span><br><span class="line">         &#123;id:1,display:&quot;1&quot;&#125;,</span><br><span class="line">         &#123;id:2,display:&quot;2&quot;&#125;,</span><br><span class="line">         &#123;id:3,display:&quot;3&quot;&#125;,</span><br><span class="line">         &#123;id:4,display:&quot;4&quot;&#125;,</span><br><span class="line">         &#123;id:5,display:&quot;5&quot;&#125;</span><br><span class="line">       ] ;</span><br><span class="line">       </span><br><span class="line">$scope.selected = 3;</span><br><span class="line"></span><br><span class="line">// html</span><br><span class="line">&lt;select ng-options=&quot;m.id as m.display for m in options&quot; </span><br><span class="line">       ng-model=&quot;selected&quot;&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>這種寫法應該算是很常見的用法</p>
<p>但是這樣子的寫法經過1.4版處理後, 仔細去看他的html會變成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select ng-options=&quot;m.id as m.display for m in options&quot; ng-model=&quot;selected&quot;&gt;</span><br><span class="line">    &lt;option label=&quot;1&quot; value=&quot;number:1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">    &lt;option label=&quot;2&quot; value=&quot;number:2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">    &lt;option label=&quot;3&quot; value=&quot;number:3&quot; selected=&quot;selected&quot;&gt;3&lt;/option&gt;</span><br><span class="line">	  &lt;option label=&quot;4&quot; value=&quot;number:4&quot;&gt;4&lt;/option&gt;</span><br><span class="line">		&lt;option label=&quot;5&quot; value=&quot;number:5&quot;&gt;5&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>竟然多了型別…&gt;&quot;&lt;, 這表示如果我的$scope.selected = '3’時，就會選不到東西了</p>
<p>好吧，那如果用track by呢</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select ng-options=&quot;m.id as m.display for m in options track by m.id&quot; </span><br><span class="line">       ng-model=&quot;selected&quot;&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>DOM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select ng-options=&quot;m.id as m.display for m in options track by m.id&quot; ng-model=&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option value=&quot;?&quot; selected=&quot;selected&quot;&gt;&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;1&quot; value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;2&quot; value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;3&quot; value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;4&quot; value=&quot;4&quot;&gt;4&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;5&quot; value=&quot;5&quot;&gt;5&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>這樣子看起來正常多了，但是$scope.selected的值不管是使用 3 or 「3」 都選不到東西. 只有給他options裡面的某一個object他才會被選定。
所以看起來track by是用 for m的m當作選定的值，那 select as label不就沒用了，沒用就拿掉他</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select ng-options=&quot;m.display for m in options track by m.id&quot; </span><br><span class="line">       ng-model=&quot;selected&quot;&gt;&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>DOM</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select ng-options=&quot;m.id as m.display for m in options track by m.id&quot; ng-model=&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option value=&quot;?&quot; selected=&quot;selected&quot;&gt;&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;1&quot; value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;2&quot; value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;3&quot; value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;4&quot; value=&quot;4&quot;&gt;4&lt;/option&gt;</span><br><span class="line">      &lt;option label=&quot;5&quot; value=&quot;5&quot;&gt;5&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>看起來都一樣了</p>
<p>結論
用track by: select裡的ng-model會是以object的型態呈現, 不需要再寫select as xxxx了.
不用track by: 就看所表示的select是怎樣的型態，ng-model就是怎樣的型態，但是多了型別的判斷</p>
]]></content>
      <categories>
        <category>AngularJS</category>
      </categories>
      <tags>
        <tag>AngularJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[MVC 6] Authorize Redirect to Login Page</title>
    <url>/2015/12/16/mvc-6-authorize-redirect-to-login-page/</url>
    <content><![CDATA[<p><a href="http://docs.asp.net/en/latest/security/authorization/simple.html">http://docs.asp.net/en/latest/security/authorization/simple.html</a>
這裡描述怎麼設定頁面授權的方式，<s>可是卻都沒有提到如果說沒授權的人要頁面轉至登入畫面的方式</s></p>
<p>經過網頁上的查詢及測試後. 在1.0.0-rc1-update1的版本裡，設定方式如下</p>
<ol>
<li>startup.cs</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">&#123;</span><br><span class="line">    services.AddAuthentication();           </span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> public void Configure(IApplicationBuilder app, IHostingEnvironment env)</span><br><span class="line">&#123;</span><br><span class="line">    app.UseCookieAuthentication(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.LoginPath = &quot;/Home/Login&quot;;</span><br><span class="line">        options.AutomaticAuthenticate = true;</span><br><span class="line">        options.AutomaticChallenge = true;</span><br><span class="line">    &#125;);</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到這裡為止就可以做出跟以前一樣遇到沒有授權的頁面就轉到登入畫面了</p>
<p>###參數說明</p>
<p>重點在於AutomaticAuthenticate 及 AutomaticChallenge 這兩個參數
他的說明如下:</p>
<ol>
<li>AutomaticAuthenticate: If true the authentication middlleware alter the request user coming in. If false the authentication middleware will only provide identity when explicitly indicated by the AuthenticationScheme.</li>
<li>AutomaticChallenge: If true the authentication middleware should handle automatic challenge. If false the authentication middleware will only alter responses when explicitly indicated by the AuthenticationScheme.</li>
</ol>
<p>這裡出現另外一個參數 AuthenticationScheme
AuthenticationScheme: The AuthenticationScheme in the options corresponds to the logical name for a particular authentication scheme. A different value may be assigned in order to use the same authentication middleware type more than once in a pipepline.</p>
<p>這表示在Controller裡的[Authorize]可以指定AuthenticationScheme, 就可以做出很有彈性的權限設定轉址或是其他後續動作了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Authorize(ActiveAuthenticationSchemes =&quot;abc&quot;)]</span><br><span class="line">public IActionResult Index()&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>##update
設定頁面授權的方式在這裡 <a href="http://docs.asp.net/en/latest/security/authentication/cookie.html">http://docs.asp.net/en/latest/security/authentication/cookie.html</a></p>
<h3 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h3>
<p><a href="http://blueprogram.blogspot.tw/2015/12/aspnet-5mvc-6-claim.html">ASP.NET 5/MVC 6 自訂使用Claim驗証</a></p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[EF] Entity Framework Core 1.0 - Migration with Exist Database</title>
    <url>/2016/01/11/ef-entity-framework-7-migration-with-exist-database/</url>
    <content><![CDATA[<p>After Scaffold from existing datbase, and then add migration at first time.</p>
<p><img src="https://farm2.staticflickr.com/1598/24326751835_e0c5dcabcc_o.png" alt=""></p>
<p>EF will create something like above. But in first migration will have everything that already existed in database. therefore, delete that file and add migration again. Now this time. you will get an empty migration file. WHy? because ContextModelSnapShot. It seems EF will compare all model files with snapshot file. and find the differences to create migration content file.</p>
<p>And Now it switch to Code first mode. ^^</p>
<p><a href="https://ef.readthedocs.org/en/latest/getting-started/index.html">EF 7 Doc</a></p>
]]></content>
      <categories>
        <category>Entity Framework</category>
      </categories>
      <tags>
        <tag>EF Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Outputs &amp; Inputs</title>
    <url>/2016/01/14/angular2-outputs/</url>
    <content><![CDATA[<p>Angular 在 Components之間的值得傳遞方式分割成Inputs和Outputs.
寫法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Components(&#123;</span><br><span class="line">     ....,</span><br><span class="line">     inputs:[&#x27;init&#x27;],</span><br><span class="line">     outputs:[&#x27;finish&#x27;] </span><br><span class="line">&#125;)</span><br><span class="line">export class xxx()&#123;</span><br><span class="line">	okEvent: EventEmitter&lt;any&gt; = new EventEmitter();</span><br><span class="line">  </span><br><span class="line">  ok()&#123;</span><br><span class="line">     // this should match the type define in EventEmitter</span><br><span class="line">     this.okEvent.emit(&#x27;the value want to pass&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// in another components</span><br><span class="line">&lt;ddd (finish)=&quot;finish($event)&quot; [init]=&quot;value pass in&quot;&gt;&lt;/ddd&gt;</span><br><span class="line"></span><br><span class="line">$event =&gt; will catch the return value</span><br></pre></td></tr></table></figure>
<p>另外一種寫法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Component, View, Input, Output, EventEmitter &#125; from &#x27;angular2/angular2&#x27;;</span><br><span class="line"></span><br><span class="line">@Components(&#123;</span><br><span class="line">     ....</span><br><span class="line">&#125;)</span><br><span class="line">export class xxx()&#123;</span><br><span class="line">  @Input() init;</span><br><span class="line">  // @Output(alias name)</span><br><span class="line">  @Output(&#x27;finish&#x27;) okEvent:EventEmitter&lt;Any&gt; = new EventEmitter();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  ok()&#123;</span><br><span class="line">     // this should match the type define in EventEmitter if use typescript</span><br><span class="line">     this.okEvent.emit(&#x27;the value want to pass&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// in another components</span><br><span class="line">&lt;ddd (finish)=&quot;finish($event)&quot; [init]=&quot;value pass in&quot;&gt;&lt;/ddd&gt;</span><br><span class="line"></span><br><span class="line">$event =&gt; will catch the return value</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Note] Gulpfile.js &lt;my version!&gt;</title>
    <url>/2016/01/20/note-gulpfilejs/</url>
    <content><![CDATA[<p>目前開發所需的gulpfile.js版本
工作流程 for angular 1.x開發
[typescript]-&gt;[javascript]-&gt;[webpack]-&gt;bundle.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">var gulp = require(&#x27;gulp&#x27;),</span><br><span class="line">    tsc = require(&#x27;gulp-typescript&#x27;),</span><br><span class="line">    inject = require(&#x27;gulp-inject&#x27;),</span><br><span class="line">    tsProject = tsc.createProject(&#x27;tsconfig.json&#x27;),</span><br><span class="line">    webpack = require(&#x27;webpack&#x27;),</span><br><span class="line">    gulpWebpack = require(&#x27;webpack-stream&#x27;),</span><br><span class="line">    ngAnnotatePlugin = require(&#x27;ng-annotate-webpack-plugin&#x27;),</span><br><span class="line">    path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;compile-ts&#x27;, function () &#123;</span><br><span class="line">    var sourceTsFiles = [&#x27;./app/src/**/*.ts&#x27;,                //path to typescript files</span><br><span class="line">                         &#x27;./app/typings/**/*.ts&#x27;]; //reference to library .d.ts files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var tsResult = gulp.src(sourceTsFiles)</span><br><span class="line">                       .pipe(tsc(tsProject));</span><br><span class="line"></span><br><span class="line">    tsResult.dts.pipe(gulp.dest(&#x27;./app/dist&#x27;));</span><br><span class="line">    return tsResult.js.pipe(gulp.dest(&#x27;./app/dist&#x27;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> gulp.task(&#x27;gen-ts-refs&#x27;, function () &#123;</span><br><span class="line">     var target = gulp.src(&#x27;./app/src/app.d.ts&#x27;);</span><br><span class="line">     var sources = gulp.src([&#x27;./app/src/**/*.ts&#x27;], &#123; read: false &#125;);</span><br><span class="line">     return target.pipe(inject(sources, &#123;</span><br><span class="line">         starttag: &#x27;//&#123;&#x27;,</span><br><span class="line">         endtag: &#x27;//&#125;&#x27;,</span><br><span class="line">         transform: function (filepath) &#123;</span><br><span class="line">             if (filepath.indexOf(&#x27;index&#x27;) &gt; -1) &#123; return; &#125;</span><br><span class="line">             if (filepath.indexOf(&#x27;app.d.ts&#x27;) &gt; -1) &#123; return; &#125;</span><br><span class="line">             return &#x27;/// &lt;reference path=&quot;../..&#x27; + filepath + &#x27;&quot; /&gt;&#x27;;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)).pipe(gulp.dest(&#x27;./app/src/&#x27;));</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;watch&#x27;, function () &#123;</span><br><span class="line">    gulp.watch([&#x27;./app/src/**/*.ts&#x27;], [&#x27;webpack&#x27;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;webpack&#x27;, [&#x27;compile-ts&#x27;], function () &#123;</span><br><span class="line">    return gulp.src(&#x27;./app/dist/app.js&#x27;)</span><br><span class="line">      .pipe(gulpWebpack(&#123;          </span><br><span class="line">          entry: &#123;</span><br><span class="line">              bundled: &#x27;./app/dist/app.js&#x27;,</span><br><span class="line">              commands: &#x27;./app/dist/libs.js&#x27;</span><br><span class="line">          &#125;,</span><br><span class="line">          output: &#123;</span><br><span class="line">              filename: &#x27;[name].js&#x27;,</span><br><span class="line">          &#125;,</span><br><span class="line">          resolve: &#123;</span><br><span class="line">              // this tells Webpack where actually to find lodash because you&#x27;ll need it in the ProvidePlugin</span><br><span class="line">              alias: &#123;</span><br><span class="line">                  lodash: path.resolve(__dirname, &#x27;./node_modules/lodash&#x27;),</span><br><span class="line">                  angular: path.resolve(__dirname, &#x27;./node_modules/angular&#x27;)</span><br><span class="line">              &#125;,</span><br><span class="line">              extensions: [&#x27;&#x27;, &#x27;.js&#x27;]</span><br><span class="line">          &#125;,</span><br><span class="line">          module: &#123;</span><br><span class="line">              loaders: [</span><br><span class="line">                  &#123; test: /[\/]angular\.js$/, loader: &quot;exports?angular&quot; &#125;</span><br><span class="line">              ]</span><br><span class="line">          &#125;,</span><br><span class="line">          plugins: [</span><br><span class="line">              new webpack.ContextReplacementPlugin(/moment[\/\\]locale$/, /en/),</span><br><span class="line">              // this tells Webpack to provide the &quot;_&quot; variable globally in all your app files as lodash.</span><br><span class="line">              new webpack.ProvidePlugin(&#123;</span><br><span class="line">                  _: &quot;lodash&quot;,</span><br><span class="line">              &#125;),</span><br><span class="line">              new ngAnnotatePlugin(&#123;</span><br><span class="line">                  add: true</span><br><span class="line">              &#125;)</span><br><span class="line">              // new webpack.optimize.CommonsChunkPlugin(&#x27;common.js&#x27;),</span><br><span class="line">              //new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">              //    compress: &#123;</span><br><span class="line">              //        warnings: false</span><br><span class="line">              //    &#125;,</span><br><span class="line">              //    output: &#123; comments: false &#125;</span><br><span class="line">              //&#125;)</span><br><span class="line"></span><br><span class="line">          ]</span><br><span class="line">      &#125;))</span><br><span class="line">      .pipe(gulp.dest(&#x27;./Scripts&#x27;));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.task(&#x27;default&#x27;, [&#x27;watch&#x27;]);</span><br></pre></td></tr></table></figure>
<p>package.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;gulp&quot;: &quot;^3.9.0&quot;,</span><br><span class="line">    &quot;gulp-inject&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">    &quot;gulp-typescript&quot;: &quot;^2.10.0&quot;,</span><br><span class="line">    &quot;gulp-tsd&quot;: &quot;^0.0.4&quot;,</span><br><span class="line">    &quot;tsd&quot;: &quot;^0.6.5&quot;,</span><br><span class="line">    &quot;typescript&quot;: &quot;^1.7.5&quot;,</span><br><span class="line">    &quot;ng-annotate-webpack-plugin&quot;: &quot;^0.1.2&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;^0.11.14&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^1.11.0&quot;,</span><br><span class="line">    &quot;webpack-stream&quot;: &quot;^2.1.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;angular&quot;: &quot;^1.4.8&quot;,</span><br><span class="line">    &quot;lodash&quot;: &quot;^4.0.0&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>需要disable visual studio裡面對於typescript的compile，編輯csproj的第一個<PropertyGroup></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加入這個讓vs不要在Build的時候編譯Typescript</span><br><span class="line">&lt;TypeScriptCompileBlocked&gt;true&lt;/TypeScriptCompileBlocked&gt;</span><br></pre></td></tr></table></figure>
<p>另外需要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;PropertyGroup Condition=&quot; &#x27;$(Configuration)|$(Platform)&#x27; == &#x27;Debug|AnyCPU&#x27; &quot;&gt;</span><br><span class="line">在這個項目下，增加</span><br><span class="line">&lt;TypeScriptModuleKind&gt;commonjs&lt;/TypeScriptModuleKind&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>[Docker] Installing Docker on Windows 問題集</title>
    <url>/2016/03/27/685100/</url>
    <content><![CDATA[<p>###今天下載了docker Toolbox for windows ，根據<a href="https://docs.docker.com/windows/step_one/">安裝指示</a>安裝後，在執行時出現了一個錯誤訊息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hyper-v is installed. virtualbox won&#x27;t boot a 64 bits vm in hyper-v is activated ....</span><br></pre></td></tr></table></figure>
<p>排除方式為:修改 Program Files\Docker Toolbox\<a href="http://start.sh">start.sh</a>
在start.sh檔裡面，尋找</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;$&#123;DOCKER_MACHINE&#125;&quot; create -d virtualbox &quot;$&#123;VM&#125;&quot; </span><br></pre></td></tr></table></figure>
<p>更改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;$&#123;DOCKER_MACHINE&#125;&quot; create --virtualbox-no-vtx-check -d virtualbox &quot;$&#123;VM&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>即可排除此錯誤訊息</p>
<p>###當在command下docker command時，出現以下錯誤訊息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">An error occurred trying to connect: Get http://127.0.0.1:2375/v1.22/containers/json: dial tcp 127.0.0.1:2375: connectex: No connection could be made because the target machine actively refused it.</span><br></pre></td></tr></table></figure>
<p>排除方式為</p>
<ol>
<li><strong>docker-machine start default</strong> or create new one</li>
<li><strong>docker-machine</strong> ls will show you your machine running</li>
<li><strong>docker-machine env --shell cmd default</strong> and you’ll see something like</li>
</ol>
<blockquote>
<p>SET DOCKER_TLS_VERIFY=1
SET DOCKER_HOST=tcp://xxx.xxx.xxx.xxx:2376
SET DOCKER_CERT_PATH=C:\Users\Arseny.docker\machine\machines\default
SET DOCKER_MACHINE_NAME=default
REM Run this command to configure your shell:
REM     FOR /f 「tokens=*」 %i IN (『docker-machine env --shell cmd default』) DO %i</p>
</blockquote>
<p>4.Run</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FOR /f &quot;tokens=*&quot; %i IN (&#x27;docker-machine env --shell cmd default&#x27;) DO %i</span><br></pre></td></tr></table></figure>
<p>5.Enjoy. 就可以正常的下docker指令了</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[MVC Core] Run with Docker</title>
    <url>/2016/03/27/mvc-core-run-with-docker/</url>
    <content><![CDATA[<p>基於Docker安裝步驟變簡單了，所以是時候來玩Docker了.
在MVC Core的目錄下，新增一個檔案Dockfile, 內容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM microsoft/aspnet:1.0.0-rc1-update1</span><br><span class="line"></span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN [&quot;dnu&quot;, &quot;restore&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 5000/tcp</span><br><span class="line">ENTRYPOINT [&quot;dnx&quot;, &quot;-p&quot;, &quot;project.json&quot;, &quot;web&quot;,&quot;--server.urls&quot;, &quot;http://0.0.0.0:5000&quot;]</span><br></pre></td></tr></table></figure>
<p>**server.urls 需要指定到0.0.0.0:port, 不然在docker run起來的時候，網頁會說Refused to Connect
server.urls的設定方式可以參考<a href="http://docs.asp.net/en/latest/fundamentals/servers.html">這裡</a></p>
<p>開啟命令視窗，到有Dockerfile檔案的資料夾並執行下列指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t &lt;imageName&gt; .</span><br></pre></td></tr></table></figure>
<p>上列指令這會建立一個docker image file
接下來就要讓所建立出來的Image執行起來, 執行下列指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -t -d -p 5000:5000 &lt;imageName&gt;</span><br></pre></td></tr></table></figure>
<p>詳細的Docker指令用法，請參閱官方網站</p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC Core</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[Bot] 來寫Bot吧...讓我想起 MSN Bot了</title>
    <url>/2016/03/31/bot-to-write-a-bot-makes-me-think-of-msn-bot/</url>
    <content><![CDATA[<p>先從基本的開始，跟著下面的文章做，就可以完成基本的Bot功能了
<a href="http://docs.botframework.com/connector/getstarted/#navtitle">http://docs.botframework.com/connector/getstarted/#navtitle</a></p>
<p><strong>注意事項</strong></p>
<ol>
<li>
<p>當在新增【My Bot】時，Endpoint的網址一定要用<strong>https</strong>, 不然之後在測試Bot Connector時會出現403, 無法授權等奇怪的狀況.</p>
</li>
<li>
<p>如果使用web chat embed code時，要把他們所提供網址裡的s=[secret] 改成 t=[secret]</p>
</li>
</ol>
<p>###程式基本的運作方式</p>
<p>Bot在與Bot Connector之間的溝通是透過傳遞Message.
這個Message裡面會包含很多資訊，也可以保留狀態(所以可以建立一連串的問題，就像在執行npm init時會問一堆問題一樣)
<a href="http://docs.botframework.com/connector/message-types/#navtitle">網站參考</a></p>
<p>總結: 一切都是在玩弄Message這個物件阿.</p>
]]></content>
      <categories>
        <category>BOT</category>
      </categories>
      <tags>
        <tag>botframework</tag>
      </tags>
  </entry>
  <entry>
    <title>[Bot] FormFlow</title>
    <url>/2016/04/05/bot-formflow/</url>
    <content><![CDATA[<p><a href="http://docs.botframework.com/sdkreference/csharp/forms.html">基本版</a></p>
<p>根據官方文件的作法，當一個formflow完成後，那個Converstaion就會結束，不管之後再傳給bot什麼文字，Bot都不會有任何反應, 除非一個新的ConverstaionID重新建立</p>
<p>但是，在某些訊息環境，是沒有辦法更新ConverstaionID的. 這時候就需要自訂一個Dialog來處理FormComplete及其他的情形
就像官方文件所提到的Dialog是非常強大的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Serializable]</span><br><span class="line">    public class SandwichDialog : IDialog</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly BuildForm&lt;SandwichOrder&gt; SandwichOrderForm;</span><br><span class="line"></span><br><span class="line">        internal SandwichDialog(BuildForm&lt;SandwichOrder&gt; SandwichOrderForm)</span><br><span class="line">        &#123;</span><br><span class="line">            this.SandwichOrderForm = SandwichOrderForm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public async Task StartAsync(IDialogContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            context.Wait(MessageReceivedAsync);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public async Task MessageReceivedAsync(IDialogContext context, IAwaitable&lt;Message&gt; argument)</span><br><span class="line">        &#123;</span><br><span class="line">            var message = await argument;</span><br><span class="line">            var pizzaForm = new FormDialog&lt;SandwichOrder&gt;(new SandwichOrder(), this.SandwichOrderForm, FormOptions.PromptInStart);</span><br><span class="line">            context.Call&lt;SandwichOrder&gt;(pizzaForm, FormComplete);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private async Task FormComplete(IDialogContext context, IAwaitable&lt;SandwichOrder&gt; result)</span><br><span class="line">        &#123;</span><br><span class="line">            SandwichOrder order = null;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                order = await result;</span><br><span class="line">            &#125;          </span><br><span class="line">            catch (OperationCanceledException)</span><br><span class="line">            &#123;</span><br><span class="line">                await context.PostAsync(&quot;You canceled the form!&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                await context.PostAsync(ex.Message);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (order != null)</span><br><span class="line">            &#123;</span><br><span class="line">                await context.PostAsync(order.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                await context.PostAsync(&quot;Form returned empty response!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.Wait(MessageReceivedAsync);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>這個是當pizzaForm完成後，則執行FormComplete.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context.Call&lt;T&gt;(pizzaForm, FormComplete);</span><br></pre></td></tr></table></figure>
<p>在 FormComplete 裡面，可以取得使用者所輸入的選項，所以後續要處理的動作會寫在此處</p>
<p><a href="https://gist.github.com/chgc/773cfc50587e0d6a000884616d27273f">Gist</a></p>
]]></content>
      <categories>
        <category>BOT</category>
      </categories>
      <tags>
        <tag>botframework</tag>
      </tags>
  </entry>
  <entry>
    <title>[VS2015] 使用全域的NPM</title>
    <url>/2016/04/13/vs2015-uses-global-npm-version/</url>
    <content><![CDATA[<p>今天透過Visual studio 2015 執行webpack時，竟然返回錯誤訊息。
<img class="center" src="https://farm2.staticflickr.com/1718/26146425130_3a49b949a2_o.png">
我確定該webpack.config.js是可以跑的，但是為什麼在Visual studio 2015裡面執行卻是不行的，結果發現理由是node跟npm的版本有關係
我的webpack.config.js裡面有下’use strict’; 然後有使用到<strong>const</strong>, 所以VS就不開心了. 因為所使用的node版本不認識ES2015的東西.</p>
<p>解決方式是讓visual studio執行npm command時，使用本機電腦所使用的版本而不是Visual studio本身所用的版本, 將 ** $(PATH)**移到最上面
<img class="center" src="https://farm2.staticflickr.com/1602/25814380984_079d4fab3d_o.png"></p>
<p>這樣子的設定就可以讓VS在執行npm時，就會按照上圖的順序去找執行</p>
]]></content>
      <categories>
        <category>Visual Studio</category>
      </categories>
      <tags>
        <tag>VS2015</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] play with Redux part 1</title>
    <url>/2016/04/14/angular2-play-with-redux/</url>
    <content><![CDATA[<p>Redux是根據Facebook的flux所產出的一個架構. 簡單介紹請參考<a href="https://youtu.be/s9AC8KTcce8">這裡</a></p>
<p>簡單的動作及資料流程如下
<img src="http://user-image.logdown.io/user/4862/blog/4871/post/710542/PhIpkTcMTvOGWU1XGjfY_Untitled%20Diagram.png" alt="Untitled Diagram.png"></p>
<p>複雜一點的流程圖如下
<img src="http://user-image.logdown.io/user/4862/blog/4871/post/710542/6Or79jM8QmuFVuhUhrJu_moreDetailReduxFlow.png" alt="moreDetailReduxFlow.png"></p>
<p>每一個階段都有他應該要做的事情
- Action: 處理資料，呼叫API, 任何有可能產生副作用的行為都在這階段處理, 通常都是回傳JSON object.<br>
- Reducer: 根據Action傳來的動作和資料，來決定與原本的資料(In Store)的關係，例如、新增、更新、移除或過濾等,回傳要顯示在View上面的資料</p>
<p>##程式碼
@Component程式的基本架構</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">Component</span>,    </span><br><span class="line">    <span class="title class_">Inject</span>,</span><br><span class="line">    <span class="title class_">ApplicationRef</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">TodoAction</span> <span class="keyword">from</span> <span class="string">&#x27;../../actions/ToDo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;ck-todo-app&#x27;</span>,    </span><br><span class="line">    <span class="attr">template</span>: <span class="built_in">require</span>(<span class="string">&#x27;./TodoPage.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CkTodoApp</span> &#123;</span><br><span class="line">    private <span class="attr">disconnect</span>: <span class="title class_">Function</span>;</span><br><span class="line">    private <span class="attr">unsubscribe</span>: <span class="title class_">Function</span>;</span><br><span class="line">        </span><br><span class="line">    private <span class="attr">items</span>: any;</span><br><span class="line">    private <span class="attr">task</span>: any;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        @Inject(<span class="string">&#x27;ngRedux&#x27;</span>) private ngRedux,</span></span><br><span class="line"><span class="params">        private applicationRef: ApplicationRef</span>) &#123;       </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">disconnect</span> = <span class="variable language_">this</span>.<span class="property">ngRedux</span>.<span class="title function_">connect</span>(</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">mapStateToThis</span>,</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">mapDispatchToThis</span>)(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">unsubscribe</span> = <span class="variable language_">this</span>.<span class="property">ngRedux</span>.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">applicationRef</span>.<span class="title function_">tick</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">disconnect</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 註冊store到變數上</span></span><br><span class="line">    <span class="title function_">mapStateToThis</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">items</span>: state.<span class="property">todo</span>,</span><br><span class="line">            <span class="attr">task</span>: state.<span class="property">newtodo</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 註冊功能到這個Class裡</span></span><br><span class="line">    <span class="title function_">mapDispatchToThis</span>(<span class="params">dispatch</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">add</span>: <span class="function">(<span class="params">task</span>) =&gt;</span> <span class="title function_">dispatch</span>(<span class="title class_">TodoAction</span>.<span class="title function_">add</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, task))),</span><br><span class="line">            <span class="attr">remove</span>: <span class="function">(<span class="params">task</span>) =&gt;</span> <span class="title function_">dispatch</span>(<span class="title class_">TodoAction</span>.<span class="title function_">remove</span>(task))</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>TodoPage.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix mx-auto col-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>TODO App<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix mxn2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;task.content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;input inline-block&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary inline-block&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;add(task)&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearfix mxn2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-reset&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;#item of items&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.content &#125;&#125; <span class="tag">&lt;<span class="name">span</span> (<span class="attr">click</span>)=<span class="string">&quot;remove(item)&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>###註冊Store as provider in Angular2 application</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode, provide &#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bootstrap&#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/bootstrap&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ROUTER_PROVIDERS</span>, <span class="variable constant_">APP_BASE_HREF</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CkDemoApp</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./containers/main-app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 註冊redux store用</span></span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">&#x27;./store/configure-store&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> provider = <span class="built_in">require</span>(<span class="string">&#x27;ng2-redux&#x27;</span>).<span class="property">provider</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">let</span> <span class="attr">__PRODUCTION__</span>: any;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (__PRODUCTION__) &#123;</span><br><span class="line">    <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrap</span>(<span class="title class_">CkDemoApp</span>, [</span><br><span class="line">    <span class="title function_">provider</span>(store),</span><br><span class="line">    <span class="variable constant_">ROUTER_PROVIDERS</span>,</span><br><span class="line">    <span class="title function_">provide</span>(<span class="variable constant_">APP_BASE_HREF</span>, &#123; <span class="attr">useValue</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>store/configureStore</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">///&lt;reference path=&quot;./dev-types.d.ts&quot;/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware, compose&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;fromJS&#125; <span class="keyword">from</span> <span class="string">&#x27;immutable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReduxThunk</span> <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&#x27;../reducers&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> persistState = <span class="built_in">require</span>(<span class="string">&#x27;redux-localstorage&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">configureStore</span>(<span class="params">initialState</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">compose</span>(</span><br><span class="line">        <span class="title function_">_getMiddleware</span>()</span><br><span class="line">    )(createStore)(rootReducer, initialState);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_getMiddleware</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> middleware = [</span><br><span class="line">        <span class="title class_">ReduxThunk</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        middleware = [...middleware];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">applyMiddleware</span>(...middleware);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="設定ACTIONs"><a class="header-anchor" href="#設定ACTIONs"> </a>設定ACTIONs</h2>
<p>actions/Todo</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">TODO_ADD</span>, <span class="variable constant_">TODO_REMOVE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../constants&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">task</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="variable constant_">TODO_ADD</span>,</span><br><span class="line">        <span class="attr">data</span>: task</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">task</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="variable constant_">TODO_REMOVE</span>,</span><br><span class="line">        <span class="attr">data</span>: task</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="設定可以使用的Reducers"><a class="header-anchor" href="#設定可以使用的Reducers"> </a>設定可以使用的Reducers</h3>
<p>reducers/index</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="comment">// reducer functions</span></span><br><span class="line"><span class="keyword">import</span> &#123;todo, newtodo&#125; <span class="keyword">from</span> <span class="string">&#x27;./todo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的名稱是要存取store資料時的名稱</span></span><br><span class="line"><span class="comment">// ex. state.todo</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    todo,</span><br><span class="line">    newtodo</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>reducers/todo.ts</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromJS, <span class="title class_">List</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;immutable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">TODO_ADD</span>, <span class="variable constant_">TODO_REMOVE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../constants&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INITIAL_STATE</span> = <span class="title class_">List</span>&lt;any&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo Reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">todo</span>(<span class="params">state = INITIAL_STATE, action: any = &#123; type: <span class="string">&#x27;&#x27;</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">TODO_ADD</span>:</span><br><span class="line">            <span class="keyword">return</span> state.<span class="title function_">push</span>(action.<span class="property">data</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">TODO_REMOVE</span>:</span><br><span class="line">            <span class="keyword">return</span> state.<span class="title function_">remove</span>(state.<span class="title function_">indexOf</span>(action.<span class="property">data</span>));</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newtodo Reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">newtodo</span>(<span class="params">state = &#123; content: <span class="string">&#x27;&#x27;</span> &#125;, action: any = &#123; type: <span class="string">&#x27;&#x27;</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">TODO_ADD</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span> &#125;;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/chgc/Angular2WithRedux">CODE</a></p>
<p>參考資料:
- <a href="https://medium.com/google-developer-experts/angular-2-introduction-to-redux-1cf18af27e6e#.yjn4pou3u">Angular 2 — Introduction to Redux</a>
- <a href="http://ngcourse.rangle.io/handout/redux/index.html">Angular 2 and Redux</a>
- <a href="https://github.com/reactjs/redux">redux</a>
- <a href="https://github.com/wbuchwalter/ng2-redux">ng2-redux</a>
- <a href="https://facebook.github.io/immutable-js/">immutable.js</a>
- <a href="http://onehungrymind.com/build-better-angular-2-application-redux-ngrx/">work with service</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] play with Redux part 2</title>
    <url>/2016/04/17/angular2-redux-with-service/</url>
    <content><![CDATA[<p>在Part 1提到在aciton裡面，如果有需要呼叫api的行為，都會發生這個階段
目前有發現有兩種方式可以處理api.</p>
<ol>
<li>angular的service(http call)</li>
<li><a href="https://github.com/github/fetch">fetch api</a></li>
</ol>
<p>如果利用第二種方式處理api call時，可以直接寫在action裡面。但是如果想要利用angular的service方式時，就要繞一下路了
但是，還是先簡單的寫一下fetch的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">loadTodo</span>(<span class="params"></span>) &#123;</span><br><span class="line">	 <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;api/Values&#x27;</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (&#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="variable constant_">TODO_INIT</span>,</span><br><span class="line">                    <span class="attr">payload</span>: data</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">dispatch</span>(action);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用service的code如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>, <span class="title class_">Inject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Http</span>, <span class="title class_">Response</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/Rx&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">TODO_INIT</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../constants&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TodoService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        @Inject(<span class="string">&#x27;ngRedux&#x27;</span>) private store,</span></span><br><span class="line"><span class="params">        private http: Http</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">loadTodo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;api/Values&#x27;</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="keyword">return</span> res.<span class="title function_">json</span>() &#125;)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function">(<span class="params">d</span>) =&gt;</span> (&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="variable constant_">TODO_INIT</span>,</span><br><span class="line">                <span class="attr">payload</span>: d</span><br><span class="line">            &#125;))</span><br><span class="line">            .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">store</span>.<span class="title function_">dispatch</span>(action);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Make asp.net mvc core always serve index.html</title>
    <url>/2016/04/18/angular2-make-aspnet-mvc-core-always-serve-indexhtml/</url>
    <content><![CDATA[<p>Angular2的預設route模式是html5，這個在跑到其他頁面後，在重新整理頁面後會出現空白頁面，這是因為找不到Index的入口了。所以解決方式就是要讓MVC Core可以每次都載入Index.html頁面(如果純靜態頁面的方式)</p>
<p>在startup.cs的Configure function, 加入以下程式碼</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 判斷request如果不是api call時，則要讀取index.html</span></span><br><span class="line">  <span class="keyword">if</span> (!Path.HasExtension(context.Request.Path.Value) </span><br><span class="line">       &amp;&amp; context.Request.HttpContext.Request.Headers[<span class="string">&quot;X-Custom-Header&quot;</span>] != <span class="string">&quot;api&quot;</span></span><br><span class="line">      &amp;&amp; context.Request.HttpContext.Request.Headers[<span class="string">&quot;X-Requested-With&quot;</span>] != <span class="string">&quot;XMLHttpRequest&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line"> 	 <span class="keyword">await</span> context.Response.WriteAsync(System.IO.File.ReadAllText(<span class="string">&quot;index.html&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">	<span class="keyword">await</span> next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在Angular2的index.ts裡設定讓所有的request的header都新增 X-Custom-Header=api，讓server判斷是否為api call</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">HTTP_PROVIDERS</span>, <span class="title class_">BaseRequestOptions</span>, <span class="title class_">RequestOptions</span>, <span class="title class_">Headers</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">requestOption</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseRequestOptions</span> &#123;</span><br><span class="line">    <span class="attr">headers</span>: <span class="title class_">Headers</span> = <span class="keyword">new</span> <span class="title class_">Headers</span>(&#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;api&#x27;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrap</span>(<span class="title class_">CkDemoApp</span>, [</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">provide</span>(<span class="title class_">RequestOptions</span>, &#123; <span class="attr">useClass</span>: requestOption &#125;)</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>這樣子就可以讓Angular2跑到不同頁面時，不會因為重新整理而出現空白的畫面</p>
<p>如果是用Controller/View的方式，設定方法比照舊的設定方式即可</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] play with Redux part 3 - middleware</title>
    <url>/2016/04/18/angular2-play-with-redux-part-3-middleware/</url>
    <content><![CDATA[<p>Redux2的middleware是介於action和reducer之間。例如: ReduxThunk.
設定方式是在建立store時，將middleware指定給store即可</p>
<p>寫自訂的middleware基本架構如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> isPromise <span class="keyword">from</span> <span class="string">&#x27;../utils/is-promise&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">promiseMiddleware</span>(<span class="params">&#123; dispatch &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">isPromise</span>(action.<span class="property">payload</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">next</span>(action);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; types, payload, meta &#125; = action;</span><br><span class="line">        <span class="keyword">const</span> &#123; promise, data &#125; = payload;</span><br><span class="line">        <span class="keyword">const</span> [<span class="variable constant_">PENDING</span>, <span class="variable constant_">FULFILLED</span>, <span class="variable constant_">REJECTED</span>] = types;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Dispatch the pending action</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">let</span> pendingAction = &#123; <span class="attr">type</span>: <span class="variable constant_">PENDING</span>, <span class="attr">payload</span>: <span class="literal">null</span>, <span class="attr">meta</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (_.<span class="title function_">isEmpty</span>(data)) &#123;</span><br><span class="line">            pendingAction.<span class="property">payload</span> = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_.<span class="title function_">isEmpty</span>(meta)) &#123;</span><br><span class="line">            pendingAction.<span class="property">meta</span> = meta;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">dispatch</span>(pendingAction);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * If successful, dispatch the fulfilled action, otherwise dispatch</span></span><br><span class="line"><span class="comment">         * rejected action.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> promise.<span class="title function_">then</span>(</span><br><span class="line">            <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="variable constant_">FULFILLED</span>,</span><br><span class="line">                    <span class="attr">payload</span>: result,</span><br><span class="line">                    meta,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="variable constant_">REJECTED</span>,</span><br><span class="line">                    <span class="attr">payload</span>: error,</span><br><span class="line">                    meta,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>store的設定方式如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">configureStore</span>(<span class="params">initialState</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">compose</span>(</span><br><span class="line">        <span class="title function_">_getMiddleware</span>()</span><br><span class="line">    )(createStore)(rootReducer, initialState);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_getMiddleware</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 這裡加入middleware</span></span><br><span class="line">    <span class="keyword">let</span> middleware = [</span><br><span class="line">        promiseMiddleware,</span><br><span class="line">        <span class="title class_">ReduxThunk</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        middleware = [...middleware];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">applyMiddleware</span>(...middleware);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>參考文件:
- <a href="http://redux.js.org/docs/advanced/Middleware.html">middleware</a>
- <a href="https://github.com/gaearon/redux-thunk">redux-thunk</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] How about Form?</title>
    <url>/2016/04/19/angular2-how-about-form/</url>
    <content><![CDATA[<p>在Angular2的Form, 可以使用[(ngModel)]的方式或是使用 ngFormModel的方式(如下)。 ngModel就不多描述，用法跟Angular1.x一樣</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">ngFormModel</span>]=<span class="string">&quot;form&quot;</span> (<span class="attr">submit</span>)=<span class="string">&quot;add($event)&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col col-4 mr2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>類別<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;select&quot;</span> <span class="attr">ngControl</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--選擇--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;類別1&quot;</span>&gt;</span>類別1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;類別2&quot;</span>&gt;</span>類別2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!category.valid&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                    類別 Required</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col col-4 mr2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>金額<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">ngControl</span>=<span class="string">&quot;amon&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!amon.valid&quot;</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br><span class="line">                    金額 Required</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col col-3 mt3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;!form.valid&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js的部分如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">FORM_DIRECTIVES</span>, <span class="title class_">FormBuilder</span>, <span class="title class_">Validators</span>, <span class="title class_">ControlGroup</span>, <span class="title class_">Control</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;ck-book&#x27;</span>,</span><br><span class="line">    <span class="attr">directives</span>: [<span class="variable constant_">FORM_DIRECTIVES</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="built_in">require</span>(<span class="string">&#x27;./book.html&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CkBookPage</span> &#123;</span><br><span class="line">    private <span class="attr">form</span>: <span class="title class_">ControlGroup</span>;</span><br><span class="line">    private <span class="attr">amon</span>: <span class="title class_">Control</span>;</span><br><span class="line">    private <span class="attr">category</span>: <span class="title class_">Control</span>;</span><br><span class="line">    private books = [];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">private builder: FormBuilder</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">amon</span> = <span class="keyword">new</span> <span class="title class_">Control</span>(<span class="string">&quot;&quot;</span>, <span class="title class_">Validators</span>.<span class="property">required</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">category</span> = <span class="keyword">new</span> <span class="title class_">Control</span>(<span class="string">&quot;&quot;</span>, <span class="title class_">Validators</span>.<span class="property">required</span>);</span><br><span class="line">                </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">form</span> = builder.<span class="title function_">group</span>(&#123;</span><br><span class="line">            <span class="attr">category</span>: <span class="variable language_">this</span>.<span class="property">category</span>,</span><br><span class="line">            <span class="attr">amon</span>: <span class="variable language_">this</span>.<span class="property">amon</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">value</span>);        </span><br><span class="line">        <span class="keyword">let</span> _value = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">form</span>.<span class="property">value</span>);</span><br><span class="line">        _value.<span class="property">date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">books</span>.<span class="title function_">push</span>(_value);</span><br><span class="line">        </span><br><span class="line">        event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有幾個新東西出現. ngFormModel, ngControl. 這些都包含在FORM_DIRECTIVES裡.</p>
<p>FormBuilder是用來組合東西給ngFormModel用, 是把Control包在一起 builder.group({ … controls})
Control是配合ngControl使用. 初始是 new Control(『default value』, validator, asyncValidator)</p>
<p>這樣的設定方式，可以讓Form上的動作都在javascript裡面設定。單純html的程式碼</p>
<h3 id="小問題-till-Verstion-Beta15"><a class="header-anchor" href="#小問題-till-Verstion-Beta15"> </a>小問題(till Verstion Beta15)</h3>
<ol>
<li>input[type=number]空白時，預設的值會變成NaN. 但是這個被判斷是有值得，所以Validator.required是真的.
這個問題在github上有被提出來也被解決了，但是就到目前為止，修正未包含在裡面. 所以必須手動修改程式碼, 修改方式如下
修改檔案
檔案位置: angular2\src\common\forms\directives\number_value_accessor.js</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NumberValueAccessor.prototype.registerOnChange = function (fn) &#123;</span><br><span class="line">        this.onChange = function (value) &#123; fn(lang_1.NumberWrapper.parseFloat(value)); &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">change to </span><br><span class="line">NumberValueAccessor.prototype.registerOnChange = function (fn) &#123;</span><br><span class="line">        this.onChange = function (value) &#123; fn(value == &#x27;&#x27; ? null : lang_1.NumberWrapper.parseFloat(value)); &#125;;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/kara/angular/commit/54b45225ae7c23fd5cad12fb1412a6339f6f27fa">Github commit log</a></p>
<ol start="2">
<li>date format設定. 原本 book.date | date:&quot;yyyy-MM-dd&quot;這樣子的寫法輸出的結果會是 2016-04-20. 但是現在的版本locale是被寫死的(en-US), 所以也是要進程式碼手動修改.
檔案位置: angular2\src\common\pipes</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// var defaultLocale = &#x27;en-US&#x27;; 修改這裡。參數可以參考moment.js網站</span><br><span class="line">var defaultLocale = &#x27;zh-TW&#x27;;</span><br></pre></td></tr></table></figure>
<h3 id="參考文章"><a class="header-anchor" href="#參考文章"> </a>參考文章</h3>
<ul>
<li><a href="http://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html">custom-validators</a></li>
<li><a href="http://blog.thoughtram.io/angular/2016/03/21/template-driven-forms-in-angular-2.html">template-driven-forms</a></li>
<li><a href="http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/">ngBook2- Form</a></li>
<li><a href="http://learnangular2.com/forms/">learnangular2</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] css style </title>
    <url>/2016/04/24/angular2-css-style/</url>
    <content><![CDATA[<p>Angular Component 處理styles有三種模式
1. ViewEncapsulation.None: 適用於全部頁面(No Shadow DOM)
2. ViewEncapsulation.Native: 僅套用於Shadow DOM自己本身
3. ViewEncapsulation.Emulated: 預設行為。 會自動將每個component給予一個名稱，讓各compoent裡面的style會各自獨立</p>
<p>先來看第1,2種，看看style會被放在哪一個位置</p>
<ol>
<li>ViewEncapsulation.None</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;ck-book&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="built_in">require</span>(<span class="string">&#x27;./book.html&#x27;</span>),</span><br><span class="line">    <span class="attr">styles</span>: [<span class="string">`</span></span><br><span class="line"><span class="string">        h3 &#123;</span></span><br><span class="line"><span class="string">           color: red</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    `</span>],</span><br><span class="line">    <span class="attr">encapsulation</span>: <span class="title class_">ViewEncapsulation</span>.<span class="property">None</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CkBookPage</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://farm2.staticflickr.com/1645/26627939205_43b19d3144_o.png" alt=""></p>
<p>2.ViewEncapsulation.Native</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;ck-book&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="built_in">require</span>(<span class="string">&#x27;./book.html&#x27;</span>),</span><br><span class="line">    <span class="attr">styles</span>: [<span class="string">`</span></span><br><span class="line"><span class="string">        h3 &#123;</span></span><br><span class="line"><span class="string">           color: red</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    `</span>],</span><br><span class="line">    <span class="attr">encapsulation</span>: <span class="title class_">ViewEncapsulation</span>.<span class="property">Native</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CkBookPage</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://farm2.staticflickr.com/1453/26022315254_564ea8044a_o.png" alt=""></p>
<p>注意到ViewEncapsulation.Native將ViewEncapsulation.None的和本身定義的Style都包含在Shadow DOM裡面，這表示該Componenet與外面已經分開了. 本身所定義的css樣式不會影響到別人了</p>
<ol start="3">
<li>ViewEncapsulation.Emulated為預設行為，會自動將每個Component給予一個名稱，然後在產生html時會將各Componet裡
定義的style加上該名稱，讓css不會互相影響</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;ck-book&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="built_in">require</span>(<span class="string">&#x27;./book.html&#x27;</span>),</span><br><span class="line">    <span class="attr">styles</span>: [<span class="string">`</span></span><br><span class="line"><span class="string">        h3 &#123;</span></span><br><span class="line"><span class="string">           color: red</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    `</span>],</span><br><span class="line">    <span class="attr">encapsulation</span>: <span class="title class_">ViewEncapsulation</span>.<span class="property">Emulated</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-tag">h3</span><span class="selector-attr">[_ngcontent-jfs-3]</span> &#123;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">   &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">_ngcontent-jfs-3</span> <span class="attr">class</span>=<span class="string">&quot;clearfix mx-auto col-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">_ngcontent-jfs-3</span>&gt;</span>Booking<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		....</span><br></pre></td></tr></table></figure>
<p><img src="https://farm2.staticflickr.com/1489/26534950052_6d97a87c71_o.png" alt=""></p>
<h2 id="參考"><a class="header-anchor" href="#參考"> </a>參考</h2>
<ul>
<li><a href="http://blog.thoughtram.io/angular/2015/06/29/shadow-dom-strategies-in-angular2.html">shadow-dom-strategies-in-angular2</a></li>
<li><a href="https://egghead.io/lessons/angular-2-controlling-how-styles-are-shared-with-view-encapsulation">Controlling how Styles are Shared with View Encapsulation</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Coding4Fun] Build my own Markdown editor - Part I</title>
    <url>/2016/05/03/codemirror/</url>
    <content><![CDATA[<p>因為找不到自己想要的Markdown編輯器，所以自己來寫一個.</p>
<p>想要的功能</p>
<ul>
<li>Live preview like <a href="https://www.typora.io/">Typora</a></li>
<li>Auto-upload image to <a href="http://flickr.com/">Flickr</a></li>
<li>Be able to work with <a href="https://hexo.io/zh-tw/">Hexo</a></li>
</ul>
<span id="more"></span>
<h1 id="開發環境"><a class="header-anchor" href="#開發環境"> </a>開發環境</h1>
<ul>
<li>JavaScript</li>
<li><a href="https://codemirror.net/">CodeMirror</a></li>
<li><a href="http://expressjs.com/">ExpressJS</a></li>
<li><a href="https://github.com/Pomax/node-flickrapi">node-flickrapi</a></li>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li>
</ul>
<h1 id="撞牆期"><a class="header-anchor" href="#撞牆期"> </a>撞牆期</h1>
<h2 id="CodeMirror"><a class="header-anchor" href="#CodeMirror"> </a><a href="CodeMirror">CodeMirror</a></h2>
<h3 id="設定CodeMirror"><a class="header-anchor" href="#設定CodeMirror"> </a>設定CodeMirror</h3>
<p>新增一頁html, 引用CodeMirror.js和CodeMirror.css.</p>
<p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//================</span></span><br><span class="line"> <span class="keyword">var</span> codeConfig = &#123;</span><br><span class="line">   <span class="attr">autofocus</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">lineNumbers</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">styleActiveLine</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">mode</span>: <span class="string">&quot;gfm&quot;</span>, <span class="comment">// Markdown Edit Mode, 需要另外引用gfm和markdown.js</span></span><br><span class="line">   <span class="attr">lineWrapping</span>: <span class="literal">true</span>    </span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> editor = <span class="title class_">CodeMirror</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;editor&quot;</span>), codeConfig);</span><br></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Markdown Editor<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;lib/codemirror/lib/codemirror.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.CodeMirror</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;       </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CodeMirror Markdown Editor<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/codemirror/lib/codemirror.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;lib/codemirror/mode/markdown/markdown.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;lib/codemirror/addon/mode/overlay.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;lib/codemirror/addon/selection/active-line.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;lib/codemirror/mode/gfm/gfm.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--highlight Javascript Syntax--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;lib/codemirror/mode/javascript/javascript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>顯示畫面</p>
<p><img src="https://farm8.staticflickr.com/7678/26783417845_b60a071a13_o.png" alt=""></p>
<h3 id="轉換Markdown"><a class="header-anchor" href="#轉換Markdown"> </a>轉換Markdown</h3>
<p>這裡所使用到的轉換Library是<a href="https://github.com/showdownjs/showdown">showdown</a></p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;preview&quot;</span> <span class="attr">class</span>=<span class="string">&quot;preview&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/node_modules/showdown/dist/showdown.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> converter = <span class="keyword">new</span> showdown.<span class="title class_">Converter</span>(&#123;</span><br><span class="line">   <span class="attr">literalMidWordUnderscores</span>: <span class="literal">true</span>,</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// livepreview</span></span><br><span class="line"> editor.<span class="title function_">on</span>(<span class="string">&#x27;update&#x27;</span>, <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">   $(<span class="string">&quot;#preview&quot;</span>).<span class="title function_">html</span>(converter.<span class="title function_">makeHtml</span>(instance.<span class="title function_">getValue</span>()));</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p>這樣子就會邊打字邊顯示結果，但是到這裡，還是跟大部分的Markdown Editor一樣，是分兩個視窗分別顯示Markdown及輸出結果，但如何表現得跟Typora一樣，仍在研究中</p>
<h3 id="拖拉照片"><a class="header-anchor" href="#拖拉照片"> </a>拖拉照片</h3>
<p>CodeMirror支援Drag&amp;Drop, 也可以設定允許的檔案類別，設定方式如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> codeConfig = &#123;</span><br><span class="line">    <span class="attr">autofocus</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">lineNumbers</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">styleActiveLine</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;gfm&quot;</span>,</span><br><span class="line">    <span class="attr">lineWrapping</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">allowDropFileTypes</span>: [<span class="string">&quot;image/png&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>, <span class="string">&quot;image/gif&quot;</span>] <span class="comment">//允許上傳的圖片類型:png,jpg,gif</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>可以利用editor.on(『』,function(){})來處理動作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">editor.<span class="title function_">on</span>(<span class="string">&quot;drop&quot;</span>, <span class="keyword">function</span> (<span class="params">editor, e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> files = e.<span class="property">dataTransfer</span>.<span class="property">files</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>這裡可以取得拖拉到editor裡的檔案有哪些</p>
<p>還有些額外的問題，如果將照片拖拉到非editor的地方，瀏覽器會直接顯示該照片，這不是我要的現象，所以我要將非editor的地方的drag&amp;drop給關掉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> body = <span class="variable language_">document</span>; <span class="comment">//target any DOM element here</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (body.<span class="property">addEventListener</span>) <span class="comment">//(Mozilla)</span></span><br><span class="line">   &#123;</span><br><span class="line">     body.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragenter&#x27;</span>, preventDrag, <span class="literal">true</span>); <span class="comment">//precursor for drop event</span></span><br><span class="line">     body.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragover&#x27;</span>, preventDrag, <span class="literal">true</span>); <span class="comment">//precursor for drop event</span></span><br><span class="line">     body.<span class="title function_">addEventListener</span>(<span class="string">&#x27;drop&#x27;</span>, preventDrag, <span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (body.<span class="property">attachEvent</span>) <span class="comment">//(IE)</span></span><br><span class="line">   &#123;</span><br><span class="line">     body.<span class="title function_">attachEvent</span>(<span class="string">&#x27;ondragenter&#x27;</span>, preventDrag);</span><br><span class="line">     body.<span class="title function_">attachEvent</span>(<span class="string">&#x27;ondragover&#x27;</span>, preventDrag);</span><br><span class="line">     body.<span class="title function_">attachEvent</span>(<span class="string">&#x27;ondrop&#x27;</span>, preventDrag);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">preventDrag</span>(<span class="params">event</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (event.<span class="property">type</span> == <span class="string">&#x27;dragenter&#x27;</span> || event.<span class="property">type</span> == <span class="string">&#x27;dragover&#x27;</span> || <span class="comment">//if drag over event -- allows for drop event to be captured, in case default for this is to not allow drag over target</span></span><br><span class="line">     event.<span class="property">type</span> == <span class="string">&#x27;drop&#x27;</span>) <span class="comment">//prevent text dragging -- IE and new Mozilla (like Firefox 3.5+)</span></span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">className</span>.<span class="title function_">trim</span>() != <span class="string">&quot;CodeMirror-line&quot;</span>) &#123;        </span><br><span class="line">       <span class="keyword">if</span> (event.<span class="property">stopPropagation</span>) <span class="comment">//(Mozilla)</span></span><br><span class="line">       &#123;</span><br><span class="line">         event.<span class="title function_">preventDefault</span>();</span><br><span class="line">         event.<span class="title function_">stopPropagation</span>(); <span class="comment">//prevent drag operation from bubbling up and causing text to be modified on old Mozilla (before Firefox 3.5, which doesn&#x27;t have drop event -- this avoids having to capture old dragdrop event)</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//(IE)</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;  </span><br></pre></td></tr></table></figure>
<p>&lt;&lt; 待續 &gt;&gt;</p>
<hr>
<h1 id="程式碼"><a class="header-anchor" href="#程式碼"> </a>程式碼</h1>
<p><a href="https://github.com/chgc/markdown">GitHub</a></p>
]]></content>
      <categories>
        <category>Coding4Fun</category>
      </categories>
      <tags>
        <tag>Coding4Fun</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]升級到RC</title>
    <url>/2016/05/04/angular2-upgrade-to-rc0/</url>
    <content><![CDATA[<p>Angular發佈RC了，來升級吧</p>
<span id="more"></span>
<p><a href="https://github.com/angular/angular/blob/master/CHANGELOG.md#200-rc0-2016-05-02">Changelog</a></p>
<h1 id="升級Angular2-RC"><a class="header-anchor" href="#升級Angular2-RC"> </a>升級Angular2 RC</h1>
<h2 id="NPM安裝命令"><a class="header-anchor" href="#NPM安裝命令"> </a>NPM安裝命令</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save @angular/core @angular/compiler @angular/common @angular/platform-browser @angular/platform-browser-dynamic rxjs@5.0.0-beta.6 zone.js@0.6.12</span><br></pre></td></tr></table></figure>
<p>RC版本，將各Module都拆開了，這表示，可以只安裝自己需要的部分，就不用全部都包進來了</p>
<p>如果出現下面的畫面，更新npm後就可以修正問題了</p>
<p><img src="https://farm8.staticflickr.com/7123/26802139945_49ab0ab1c8_o.png" alt=""></p>
<h2 id="修改import-namespace"><a class="header-anchor" href="#修改import-namespace"> </a>修改import namespace</h2>
<p>例如</p>
<ul>
<li><code>angular2/core</code> -&gt; <code>@angular/core</code></li>
<li><code>angular2/compiler</code> -&gt; <code>@angular/compiler</code></li>
<li><code>angular2/common</code> -&gt; <code>@angular/common</code></li>
<li><code>angular2/platform/browser</code> -&gt; <code>@angular/platform-browser</code> (applications with precompiled templates) + <code>@angular/platform-browser-dynamic</code> (applications that compile templates on the fly)</li>
<li><code>angular2/platform/server</code> -&gt; <code>@angular/platform-server</code></li>
<li><code>angular2/testing</code> -&gt; <code>@angular/core/testing</code> (it/describe/…) + <code>@angular/compiler/testing</code> (TestComponentBuilder) + <code>@angular/platform-browser/testing</code></li>
<li><code>angular2/upgrade</code> -&gt; <code>@angular/upgrade</code></li>
<li><code>angular2/http</code> -&gt; <code>@angular/http</code></li>
<li><code>angular2/router</code> -&gt; <code>@angular/router-deprecated</code> (snapshot of the component router from beta.17 for backwards compatibility)</li>
<li>new package: <code>@angular/router</code> - component router with several <a href="https://docs.google.com/document/d/1WLSNV3V1AKdwLwRiLuN7JqbPBKQ_S5quRlcT5LPIldw/edit#heading=h.blfh5ya9sf5r">breaking changes</a></li>
</ul>
<p>但是有些東西還是有換位置</p>
<ul>
<li>import { bootstrap }    from 『@angular/platform-browser-dynamic』; --&gt;『angular2/platform/browser』;</li>
<li>import { APP_BASE_HREF } from 『@angular/common』; --&gt; from 『angular2/http』</li>
</ul>
<h2 id="更新其他有用到ng2的Library"><a class="header-anchor" href="#更新其他有用到ng2的Library"> </a>更新其他有用到ng2的Library</h2>
<p>這部分可能會有些問題，因為RC是近期的發佈的，有可能部分的Library還沒有跟著更新，所以在使用上會出現問題。</p>
<h2 id="更新Build-tool-config-if-need"><a class="header-anchor" href="#更新Build-tool-config-if-need"> </a>更新Build tool config if need</h2>
<p>ex: Webpack</p>
<h2 id="測試升級後的結果"><a class="header-anchor" href="#測試升級後的結果"> </a>測試升級後的結果</h2>
<h1 id="語法調整"><a class="header-anchor" href="#語法調整"> </a>語法調整</h1>
<h2 id="ngFor-change-in-2-0-0-beta-17"><a class="header-anchor" href="#ngFor-change-in-2-0-0-beta-17"> </a>*ngFor (change in 2.0.0-beta.17)</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原本的ngFor用法為</span></span><br><span class="line">*ngFor=<span class="string">&quot;#item of items&quot;</span></span><br><span class="line"><span class="comment">// 修正為</span></span><br><span class="line">*ngFor=<span class="string">&quot;let item of items&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Pipe-change-in-2-0-0-beta-16"><a class="header-anchor" href="#Pipe-change-in-2-0-0-beta-16"> </a>Pipe (change in 2.0.0-beta.16)</h2>
<p>針對Argument的處理方式改變</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原本的</span></span><br><span class="line"> <span class="title function_">transform</span>(<span class="params">todos, args</span>) &#123;        </span><br><span class="line">    <span class="comment">// 傳進來的args為array</span></span><br><span class="line">    ...       </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 升級後</span></span><br><span class="line"><span class="title function_">transform</span>(<span class="params">todos, args</span>) &#123; </span><br><span class="line">  <span class="comment">// 傳進來的args變成傳給他什麼就是什麼</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]Rxjs的Observers</title>
    <url>/2016/05/10/angular2-rxjs-observers/</url>
    <content><![CDATA[<p>Angular2裡面有用到<a href="https://github.com/Reactive-Extensions/RxJS">RxJS</a>的Extensions. 那這個Extendsion會帶給Angular2怎樣的幫助，來研究一下Http的程式碼吧</p>
<span id="more"></span>
<h2 id="Angular2-Http-Code"><a class="header-anchor" href="#Angular2-Http-Code"> </a>Angular2 Http Code</h2>
<p><a href="https://github.com/angular/angular/blob/master/modules/%40angular/http/src/http.ts">source code - http.ts</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Response</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./static_response&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions</span>) &#123;&#125;</span><br><span class="line">	<span class="title function_">get</span>(<span class="attr">url</span>: string, options?: <span class="title class_">RequestOptionsArgs</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">Response</span>&gt; &#123;</span><br><span class="line">         ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>所以在執行Http.get(…)所回傳的結果是<code> Observable&lt;Response&gt;</code>，因為這樣子的關係，我們就可以使用RxJS Observers的方法 <a href="http://reactivex.io/documentation/observable.html">參考網址</a></p>
<h2 id="Subscribe-Method"><a class="header-anchor" href="#Subscribe-Method"> </a>Subscribe Method</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myObservable.<span class="title function_">subscribe</span>(<span class="title class_">OnNext</span>,onError,onCompleted);</span><br></pre></td></tr></table></figure>
<p><strong><code>onNext</code></strong></p>
<p>An Observable calls this method whenever the Observable emits an item. This method takes as a parameter the item emitted by the Observable.</p>
<p><strong><code>onError</code></strong></p>
<p>An Observable calls this method to indicate that it has failed to generate the expected data or has encountered some other error. It will not make further calls to <code>onNext</code> or <code>onCompleted</code>. The <code>onError</code>method takes as its parameter an indication of what caused the error.</p>
<p><strong><code>onCompleted</code></strong></p>
<p>An Observable calls this method after it has called <code>onNext</code> for the final time, if it has not encountered any errors.</p>
<h2 id="應用方式"><a class="header-anchor" href="#應用方式"> </a>應用方式</h2>
<p>Http.call完之後，也可以加工response的結果。<a href="http://reactivex.io/documentation/operators.html">方法</a>可以串聯起來, Demo Code如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>())</span><br><span class="line">    .<span class="title function_">subscribe</span>(</span><br><span class="line">      <span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">randomQuote</span> = data,</span><br><span class="line">      <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">logError</span>(err),</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Random Quote Complete&#x27;</span>)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<h2 id="多個Http-Request時的處理方式"><a class="header-anchor" href="#多個Http-Request時的處理方式"> </a>多個Http Request時的處理方式</h2>
<p>如果想要同時間執行多個Http Request，但是又要等所有的Request都完成後再將資料對應到變數上，那要怎麼寫，這時候就需要使用 <strong>Observable.forkJoin</strong>，程式碼如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Observable</span>.<span class="title function_">forkJoin</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/app/books.json&#x27;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">res:Response</span>) =&gt;</span> res.<span class="title function_">json</span>()),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/app/movies.json&#x27;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">res:Response</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">    ).<span class="title function_">subscribe</span>(</span><br><span class="line">      <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">books</span> = data[<span class="number">0</span>]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">movies</span> = data[<span class="number">1</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]What&#39;s Structural Directives</title>
    <url>/2016/05/10/angular2-structural-directives/</url>
    <content><![CDATA[<p>Angular2 Directives - Structural Directives : 改變DOM element的Directive。常見的structural directives有 ngIf, ngSwitch, ngFor
用法如下.</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;hero&quot;</span>&gt;</span>&#123;&#123; hero &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let hero of heroes&quot;</span>&gt;</span>&#123;&#123; hero &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> [<span class="attr">ngSwitchWhen</span>]=<span class="string">&quot;&#x27;in-mission&#x27;&quot;</span>&gt;</span>In Mission<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> [<span class="attr">ngSwitchWhen</span>]=<span class="string">&quot;&#x27;ready&#x27;&quot;</span>&gt;</span>Ready<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">ngSwitchDefault</span>&gt;</span>Unknown<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Template-Tag"><a class="header-anchor" href="#Template-Tag"> </a><code>Template</code> Tag</h2>
<p>在Angular2外，<code>&lt;template&gt;</code>預設CSS是設定為display: none. 其內容是不會顯示，在Angular2內是會被移除然後被該位置會被置換成<code>&lt;script&gt;&lt;/script&gt;</code></p>
<p>在一開始的Code裡，ngIf和ngFor的前面有一個<code>*</code>, 而在<code>ngSwitchWhen</code>卻是用 <code>&lt;template&gt;</code>和<code>[ngSwitchWhen]</code>組合要顯示的文字。而這一個 <code>*</code> 的使用會帶來一些神奇的效果。下面繼續來研究</p>
<h2 id="星號-的效果"><a class="header-anchor" href="#星號-的效果"> </a>星號 (*) 的效果</h2>
<p>常見的範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">ngIf</span>=<span class="string">&quot;condition&quot;</span>&gt;</span>	</span><br><span class="line">    condition is true and ngIf is true.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在ngIf前面的 <code>*</code> 是一個很神奇的東西，他可以讓我們少寫<code>&lt;template&gt;</code> tag，如果不要寫 <code>*</code> 的話，那程式碼就要寫成這樣</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> [<span class="attr">ngIf</span>]=<span class="string">&quot;condition&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    condition is true and ngIf is true.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Examples (A) and (B) are the same --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- (A) *ngFor div --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let hero of heroes&quot;</span>&gt;</span>&#123;&#123; hero &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- (B) ngFor with template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">ngFor</span> <span class="attr">let-hero</span> [<span class="attr">ngForOf</span>]=<span class="string">&quot;heroes&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; hero &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以 <code>*</code> 的確省去很多工作，來改寫一下 以下的程式碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> [<span class="attr">ngSwitchWhen</span>]=<span class="string">&quot;&#x27;in-mission&#x27;&quot;</span>&gt;</span>In Mission<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> [<span class="attr">ngSwitchWhen</span>]=<span class="string">&quot;&#x27;ready&#x27;&quot;</span>&gt;</span>Ready<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">ngSwitchDefault</span>&gt;</span>Unknown<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>用 * 來修改一下程式碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchWhen</span>=<span class="string">&quot;&#x27;in-mission&#x27;&quot;</span>&gt;</span>In Mission<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchWhen</span>=<span class="string">&quot;&#x27;ready&#x27;&quot;</span>&gt;</span>Ready<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngSwitchDefault</span>&gt;</span>Unknown<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="參考"><a class="header-anchor" href="#參考"> </a>參考</h2>
<ul>
<li><a href="https://angular.io/docs/ts/latest/guide/structural-directives.html">Angular2 Doc: Structural Directives</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] AngularFire2</title>
    <url>/2016/06/02/angular2-angularfire2/</url>
    <content><![CDATA[<p>Angular2也有一個給Firebase使用的Library, 必計是自家的服務，有相對的AngularFire也是正常的，</p>
<p><s>目前AngularFire2只支援Firebase SDK V2版本，V3版本還在路上。所以在firebase所建立的專案必須要由舊介面建立後再轉至新Console介面，才可以使用。</s></p>
<p>AngularFire2現在支援Firebase SDK V3版本了，設定方式如下</p>
<span id="more"></span>
<h1 id="前置"><a class="header-anchor" href="#前置"> </a>前置</h1>
<p>Demo的專案都是以Angular CLI所產生出來的架構</p>
<h1 id="安裝"><a class="header-anchor" href="#安裝"> </a>安裝</h1>
<p><a href="https://github.com/angular/angularfire2/blob/master/docs/1-install-and-setup.md">安裝文件</a></p>
<h2 id="修正項目"><a class="header-anchor" href="#修正項目"> </a>修正項目</h2>
<p>開啟 <code>angular-cli-build.js</code> 檔案，這修正是為了build for production時會產生的錯誤</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;angularfire2/**/*.js&#x27;</span>,</span><br><span class="line"> 修改成</span><br><span class="line"><span class="string">&#x27;angularfire2/**/*.+(js|js.map)&#x27;</span>,</span><br></pre></td></tr></table></figure>
<h1 id="使用方式"><a class="header-anchor" href="#使用方式"> </a>使用方式</h1>
<h2 id="一些程式碼"><a class="header-anchor" href="#一些程式碼"> </a>一些程式碼</h2>
<h3 id="main-js"><a class="header-anchor" href="#main-js"> </a>main.js</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">bootstrap</span>(<span class="title class_">KeepthingsAppComponent</span>,</span><br><span class="line">  [</span><br><span class="line">    <span class="variable constant_">FIREBASE_PROVIDERS</span>,</span><br><span class="line">    <span class="title function_">defaultFirebase</span>(&#123;</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&quot;&lt;your-key&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">authDomain</span>: <span class="string">&quot;&lt;your-project-authdomain&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">databaseURL</span>: <span class="string">&quot;&lt;your-database-URL&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">storageBucket</span>: <span class="string">&quot;&lt;your-storage-bucket&gt;&quot;</span>,</span><br><span class="line">  &#125;),    </span><br><span class="line">  ]);</span><br></pre></td></tr></table></figure>
<p>這段設定碼可以透過新版的console畫面裡取得</p>
<p><img src="https://farm8.staticflickr.com/7452/27614778484_7de85115f2_o.png" alt=""></p>
<p><img src="https://farm8.staticflickr.com/7507/28126334652_1dbd045533_o.png" alt=""></p>
<h3 id="App-Component-js"><a class="header-anchor" href="#App-Component-js"> </a>App.Component.js</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AngularFire</span>, <span class="title class_">FirebaseListObservable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angularfire2&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AppComponent</span>&#123;</span><br><span class="line">   <span class="attr">items</span>: <span class="title class_">FirebaseListObservable</span>&lt;<span class="built_in">any</span>[]&gt;;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">af: AngularFire</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">items</span> = af.<span class="property">database</span>.<span class="title function_">list</span>(<span class="string">&#x27;/items&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>AngularFire所取回的list是Observable的物件，所以也可以套用RxJS的Operator. 基本上Firebase的運作方式是沒有改變的</p>
<p>由於<code>this.items</code>屬Obserable，在畫面上要顯示時，可以透過 <code>async</code>幫忙來簡化程式碼</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item in items | async&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果不想要用<code>async</code>的話，那在程式碼裡面就需要加上<code>subscribe(....)</code>將AngularFire所取回的資料放到變數裡</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">sub</span> = af.<span class="property">database</span>.<span class="title function_">list</span>(<span class="string">&#x27;/items&#x27;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sub</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = data;</span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line"> ... </span><br><span class="line">&#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//when complete</span></span><br><span class="line">  ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item in items&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="API"><a class="header-anchor" href="#API"> </a>API</h2>
<table>
<thead>
<tr>
<th>Method</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>push(value:any)</td>
<td>Creates a new record on the list, using the Realtime Database’s push-ids.</td>
</tr>
<tr>
<td>update(key,value)</td>
<td></td>
</tr>
<tr>
<td>remove(key)</td>
<td>Deletes the item by key. If no parameter is provided, the entire list will be deleted.</td>
</tr>
</tbody>
</table>
<p>上述的三種Method都會回傳Promise, 所以後續的接法為 then((data)=&gt;{…}).catch((err)=&gt;{…})</p>
<h2 id="Authentication"><a class="header-anchor" href="#Authentication"> </a>Authentication</h2>
<p>FireBase提供多種使用者認證的方式，從基本的Email/password, 到各個大型的OAuth
<img src="https://farm8.staticflickr.com/7500/27341215391_a7899fa7ea_o.png" alt="https://farm8.staticflickr.com/7500/27341215391_a7899fa7ea_o.png"></p>
<p>在程式裡面也可以同時間存在多種登入的方式，只要配合後台的設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Anonymous</span></span><br><span class="line">af.<span class="property">auth</span>.<span class="title function_">login</span>(&#123;</span><br><span class="line">  <span class="attr">provider</span>: <span class="title class_">AuthProviders</span>.<span class="property">Anonymous</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="title class_">AuthMethods</span>.<span class="property">Anonymous</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Email and password</span></span><br><span class="line">af.<span class="property">auth</span>.<span class="title function_">login</span>(&#123;</span><br><span class="line">  <span class="attr">provider</span>: <span class="title class_">AuthProviders</span>.<span class="property">Password</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="title class_">AuthMethods</span>.<span class="property">Password</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Social provider redirect</span></span><br><span class="line">af.<span class="property">auth</span>.<span class="title function_">login</span>(&#123;</span><br><span class="line">  <span class="attr">provider</span>: <span class="title class_">AuthProviders</span>.<span class="property">Twitter</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="title class_">AuthMethods</span>.<span class="property">Redirect</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Social provider popup</span></span><br><span class="line">af.<span class="property">auth</span>.<span class="title function_">login</span>(&#123;</span><br><span class="line">  <span class="attr">provider</span>: <span class="title class_">AuthProviders</span>.<span class="property">Github</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="title class_">AuthMethods</span>.<span class="property">Popup</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="注意"><a class="header-anchor" href="#注意"> </a>注意</h3>
<p><s>在測試Facebook的Login功能時，一直將新後台所提供的Redirect Url設定到 Facebook裡，但是一直都不能正常的運作，最後才想到，新後台所提供的網址是給SDK V3所使用的，所以我必須要去找SDK V2的版本，更新成V2版本的Url就可以正常的使用了。</s></p>
<p>可以直接使用新版Consolen所提供的Redirect Url即可</p>
<h1 id="結語"><a class="header-anchor" href="#結語"> </a>結語</h1>
<p>AngularFire2在使用上非常的直覺，彈性也很大。先不論Firebase這個強大的後端服務，就前端可以搭配RxJS的操作，就讓人覺得很快樂。</p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://github.com/angular/angularfire2">Angularfire2</a></li>
<li><a href="https://www.firebase.com/">Firebase</a></li>
<li><a href="http://reactivex.io/rxjs/">RxJS</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]Service&amp;EventEmitter</title>
    <url>/2016/06/04/angular2-service-EventEmitter/</url>
    <content><![CDATA[<p>在Angular2裡面如何做一個全域型的變數然後當其更新時，讓所有有用到的人都知道。這時候就要用EventEmitter了</p>
<span id="more"></span>
<p>EventEmitter是什麼? 官方文件裡尚未仔細描述他的用途，但是我覺得他有點類似Angular1的 $broadcast，以下是EventEmitter所提供的method</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">isAsync?: <span class="built_in">boolean</span></span>)</span><br><span class="line">	<span class="title function_">emit</span>(<span class="attr">value</span>: T)</span><br><span class="line">	<span class="title function_">next</span>(<span class="attr">value</span>: <span class="built_in">any</span>)</span><br><span class="line">	<span class="title function_">subscribe</span>(generatorOrNext?: <span class="built_in">any</span>, error?: <span class="built_in">any</span>, complete?: <span class="built_in">any</span>) : <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如何用呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 註冊方</span></span><br><span class="line"><span class="attr">open</span>: <span class="title class_">EventEmitter</span>&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line">open.<span class="title function_">emit</span>(&lt;value&gt;);</span><br><span class="line">          </span><br><span class="line"><span class="comment">// 使用方</span></span><br><span class="line">open.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>當emit被呼叫時，subscribe就會接收到通知，然後就會進行subscribe第一個function的動作。</p>
<p>利用這個特性，可以在service裡面寫全域變數。程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">EventEmitter</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/Rx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">AngularFire</span>,</span><br><span class="line">  <span class="title class_">AuthMethods</span>,</span><br><span class="line">  <span class="title class_">FirebaseAuthState</span>,</span><br><span class="line">  <span class="title class_">AuthProviders</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angularfire2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">currentUser</span>: <span class="title class_">FirebaseAuthState</span>;</span><br><span class="line">  <span class="attr">checkLogin</span>: <span class="title class_">EventEmitter</span>&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> af: AngularFire</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 判斷使用者是否已經有登入 */</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">isLogin</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 用Email登入 */</span></span><br><span class="line">  <span class="title function_">login</span>(cred): <span class="title class_">Observable</span>&lt;<span class="title class_">FirebaseAuthState</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> ob = <span class="title class_">Observable</span>.<span class="title function_">fromPromise</span>(<span class="variable language_">this</span>.<span class="property">af</span>.<span class="property">auth</span>.<span class="title function_">login</span>(cred, &#123;</span><br><span class="line">      <span class="attr">provider</span>: <span class="title class_">AuthProviders</span>.<span class="property">Password</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="title class_">AuthMethods</span>.<span class="property">Password</span>,</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">return</span> ob.<span class="title function_">do</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;      </span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setUser</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 用Facebook登入 */</span></span><br><span class="line">  <span class="title function_">fbLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** 登出 */</span></span><br><span class="line">  <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;objUser&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentUser</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">af</span>.<span class="property">auth</span>.<span class="title function_">logout</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">checkLogin</span>.<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">isLogin</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">setUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;objUser&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentUser</span> = user;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">checkLogin</span>.<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">isLogin</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是，Provider Inject的位置要注意(請參考<a href="https://www.sitepoint.com/angular-2-components-providers-classes-factories-values/">Angular 2 Components and Providers: Classes, Factories &amp; Values</a>)，根據實驗，如果Component各自DI service as provider. 當其一的service值有改變而且有廣播時，另外一個service是收不到的，看起來應該是不同的Instance造成的現象，所以必須在往上一層注入服務.</p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://angular.io/docs/ts/latest/api/core/index/EventEmitter-class.html">EventEmitter</a></li>
<li><a href="https://www.sitepoint.com/angular-2-components-providers-classes-factories-values/">Angular 2 Components and Providers: Classes, Factories &amp; Values</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] ChangeDetectionStrategy</title>
    <url>/2016/06/05/angular2-ChangeDetectionStrategy/</url>
    <content><![CDATA[<p>Angular2裡面偵測改變的方法有全新的方式，用來提升整體的效能，那針對Component對於偵測改變有一個屬性可以設定，那就是透過 <code>ChangeDetectionStrategy</code></p>
<span id="more"></span>
<p>根據<a href="https://angular.io/docs/js/latest/api/core/ChangeDetectionStrategy-enum.html">官方文件</a>, ChangeDetectionStrategy有幾種方式</p>
<ol>
<li>CheckOnce</li>
<li>Checked</li>
<li>CheckAlways</li>
<li>Detached</li>
<li>OnPush</li>
<li>Default</li>
</ol>
<p>這篇只專注於Default與OnPush這兩種</p>
<h1 id="Change-Detection-Strategy"><a class="header-anchor" href="#Change-Detection-Strategy"> </a>Change Detection Strategy</h1>
<h2 id="Default"><a class="header-anchor" href="#Default"> </a>Default</h2>
<p>Example Code</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">movie</span> [<span class="attr">title</span>]=<span class="string">&quot;title&quot;</span> [<span class="attr">actor</span>]=<span class="string">&quot;actor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">title</span>: <span class="built_in">string</span> = <span class="string">&quot;Movie 1&quot;</span>;</span><br><span class="line"><span class="attr">actor</span>: <span class="title class_">Actor</span> =<span class="keyword">new</span> <span class="title class_">Actor</span>( <span class="string">&#x27;Bruce&#x27;</span>, <span class="string">&#x27;Willis&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>針對movie這個component, 它接收兩種值，一個是string型別的title, 另外一個是Actor型別的物件。</p>
<p>Movie Component會在什麼時機點更新要顯示的內容呢? 如果 ChangeDetectionStrategy是設定在Default的時候，那就是只要傳入的值有異動時，就更新顯示的內容。換句話說, 即使修改actor物件裡面的property, 也會觸發。</p>
<h2 id="onPush"><a class="header-anchor" href="#onPush"> </a>onPush</h2>
<p>可是換到onPush的時候就有點不一樣了，他不會將修改actor屬性視為值的異動，只會當一個全新的Actor物件被建立時，才會觸發更新。</p>
<p>這樣的好處是，減少detect Dirty Change的次數. 就預設的方式，如果我的Actor物件裡面有很多屬性，那當每一次其中一個屬性的值被異動時，都會觸發畫面的更新，那就太累了。而onPush是會等一個全新物件被建立時，才會出發。所以只要用要更新的值去建立一個新的物件就好了，這樣子只會被觸發一次。當然效能就會大大的提升</p>
<h1 id="Immutable"><a class="header-anchor" href="#Immutable"> </a>Immutable</h1>
<p>Immuatable是另外一個議題。他的主要精神是。每一次的動作，都會產生一個新的物件，並不會直接修改原始物件內的值，或是使用參址的方式處理資料. 更詳細的內容可以參閱<a href="http://reactivex.io/rxjs/">RxJS</a>和<a href="https://facebook.github.io/immutable-js/">Immutable</a></p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li>
<p><a href="https://angular.io/docs/js/latest/api/core/ChangeDetectionStrategy-enum.html">ChangeDetectionStrategy</a></p>
</li>
<li>
<p><a href="http://ngcourse.rangle.io/handout/change-detection/change_detection_strategy_onpush.html">Change Detection Strategy: OnPush</a></p>
<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC] MVC Core with SqlClient on MAC</title>
    <url>/2016/06/22/mvc-core-with-sqlserver/</url>
    <content><![CDATA[<p>.Net Core 終於支援使用SqlClien的物件了(但不確定是從什麼時候開始的), 那就來試試看怎麼在mac的環境上連到sql server撈資料了</p>
<span id="more"></span>
<h1 id="使用Library"><a class="header-anchor" href="#使用Library"> </a>使用Library</h1>
<ul>
<li>「System.Data.SqlClient」: 「4.1.0-rc2-24027」</li>
<li>「Dapper」: 「1.50.0-rc2b」</li>
</ul>
<p>Yes. Dapper也支援CoreClr了，可喜可賀</p>
<h1 id="使用方式"><a class="header-anchor" href="#使用方式"> </a>使用方式</h1>
<p>同原本在.Net4.x的用法 with Dapper</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> (SqlConnection cn = <span class="keyword">new</span> SqlConnection(_config.Default))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">await</span> cn.QueryAsync&lt;Supplier&gt;(<span class="string">&quot;select top 10 * from Suppliers&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> View(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="所遇到的問題"><a class="header-anchor" href="#所遇到的問題"> </a>所遇到的問題</h1>
<h2 id="無法連線到SqlServer"><a class="header-anchor" href="#無法連線到SqlServer"> </a>無法連線到SqlServer</h2>
<p><img src="https://c2.staticflickr.com/8/7676/27223659083_0af2217275_o.png" alt=""></p>
<p><strong>問題描述</strong> : 發生連線字串正確，卻沒有辦法連線到sql server, 但是透過navicat卻可以正常的瀏覽該資料庫的內容</p>
<p><strong>主機環境:</strong> SQL Server R2 2008 Express，沒有更新到最新的SP</p>
<p><strong>解決方式:</strong>  將SQL Server R2 2008 更新到SP3即可修正問題，參考資料<a href="https://github.com/dotnet/corefx/issues/6467">github issue</a></p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>MVC Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular CLI (beta9) 手動加入Router</title>
    <url>/2016/07/06/angular2-with-router/</url>
    <content><![CDATA[<p>Angular2的Route的新版持續在開發中，目前已經到了beta階段了，可是Angular2的CLI只是單純的有更新@angular/router的版本而已，但是內建的樣版卻沒有更新，所以只好手動了。</p>
<span id="more"></span>
<h1 id="基本新增步驟"><a class="header-anchor" href="#基本新增步驟"> </a>基本新增步驟</h1>
<ol>
<li>
<p>新增一個app.routers.ts檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provideRouter, <span class="title class_">RouterConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProfileComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouterConfig</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>, <span class="attr">component</span>: <span class="title class_">ProfileComponent</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">redirectTo</span>: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">APP_ROUTER_PROVIDERS</span> = [</span><br><span class="line">  <span class="title function_">provideRouter</span>(routes)</span><br><span class="line">];	</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>手動更新 index.ts 檔案，將app.routers加入</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./app.routers&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>import <code>APP_ROUTER_PROVIDERS</code> 到 main.ts裡</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span>, environment, <span class="variable constant_">APP_ROUTER_PROVIDERS</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="title function_">bootstrap</span>(<span class="title class_">AppComponent</span>,[<span class="variable constant_">APP_ROUTER_PROVIDERS</span>]);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改 app.component.html 檔案</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;/profile&#x27;]&quot;</span>&gt;</span>profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="注意事項"><a class="header-anchor" href="#注意事項"> </a>注意事項</h1>
<p>因為Angular CLI(Beta9)的@Angular/Router版本目前是在alpha階段，所以文件裡面有些Router的設定有可能還不存在，例如說 <code> pathMatch: 'full'</code> 但基本的設定方式都是沒有問題的</p>
<p>實際跑起來的畫面如下</p>
<p><img src="https://farm8.staticflickr.com/7291/28040799221_43163b7050_o.png" alt=""></p>
<h1 id="進一步的看-Angular-Router"><a class="header-anchor" href="#進一步的看-Angular-Router"> </a>進一步的看@Angular/Router</h1>
<p>新版的Router在讀取html/css檔案時，是採lazyLoading，表示除非到那個頁面，不然不會事先下載該檔案。(前提: 是使用systemjs的方式)請看下面的影片</p>
<p><a href="https://www.youtube.com/watch?v=6OWRPws68Uw"><img src="https://img.youtube.com/vi/6OWRPws68Uw/0.jpg" alt="路由切換時網路的狀況"></a></p>
<h1 id="如何將ROUTER-DIRECTIVES註冊成全域"><a class="header-anchor" href="#如何將ROUTER-DIRECTIVES註冊成全域"> </a>如何將<code>ROUTER_DIRECTIVES</code>註冊成全域</h1>
<p>為了要完成這個動作，我們需要兩個東西 『provide<code>, </code>PLATFORM_DIRECTIVES』</p>
<ul>
<li>provide的功能是建立一個Proivder</li>
<li>PLATFORM_DIRECTIVES的功能是一個Directives容器，可以供應在專案下所有的Components可以使用</li>
</ul>
<blockquote>
<p>PLATFORM_DIRECTIVES: A token that can be provided when bootstrapping an application to make an array of directives available in every component of the application.</p>
</blockquote>
<p>利用上述的兩個東西，就可以在main.ts下，將<code>ROUTER_DIRECTIVES</code>給註冊到全域下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; provide, PLATFORM_DIRECTIVES, enableProdMode &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">...</span><br><span class="line">bootstrap(AppComponent,</span><br><span class="line">  [ provide(PLATFORM_DIRECTIVES,</span><br><span class="line">      &#123;</span><br><span class="line">        useValue: [ROUTER_DIRECTIVES],</span><br><span class="line">        multi: true</span><br><span class="line">      &#125;)</span><br><span class="line">  ]);</span><br></pre></td></tr></table></figure>
<p>完成後，以後再components裡面就不用在<code>import &#123; ROUTER_DIRECTIVES &#125; from '@angular/router'</code>了</p>
<h1 id="相關連結"><a class="header-anchor" href="#相關連結"> </a>相關連結</h1>
<ul>
<li><a href="https://angular.io/docs/ts/latest/guide/router.html">官方文件</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/v1.0.0-beta.9/addon/ng2/blueprints/ng2/files/package.json">CLI-package.json - beta9</a></li>
<li><a href="https://github.com/angular/angular/blob/master/modules/%40angular/router/CHANGELOG.md">@Agnular/Route - Changelog</a></li>
<li><a href="https://angular.io/docs/ts/latest/api/core/index/provide-function.html">API DOC- provide</a></li>
<li><a href="https://angular.io/docs/ts/latest/api/core/index/PLATFORM_DIRECTIVES-let.html">API DOC- PLATFORM_DIRECTIVES</a></li>
<li><a href="https://github.com/chgc/demo-angular2-router">github repo</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] Subject</title>
    <url>/2016/10/06/rx-subject/</url>
    <content><![CDATA[<blockquote>
<p>A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.</p>
</blockquote>
<p>這表示Subject是 Observable，也是Observer。而這篇文章重點會放在每種類型的Subject的特性</p>
<span id="more"></span>
<p>RxJS 的 Subject類型除了基本型<code>Subject</code>, 還有以下幾種類型的Subject <code>BehaviorSubject</code>, <code>ReplaySubject</code>, and <code>AsyncSubject</code></p>
<h2 id="Subject"><a class="header-anchor" href="#Subject"> </a>Subject</h2>
<p>程式碼</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">5</span>)</span><br><span class="line">               .<span class="title function_">do</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;source&#x27;</span> + value);&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">Subject</span>(); <span class="comment">// 0 is the initial value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(subject);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ObserverA subscribed&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ObserverB subscribed&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://farm6.staticflickr.com/5096/30150932965_855e132fdb_o.png" alt=""></p>
<h2 id="BehaviorSubject"><a class="header-anchor" href="#BehaviorSubject"> </a>BehaviorSubject</h2>
<blockquote>
<p>BehaviorSubjects are useful for representing 「values over time」. For instance, an event stream of birthdays is a Subject, but the stream of a person’s age would be a BehaviorSubject.</p>
</blockquote>
<p>BehaviorSubject會記錄<strong>最後一次的值</strong>，當後來註冊進來的subscriber可以知道當下的值是什麼</p>
<p>所以BehaviorSubject在建立時，需要指定一個初始值</p>
<p>程式碼如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">5</span>)</span><br><span class="line">               .<span class="title function_">do</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;source &#x27;</span> + value);&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">BehaviorSubject</span>(<span class="number">0</span>); <span class="comment">// 0 is the initial value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(subject);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ObserverA subscribed&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ObserverB subscribed&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://farm6.staticflickr.com/5096/30066617701_c3e230b51c_o.png" alt=""></p>
<h2 id="ReplaySubject"><a class="header-anchor" href="#ReplaySubject"> </a>ReplaySubject</h2>
<blockquote>
<p>A <code>ReplaySubject</code> records multiple values from the Observable execution and replays them to new subscribers.</p>
</blockquote>
<p>ReplaySubject有點類似於BehaviorSubject，可以取得subscribe之前的值，只是可以取不只一個。類似回播的功能</p>
<p>ReplaySubject在建立時有幾個參數可以設定，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">ReplaySubject</span>(bufferSize, windowTime);</span><br></pre></td></tr></table></figure>
<ul>
<li>bufferSize: ReplaySubject可以儲存 x 數量的值</li>
<li>windowTime: ReplaySubject取最後  x milliseconds 期間的值</li>
</ul>
<p>程式碼 (with no windowTime參數)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">500</span>).<span class="title function_">take</span>(<span class="number">7</span>)</span><br><span class="line">               .<span class="title function_">do</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;source &#x27;</span> + value);&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">ReplaySubject</span>(<span class="number">3</span>); <span class="comment">// 0 is the initial value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(subject);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ObserverA subscribed&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ObserverB subscribed&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://farm6.staticflickr.com/5697/29522601444_8f8e39f9cd_o.png" alt=""></p>
<p>程式碼 (with windowTime參數)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">500</span>).<span class="title function_">take</span>(<span class="number">7</span>)</span><br><span class="line">               .<span class="title function_">do</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;source &#x27;</span> + value);&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// source: 0--1--2--3--4--5--6-----</span></span><br><span class="line"><span class="comment">//      A: 0--1--2--3--4--5--6-----</span></span><br><span class="line"><span class="comment">//              |---|: windowTime </span></span><br><span class="line"><span class="comment">//      B:         23--4--5--6-----</span></span><br><span class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">ReplaySubject</span>(<span class="number">3</span>, <span class="number">700</span>); <span class="comment">// 0 is the initial value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(subject);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ObserverA subscribed&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ObserverB subscribed&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://farm6.staticflickr.com/5243/30116188896_400cfb7143_o.png" alt=""></p>
<h2 id="AsyncSubject"><a class="header-anchor" href="#AsyncSubject"> </a>AsyncSubject</h2>
<p>AsyncSubject只會記錄 Observable <strong>完成後</strong>的值。</p>
<p>程式碼</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var source = Rx.Observable.interval(500).take(7)</span><br><span class="line">               .do(function(value)&#123; console.log(&#x27;source &#x27; + value);&#125;)</span><br><span class="line"></span><br><span class="line">var subject = new Rx.AsyncSubject(); // 0 is the initial value</span><br><span class="line"></span><br><span class="line">var ObserverA = &#123;</span><br><span class="line">  next: function(value)&#123; console.log(&#x27;A next &#x27;+ value);	&#125;,</span><br><span class="line">  error: function(error)&#123; console.error(&#x27;A error &#x27;+ error);   &#125;,</span><br><span class="line">  complete: function()&#123; console.log(&#x27;A Complete&#x27;);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var ObserverB = &#123;</span><br><span class="line">  next: function(value)&#123; console.log(&#x27;B next &#x27;+ value);	&#125;,</span><br><span class="line">  error: function(error)&#123; console.error(&#x27;B error &#x27;+ error);   &#125;,</span><br><span class="line">  complete: function()&#123; console.log(&#x27;B Complete&#x27;);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source.subscribe(subject);</span><br><span class="line"></span><br><span class="line">subject.subscribe(ObserverA);</span><br><span class="line"> console.log(&#x27;ObserverA subscribed&#x27;);</span><br><span class="line"></span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">  subject.subscribe(ObserverB);</span><br><span class="line">  console.log(&#x27;ObserverB subscribed&#x27;);</span><br><span class="line">&#125;,2000)</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://farm6.staticflickr.com/5216/29522454703_b9511f0241_o.png" alt=""></p>
<h2 id="BehaviorSubject、ReplaySubject、AsyncSubject-與-Publish-的關係"><a class="header-anchor" href="#BehaviorSubject、ReplaySubject、AsyncSubject-與-Publish-的關係"> </a>BehaviorSubject、ReplaySubject、AsyncSubject 與 Publish 的關係</h2>
<p>在<a href="http://blog.kevinyang.net/2016/10/06/rxjs-multicast">前一篇</a>提到說 publish 是 multicast的變化型，而multicast裡可以建立各式的Subject，那publish相對應的又是什麼，對照表如下</p>
<table>
<thead>
<tr>
<th>Subject Type</th>
<th>Multicasting  Operator</th>
</tr>
</thead>
<tbody>
<tr>
<td>Rx.Subject</td>
<td>publish()</td>
</tr>
<tr>
<td>Rx.BehaviorSubject</td>
<td>publishBehavior(initValue)</td>
</tr>
<tr>
<td>Rx.ReplaySubject</td>
<td>publishReplay(bufferSize, windowTime)</td>
</tr>
<tr>
<td>Rx.AsyncSubject</td>
<td>publishLast()</td>
</tr>
</tbody>
</table>
<h2 id="參考網址"><a class="header-anchor" href="#參考網址"> </a>參考網址</h2>
<ul>
<li><a href="http://reactivex.io/rxjs/manual/overview.html#behaviorsubject">BehaviorSubject</a></li>
<li><a href="http://reactivex.io/rxjs/manual/overview.html#ReplaySubject">ReplaySubject</a></li>
<li><a href="http://reactivex.io/rxjs/manual/overview.html#AsyncSubject">AsyncSubject</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>RxJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] MultiCasting</title>
    <url>/2016/10/06/rxjs-multicast/</url>
    <content><![CDATA[<p>我們都知道RxJS的Observeable會在subscribe的時候才會執行，所以每一次的subscribe都會執行一次，但是，某些情況下我們並不想要那樣子做，而在RxJS裡面有一個MultiCasting的觀念，主要是用來處理一個Observeable多個Observer的情況時，而不重複執行Observable.  這篇會整理一下關於MultiCasting的相關觀念</p>
<span id="more"></span>
<p>假設情境</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	source.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這樣子跑出來的結果如下</p>
<p><img src="https://farm6.staticflickr.com/5795/29518602483_4ecbc90b77_o.png" alt=""></p>
<h2 id="Subject"><a class="header-anchor" href="#Subject"> </a>Subject</h2>
<p>Observer A和Observer B都有各自己的結果, 如果，我們想要Observer A和Observer B共用同一個資料流的話，該怎麼處理? 這時候就要借用RxJS裡面的 Subject 這個類型的幫助了</p>
<p>官網是這樣子定義Subject的</p>
<blockquote>
<p>A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.</p>
</blockquote>
<p>用法如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">var</span> subject = <span class="title class_">Rx</span>.<span class="property">Subject</span>.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(subject);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	subject.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://farm8.staticflickr.com/7570/30062998941_a312d6c600_o.png" alt=""></p>
<p>這樣Observer A與Observer B就共用同一個資料流的資料了, 但是每次都這樣子寫有點麻煩.</p>
<h2 id="multicast"><a class="header-anchor" href="#multicast"> </a>multicast</h2>
<p>可以使用multicast的方式將Object.create的方式包起來, 程式碼如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">take</span>(<span class="number">5</span>)</span><br><span class="line">               .<span class="title function_">multicast</span>(<span class="title class_">Rx</span>.<span class="property">Subject</span>.<span class="title function_">create</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line">source.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	source.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p>使用multicast這個operator, 必須使用 .connect() 來執行 Observable了，因為，這裡的 <code>source.subscribe</code> 是針對Subject做subscribe而非Observable本身.</p>
<h2 id="publish"><a class="header-anchor" href="#publish"> </a>publish</h2>
<p>publish為mulitcast的變化型, 在mulitcast裡面需要給予一個Rx.Subject, 例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">multicast</span>(<span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">Subject</span>())</span><br><span class="line"><span class="comment">// 可以替換成</span></span><br><span class="line">.<span class="title function_">publish</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或是</span></span><br><span class="line">.<span class="title function_">multicast</span>(<span class="keyword">new</span> <span class="title class_">Rx</span>.<span class="title class_">ReplaySubject</span>())</span><br><span class="line"><span class="comment">// 可以替換成</span></span><br><span class="line">.<span class="title function_">publishReplay</span>()</span><br></pre></td></tr></table></figure>
<h2 id="refCount"><a class="header-anchor" href="#refCount"> </a>refCount</h2>
<p>可是，這樣子寫又有點麻煩，有沒有自動開始結束的寫法. 其實是有的，那就是 <code>refCount</code></p>
<p>refCount: 啟動條件: subscriber數量大於0時。停止條件: subscriber數量等於0時</p>
<blockquote>
<p>recCount makes the multicasted Observable automatically start executing when the first subscriber arrives, and stop executing when the last subscriber leaves.</p>
</blockquote>
<p>程式碼如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">               .<span class="title function_">do</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;souce &#x27;</span>+ x))</span><br><span class="line">               .<span class="title function_">publish</span>()</span><br><span class="line">               .<span class="title function_">refCount</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subA = source.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subB</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	subB = source.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  subA.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unsubscribe A&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  subB.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unsubscribe B&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">7000</span>)</span><br></pre></td></tr></table></figure>
<p>執行結果如下</p>
<p><img src="https://farm6.staticflickr.com/5148/29518843843_e15cd6bc2e_o.png" alt=""></p>
<h2 id="share"><a class="header-anchor" href="#share"> </a>share</h2>
<p>RxJS有提供更簡便的寫法 <code>share</code> ，share是<code>publish</code>,<code> refCount</code> 這兩個operator的簡寫，程式碼如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title class_">Rx</span>.<span class="property">Observable</span>.<span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">               .<span class="title function_">do</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;souce &#x27;</span>+ x))</span><br><span class="line">               .<span class="title function_">share</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverA</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;A error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subA = source.<span class="title function_">subscribe</span>(<span class="title class_">ObserverA</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ObserverB</span> = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params">value</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B next &#x27;</span>+ value);	&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">error</span>)&#123; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;B error &#x27;</span>+ error);   &#125;,</span><br><span class="line">  <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B Complete&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subB</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  	subB = source.<span class="title function_">subscribe</span>(<span class="title class_">ObserverB</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  subA.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unsubscribe A&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  subB.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;unsubscribe B&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">7000</span>)</span><br></pre></td></tr></table></figure>
<p>執行結果是一樣的</p>
<h2 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h2>
<p>以上為最基本的multicast的幾種用法，但是這都只是基本款而已，因為RxJS裡面的Subject有好幾種，每一種類型的Subject所呈現的結果又都不一樣，這就待下一篇再來討論</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>RxJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]Component Interaction</title>
    <url>/2016/11/11/ng2-component-interaction/</url>
    <content><![CDATA[<p>Component在Angular2的世界裡是很多變也很重要的。在一個網站裡會存在很多Component，如何讓Component與Component之間做交流，當然也是一個很重要的課題</p>
<span id="more"></span>
<h1 id="從父元件傳資料至子元件"><a class="header-anchor" href="#從父元件傳資料至子元件"> </a>從父元件傳資料至子元件</h1>
<p>Component可以對外定義可以接收資料的欄位. 利用<a href="https://angular.io/docs/ts/latest/guide/template-syntax.html#inputs-outputs">@Input decorations</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;hero-child&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h3&gt;&#123;&#123;hero.name&#125;&#125; says:&lt;/h3&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;I, &#123;&#123;hero.name&#125;&#125;, am at your service, &#123;&#123;masterName&#125;&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroChildComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">hero</span>: <span class="title class_">Hero</span>;</span><br><span class="line">  <span class="meta">@Input</span>(<span class="string">&#x27;master&#x27;</span>) <span class="attr">masterName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>從父元件使用這個子元件的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hero-child</span> [<span class="attr">hero</span>]=<span class="string">&quot;hero&quot;</span> [<span class="attr">master</span>]=<span class="string">&quot;master&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hero-child</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="細節說明"><a class="header-anchor" href="#細節說明"> </a>細節說明</h2>
<h3 id="Input"><a class="header-anchor" href="#Input"> </a>@Input</h3>
<p>@Input的Interface, @Input可以在小括號內指定對外的property name.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Input</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Name used when instantiating a component in the template.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    bindingPropertyName?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而接續在@input() 後面的是在該Component內所使用的變數，也可以指定型別給他。當然也可以分成兩行寫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Input</span>()</span><br><span class="line"><span class="keyword">private</span> <span class="attr">hero</span>: <span class="title class_">Hero</span>;	</span><br></pre></td></tr></table></figure>
<p>或是自訂Setter/Getter</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span> = <span class="string">&#x27;&lt;no name set&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">@Input</span>()</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_name</span> = (name &amp;&amp; name.<span class="title function_">trim</span>()) || <span class="string">&#x27;&lt;no name set&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Output"><a class="header-anchor" href="#Output"> </a>@Output</h3>
<p>如果想要從元件內的值往外傳的時候，可以使用 <a href="https://angular.io/docs/ts/latest/guide/template-syntax.html#inputs-outputs">@Output decoration</a>, 但是@Ouput只限定於Event</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">VoterComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>()  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="meta">@Output</span>() onVoted = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">boolean</span>&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">vote</span>(<span class="params">agreed: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onVoted</span>.<span class="title function_">emit</span>(agreed);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>父元件使用這個子元件的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-voter</span> (<span class="attr">onVoted</span>)=<span class="string">&quot;onVoted($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-voter</span>&gt;</span>	</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">VoteTakerComponent</span> &#123;</span><br><span class="line">  agreed = <span class="number">0</span>;</span><br><span class="line">  disagreed = <span class="number">0</span>;  </span><br><span class="line">  <span class="title function_">onVoted</span>(<span class="params">agreed: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    agreed ? <span class="variable language_">this</span>.<span class="property">agreed</span>++ : <span class="variable language_">this</span>.<span class="property">disagreed</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://angular.io/docs/ts/latest/api/core/index/EventEmitter-class.html">EventEmitter</a>的emit([value])會將值讓註冊在該屬性欄位的方法知道。</p>
<h3 id="ngOnChanges"><a class="header-anchor" href="#ngOnChanges"> </a>ngOnChanges</h3>
<p>當Input的值被改變時，會觸發ngOnChanges事件。更多關於 <code>ngOnChanges</code> ，請參閱 <a href="https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html">LifeCycle Hooks</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnChanges</span>(<span class="params">changes: &#123;[propKey: <span class="built_in">string</span>]: SimpleChange&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">log</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> propName <span class="keyword">in</span> changes) &#123;</span><br><span class="line">      <span class="keyword">let</span> changedProp = changes[propName];</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">from</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(changedProp.<span class="property">previousValue</span>);</span><br><span class="line">      <span class="keyword">let</span> to =   <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(changedProp.<span class="property">currentValue</span>);</span><br><span class="line">      log.<span class="title function_">push</span>( <span class="string">`<span class="subst">$&#123;propName&#125;</span> changed from <span class="subst">$&#123;<span class="keyword">from</span>&#125;</span> to <span class="subst">$&#123;to&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeLog</span>.<span class="title function_">push</span>(log.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://angular.io/docs/ts/latest/cookbook/component-communication.html#!#parent-to-child-on-changes">read more</a></p>
<h1 id="父元件操作子元件的屬性及方法"><a class="header-anchor" href="#父元件操作子元件的屬性及方法"> </a>父元件操作子元件的屬性及方法</h1>
<p>父元件可以透過給予子元件一個RefId後，直接使用子元件內的方法與屬性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125;                <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CountdownTimerComponent</span> &#125;  <span class="keyword">from</span> <span class="string">&#x27;./countdown-timer.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;countdown-parent-lv&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h3&gt;Countdown to Liftoff (via local variable)&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;button (click)=&quot;timer.start()&quot;&gt;Start&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button (click)=&quot;timer.stop()&quot;&gt;Stop&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;seconds&quot;&gt;&#123;&#123;timer.seconds&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;countdown-timer #timer&gt;&lt;/countdown-timer&gt;</span></span><br><span class="line"><span class="string">  `</span>  </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CountdownLocalVarParentComponent</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>或父元件可以透過@ViewChild來操作子元件的方法與屬性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125;                <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CountdownTimerComponent</span> &#125;  <span class="keyword">from</span> <span class="string">&#x27;./countdown-timer.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;countdown-parent-lv&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h3&gt;Countdown to Liftoff (via local variable)&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;button (click)=&quot;start()&quot;&gt;Start&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;button (click)=&quot;stop()&quot;&gt;Stop&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;seconds&quot;&gt;&#123;&#123;timer.seconds&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;countdown-timer #timer&gt;&lt;/countdown-timer&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CountdownLocalVarParentComponent</span> &#123;</span><br><span class="line">  <span class="comment">// this</span></span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">&#x27;timer&#x27;</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">timer</span>: <span class="title class_">CountdownTimerComponent</span>;</span><br><span class="line">  <span class="comment">// or this</span></span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="title class_">CountdownTimerComponent</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">timer</span>: <span class="title class_">CountdownTimerComponent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span>.<span class="title function_">stop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="透過Service的方式讓父與子元件互相溝通"><a class="header-anchor" href="#透過Service的方式讓父與子元件互相溝通"> </a>透過Service的方式讓父與子元件互相溝通</h1>
<p>這個需要使用到RxJS的<a href="http://blog.kevinyang.net/2016/10/06/rx-subject/">Object</a>來達成這個功能。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span> &#125;    <span class="keyword">from</span> <span class="string">&#x27;rxjs/Subject&#x27;</span>;</span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MissionService</span> &#123;</span><br><span class="line">  <span class="comment">// Observable string sources</span></span><br><span class="line">  <span class="keyword">private</span> missionAnnouncedSource = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">  <span class="keyword">private</span> missionConfirmedSource = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">  <span class="comment">// Observable string streams</span></span><br><span class="line">  missionAnnounced$ = <span class="variable language_">this</span>.<span class="property">missionAnnouncedSource</span>.<span class="title function_">asObservable</span>();</span><br><span class="line">  missionConfirmed$ = <span class="variable language_">this</span>.<span class="property">missionConfirmedSource</span>.<span class="title function_">asObservable</span>();</span><br><span class="line">  <span class="comment">// Service message commands</span></span><br><span class="line">  <span class="title function_">announceMission</span>(<span class="params">mission: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">missionAnnouncedSource</span>.<span class="title function_">next</span>(mission);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">confirmMission</span>(<span class="params">astronaut: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">missionConfirmedSource</span>.<span class="title function_">next</span>(astronaut);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用subscribe和執行service的方法來達成訊息交換的功能</p>
<h1 id="結語"><a class="header-anchor" href="#結語"> </a>結語</h1>
<p>Component與Component之間的溝通方式基本上並不困難，但是很多情形是有太多Component與資料間的相依關係讓事情變得很複雜，所以如何最好Component的規劃是一個需要經驗的課題，只好不斷的從實做中整理出規則。</p>
<h1 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h1>
<ul>
<li><a href="https://angular.io/docs/ts/latest/cookbook/component-communication.html">Angular2 Cookbook - Component Interaction</a></li>
<li><a href="http://reactivex.io/rxjs/manual/overview.html#subject">RxJS - Subject</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Template Tag</title>
    <url>/2016/11/12/ng2-template/</url>
    <content><![CDATA[<p>Angular2裡面有提供一個 <code>*</code> 的語法糖, 這個語法糖是用來表示 <code>&lt;template&gt;</code> 標籤. 例如  <code>*ngIf</code> 、 <code>*ngFor</code> 等, 而這篇就來討論怎麼利用 <code>&lt;template&gt;</code></p>
<span id="more"></span>
<h1 id="Template-Tag"><a class="header-anchor" href="#Template-Tag"> </a>Template Tag</h1>
<p>來先看一段Code吧</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">ComponentFactoryResolver</span>, <span class="title class_">ViewChild</span>, <span class="title class_">ViewContainerRef</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-dynamic-component&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;Hello world&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyDynamicComponent</span>&#123;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,  </span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;template #target&gt;&lt;/template&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span> </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">&#x27;target&#x27;</span>, &#123;<span class="attr">read</span>: <span class="title class_">ViewContainerRef</span>&#125;) <span class="attr">target</span>: <span class="title class_">ViewContainerRef</span>;</span><br><span class="line"></span><br><span class="line">  title = <span class="string">&#x27;app works!&#x27;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> cfr: ComponentFactoryResolver</span>)&#123;   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterViewInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">let</span> myFactory = <span class="variable language_">this</span>.<span class="property">cfr</span>.<span class="title function_">resolveComponentFactory</span>(<span class="title class_">MyDynamicComponent</span>);</span><br><span class="line">     <span class="keyword">let</span> compRef = <span class="variable language_">this</span>.<span class="property">target</span>.<span class="title function_">createComponent</span>(myFactory);</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這段Code有幾個地方要解釋一下的是</p>
<ol>
<li><code>&lt;template&gt;</code>是一個placeholder, 像是註記符號，讓angular2知道說要將template注入到哪一個位置</li>
<li><a href="https://angular.io/docs/ts/latest/api/core/index/ViewContainerRef-class.html">ViewContainerRef</a> 是代表容器的位置</li>
<li><a href="https://angular.io/docs/ts/latest/api/core/index/ComponentFactoryResolver-class.html">ComponentFactoryResolver</a>是動態產生Component的一個Factory Class</li>
</ol>
<p>動態產生Component不會在此探討，會留在以後來做討論. 重點是 <code>&lt;template&gt;</code> 這個所產生出來的結果</p>
<p><img src="https://farm6.staticflickr.com/5442/22755425268_a8f09f0faf_o.png" alt=""></p>
<p>紅色框起來的就是在上面 <code>&lt;template&gt;</code> 的所在位置，而所要產生的html會在下方被注入。同樣的運作原理適用於 Rotuer</p>
<p>以上就是介紹 『<template>』 的基本用途，接下來就是進階的用法了</p>
<h1 id="template-tag-dances-with-data"><a class="header-anchor" href="#template-tag-dances-with-data"> </a>template tag dances with data</h1>
<p>單純的顯示HTML多無聊啊，來個動態顯示資料吧</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">ComponentFactoryResolver</span>, <span class="title class_">ViewChild</span>, <span class="title class_">ViewContainerRef</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;template #nametag let-y&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;Hello &#123;&#123; y.name &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/template&gt;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  &lt;div [ngTemplateOutlet]=&quot;nametag&quot; [ngOutletContext]=&quot;myContext&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;div [ngTemplateOutlet]=&quot;nametag&quot; [ngOutletContext]=&quot;myContext2&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;kevin&#x27;</span>;</span><br><span class="line">  myContext = &#123; <span class="string">&#x27;$implicit&#x27;</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;kevin&#x27;</span>&#125;&#125;;</span><br><span class="line">  myContext2 = &#123; <span class="string">&#x27;$implicit&#x27;</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;Jeff&#x27;</span>&#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="名詞解釋"><a class="header-anchor" href="#名詞解釋"> </a>名詞解釋</h2>
<ol>
<li><a href="https://angular.io/docs/ts/latest/api/common/index/NgTemplateOutlet-directive.html">[ngTemplateOutlet]</a> : Inserts an embedded view from a prepared <code>TemplateRef</code></li>
<li>[ngOutletContext]: should be an object, the object’s keys will be the local template variables available within the <code>TemplateRef</code>.
<ul>
<li>Note: using the key <code>$implicit</code> in the context object will set it’s value as default.</li>
</ul>
</li>
<li>let-(alias): let- 是將ngOutletContext所傳進去的object中的$implicit給予一個別名，使 <code>&lt;template&gt;</code> 內可以使用該資料.</li>
</ol>
<p>所以上面的程式就可以將不同的資料放到相同的 <code>&lt;template&gt;</code> 裡但又不用新增一個component來處理，工作就減少很多了，是不是很方便，而這個也是  <code>*ngFor</code>  等的基本寫法</p>
<p><img src="https://farm6.staticflickr.com/5655/25298597749_867061bf20_o.png" alt=""></p>
<h1 id="自訂Directive"><a class="header-anchor" href="#自訂Directive"> </a>自訂Directive</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Component</span>, <span class="title class_">Directive</span>, <span class="title class_">Input</span>, <span class="title class_">TemplateRef</span>,</span><br><span class="line">  <span class="title class_">ViewContainerRef</span>, <span class="title class_">EmbeddedViewRef</span>, <span class="title class_">ChangeDetectorRef</span>, <span class="title class_">ChangeDetectionStrategy</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Rx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[rxContext][rxContextOn]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RxContext</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">rxContextOn</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="attr">_viewRef</span>: <span class="title class_">EmbeddedViewRef</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> templateRef: TemplateRef&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> vcr: ViewContainerRef</span>) &#123;    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this.rxContextOn);</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rxContextOn</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_viewRef</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_viewRef</span> = <span class="variable language_">this</span>.<span class="property">vcr</span>.<span class="title function_">createEmbeddedView</span>(<span class="variable language_">this</span>.<span class="property">templateRef</span>, &#123; <span class="string">&#x27;$implicit&#x27;</span>: state &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_viewRef</span>.<span class="property">context</span>.<span class="property">$implicit</span> = state;      </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,  </span><br><span class="line">  <span class="attr">template</span>: <span class="string">`        </span></span><br><span class="line"><span class="string">      &lt;div *rxContext=&quot;let user on userStream&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;&#123;&#123; user.name &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  userStream = <span class="title class_">Observable</span>.<span class="title function_">of</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kevin&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">35</span></span><br><span class="line">  &#125;).<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">3000</span>).<span class="title function_">mapTo</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Jeff&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一段一段的來解釋吧</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">rxContext</span>=<span class="string">&quot;let user on userStream&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我們知道 <code>*</code> 會被更換成 <code>&lt;template&gt;</code> ，所以上面的那段code會替換成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">rxContext</span> <span class="attr">let-user</span> [<span class="attr">rxContextOn</span>]=<span class="string">&quot;userStream&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以我們需要一個叫 rxContext的directive，和 rxContextOn的屬性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[rxContext][rxContextOn]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RxContext</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">rxContextOn</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">   <span class="attr">_viewRef</span>: <span class="title class_">EmbeddedViewRef</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> templateRef: TemplateRef&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> vcr: ViewContainerRef</span>) &#123;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡的rxContextOn型別設定為Observable是因為我們會傳入一個Observable的物件進去，這裡請依實際狀況調整</p>
<h2 id="名詞解釋-v2"><a class="header-anchor" href="#名詞解釋-v2"> </a>名詞解釋</h2>
<ol>
<li><a href="https://angular.io/docs/ts/latest/api/core/index/TemplateRef-class.html">TemplateRef</a> : Represents an Embedded Template that can be used to instantiate Embedded Views.</li>
<li><a href="https://angular.io/docs/ts/latest/api/core/index/ViewContainerRef-class.html">ViewContainerRef</a>: Represents a container where one or more Views can be attached.</li>
<li>createEmbeddedView(templateRef: TemplateRef<C>, context?: C, index?: number) : EmbeddedViewRef<C></li>
</ol>
<p>因為Directive本身是不會有任何的template的，所以這裡所要操作的template會是指使用到該directive的 html element.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">rxContextOn</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;   </span><br><span class="line">     <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_viewRef</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">_viewRef</span> = <span class="variable language_">this</span>.<span class="property">vcr</span>.<span class="title function_">createEmbeddedView</span>(<span class="variable language_">this</span>.<span class="property">templateRef</span>, &#123; <span class="string">&#x27;$implicit&#x27;</span>: state &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">_viewRef</span>.<span class="property">context</span>.<span class="property">$implicit</span> = state;      </span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>因為rxContextOn所傳入的資料是Observable型別的資料，所以必須透過subscribe才能將資料產生出來。當資料產生出來後，再把資料塞回到template中，這樣子就完成最基本的directive了</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://github.com/angular/angular/blob/2.1.2/modules/%40angular/common/src/directives/ng_for.ts#L23-L167">ngFor</a></li>
<li><a href="https://github.com/angular/angular/blob/2.1.2/modules/%40angular/common/src/directives/ng_if.ts#L9-L51">ngIf</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Projection</title>
    <url>/2016/11/13/ng2-transclusion/</url>
    <content><![CDATA[<p>Angular1有Transclusion, 那Angular2該怎麼做呢?</p>
<span id="more"></span>
<h1 id="View-Content"><a class="header-anchor" href="#View-Content"> </a>View &amp; Content</h1>
<p>在介紹Angular2的Projection之前，有兩個名詞要介紹，就是 <code>View</code> 和 <code>Content</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-card</span>&gt;</span> <span class="comment">&lt;!-- View --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">card-header</span>&gt;</span><span class="tag">&lt;/<span class="name">card-header</span>&gt;</span> <span class="comment">&lt;!-- one of the Contents --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- one of the Contents --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以 <code>View</code>和 <code>Content</code> 的關係是 <code>Content</code> 是存在於 <code>View</code> 裡面，而 <code>View</code> 就是最外層的 element</p>
<h1 id="ngContent"><a class="header-anchor" href="#ngContent"> </a>ngContent</h1>
<p>而Angular2的Transclusion就是利用Contents來完成，先來看一段程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-card&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ng-content select=&quot;card-header&quot;&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Card Info &lt;/h2&gt;    </span></span><br><span class="line"><span class="string">    &lt;ng-content select=&quot;.card-footer&quot;&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroParentComponent</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>介紹 <code>&lt;ng-content select=&quot;&lt;selector&gt;&quot;&gt;&lt;/ng-content&gt;</code>，Angular2透過偉大的selector，就可以將資料或是要顯示的內容放到對的位置</p>
<p>app-card這個component的template, 我們定義了兩個ng-content，分別是針對<code>&lt;card-header&gt;</code> tag element, 另外一個是針對claass含有<code> card-footer</code>的element. 而在外部使這<code>app-card</code> 就可以在content area來提供這部分的資料，使用範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-card</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">card-header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is Card Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">card-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer&quot;</span>&gt;</span></span><br><span class="line">      This is a card footer</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-card</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="NO-ERRORS-SCHEMA"><a class="header-anchor" href="#NO-ERRORS-SCHEMA"> </a>NO_ERRORS_SCHEMA</h1>
<p>這時候到頁面上觀看結果時，在Console的地方會出現錯誤訊息</p>
<p><img src="https://farm6.staticflickr.com/5831/22770583938_e741cf1f0a_o.png" alt=""></p>
<p>這裡的錯誤訊息是指，template parser不認識 <code>&lt;card-header&gt;</code> 這個標籤，所以丟出錯誤訊息。這裡需要再 ngModule的地方再多設定一個參數</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">NO_ERRORS_SCHEMA</span>  &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="attr">schemas</span>: [ <span class="variable constant_">NO_ERRORS_SCHEMA</span> ]</span><br></pre></td></tr></table></figure>
<p><code>NO_ERRORS_SCHEMA</code> 表示 Defines a schema that will allow any property on any element.</p>
<p>最終結果</p>
<p><img src="https://farm6.staticflickr.com/5651/25313550289_bd9a2cf181_o.png" alt=""></p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://scotch.io/tutorials/angular-2-transclusion-using-ng-content">Angular 2 Transclusion using ng-content</a></li>
<li><a href="https://github.com/angular/angular/blob/1cf5f5fa38ea672a972313049c9de2db6024441d/modules/%40angular/core/src/metadata/ng_module.ts">ng_module metadata</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 3rd Library的安裝筆記</title>
    <url>/2016/11/17/ng2-3rdLibrary/</url>
    <content><![CDATA[<p>Angular CLI要安裝第三方套件，看起來簡單，可是好像又有什麼地方需要設定，特此寫這篇方便以後查考</p>
<span id="more"></span>
<h1 id="注意事項"><a class="header-anchor" href="#注意事項"> </a>注意事項</h1>
<ul>
<li>如果是修正到angular-cli.json檔案時，需要重啟ng serve才會生效</li>
</ul>
<h1 id="套件"><a class="header-anchor" href="#套件"> </a>套件</h1>
<h2 id="Lodash"><a class="header-anchor" href="#Lodash"> </a>Lodash</h2>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install lodash --save</span><br><span class="line">npm install @types/lodash --save-dev</span><br></pre></td></tr></table></figure>
<p>在需要使用到lodash的component裡，還需要做import的動作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Font-Awesome"><a class="header-anchor" href="#Font-Awesome"> </a>Font Awesome</h2>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install font-awesome --save</span><br></pre></td></tr></table></figure>
<p>在Angular-cli.json下，將font-awesome的css及 font file都加進來</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;apps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">   <span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;../node_modules/font-awesome/css/font-awesome.css&quot;</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;addons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">&quot;../node_modules/font-awesome/fonts/*.+(otf|eot|svg|ttf|woff|woff2)&quot;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h2 id="hammer-js"><a class="header-anchor" href="#hammer-js"> </a>hammer.js</h2>
<p>angular materia 2 如果要使用 md-slide-toggle and md-slider, 需要額外再多安裝hammer.js</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hammerjs --save</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;apps&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">   <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;../node_modules/hammerjs/hammer.min.js&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h2 id="AngularFire2"><a class="header-anchor" href="#AngularFire2"> </a>AngularFire2</h2>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install firebase angularfire2 --save</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] ViewChild &amp; ContentChild</title>
    <url>/2016/11/19/ng2-viewchild-viewcontent/</url>
    <content><![CDATA[<p>ViewChild(ren) &amp; ContenChild(ren) 可以讓Component取得template裡的其他Component，取得後就可以操作該component了，而這功能搭配使用，所產生出來的效果是非常強大的.</p>
<span id="more"></span>
<p>在之前的文章有提到View和Content的差異性，Angular2的ViewChild(ren)和ContentChild(ren)也是根據該原則搜尋取得Component(s)</p>
<ul>
<li>[View|Content]Child : 回傳單一物件</li>
<li>[View|Content]Children: 回傳QueryList&lt;型別&gt;, 是一個陣列</li>
</ul>
<h1 id="ViewChild-ViewChildren"><a class="header-anchor" href="#ViewChild-ViewChildren"> </a>ViewChild &amp; ViewChildren</h1>
<h2 id="宣告"><a class="header-anchor" href="#宣告"> </a>宣告</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ViewChildDecorator</span> &#123;</span><br><span class="line">  (<span class="attr">selector</span>: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt;|<span class="title class_">Function</span>|<span class="built_in">string</span>, &#123;read&#125;?: &#123;read?: <span class="built_in">any</span>&#125;): <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">selector</span>: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt;|<span class="title class_">Function</span>|<span class="built_in">string</span>, &#123;read&#125;?: &#123;read?: <span class="built_in">any</span>&#125;): <span class="title class_">ViewChild</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ViewChild</span>: <span class="title class_">ViewChildDecorator</span> = <span class="title function_">makePropDecorator</span>(</span><br><span class="line">    <span class="string">&#x27;ViewChild&#x27;</span>,</span><br><span class="line">    [</span><br><span class="line">      [<span class="string">&#x27;selector&#x27;</span>, <span class="literal">undefined</span>], &#123;</span><br><span class="line">        <span class="attr">first</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">isViewQuery</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">descendants</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">read</span>: <span class="literal">undefined</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="title class_">Query</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ViewChildrenDecorator</span> &#123;</span><br><span class="line">  (<span class="attr">selector</span>: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt;|<span class="title class_">Function</span>|<span class="built_in">string</span>, &#123;read&#125;?: &#123;read?: <span class="built_in">any</span>&#125;): <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">selector</span>: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt;|<span class="title class_">Function</span>|<span class="built_in">string</span>, &#123;read&#125;?: &#123;read?: <span class="built_in">any</span>&#125;): <span class="title class_">ViewChildren</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ViewChildren</span>: <span class="title class_">ViewChildrenDecorator</span> = <span class="title function_">makePropDecorator</span>(</span><br><span class="line">    <span class="string">&#x27;ViewChildren&#x27;</span>,</span><br><span class="line">    [</span><br><span class="line">      [<span class="string">&#x27;selector&#x27;</span>, <span class="literal">undefined</span>], &#123;</span><br><span class="line">        <span class="attr">first</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">isViewQuery</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">descendants</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">read</span>: <span class="literal">undefined</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="title class_">Query</span>);</span><br></pre></td></tr></table></figure>
<h2 id="使用方式"><a class="header-anchor" href="#使用方式"> </a>使用方式</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(<span class="meta">@selector</span>) <span class="attr">variable</span>: typeOf <span class="title class_">Variable</span>(can be <span class="built_in">any</span>)</span><br></pre></td></tr></table></figure>
<p>搜尋的@selector可以傳入的型別有 <code>Type&lt;any&gt;|Function|string</code>，可以直接搜尋ReferenceId或是Component Class.</p>
<ul>
<li>selector by string: 搜尋ReferenceId(eg. #id), 如果找到相對應的Element有對應的component, 會回傳該Component, 如果沒有找到對應的Component，則回傳 ElementRef型別，如果ReferenceId找不到時，就回傳Undefined</li>
<li>selector by ComponentClass: 搜尋By Component Class, 如果有符合時，回傳Component Type,  否則回傳Undefined</li>
</ul>
<h2 id="LifeHook"><a class="header-anchor" href="#LifeHook"> </a>LifeHook</h2>
<p>ViewChild(ren) 會在 AfterViewInit 之後，才能取得到資料,</p>
<h2 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h2>
<h3 id="Sample-1-利用ReferenceId"><a class="header-anchor" href="#Sample-1-利用ReferenceId"> </a>Sample 1 (利用ReferenceId)</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-input&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; /&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">InputComponent</span> &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;this is inputComponent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;by referebce id #input&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; #input1 /&gt;</span></span><br><span class="line"><span class="string">    &lt;br/&gt;</span></span><br><span class="line"><span class="string">    &lt;label&gt;by component&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;app-input #input2&gt;&lt;/app-input&gt;</span></span><br><span class="line"><span class="string">    &lt;br /&gt;</span></span><br><span class="line"><span class="string">    &lt;button type=&quot;button&quot; (click)=&quot;getValue()&quot;&gt;getValue&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">AfterViewInit</span> &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">&#x27;input1&#x27;</span>) <span class="attr">input1</span>: <span class="title class_">ElementRef</span>;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">&#x27;input2&#x27;</span>) <span class="attr">input2</span>: <span class="title class_">InputComponent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#input afterViewInit:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">input1</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app-input afterViewInit:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">input2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">input1</span>.<span class="property">nativeElement</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Console log的結果</p>
<p><img src="https://c2.staticflickr.com/6/5815/30734587520_481f66a44f_o.png" alt=""></p>
<h3 id="Sample2-by-ComponentClass"><a class="header-anchor" href="#Sample2-by-ComponentClass"> </a>Sample2 (by ComponentClass)</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(<span class="title class_">InputComponent</span>) <span class="attr">input2</span>: <span class="title class_">InputComponent</span>;</span><br></pre></td></tr></table></figure>
<p>結果如上</p>
<h3 id="Sample3-ViewChildren"><a class="header-anchor" href="#Sample3-ViewChildren"> </a>Sample3 (ViewChildren)</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">   ...</span></span><br><span class="line"><span class="string">    &lt;app-input #input2&gt;&lt;/app-input&gt;</span></span><br><span class="line"><span class="string">    &lt;app-input&gt;&lt;/app-input&gt;</span></span><br><span class="line"><span class="string">    &lt;app-input&gt;&lt;/app-input&gt;</span></span><br><span class="line"><span class="string">    &lt;app-input&gt;&lt;/app-input&gt;</span></span><br><span class="line"><span class="string">   ...</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">AfterViewInit</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@ViewChildren</span>(<span class="title class_">InputComponent</span>) <span class="attr">appInputs</span>: <span class="title class_">QueryList</span>&lt;<span class="title class_">InputComponent</span>&gt;;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>輸出結果</p>
<p><img src="https://c2.staticflickr.com/6/5530/30735846090_754cdef3db_o.png" alt=""></p>
<h1 id="ContentChild-ContentChildren"><a class="header-anchor" href="#ContentChild-ContentChildren"> </a>ContentChild &amp; ContentChildren</h1>
<h2 id="宣告-v2"><a class="header-anchor" href="#宣告-v2"> </a>宣告</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ContentChildDecorator</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@docsNotRequired</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  (<span class="attr">selector</span>: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt;|<span class="title class_">Function</span>|<span class="built_in">string</span>, &#123;read&#125;?: &#123;read?: <span class="built_in">any</span>&#125;): <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">selector</span>: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt;|<span class="title class_">Function</span>|<span class="built_in">string</span>, &#123;read&#125;?: &#123;read?: <span class="built_in">any</span>&#125;): <span class="title class_">ContentChild</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用方式-v2"><a class="header-anchor" href="#使用方式-v2"> </a>使用方式</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContentChild</span>(<span class="meta">@selector</span>) <span class="attr">variable</span>: typeOf <span class="title class_">Variable</span>(can be <span class="built_in">any</span>)</span><br></pre></td></tr></table></figure>
<p>搜尋的@selector可以傳入的型別有 <code>Type&lt;any&gt;|Function|string</code>，可以直接搜尋ReferenceId或是Component Class.</p>
<ul>
<li>selector by string: 搜尋ReferenceId(eg. #id), 如果找到相對應的Element有對應的component, 會回傳該Component, 如果沒有找到對應的Component，則回傳 ElementRef型別，如果ReferenceId找不到時，就回傳Undefined</li>
<li>selector by ComponentClass: 搜尋By Component Class, 如果有符合時，回傳Component Type,  否則回傳Undefined</li>
<li>這裡所指的ReferenceId是指ParentControl在使用子Component時，於Content Area所指定的ReferenceId. 基於此理由，搜尋by ComponentClass會比較準確，也比較直覺</li>
</ul>
<h2 id="LifeHook-v2"><a class="header-anchor" href="#LifeHook-v2"> </a>LifeHook</h2>
<p>ContentChild(ren) 會在 AfterContentInit 之後，才能取得到資料,</p>
<h2 id="範例-v2"><a class="header-anchor" href="#範例-v2"> </a>範例</h2>
<h3 id="sample-search-By-Component-Class"><a class="header-anchor" href="#sample-search-By-Component-Class"> </a>sample (search By Component Class)</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-input&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;ng-content select=&quot;app-label&quot;&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">InputComponent</span> <span class="keyword">implements</span> <span class="title class_">AfterContentInit</span> &#123;</span><br><span class="line">  <span class="meta">@ContentChild</span>(<span class="title class_">LabelComponent</span>) <span class="attr">content</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;this is inputComponent&#x27;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterContentInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ChildComponent AfterContentInit: &#x27;</span>, <span class="variable language_">this</span>.<span class="property">content</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-label&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">    label works!</span></span><br><span class="line"><span class="string">  &lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LabelComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;This is a label component&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">someFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent Component</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  ...</span></span><br><span class="line"><span class="string">  &lt;app-input&gt;</span></span><br><span class="line"><span class="string">      &lt;app-label&gt;&lt;/app-label&gt;</span></span><br><span class="line"><span class="string">  &lt;/app-input&gt;</span></span><br><span class="line"><span class="string">  ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<p>輸出結果</p>
<p><img src="https://c2.staticflickr.com/6/5661/30960780162_7788151d5b_o.png" alt=""></p>
<h3 id="Sample-2-search-by-ReferenceId"><a class="header-anchor" href="#Sample-2-search-by-ReferenceId"> </a>Sample 2(search by ReferenceId)</h3>
<p>這裡所指的ReferenceId是指在parentComponent內所定義的Id</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-input&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;ng-content select=&quot;app-label&quot;&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">InputComponent</span> <span class="keyword">implements</span> <span class="title class_">AfterContentInit</span> &#123;</span><br><span class="line">  <span class="meta">@ContentChild</span>(<span class="string">&#x27;label&#x27;</span>) <span class="attr">content</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;this is inputComponent&#x27;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngAfterContentInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ChildComponent AfterContentInit: &#x27;</span>, <span class="variable language_">this</span>.<span class="property">content</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ParentComponent</span></span><br><span class="line">  &lt;app-input #input2&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">app-label</span> #<span class="attr">label</span>&gt;</span><span class="tag">&lt;/<span class="name">app-label</span>&gt;</span></span></span><br><span class="line">    &lt;/app-input&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">app-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">app-label</span> #<span class="attr">label</span>&gt;</span><span class="tag">&lt;/<span class="name">app-label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">app-input</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>輸出結果同上，這裡有另外一個需要注意的地方，#[id] 如果是在View階層時，是不能有重複的，但是如果是Content階層時，在不同的View Component是可以重複的，因為是生存不在不同的scope.</p>
<h1 id="應用"><a class="header-anchor" href="#應用"> </a>應用</h1>
<p>一個Tbas套件的組成可以是一個tabs下面有多個tab, 大概會是長這樣</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tabs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This Tab Content 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This Tab Content 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tab</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This Tab Content 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tabs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以我們至少需要兩個Components, <code>tabs</code>和<code>tab</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>,<span class="title class_">Input</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;tab&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;p [hidden]=&quot;!show&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TabComponent</span> &#123;</span><br><span class="line">    <span class="meta">@Input</span>()</span><br><span class="line">    <span class="attr">tabTitle</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attr">show</span>:<span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>,<span class="title class_">ContentChildren</span>,<span class="title class_">QueryList</span>,<span class="title class_">AfterContentInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;angular2/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TabComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./tab&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;tabs&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">       &lt;ul class=&quot;tab-list&quot;&gt;</span></span><br><span class="line"><span class="string">           &lt;li *ngFor=&quot;#tab of tabs&quot; [class.active]=&quot;selectedTab===tab&quot; (click)=&quot;onSelect(tab)&quot;&gt;</span></span><br><span class="line"><span class="string">               &#123;&#123;tab.tabTitle&#125;&#125;</span></span><br><span class="line"><span class="string">           &lt;/li&gt;</span></span><br><span class="line"><span class="string">       &lt;/ul&gt;</span></span><br><span class="line"><span class="string">       &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">styles</span>: [<span class="string">`</span></span><br><span class="line"><span class="string">        .tab-list&#123;</span></span><br><span class="line"><span class="string">            list-style:none;</span></span><br><span class="line"><span class="string">            overflow:hidden;</span></span><br><span class="line"><span class="string">            padding:0;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .tab-list li&#123;</span></span><br><span class="line"><span class="string">            cursor:pointer;</span></span><br><span class="line"><span class="string">            float:left;</span></span><br><span class="line"><span class="string">            width:60px;</span></span><br><span class="line"><span class="string">            height:30px;</span></span><br><span class="line"><span class="string">            line-height:30px;</span></span><br><span class="line"><span class="string">            text-align:center;</span></span><br><span class="line"><span class="string">            background-color:gray;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .tab-list li.active&#123;</span></span><br><span class="line"><span class="string">            background-color:red;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TabsComponent</span> <span class="keyword">implements</span> <span class="title class_">AfterContentInit</span> &#123;</span><br><span class="line">    <span class="meta">@ContentChildren</span>(<span class="title class_">TabComponent</span>)</span><br><span class="line">    <span class="attr">tabs</span>:<span class="title class_">QueryList</span>&lt;<span class="title class_">TabComponent</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="attr">selectedTab</span>:<span class="title class_">TabComponent</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ngAfterContentInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">select</span>(<span class="variable language_">this</span>.<span class="property">tabs</span>.<span class="property">first</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onSelect</span>(<span class="params">tab</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">select</span>(tab);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">select</span>(<span class="params">tab</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tabs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">            item.<span class="property">show</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selectedTab</span> = tab;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">selectedTab</span>.<span class="property">show</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;h2&gt;App Component&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;tabs&gt;</span></span><br><span class="line"><span class="string">            &lt;tab tabTitle=&quot;First&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;This Tab Content 1&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/tab&gt;</span></span><br><span class="line"><span class="string">            &lt;tab tabTitle=&quot;Second&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;This Tab Content 2&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/tab&gt;</span></span><br><span class="line"><span class="string">            &lt;tab tabTitle=&quot;third&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;This Tab Content 3&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/tab&gt;</span></span><br><span class="line"><span class="string">        &lt;/tabs&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="attr">directives</span>: [<span class="title class_">TabsComponent</span>,<span class="title class_">TabComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示效果</p>
<p><img src="http://yuyang041060120.github.io/img/angular2-contentchild-and-viewchild/6.gif" alt=""></p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://github.com/angular/angular/blob/745e10e6d2ea9097b7ec650ae54cea91e3d193f2/modules/%40angular/core/src/metadata/di.ts">metadata</a></li>
<li><a href="http://yuyang041060120.github.io/2016/03/30/angular2-contentchild-and-viewchild/">ViewChild/ContentChild</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Router Resolve</title>
    <url>/2016/12/11/ng2-router-resolve/</url>
    <content><![CDATA[<p>Angular 2的Router Config的地方，可以設定data跟resolve. 這篇就簡單的紀錄一下怎麼寫resolve的部分跟怎麼在component裡取得資料</p>
<span id="more"></span>
<h1 id="基本用法"><a class="header-anchor" href="#基本用法"> </a>基本用法</h1>
<p>Routes設定的部分</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;posts&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PostsComponent</span>,</span><br><span class="line">    data : &#123; <span class="attr">someProp</span>: propValue&#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">posts</span>: <span class="title class_">PostsResolver</span>  </span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡的可以直接設定data或是resolve的屬性，這兩個屬性都可以透過ActivatedRoute的data取得.</p>
<p>PostsResolver是實作Resolve</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Http</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Resolve</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsResolver</span> <span class="keyword">implements</span> <span class="title class_">Resolve</span>&lt;<span class="built_in">any</span>&gt;&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http</span>) &#123;   </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">resolve</span>(): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當然在routing-module下必須把這個註冊在provider裡面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">      <span class="title class_">PostsResolver</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上就是基本的router resolve的做法</p>
<p>那Component裡面怎麼用呢</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostsComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">posts</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> route: ActivatedRoute</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">data</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">posts</span> = data.<span class="property">posts</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// or this way</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">posts</span> = <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">snapshot</span>.<span class="property">data</span>[<span class="string">&#x27;posts&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="進階用法"><a class="header-anchor" href="#進階用法"> </a>進階用法</h1>
<p>resolve也可以把參數的部分帶入使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Http</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Resolve</span>, <span class="title class_">ActivatedRouteSnapshot</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostResolver</span> <span class="keyword">implements</span> <span class="title class_">Resolve</span>&lt;<span class="built_in">any</span>&gt;&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> id = route.<span class="property">params</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/posts/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p><a href="https://angular.io/docs/ts/latest/guide/router.html#!#resolve-guard">ROUTING &amp; NAVIGATION</a></p>
<p><a href="https://github.com/chgc/blogDemocode-ng2Router-resolve">範例程式碼</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 與ASP.NET Core合體</title>
    <url>/2017/01/03/mvccore-with-angular2-cli/</url>
    <content><![CDATA[<p>Angular可以說是一個很稱職的前端Framework，那後端的架構又有什麼選擇呢? <a href="http://xn--ASP-yx1e609b.NET">其實ASP.NET</a> MVC Core是一個不錯的選擇。架構很輕，在搭配無敵強大的Visual Studio與Azure超級無縫的接軌。可以說是不二人選，但是. Angular CLI的專案要怎麼跟MVC Core的專案結合呢? 以下使用Visual Studio 2017RC+ Core 1.1.0版來做Demo.</p>
<span id="more"></span>
<h1 id="使用-WebAPI-的專案範本建立新專案"><a class="header-anchor" href="#使用-WebAPI-的專案範本建立新專案"> </a>使用 WebAPI 的專案範本建立新專案</h1>
<p><img src="https://farm6.staticflickr.com/5547/31953873981_b8b9152a9a_o.png" alt=""></p>
<p><img src="https://farm6.staticflickr.com/5793/31923537982_a7642c97dc_o.png" alt=""></p>
<p>按下 OK 後就會是一個含有WebAPI範例的MVC Core的網站了，這時候會發現project.json已經消失了，因為我門是使用Visual Studio 2017建立的關係(<a href="http://www.talkingdotnet.com/news-project-json-asp-net-core-going-away/">Project.json for ASP.NET Core is going away</a>)，接下來就是透過NuGet來升級MVC Core的版本到1.1.0的版本。</p>
<p><img src="https://farm1.staticflickr.com/292/31696729150_c6080119be_o.png" alt=""></p>
<p><img src="https://farm1.staticflickr.com/283/32071852495_c4451bf851_o.png" alt=""></p>
<h2 id="502的錯誤排除"><a class="header-anchor" href="#502的錯誤排除"> </a>502的錯誤排除</h2>
<p>如果第一次執行後，出現502的錯誤，<a href="http://xn--3qr74hn2cr0pg5ab16c1ogo08a5fdxra.NET">請確認環境是否有安裝.NET</a> Core 1.1的Library，安裝後應可排除問題</p>
<p><a href="https://www.microsoft.com/net/download/core#/current/runtime">下載位置</a></p>
<h2 id="設定路由"><a class="header-anchor" href="#設定路由"> </a>設定路由</h2>
<p>在startup.cs裡，修改<code>Configure</code>的部分</p>
<p>可能需要多安裝  <code>Microsoft.AspNetCore.StaticFiles</code>套件</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    app.Use(<span class="keyword">async</span> (context, next)=&gt;&#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">        <span class="keyword">if</span> (context.Response.StatusCode == <span class="number">404</span> &amp;&amp;</span><br><span class="line">        !Path.HasExtension(context.Request.Path.Value) &amp;&amp;</span><br><span class="line">        !context.Request.Path.Value.StartsWith(<span class="string">&quot;/api/&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            context.Request.Path = <span class="string">&quot;/index.html&quot;</span>;</span><br><span class="line">            <span class="keyword">await</span> next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.UseMvc();</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="建立一個空的專案，當Angular-CLI的家"><a class="header-anchor" href="#建立一個空的專案，當Angular-CLI的家"> </a>建立一個空的專案，當Angular CLI的家</h1>
<p><img src="https://farm1.staticflickr.com/365/32072006795_56248d7537_o.png" alt=""></p>
<p><img src="https://farm1.staticflickr.com/262/31954080811_d36ea416b5_o.png" alt=""></p>
<p>然後將一些用不到的檔案，例如: program.cs給刪除掉，也可進入到nuget看看有沒有安裝什麼Library</p>
<p>一切清乾淨後，就要來建立Angular CLI專案了</p>
<h2 id="建立Angular專案"><a class="header-anchor" href="#建立Angular專案"> </a>建立Angular專案</h2>
<p>開啟命令視窗，執行ng init --name <code>&lt;projectName&gt;</code></p>
<p><img src="https://farm1.staticflickr.com/538/31697154630_57a67af0fa_o.png" alt=""></p>
<p>完成後，有幾個設定檔的地方要做調整</p>
<ol>
<li>
<p>angular-cli.json的 outDir要修改到 mvc core project的wwwroot資料夾的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;outDir&quot;: &quot;../WebApplication1/wwwroot&quot;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
<li>
<p>新增 proxy.conf.json檔案，定義後端Api server的位置，簡化Angular呼叫API的網址的複雜度</p>
<p>​</p>
<p><img src="https://farm6.staticflickr.com/5758/32033512876_4887ce08f3_o.png" alt=""></p>
<p>​</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;/api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:22846&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>3 修改 package.json的Scripts的部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;start&quot;: &quot;ng serve --proxy-config proxy.conf.json&quot;,</span><br></pre></td></tr></table></figure>
<h2 id=""><a class="header-anchor" href="#"> </a></h2>
<h1 id="開發時期的執行方式"><a class="header-anchor" href="#開發時期的執行方式"> </a>開發時期的執行方式</h1>
<p>執行的方式. 前端如果要開始開發的話，下指令 <code>npm start</code>，開發時期網頁的網址要以Angular CLI的網址為主</p>
<p>而後端就靠Visual Studio來幫忙囉</p>
<h1 id="部屬"><a class="header-anchor" href="#部屬"> </a>部屬</h1>
<p>透過 Angualr CLI的build指令，就可以將Angualr的專案，根據angular-cli.json的輸出路徑的設定，將所有的ts程式碼轉譯後bundle在一起，輸出到wwwroot的路徑下，由於一開始在Startup.cs裡面就有設定，如果路徑不是api開頭的，就全部轉址到index.html去，也是Angular App的開始頁面.</p>
<p><img src="https://farm1.staticflickr.com/512/32033977686_c7b0087e91_o.png" alt=""></p>
<p><img src="https://farm6.staticflickr.com/5582/31262432143_968c8efb66_o.png" alt=""></p>
<p>ng build後，單獨執行MVC Core的網站，最後的呈現結果</p>
<p><img src="https://farm6.staticflickr.com/5685/31954954071_d96d2508ae_o.png" alt=""></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p><a href="https://devblog.dymel.pl/2016/10/25/angular2-cli-with-aspnet-core-application-tutorial/">Angular2 CLI with ASP.NET Core application - tutorial</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>MVC Core</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 學習筆記(1) - Techniques and practices for testing Angular 2</title>
    <url>/2017/01/05/angular2-ssw-testing-angular2-note/</url>
    <content><![CDATA[<p>這是Youtube影片(<a href="https://youtu.be/RjrIK__PepU">Techniques and practices for testing Angular 2</a>)的觀看筆記</p>
<p>這影片前半段是在介紹Angular2內可以使用的測試方法，由簡單的小範例逐一介紹各方法</p>
<span id="more"></span>
<h1 id="影片筆記"><a class="header-anchor" href="#影片筆記"> </a>影片筆記</h1>
<h2 id="工具"><a class="header-anchor" href="#工具"> </a>工具</h2>
<ul>
<li>
<p>karma - test runner</p>
</li>
<li>
<p>jasmine - test library</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// syntax example</span></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Component: payment&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should instantiate a component&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">execpt</span>(<span class="number">1</span>+<span class="number">1</span>).<span class="title function_">toEqual</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should instantiate a component&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">execpt</span>(<span class="number">1</span>+<span class="number">1</span>).<span class="title function_">toEqual</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><a href="https://wallabyjs.com/">wallaby.js</a> - not free</p>
<p>display unit test result and status inline the code.</p>
</li>
<li>
<p>angular-cli</p>
<ul>
<li>has test ability build-in</li>
<li>test command
<ul>
<li>ng test</li>
<li>ng e2e</li>
</ul>
</li>
</ul>
</li>
<li>
<p>protractor(e2e)</p>
</li>
</ul>
<h2 id="為什麼要測試"><a class="header-anchor" href="#為什麼要測試"> </a>為什麼要測試</h2>
<p>因為越來愈多的商業邏輯都往前端走，所以前端的測試就越來越重要了</p>
<h2 id="測試的種類"><a class="header-anchor" href="#測試的種類"> </a>測試的種類</h2>
<ul>
<li>
<p>Unit tests: Test certain functions, areas of units of code</p>
</li>
<li>
<p>e2e test: Runs the real application in the browser and simulateds user behavior</p>
<p>​</p>
</li>
</ul>
<h2 id="Unit-Tests的型態"><a class="header-anchor" href="#Unit-Tests的型態"> </a>Unit Tests的型態</h2>
<ol>
<li>
<p>Isolated:</p>
<ol>
<li>No HTML template</li>
</ol>
</li>
<li>
<p>Shallow:</p>
<ol>
<li>HTML template</li>
<li>No Child components</li>
</ol>
</li>
<li>
<p>integrated</p>
<ol>
<li>
<p>Test the entire app</p>
<p>​</p>
</li>
</ol>
</li>
</ol>
<h2 id="Isolated-tests"><a class="header-anchor" href="#Isolated-tests"> </a>Isolated tests</h2>
<ul>
<li>jasmine test file is : *.spec.ts(js)</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Component: payment component&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should add numbers correctly&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">execpt</span>(<span class="number">1</span>+<span class="number">1</span>).<span class="title function_">toEqual</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PaymentComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./payment.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Component: payment component&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should have correct title&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">const</span> component = <span class="keyword">new</span> <span class="title class_">PaymentComponent</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="title function_">execpt</span>(component.<span class="property">formTitle</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;Payment Form&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// this is something should test</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return validate valid credit card number&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> component = <span class="keyword">new</span> <span class="title class_">PaymentComponent</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(component.<span class="property">CREDIT_CARD_NUMBER_PATTERN</span>);</span><br><span class="line">    <span class="keyword">let</span> result = regex.<span class="title function_">test</span>(<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">    <span class="title function_">execpt</span>(result).<span class="title function_">toEqual</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Shollow-tests-Mocking-and-Spy’s"><a class="header-anchor" href="#Shollow-tests-Mocking-and-Spy’s"> </a>Shollow tests - Mocking and Spy’s</h2>
<ul>
<li>
<p>Mock Service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mockPaymentService = &#123;</span><br><span class="line">  processPayment : ()=&gt;&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Jasmine Spy</p>
<ul>
<li>spyOn(Object, 『method name』)</li>
<li>.and.</li>
<li>except(spy).toHaveBeenCalled, etc.</li>
</ul>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PaymentComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./payment.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Component: payment component&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">PaymentComponent</span>;</span><br><span class="line">  <span class="attr">mockPaymentService</span>: <span class="built_in">any</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    mockPaymentService = &#123;</span><br><span class="line">      <span class="attr">processPayment</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    component = <span class="keyword">new</span> <span class="title class_">PaymentCompoent</span>(mockPaymentService);</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should call the payment service.processmethod on submit&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">let</span> spy = <span class="title function_">spyOn</span>(mockPaymentService, <span class="string">&#x27;processPayment&#x27;</span>);</span><br><span class="line">    commponent.<span class="title function_">processPayment</span>(); <span class="comment">// =&gt; method to run PaymentService.processPayment</span></span><br><span class="line">    <span class="title function_">except</span>(spy).<span class="title function_">toHaveBeenCalled</span>();</span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Shollow-test-TestBed-and-Dom-access"><a class="header-anchor" href="#Shollow-test-TestBed-and-Dom-access"> </a>Shollow test - TestBed and Dom access</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本設定</span></span><br><span class="line"><span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>:[</span><br><span class="line">    <span class="title class_">PaymentComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>:[</span><br><span class="line">    <span class="title class_">FormsModule</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">pvoiders</span>:[</span><br><span class="line">    &#123;<span class="attr">provide</span>: <span class="title class_">PaymentService</span>, <span class="attr">useValue</span>: mockPaymentService&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 基本用法</span></span><br><span class="line">fixgure = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">PaymentComponent</span>);</span><br><span class="line">component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">mockPaymentService = <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">PaymentServie</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得template內某一個物件的nativeElement(HTMLElement)</span></span><br><span class="line"><span class="keyword">let</span> nativeButtonElement = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;button&#x27;</span>)).<span class="property">nativeElement</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>範例程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PaymentComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./payment.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TestBed</span>, <span class="title class_">ComponentFixture</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">By</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Component: payment component&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">PaymentComponent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">mockPaymentService</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">PaymentComponent</span>&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    mockPaymentService = &#123;</span><br><span class="line">      <span class="attr">processPayment</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  	<span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>:[</span><br><span class="line">        <span class="title class_">PaymentComponent</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">imports</span>:[</span><br><span class="line">        <span class="title class_">FormsModule</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">providers</span>:[</span><br><span class="line">        &#123;<span class="attr">provide</span>: <span class="title class_">PaymentService</span>, <span class="attr">useValue</span>: mockPaymentService&#125;</span><br><span class="line">      ]</span><br><span class="line">  	&#125;)</span><br><span class="line">    </span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">PaymentComponent</span>);</span><br><span class="line">    component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">    mockPaymentSerivce = <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">PaymentService</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should purchase button enabled if credit card valid&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">	component.<span class="property">payment</span>.<span class="property">creditCardNumber</span> = <span class="string">&#x27;1234123412341234&#x27;</span>;</span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    <span class="keyword">let</span> nativeButtonElement = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;button&#x27;</span>))</span><br><span class="line">                                     .<span class="property">nativeElement</span>;</span><br><span class="line">    <span class="comment">// 等非同步動作完成後</span></span><br><span class="line">    fixture.<span class="title function_">whenStable</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 重新觸發detectChanges()</span></span><br><span class="line">	  fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">      <span class="title function_">execpt</span>(nativeButtonElement.<span class="property">disabled</span>).<span class="title function_">toEqual</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="e2e"><a class="header-anchor" href="#e2e"> </a>e2e</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; element, by, browser &#125; <span class="keyword">from</span> <span class="string">&#x27;protractor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;page: payment Form&#x27;</span>,<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should a active button with a valid form&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    browser.<span class="title function_">get</span>(<span class="string">&#x27;./&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;input&#x27;</span>)).<span class="title function_">sendKeys</span>(<span class="string">&#x27;1234123412341234&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> submitButton = <span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;button&#x27;</span>));</span><br><span class="line">    <span class="keyword">let</span> isDisabled = <span class="keyword">await</span> submitButton.<span class="title function_">getAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>); <span class="comment">// return promise;</span></span><br><span class="line">    <span class="title function_">except</span>(isDisabled).<span class="title function_">toEqual</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="其他筆記"><a class="header-anchor" href="#其他筆記"> </a>其他筆記</h1>
<h2 id="設定wallaby-js環境"><a class="header-anchor" href="#設定wallaby-js環境"> </a>設定wallaby.js環境</h2>
<ol>
<li>
<p>在專案下新增wallaby.js檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wallabyWebpack = <span class="built_in">require</span>(<span class="string">&#x27;wallaby-webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpackPostprocessor = <span class="title function_">wallabyWebpack</span>(&#123;</span><br><span class="line">  <span class="attr">entryPatterns</span>: [</span><br><span class="line">    <span class="string">&#x27;src/wallabyTest.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;src/**/*spec.js&#x27;</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">loaders</span>: [</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;raw-loader&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.html$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;raw-loader&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;angular2-template-loader&#x27;</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.json$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;json-loader&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.styl$/</span>, <span class="attr">loaders</span>: [<span class="string">&#x27;raw-loader&#x27;</span>, <span class="string">&#x27;stylus-loader&#x27;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">loaders</span>: [<span class="string">&#x27;raw-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.scss$|\.sass$/</span>, <span class="attr">loaders</span>: [<span class="string">&#x27;raw-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(jpg|png)$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;url-loader?limit=128000&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compilerOptions = <span class="built_in">require</span>(<span class="string">&#x27;./src/tsconfig.json&#x27;</span>).<span class="property">compilerOptions</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">wallaby</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">files</span>: [</span><br><span class="line">      &#123;<span class="attr">pattern</span>: <span class="string">&#x27;src/**/*.ts&#x27;</span>, <span class="attr">load</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">pattern</span>: <span class="string">&#x27;src/**/*.d.ts&#x27;</span>, <span class="attr">ignore</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">pattern</span>: <span class="string">&#x27;src/**/*.css&#x27;</span>, <span class="attr">load</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">pattern</span>: <span class="string">&#x27;src/**/*.html&#x27;</span>, <span class="attr">load</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">pattern</span>: <span class="string">&#x27;src/**/*spec.ts&#x27;</span>, <span class="attr">ignore</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="attr">tests</span>: [</span><br><span class="line">      &#123;<span class="attr">pattern</span>: <span class="string">&#x27;src/**/*spec.ts&#x27;</span>, <span class="attr">load</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="attr">testFramework</span>: <span class="string">&#x27;jasmine&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">compilers</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;**/*.ts&#x27;</span>: wallaby.<span class="property">compilers</span>.<span class="title function_">typeScript</span>(compilerOptions)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">postprocessor</span>: webpackPostprocessor,</span><br><span class="line"></span><br><span class="line">    <span class="attr">setup</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">__moduleBundler</span>.<span class="title function_">loadTests</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 <code>src</code>資料夾下新增  <code>wallabyTest.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./polyfills.ts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zone.js/dist/long-stack-trace-zone&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zone.js/dist/proxy.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zone.js/dist/sync-test&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zone.js/dist/jasmine-patch&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zone.js/dist/async-test&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zone.js/dist/fake-async-test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testing = <span class="built_in">require</span>(<span class="string">&#x27;@angular/core/testing&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> testingBrowser = <span class="built_in">require</span>(<span class="string">&#x27;@angular/platform-browser-dynamic/testing&#x27;</span>);</span><br><span class="line"></span><br><span class="line">testing.<span class="title function_">getTestBed</span>().<span class="title function_">initTestEnvironment</span>(</span><br><span class="line">    testingBrowser.<span class="property">BrowserDynamicTestingModule</span>,</span><br><span class="line">    testingBrowser.<span class="title function_">platformBrowserDynamicTesting</span>());</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>執行 <code>npm install wallaby-webpack angular2-template-loader --save-dev</code>.</p>
</li>
<li>
<p>在Visual Studio Code安裝Wallaby.ts的Extension</p>
</li>
<li>
<p>執行Wallaby</p>
<pre><code></code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>學習筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 學習筆記(2) - Angular 2 — Testing Guide</title>
    <url>/2017/01/07/angular-test-learning-note/</url>
    <content><![CDATA[<p><a href="https://medium.com/google-developer-experts/angular-2-testing-guide-a485b6cb1ef0#.gyor9igx8">Angular 2 — Testing Guide</a>的閱讀筆記，這篇文章是由 <a href="https://medium.com/@gerard.sans">Gerard Sans</a>撰寫的</p>
<p>這篇文章包含Angular Application的基本單元測試，像是Components, Services, Http and Pipes.</p>
<p>該文章有提供另外一個<a href="https://medium.com/google-developer-experts/angular-2-testing-guide-a485b6cb1ef0#8ea4"><strong>Testing Checklist</strong></a> 幫助建立測試</p>
<span id="more"></span>
<h1 id="Jasmine的基本介紹"><a class="header-anchor" href="#Jasmine的基本介紹"> </a>Jasmine的基本介紹</h1>
<p>Jasmine有幾個基本的元素</p>
<ul>
<li>Suites - <code>describe(title:string, function)</code> : 基本容器. 用來裝 Specs.</li>
<li>Specs - <code>it(title:string, function)</code>: 基本測試單位，裡面可以包含一個或多個expectations</li>
<li>expectations - <code>expect(actual).toBe(expected)</code> 用來比對測試結果與預期結果</li>
<li>Matchers - 預先設定的運算式, Eg. <code>toBe(expected)</code>, <code>toEqual(expected)</code>,  <a href="https://github.com/JamieMason/Jasmine-Matchers">更多</a></li>
</ul>
<p>Jasmine有提供4個handlers，來處理一些在測試前或是測試後可以額外執行的動作</p>
<ul>
<li><code>beforeEach</code>, <code>afterEach </code> 於每一個 <code>spec</code> 前後執行</li>
<li><code>beforeAll</code>,<code>afterAll</code> 於每一個 <code>Suit</code> 前後執行</li>
</ul>
<p>可以透過上列的方式避免重複程式碼的產生</p>
<h1 id="Angular-測試"><a class="header-anchor" href="#Angular-測試"> </a>Angular 測試</h1>
<ul>
<li>
<p><strong>TestBed</strong>: 在測試裡面建立ngModule，設定方式與一般設定ngModule一樣，提供方法讓測試案例裡可以取得想要測試的component/service等</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [ <span class="title class_">ComponentToTest</span> ] </span><br><span class="line">  <span class="attr">providers</span>: [ <span class="title class_">MyService</span> ]</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">mockMyService = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br><span class="line"><span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [ <span class="title class_">ComponentToTest</span> ],</span><br><span class="line">  <span class="attr">providers</span>: [ </span><br><span class="line">  	&#123;<span class="attr">provide</span>: <span class="title class_">MyService</span>, <span class="attr">useValue</span>: mockMyService&#125;</span><br><span class="line">  ]  </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//get instance from TestBed (root injector)</span></span><br><span class="line"><span class="keyword">let</span> service = <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">MyService</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>Inject</strong>: 允許我們在TestBed Level取得dependencies</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should return ...&#x27;</span>, <span class="title function_">inject</span>([<span class="title class_">MyService</span>], <span class="function"><span class="params">service</span> =&gt;</span> &#123; </span><br><span class="line">  service.<span class="title function_">foo</span>();</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>Component Injector</strong>: 允許我們在Component Level取得dependencies</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123; </span><br><span class="line">  <span class="attr">providers</span>: [ <span class="title class_">MyService</span> ] </span><br><span class="line">&#125;) </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComponentToTest</span> &#123; &#125;</span><br><span class="line"><span class="keyword">let</span> fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">ComponentToTest</span>);</span><br><span class="line"><span class="keyword">let</span> service = fixture.<span class="property">debugElement</span>.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">MyService</span>);</span><br></pre></td></tr></table></figure>
<p>如果DI是在Component裡面定義的話，只能透過上述方法才能取得. <code>TestBed.get</code>或是<code>Inject</code>是取不到的</p>
</li>
</ul>
<ol>
<li>
<p>service測試的範例程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Service: LanguagesService&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> service;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [ <span class="title class_">LanguagesService</span> ]</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">inject</span>([<span class="title class_">LanguagesService</span>], <span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">    service = s;</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return available languages&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(service.<span class="title function_">get</span>()).<span class="title function_">toContain</span>(<span class="string">&#x27;en&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>產生component的方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// synchronous</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">MyTestComponent</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// asynchronous </span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [ <span class="title class_">MyTestComponent</span> ],</span><br><span class="line">    &#125;).<span class="title function_">compileComponents</span>(); <span class="comment">// compile external templates and css</span></span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure>
<p>用非同步的方式產生component, 這方式同時間會產生<code>zone</code>來負責所有非同步的行為</p>
</li>
</ol>
<h2 id="Testing-Checklist"><a class="header-anchor" href="#Testing-Checklist"> </a>Testing Checklist</h2>
<ol>
<li>需要決定測試的種類: Isoldated, shallow or integration <a href="http://blog.kevinyang.net/2017/01/05/angular2-ssw-testing-angular2-note/">參閱</a></li>
<li>應該使用 <code>Mocks</code>、<code>Stubs</code> or <code>Spies</code>?</li>
<li>同步或非同步?</li>
</ol>
<h1 id="測試範例"><a class="header-anchor" href="#測試範例"> </a>測試範例</h1>
<h2 id="Component"><a class="header-anchor" href="#Component"> </a>Component</h2>
<p>要測試的Component</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Usage:    &lt;greeter name=&quot;Joe&quot;&gt;&lt;/greeter&gt; </span></span><br><span class="line"><span class="comment">// Renders:  &lt;h1&gt;Hello Joe!&lt;/h1&gt;</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;greeter&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;h1&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/h1&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Greeter</span> &#123; </span><br><span class="line">  <span class="meta">@Input</span>() name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Angular建議使用TestBed來產生component</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Component: Greeter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture, greeter, element, de;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [ <span class="title class_">Greeter</span> ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">Greeter</span>);</span><br><span class="line">    greeter = fixture.<span class="property">componentInstance</span>;  <span class="comment">// to access properties and methods</span></span><br><span class="line">    element = fixture.<span class="property">nativeElement</span>;      <span class="comment">// to access DOM element</span></span><br><span class="line">    de = fixture.<span class="property">debugElement</span>;            <span class="comment">// test helper</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//specs</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should render `Hello World!`&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    greeter.<span class="property">name</span> = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">    <span class="comment">//trigger change detection</span></span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    fixture.<span class="title function_">whenStable</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">      <span class="title function_">expect</span>(element.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">      <span class="title function_">expect</span>(de.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;h1&#x27;</span>)).<span class="property">nativeElement</span>.<span class="property">innerText</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
<p>fixture是用來讀取component的方法. 他有下列的方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ComponentFixture</span> &#123;</span><br><span class="line">  debugElement;       <span class="comment">// test helper </span></span><br><span class="line">  componentInstance;  <span class="comment">// to access properties and methods</span></span><br><span class="line">  nativeElement;      <span class="comment">// to access DOM element</span></span><br><span class="line">  <span class="title function_">detectChanges</span>();    <span class="comment">// trigger component change detection</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code> whenStable</code>是當所有非同步的行為都完成後，會執行<code>whenStable</code>，這時，就可以取得應有的結果</li>
<li>其他讀取搜尋debugElement的方式:
<ul>
<li>query(By.all())</li>
<li>query(By.directive(MyDirective))</li>
</ul>
</li>
</ul>
<h2 id="Service"><a class="header-anchor" href="#Service"> </a>Service</h2>
<p>要測試的serivce範例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a simple service</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LanguagesService</span> &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;es&#x27;</span>, <span class="string">&#x27;fr&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>類似測試Component的方式，一樣使用TestBed來產生Service.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Service: LanguagesService&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> service;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [ <span class="title class_">LanguagesService</span> ]</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">inject</span>([<span class="title class_">LanguagesService</span>], <span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">    service = s;</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return available languages&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> languages = service.<span class="title function_">get</span>();</span><br><span class="line">    <span class="title function_">expect</span>(languages).<span class="title function_">toContain</span>(<span class="string">&#x27;en&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(languages).<span class="title function_">toContain</span>(<span class="string">&#x27;es&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(languages).<span class="title function_">toContain</span>(<span class="string">&#x27;fr&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(languages.<span class="property">length</span>).<span class="title function_">toEqual</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Using-Http"><a class="header-anchor" href="#Using-Http"> </a>Using Http</h2>
<p>通常在測試階段不會做任何HTTP call. 但是還是簡單介紹一下，因為這時需要使用到HttpModule</p>
<p>要測試的Service程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LanguagesServiceHttp</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> http:Http</span>) &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;api/languages.json&#x27;</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>測試</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Service: LanguagesServiceHttp&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> service;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">    <span class="attr">imports</span>: [ <span class="title class_">HttpModule</span> ], <span class="comment">// 如果有相依其他的Module, 在此定義</span></span><br><span class="line">    <span class="attr">providers</span>: [ <span class="title class_">LanguagesServiceHttp</span> ]</span><br><span class="line">  &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">inject</span>([<span class="title class_">LanguagesServiceHttp</span>], <span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">    service = s;</span><br><span class="line">  &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//specs</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return available languages&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    service.<span class="title function_">get</span>().<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="title function_">expect</span>(x).<span class="title function_">toContain</span>(<span class="string">&#x27;en&#x27;</span>);</span><br><span class="line">      <span class="title function_">expect</span>(x).<span class="title function_">toContain</span>(<span class="string">&#x27;es&#x27;</span>);</span><br><span class="line">      <span class="title function_">expect</span>(x).<span class="title function_">toContain</span>(<span class="string">&#x27;fr&#x27;</span>);</span><br><span class="line">      <span class="title function_">expect</span>(x.<span class="property">length</span>).<span class="title function_">toEqual</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
<h2 id="Using-MockBackend"><a class="header-anchor" href="#Using-MockBackend"> </a>Using MockBackend</h2>
<p>由於測試時不呼叫真實的後端API, 就會寫一個假的來模擬替代真實的呼叫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;MockBackend: LanguagesServiceHttp&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> mockbackend, service;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [ <span class="title class_">HttpModule</span> ],</span><br><span class="line">      <span class="attr">providers</span>: [</span><br><span class="line">        <span class="title class_">LanguagesServiceHttp</span>,</span><br><span class="line">        &#123; <span class="attr">provide</span>: <span class="title class_">XHRBackend</span>, <span class="attr">useClass</span>: <span class="title class_">MockBackend</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">    </span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">inject</span>([<span class="title class_">LanguagesServiceHttp</span>, <span class="title class_">XHRBackend</span>], <span class="function">(<span class="params">_service, _mockbackend</span>) =&gt;</span> &#123;</span><br><span class="line">    service = _service;</span><br><span class="line">    mockbackend = _mockbackend;</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//specs</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return mocked response (async)&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> response = [<span class="string">&quot;ru&quot;</span>, <span class="string">&quot;es&quot;</span>];</span><br><span class="line">    <span class="comment">// 模擬後端Response的結果</span></span><br><span class="line">    mockbackend.<span class="property">connections</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">connection</span> =&gt;</span> &#123;</span><br><span class="line">      connection.<span class="title function_">mockRespond</span>(<span class="keyword">new</span> <span class="title class_">Response</span>(&#123;<span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(response)&#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">    service.<span class="title function_">get</span>().<span class="title function_">subscribe</span>(<span class="function"><span class="params">languages</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(languages).<span class="title function_">toContain</span>(<span class="string">&#x27;ru&#x27;</span>);</span><br><span class="line">      <span class="title function_">expect</span>(languages).<span class="title function_">toContain</span>(<span class="string">&#x27;es&#x27;</span>);</span><br><span class="line">      <span class="title function_">expect</span>(languages.<span class="property">length</span>).<span class="title function_">toBe</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Directive"><a class="header-anchor" href="#Directive"> </a>Directive</h2>
<p>因為Directive沒有view, 而且是相依在dom上，所以必須建立一個component容器來測試directive</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example: &lt;div log-clicks&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;[log-clicks]&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">logClicks</span> &#123;</span><br><span class="line">  counter = <span class="number">0</span>;</span><br><span class="line">  <span class="meta">@Output</span>() changes = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;click&#x27;</span>, [<span class="string">&#x27;$event.target&#x27;</span>])</span><br><span class="line">  <span class="title function_">clicked</span>(<span class="params">target</span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Click on [<span class="subst">$&#123;target&#125;</span>]: <span class="subst">$&#123;++<span class="variable language_">this</span>.counter&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">//we use emit as next is marked as deprecated</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changes</span>.<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">counter</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>測試</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用來測試Directive的容器Component</span></span><br><span class="line"><span class="meta">@Component</span>(&#123; </span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div log-clicks (changes)=&quot;changed($event)&quot;&gt;&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="attr">directives</span>: [logClicks]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Container</span> &#123;  </span><br><span class="line">  <span class="meta">@Output</span>() changes = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">changed</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changes</span>.<span class="title function_">emit</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Directive: logClicks&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fixture;</span><br><span class="line">  <span class="keyword">let</span> container;</span><br><span class="line">  <span class="keyword">let</span> element;  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [ <span class="title class_">Container</span>, logClicks ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">Container</span>);</span><br><span class="line">    container = fixture.<span class="property">componentInstance</span>; <span class="comment">// to access properties and methods</span></span><br><span class="line">    element = fixture.<span class="property">nativeElement</span>;       <span class="comment">// to access DOM element</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//specs</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should increment counter&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> div = element.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="comment">//set up subscriber</span></span><br><span class="line">    container.<span class="property">changes</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="title function_">expect</span>(x).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//trigger click on container</span></span><br><span class="line">    div.<span class="title function_">click</span>();</span><br><span class="line">    <span class="comment">//execute all pending asynchronous calls</span></span><br><span class="line">    <span class="title function_">tick</span>();</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
<ul>
<li><code>fakeAsync</code> 所有的非同步行為會被暫停直到 呼叫<code>tick</code></li>
<li><code>fakeAsync</code> / <code>tick</code> 不能跟XHR一起使用</li>
</ul>
<h2 id="Pipe"><a class="header-anchor" href="#Pipe"> </a>Pipe</h2>
<p>Pipe很容易測試，很單純的Class</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Pipe</span>, <span class="title class_">PipeTransform</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;capitalise&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CapitalisePipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="attr">value</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Requires a String as input&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>測試</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Pipe: CapitalisePipe&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> pipe;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [ <span class="title class_">CapitalisePipe</span> ]</span><br><span class="line">  &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">inject</span>([<span class="title class_">CapitalisePipe</span>], <span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">    pipe = p;</span><br><span class="line">  &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//specs</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should work with empty string&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(pipe.<span class="title function_">transform</span>(<span class="string">&#x27;&#x27;</span>)).<span class="title function_">toEqual</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should capitalise&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(pipe.<span class="title function_">transform</span>(<span class="string">&#x27;wow&#x27;</span>)).<span class="title function_">toEqual</span>(<span class="string">&#x27;WOW&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should throw with invalid values&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//must use arrow function for expect to capture exception</span></span><br><span class="line">    <span class="title function_">expect</span>(<span class="function">()=&gt;</span>pipe.<span class="title function_">transform</span>(<span class="literal">undefined</span>)).<span class="title function_">toThrow</span>();</span><br><span class="line">    <span class="title function_">expect</span>(<span class="function">()=&gt;</span>pipe.<span class="title function_">transform</span>()).<span class="title function_">toThrow</span>();</span><br><span class="line">    <span class="title function_">expect</span>(<span class="function">()=&gt;</span>pipe.<span class="title function_">transform</span>()).<span class="title function_">toThrowError</span>(<span class="string">&#x27;Requires a String as input&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
<h2 id="Routes"><a class="header-anchor" href="#Routes"> </a>Routes</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;router-outlet&gt;&lt;/router-outlet&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestComponent</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;h1&gt;Home&lt;/h1&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Home</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;home&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>, <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">TestComponent</span>, <span class="title class_">Home</span>],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">TestComponent</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">TestComponent</span>] </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>測試</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterTestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router/testing&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Router tests&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [</span><br><span class="line">        <span class="title class_">RouterTestingModule</span>.<span class="title function_">withRoutes</span>(routes),</span><br><span class="line">        <span class="title class_">AppModule</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 3 way to test Router</span></span><br><span class="line">  <span class="comment">// async</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can navigate to home (async)&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">TestComponent</span>);</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">Router</span>)</span><br><span class="line">      .<span class="title function_">navigate</span>([<span class="string">&#x27;/home&#x27;</span>])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">expect</span>(location.<span class="property">pathname</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;/home&#x27;</span>)).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line">  &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// fakeAsync/tick</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can navigate to home (fakeAsync/tick)&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">TestComponent</span>);</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">Router</span>).<span class="title function_">navigate</span>([<span class="string">&#x27;/home&#x27;</span>]);</span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    <span class="comment">//execute all pending asynchronous calls</span></span><br><span class="line">    <span class="title function_">tick</span>();    </span><br><span class="line">    <span class="title function_">expect</span>(location.<span class="property">pathname</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;/home&#x27;</span>)).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// done</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can navigate to home (done)&#x27;</span>, <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">TestComponent</span>);</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">Router</span>)</span><br><span class="line">      .<span class="title function_">navigate</span>([<span class="string">&#x27;/home&#x27;</span>])</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">expect</span>(location.<span class="property">pathname</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;/home&#x27;</span>)).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">          <span class="title function_">done</span>();</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Observables"><a class="header-anchor" href="#Observables"> </a>Observables</h2>
<p>如何測試<code>Observable</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Observable: basic observable&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> basic$;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    basic$ = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//pushing values</span></span><br><span class="line">      observer.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">      observer.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line">      observer.<span class="title function_">next</span>(<span class="number">3</span>);</span><br><span class="line">      <span class="comment">//complete stream</span></span><br><span class="line">      observer.<span class="title function_">complete</span>(); </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//specs</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should create the expected sequence (async)&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> expected = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], </span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">    basic$</span><br><span class="line">      .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">        <span class="attr">next</span>: <span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">expect</span>(x).<span class="title function_">toEqual</span>(expected[index++]),</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="EventEmitters"><a class="header-anchor" href="#EventEmitters"> </a>EventEmitters</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;&#123;&#123;counter&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;button (click)=&quot;change(1)&quot;&gt;+1&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button (click)=&quot;change(-1)&quot;&gt;-1&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  <span class="meta">@Output</span>() changes = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counter</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">change</span>(<span class="params">increment</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counter</span> += increment;</span><br><span class="line">    <span class="comment">//we use emit as next is marked as deprecated</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changes</span>.<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">counter</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>測試方式類似Observable</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;EventEmitter: Counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> counter;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">    <span class="attr">providers</span>: [ <span class="title class_">Counter</span> ]</span><br><span class="line">  &#125;));</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">inject</span>([<span class="title class_">Counter</span>], <span class="function"><span class="params">c</span> =&gt;</span> &#123;</span><br><span class="line">    counter = c;</span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//specs</span></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should increment +1 (async)&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter.<span class="property">changes</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="title function_">expect</span>(x).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    counter.<span class="title function_">change</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should decrement -1 (async)&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter.<span class="property">changes</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="title function_">expect</span>(x).<span class="title function_">toBe</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    counter.<span class="title function_">change</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>學習筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS]使用情境(1)-FB爬文</title>
    <url>/2017/01/08/rxjs-context-demo-1/</url>
    <content><![CDATA[<p>這一篇利用Facebook的GraphAPI+RxJS的方式，來爬Facebook的文章. 基本流程是</p>
<ul>
<li>步驟1: 先從一個粉絲頁的id</li>
<li>步驟2: 再從粉絲頁去按讚的id擴展下去
<ul>
<li>步驟2-1: 讀取該粉絲頁的文章(post)</li>
<li>步驟2-2: 如果還有下一頁，根據paging.next的url重複步驟2-2</li>
</ul>
</li>
<li>步驟3: 第二個粉絲頁重複步驟1</li>
<li>步驟4: 將讀取的post顯示在畫面上</li>
</ul>
<span id="more"></span>
<h1 id="Facebook-Graph-API"><a class="header-anchor" href="#Facebook-Graph-API"> </a>Facebook Graph API</h1>
<p>facebook提供GraphAPI的方式可以撈到Facebook Page的相關資料，例如他有按讚的其他專頁，該專頁發佈的文章，利用這樣的特性，就可以利用一個粉絲專頁擴展下去</p>
<p>相關的訊息可以到 <a href="https://developers.facebook.com/">facebook for developers</a>查詢</p>
<h1 id="AngularFire2"><a class="header-anchor" href="#AngularFire2"> </a>AngularFire2</h1>
<p>我利用AngularFire2的Facebook Auth的方式取得accessToken, 詳細使用方式，請參閱<a href="https://github.com/angular/angularfire2">GitHub Repo</a></p>
<p>這裡就不多解釋</p>
<h1 id="範例程式碼"><a class="header-anchor" href="#範例程式碼"> </a>範例程式碼</h1>
<h2 id="基本功能"><a class="header-anchor" href="#基本功能"> </a>基本功能</h2>
<h3 id="組合GraphSQL的查詢網址"><a class="header-anchor" href="#組合GraphSQL的查詢網址"> </a>組合GraphSQL的查詢網址</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">combineUrl</span>(<span class="params">id, fields</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`https://graph.facebook.com/v2.8/<span class="subst">$&#123;id&#125;</span>?fields=<span class="subst">$&#123;fields&#125;</span>&amp;access_token=<span class="subst">$&#123;<span class="variable language_">this</span>.accessToken&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="查詢粉絲團有按過的讚"><a class="header-anchor" href="#查詢粉絲團有按過的讚"> </a>查詢粉絲團有按過的讚</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查詢按讚資料</span></span><br><span class="line"><span class="title function_">queryLikes</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="variable language_">this</span>.<span class="title function_">combineUrl</span>(id, <span class="string">&#x27;likes&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(url).<span class="title function_">map</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">mergeMap</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">likes</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">from</span>(data.<span class="property">likes</span>.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">empty</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>mergemap</code> return new Observable</p>
</li>
<li>
<p><code>Observable.from</code>將一個Array轉換成一個一個的資料</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="title class_">Observable</span>.<span class="title function_">from</span>(arr).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// output: 1</span></span><br><span class="line"><span class="comment">// output: 2</span></span><br><span class="line"><span class="comment">// output: 3</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>Observable.empty()</code>回傳一個完成狀態的空Observable</p>
</li>
</ul>
<h4 id="queryLikes-id-回傳的資料格式"><a class="header-anchor" href="#queryLikes-id-回傳的資料格式"> </a>queryLikes(id)回傳的資料格式</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;likes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Microsoft Visual Studio&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;102038129831681&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Microsoft Taiwan&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;395317217235059&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;cursors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MTAyMDM4MTI5ODMxNjgx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MTk5MTgyNTMzNDUzMjU4&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="查詢粉絲頁發佈的文章"><a class="header-anchor" href="#查詢粉絲頁發佈的文章"> </a>查詢粉絲頁發佈的文章</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查詢文章</span></span><br><span class="line"><span class="title function_">queryPost</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="variable language_">this</span>.<span class="title function_">combineUrl</span>(id, <span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(url);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(url).<span class="title function_">map</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data.<span class="property">posts</span>);</span><br><span class="line">   .<span class="title function_">expand</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (data.<span class="property">paging</span>.<span class="property">next</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">queryNextPage</span>(data.<span class="property">paging</span>.<span class="property">next</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">empty</span>();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>（<strong>重點</strong>) <code>expand</code> 遞迴產生新的Observable</p>
<p>expand會將內部回傳的Observable產生新的一條資料流</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">a</span>().<span class="title function_">expand</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(condition)</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;complete state Observable&#x27;</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">return</span> <span class="title function_">b</span>();</span><br><span class="line">&#125;)</span><br><span class="line">----&gt;<span class="title function_">b</span>().<span class="title function_">expand</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(condition)</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;complete state Observable&#x27;</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">return</span> <span class="title function_">b</span>();</span><br><span class="line">    &#125;)----&gt; <span class="title function_">b</span>().<span class="title function_">expand</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">if</span>(condition)</span><br><span class="line">                 <span class="keyword">return</span> <span class="string">&#x27;complete state Observable&#x27;</span>;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                 <span class="keyword">return</span> <span class="title function_">b</span>();</span><br><span class="line">          &#125;)</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure>
<p>所以基本上，就把expand的運作方式跟遞迴方法的運作方式是一樣的</p>
</li>
</ul>
<h4 id="回傳結果"><a class="header-anchor" href="#回傳結果"> </a>回傳結果</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;posts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Today&#x27;s Xamarin Snack Pack Show w/ James Montemagno -  http://spr.ly/61898OAJ1 - how to get started using Xamarin Workbooks, Interactive documentation tool for exploring a myriad of topics, from the basics of the C# language to fundamentals of computer science and advanced topics surrounding mobile application development.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2017-01-07T00:26:03+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;102038129831681_1188325814536235&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Connect(); // 2016 Session On Demand: SQL Server on Linux: use SQL Tools with SQL Server, http://spr.ly/61898O4PU</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Learn about working with SQL Tools from your platform of choice with SQL Server on Linux. We&#x27;ll show you how to use SQL Server Management Studio (SSMS) and SQL Server Data Tools (SSDT) with SQL Server on Linux. We&#x27;ll also show you new cross-platform SQL tooling experiences that are available now in Visual Studio Code on Linux, macOS, and Windows.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_time&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2017-01-06T20:35:03+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;102038129831681_1188219874546829&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paging&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;previous&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://graph.facebook.com/v2.8/102038129831681/posts?since=1483748763&amp;access_token=EAACEdEose0cBABoGAAqt7WETzqNjXUZBtq6o79mxOdkxrSpwSRp8zTiJHgbGv17AdWXf6mDZBNiZAGmcGjfdVVsghNgGTBjc6ldlAZB2dxwXxSvm9LvEe17bcUqZA5mVztwYjik3uGUnAxT49AjiL0TCYxVx2PUOhKMbOasAIhwZDZD&amp;limit=25&amp;__paging_token=enc_AdBPC2zAP0PXPi25e6aNZBdZA84vevZAF0d7ZB2Y3rMxwaza4UOBaMY90NY8Wk7XHLYHBooiINQQGGdgCeGDoB47yE13L7q7C6HqQMIeKZBnYAGdDZBQZDZD&amp;__previous=1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;next&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://graph.facebook.com/v2.8/102038129831681/posts?access_token=EAACEdEose0cBABoGAAqt7WETzqNjXUZBtq6o79mxOdkxrSpwSRp8zTiJHgbGv17AdWXf6mDZBNiZAGmcGjfdVVsghNgGTBjc6ldlAZB2dxwXxSvm9LvEe17bcUqZA5mVztwYjik3uGUnAxT49AjiL0TCYxVx2PUOhKMbOasAIhwZDZD&amp;limit=25&amp;until=1482769022&amp;__paging_token=enc_AdBrD7ij1AmakbpdTZBZBWlkHTnuLKyUa2CCa0h6nhojVTa2SDOb3Bg5nJaUBkDjZC2Azk51C4o9DadNDveK5OuKHFsPU7blZBdDP5DTGFt5bysmvAZDZD&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="如果還有下一頁資料時，繼續讀取的方法"><a class="header-anchor" href="#如果還有下一頁資料時，繼續讀取的方法"> </a>如果還有下一頁資料時，繼續讀取的方法</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查詢下一頁的文章</span></span><br><span class="line"><span class="title function_">queryNextPage</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(url).<span class="title function_">map</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="開始執行"><a class="header-anchor" href="#開始執行"> </a>開始執行</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">start</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> startId = <span class="string">&#x27;xxxxx&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">queryLikes</span>(startId)</span><br><span class="line">        .<span class="title function_">expand</span>(<span class="function">(<span class="params">page: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (page &amp;&amp; !<span class="variable language_">this</span>.<span class="property">cancelling</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">queryLikes</span>(page.<span class="property">id</span>).<span class="title function_">delay</span>(<span class="number">3000</span>);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">empty</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">take</span>(<span class="number">10</span>)</span><br><span class="line">        .<span class="title function_">mergeMap</span>(<span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">queryPost</span>(page.<span class="property">id</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function"><span class="params">posts</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">list</span> = [...<span class="variable language_">this</span>.<span class="property">list</span>, ...posts.<span class="property">data</span>];</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣子就可以爬出很多文章了.</p>
<ul>
<li>
<p>小備註: take(10) 只是我用來限制撈資料的次數而已</p>
<p>​</p>
</li>
</ul>
<h2 id="執行結果"><a class="header-anchor" href="#執行結果"> </a>執行結果</h2>
<p><img src="https://c1.staticflickr.com/1/449/31336407074_47d276b348_o.png" alt=""></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>RxJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]Router Guards</title>
    <url>/2017/01/14/angular-router-canactivate/</url>
    <content><![CDATA[<p>通常我們會希望限制某些網址只有某特定規則者才可以進入或離開，Angular的Router提供了一系列的個方法來幫助我們</p>
<span id="more"></span>
<p>Angular的Router提供了一系列的方法，可以讓我們來決定是否允許使用者進入或是離開頁面</p>
<ul>
<li><a href="https://angular.io/docs/ts/latest/guide/router.html#can-activate-guard">CanActivate</a> : 避免瀏覽到該網址</li>
<li><a href="https://angular.io/docs/ts/latest/guide/router.html#can-activate-child-guard">CanActivateChild</a> : 讓子路由套用<code>CanActivate</code>規則，避免瀏覽到該網址</li>
<li><a href="https://angular.io/docs/ts/latest/guide/router.html#can-deactivate-guard">CanDeactivate</a> : 避免離開目前的網址</li>
<li><a href="https://angular.io/docs/ts/latest/guide/router.html#resolve-guard">Resolve</a> : 在前往瀏覽網頁前先預載資料</li>
<li><a href="https://angular.io/docs/ts/latest/guide/router.html#can-load-guard">CanLoad</a> : 避免載入非同步的路由設定</li>
</ul>
<h1 id="CanActivate"><a class="header-anchor" href="#CanActivate"> </a>CanActivate</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125;     <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CanActivate</span> &#125;    <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;AuthGuard#canActivate called&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這是基本的CanActivate的程式架構，而在Route的地方，設定的方式如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">adminRoutes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">AdminComponent</span>,</span><br><span class="line">    <span class="attr">canActivate</span>: [<span class="title class_">AuthGuard</span>]</span><br><span class="line">  &#125;];  </span><br></pre></td></tr></table></figure>
<ul>
<li>canActivate回傳true時，可以進入，回傳false時，無法進入</li>
</ul>
<h2 id="進階應用"><a class="header-anchor" href="#進階應用"> </a>進階應用</h2>
<p><code>canActivate</code>接受Observable型態的function，範例如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> authService: AuthService, <span class="keyword">private</span> router: Router</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>, <span class="attr">state</span>: <span class="title class_">RouterStateSnapshot</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="literal">true</span>).<span class="title function_">delay</span>(<span class="number">1000</span>)</span><br><span class="line">        .<span class="title function_">do</span>(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(val == <span class="literal">false</span>)&#123;</span><br><span class="line">                 <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;/login&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CanActivateChild"><a class="header-anchor" href="#CanActivateChild"> </a>CanActivateChild</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuardService</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="params">route: ActivatedRouteSnapshot, state: RouterStateSnapshot</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;AuthGuard#canActivate called&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canActivateChild</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>, <span class="attr">state</span>: <span class="title class_">RouterStateSnapshot</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;AuthGuard#canActivateChild called&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">canActivate</span>(route, state);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Route Config的地方</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;page1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Page1Component</span>,   </span><br><span class="line">    <span class="attr">canActivateChild</span>: [</span><br><span class="line">      <span class="title class_">AuthGuardService</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Page1DetailComponent</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>這樣的設定方式，會讓每一個child Route都會跑canActivate的方法，就不需要一個一個的設定了，非常方便</p>
<h1 id="CanDeactivate"><a class="header-anchor" href="#CanDeactivate"> </a>CanDeactivate</h1>
<p><code>canDeactivate</code>比較特殊，可以搭配Component一起使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125;    <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CanDeactivate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125;    <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">CanComponentDeactivate</span> &#123;</span><br><span class="line"> <span class="attr">canDeactivate</span>: <span class="function">() =&gt;</span> <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CanDeactivateGuard</span> <span class="keyword">implements</span> <span class="title class_">CanDeactivate</span>&lt;<span class="title class_">CanComponentDeactivate</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">canDeactivate</span>(<span class="params">component: Page2Component, </span></span><br><span class="line"><span class="params">                 route: ActivatedRouteSnapshot, </span></span><br><span class="line"><span class="params">                 state: RouterStateSnapshot</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> component.<span class="property">canDeactivate</span> ? component.<span class="title function_">canDeactivate</span>() : <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Component需Implements上述的<code>CanComponentDeactivate</code> Interface, 才可以讓CanDeactivateGuard作用</li>
<li>當canDeactivate() 回傳 false時，則無法離開該頁面，回傳 true時，才可以離開</li>
</ul>
<h1 id="Resolve"><a class="header-anchor" href="#Resolve"> </a>Resolve</h1>
<p>請參考<a href="http://blog.kevinyang.net/2016/12/11/ng2-router-resolve/">[Angular] Router Resolve</a></p>
<h1 id="CanLoad"><a class="header-anchor" href="#CanLoad"> </a>CanLoad</h1>
<ul>
<li>
<p><code>CanLoad</code>會封住<code>PRELOAD</code>的功能，我們需要使用<code>PRELOAD</code>來增加效能，所以這裡建議使用CanActivate來控制</p>
</li>
<li>
<p>至於Preloading Strategy就待下回分曉</p>
<p>​</p>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/docs/ts/latest/guide/router.html#!#can-activate-guard">ROUTING &amp; NAVIGATION</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]Laravel 5.3邂逅</title>
    <url>/2017/01/15/angular2-laravel/</url>
    <content><![CDATA[<p>Laravel 5.x版以後樣板的部分就內建使用Vue.js的方法。</p>
<p>假設今天我想要使用Angular CLI方式搭配Laravel的方式來開發，那又應該怎麼做呢，以下提供一個方式，歡迎討論</p>
<span id="more"></span>
<h1 id="建立Laravel專案"><a class="header-anchor" href="#建立Laravel專案"> </a>建立Laravel專案</h1>
<ul>
<li>
<p>修改路由設定檔，routes/web.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">| Web Routes</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Here is where you can register web routes for your application. These</span></span><br><span class="line"><span class="comment">| routes are loaded by the RouteServiceProvider within a group which</span></span><br><span class="line"><span class="comment">| contains the &quot;web&quot; middleware group. Now create something great!</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// put all your REST routes inside api-group</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>([<span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;api&#x27;</span>], function() &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Auth</span>::<span class="title function_ invoke__">routes</span>();</span><br><span class="line"><span class="comment">// this route is for Angular and it should be placed after all other back end routes</span></span><br><span class="line"><span class="comment">// just keep it at the bottom</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#123;any&#125;&#x27;</span>, function (<span class="variable">$any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;any&#x27;</span>, <span class="string">&#x27;.*&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h1 id="建立Angular專案"><a class="header-anchor" href="#建立Angular專案"> </a>建立Angular專案</h1>
<h2 id="使用CLI來建立專案"><a class="header-anchor" href="#使用CLI來建立專案"> </a>使用CLI來建立專案</h2>
<p>在laravel的根目錄下，執行以下指令</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ng new &lt;projectName&gt; --routing --skip-commit</span><br></pre></td></tr></table></figure>
<p>或是，自己新增一個存放的資料夾後並切換到該資料夾下，執行以下指令</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ng init &lt;projectName&gt; --routing --skip-commit</span><br></pre></td></tr></table></figure>
<p>執行完後，一個Angular的專案就建置完成了</p>
<h2 id="設定proxy-conf-json"><a class="header-anchor" href="#設定proxy-conf-json"> </a>設定proxy.conf.json</h2>
<ul>
<li>
<p>新增<code>proxy.config.json</code>檔案，依Laravel serve的網站位置做修改</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;/api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改<code>pageage.json</code>的<code>scripts</code>部分</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ng serve --proxy-config proxy.conf.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h2 id="設定angular-cli-json"><a class="header-anchor" href="#設定angular-cli-json"> </a>設定angular-cli.json</h2>
<ul>
<li>將laravel專案的public資料夾下的檔案都複製到angular專案的src資料夾下
<ul>
<li>index.php</li>
<li>.htaccess</li>
<li>robots.txt</li>
<li>web.config</li>
</ul>
</li>
<li>將那些檔案都新增到<code>angular-cli.json</code>的<code>assets</code>區段內</li>
<li>設定<code>outDir</code>到laravel的publich資料夾路徑</li>
</ul>
<h1 id="開發時期"><a class="header-anchor" href="#開發時期"> </a>開發時期</h1>
<p>在開發時期，因為上述的設定方式，已經讓前端與後端完全的切割了，所以在開發時期就可以分別開發。</p>
<ul>
<li>Angular的網站可以透過npm start的方式去執行ng serve with proxy config的動作，由於proxy會將api相關的呼叫，對應到laravel的網站去，所以在呼叫api的部分，就不需要額外去指定host url的部分</li>
<li>Laravel後端的部分，就專心於API資料的提供等動作</li>
</ul>
<h1 id="部屬Laravel專案"><a class="header-anchor" href="#部屬Laravel專案"> </a>部屬Laravel專案</h1>
<ul>
<li>
<p>如果要部署的時候，Angular可以透過以下的指令將Angular的程式bundle/AOT輸出到所設定的輸出目錄下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ng build --prod --aot --output-hashing=media</span><br></pre></td></tr></table></figure>
<ul>
<li>—output-hasing的參數是在angular-cli beta25.5版以後提供的，可以設定所輸出的bundle是否要加上hash值</li>
</ul>
</li>
<li>
<p>輸出到Laravel專案的public資料夾下會有一個index.html的檔案，將該檔案的內容複製到laravel起始頁面的blade.php檔案(預設: welcome.blade.php) (第一次修改即可)</p>
</li>
<li>
<p>依Laravel部署網站的方式部署即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Laravel5</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Preloading策略</title>
    <url>/2017/01/21/angular2-preloading/</url>
    <content><![CDATA[<p>Angular有提供<code>loadChildren</code>的Lazy loading的模式，也有提供<code>preloadingStrategy</code>的策略模式可供設定，每種設定的方式會影響<code>loadChildren</code>的行為，當然也可以自訂preloading的規則</p>
<span id="more"></span>
<h1 id="使用前提"><a class="header-anchor" href="#使用前提"> </a>使用前提</h1>
<ol>
<li>使用ngModule來分類封裝程式</li>
<li>使用router的loadChildren的方法</li>
</ol>
<h1 id="Router-loadChildren的預設行為"><a class="header-anchor" href="#Router-loadChildren的預設行為"> </a>Router loadChildren的預設行為</h1>
<p>預設lazy loading的行為是直到該頁面有被執行時，才會將該部分的js檔案從伺服器端下載到本機，這樣的方法，大大的降低第一次讀取頁面時，所下載的js檔案大小，但是這也帶出另外一個問題，假設我所指定的lazy loading的module是一個很大的module, 那我們原本想要避免的問題，仍存在著。</p>
<p>基於上述理由，Angular提供PreloadingStrategy的設定，讓我們來決定loadChildren的行為，可以設定的方式如下</p>
<ol>
<li><code>NoPreloading</code> &lt;預設值&gt;</li>
<li><code>PreloadAllModules</code></li>
<li>自訂PreloadingStrategy</li>
</ol>
<h1 id="PreloadAllModules"><a class="header-anchor" href="#PreloadAllModules"> </a>PreloadAllModules</h1>
<p>如同在觀看Youtube影片時，Youtube在我們觀看的時候，仍會在背景持續的下載該影片後續的內容到我們的電腦上(那條灰色的進度條)，這樣子的模式，讓我們在觀看影片時，不會有任何lag的情形發生</p>
<p>而<code>PreloadAllModules</code>也是提供一樣的效果，Angular在第一個頁面顯示後，才會陸續的將其他lazyLoading的module下載到本機上，這樣子的話，當使用者瀏覽到該地方時，就不需要再等待下載的時間了，使用者也就不會感受到停頓的感覺。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes,</span><br><span class="line">    &#123; <span class="attr">preloadingStrategy</span>: <span class="title class_">PreloadAllModules</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<h1 id="自訂PreloadingStrategy"><a class="header-anchor" href="#自訂PreloadingStrategy"> </a>自訂PreloadingStrategy</h1>
<p>那如果我想要的效果是，有些事先載入，有些不要的時候，這時我們也可以自訂PreloadingStategy</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SelectivePreloadingStrategy</span> <span class="keyword">implements</span> <span class="title class_">PreloadingStrategy</span> &#123;</span><br><span class="line">  <span class="attr">preloadedModules</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preload</span>(<span class="attr">route</span>: <span class="title class_">Route</span>, <span class="attr">load</span>: <span class="function">() =&gt;</span> <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt;): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.<span class="property">data</span> &amp;&amp; route.<span class="property">data</span>[<span class="string">&#x27;preload&#x27;</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">load</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">of</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的規則是，如果路由設定的data有指定preload，而且該值為真實，則會執行預先載入，反之，則不會。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes,</span><br><span class="line">    &#123; <span class="attr">preloadingStrategy</span>: <span class="title class_">SelectivePreloadingStrategy</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    <span class="title class_">SelectivePreloadingStrategy</span></span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>如果想要提升效能跟使用者體驗的話，善用<code>NgModule</code> 、<code>Lazy Loading</code>與<code>preloadingStrategy</code>就可以達到非常好的效果</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/docs/ts/latest/guide/router.html">ROUTING &amp; NAVIGATION</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Router Event</title>
    <url>/2017/01/21/angular2-router-event/</url>
    <content><![CDATA[<p>Router Event到底可以怎麼應用，來探討一下吧</p>
<span id="more"></span>
<h1 id="enableTracing"><a class="header-anchor" href="#enableTracing"> </a>enableTracing</h1>
<p>RouterModule.forRoot 的第二個參數裡，可以透過 enableTracing: true，將路由事件的變化，顯示在console上</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes,&#123; <span class="attr">enableTracing</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>
<p>在console上的顯示結果</p>
<p><img src="https://c1.staticflickr.com/1/613/32449847065_d060e8e4bf_o.png" alt=""></p>
<h1 id="Router"><a class="header-anchor" href="#Router"> </a>Router</h1>
<p>也可以從Router的Event內取得跟上面一樣的資訊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span>, <span class="title class_">NavigationEnd</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> router: Router</span>) &#123;</span><br><span class="line">    router.<span class="property">events</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">event</span> =&gt;</span> event <span class="keyword">instanceof</span> <span class="title class_">NavigationEnd</span>)</span><br><span class="line">    .<span class="title function_">pairwise</span>().<span class="title function_">subscribe</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>router.events是屬於持續發生的事件，所以這個監控路由變化的時間點需寫在最上層的component裡，不然就沒有辦法取得旅遊的變化，或是有重複subscribe的情形發生</p>
<p>這裡的程式碼所使用了<code>filter</code>來過濾router event的，我只允許NavigationEnd Event通過，</p>
<p><code>pairwise()</code>是讓Observable的資料，兩個兩個一組的輸出，輸出效果如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">----1----2----3----4----5----6|</span><br><span class="line">---------12---23---34---45---56|</span><br></pre></td></tr></table></figure>
<p>而這一段的程式碼可以讓我們知道路由的變化，例如 知道是從那一個頁面切到目前的頁面。</p>
<h1 id="Navigation-Event"><a class="header-anchor" href="#Navigation-Event"> </a>Navigation Event</h1>
<p>每一次導覽的事件，到最後只會有三種狀態：成功，取消，失敗. 有兩種方式可以觀察</p>
<ol>
<li>router.events 觀察者會有以下幾種事件類型產生</li>
</ol>
<ul>
<li><code>NavigationStart</code> when navigation stars.</li>
<li><code>NavigationEnd</code> when navigation succeeds.</li>
<li><code> NavigationCancel</code> when navigation is canceled.</li>
<li><code> NavigationError</code> when navigation fails.</li>
</ul>
<p>另外一種是直接呼叫 router.navigate 或是 router.naigateByUrl，這兩種方法會回傳Promise</p>
<ul>
<li>resolve true = navigation succeeds</li>
<li>resolve false = navigation gets canceled.</li>
<li>reject = navigation fails</li>
</ul>
<p>但這個並不是這此次的討論範圍內</p>
<h1 id="應用篇"><a class="header-anchor" href="#應用篇"> </a>應用篇</h1>
<p>利用上述的特性，我們可以將其加以應用，以下有幾個範例可以參考</p>
<h2 id="Show-Spinner"><a class="header-anchor" href="#Show-Spinner"> </a>Show Spinner</h2>
<p>在頁面轉換間，顯示spinner</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isStart</span>(<span class="params">e: Event</span>): <span class="built_in">boolean</span> &#123; </span><br><span class="line">  <span class="keyword">return</span> e <span class="keyword">instanceof</span> <span class="title class_">NavigationStart</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isEnd</span>(<span class="params">e: Event</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> e <span class="keyword">instanceof</span> <span class="title class_">NavigationEnd</span> ||</span><br><span class="line">         e <span class="keyword">instanceof</span> <span class="title class_">NavigationCancel</span> || </span><br><span class="line">         e <span class="keyword">instanceof</span> <span class="title class_">NavigationError</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">router.<span class="property">events</span></span><br><span class="line">.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">isStart</span>(e) || <span class="title function_">isEnd</span>(e)) <span class="comment">// Returns Observable&lt;boolean&gt;.</span></span><br><span class="line">.<span class="title function_">map</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">isStart</span>(e)) <span class="comment">// Returns Observable&lt;boolean&gt;.</span></span><br><span class="line">.<span class="title function_">distinctUntilChanged</span>() </span><br><span class="line"><span class="title function_">subscribe</span>(<span class="function"><span class="params">showSpinner</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">if</span> (showSpinner) &#123;</span><br><span class="line">		spinner.<span class="title function_">show</span>(); &#125; </span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">        spinner.<span class="title function_">hide</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Custom-Error-Handler"><a class="header-anchor" href="#Custom-Error-Handler"> </a>Custom Error Handler</h2>
<p>自訂如果頁面導覽失敗時，可以自訂錯誤訊息</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">treatCertainErrorsAsCancelations</span>(<span class="params">error</span>) &#123; <span class="keyword">if</span> (error isntanceof <span class="title class_">CancelException</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//cancelation &#125; else &#123;</span></span><br><span class="line"><span class="keyword">throw</span> error; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(<span class="variable constant_">ROUTES</span>, &#123;<span class="attr">errorHandler</span>: treatCertainErrorsAsCanc\</span><br><span class="line">elations&#125;)]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MailModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Change Detection</title>
    <url>/2017/01/23/angular2-change-detection/</url>
    <content><![CDATA[<p><img src="https://farm1.staticflickr.com/740/32472149965_a7d79c9969_o.png" alt=""></p>
<p>Angular會讓View上面的結果與Model的值同步，大部分的時候，我們並不需要去管 <code>change detection</code>怎麼運作的，但是，了解 <code>change detection</code>並在適當的時候選擇對的 <code>change detection strategy</code>，可以增加系統的效能</p>
<span id="more"></span>
<h1 id="何時會觸發change-detection"><a class="header-anchor" href="#何時會觸發change-detection"> </a>何時會觸發change detection</h1>
<ul>
<li>DOM Events (click, keyup, etc)</li>
<li>AJAX Requests</li>
<li>Timers (setTimeout(), setInterval())</li>
</ul>
<h2 id="Zone"><a class="header-anchor" href="#Zone"> </a>Zone</h2>
<p>Angular透過Zone來監控上述行為的變化</p>
<h1 id="運作原理"><a class="header-anchor" href="#運作原理"> </a>運作原理</h1>
<p><img src="https://farm1.staticflickr.com/640/32352266961_1eeb7fba5a_o.png" alt=""></p>
<p>Angular在runtime的時候會為每一個component建立一個<code>Change Detector</code></p>
<p><img src="https://farm1.staticflickr.com/689/31630339334_175106c15d_o.png" alt=""></p>
<p>Change Detector的運行方向是 Top -&gt; Down，在Default模式下，不論是否有改變，仍會繼續往下檢查</p>
<p><img src="https://farm1.staticflickr.com/358/32095374120_6656c40dcf_o.png" alt=""></p>
<p><img src="https://farm1.staticflickr.com/663/31662279353_4ac2e09719_o.png" alt=""></p>
<p>而在 <code>OnPush</code>模式下，如果該節點沒有發生異動時，就不會往下檢查了</p>
<p><img src="https://farm1.staticflickr.com/437/32480298545_a7aafccf9e_o.png" alt=""></p>
<h1 id="JS101-Value-Types-Reference-Types比較"><a class="header-anchor" href="#JS101-Value-Types-Reference-Types比較"> </a>JS101: Value Types &amp; Reference Types比較</h1>
<p>在進入Change Detection Strategy之前，先重新溫習一下Value Types和Reference Type</p>
<h2 id="Value-Types-Stack-Memory"><a class="header-anchor" href="#Value-Types-Stack-Memory"> </a>Value Types (Stack Memory)</h2>
<p>包含以下類別</p>
<ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
</ul>
<p>特性</p>
<ol>
<li>Stack Memory</li>
<li>Immutable</li>
<li>compared by value</li>
<li>copied by value</li>
</ol>
<h2 id="Reference-Types-Heap-Memory"><a class="header-anchor" href="#Reference-Types-Heap-Memory"> </a>Reference Types (Heap Memory)</h2>
<p>包含以下類別</p>
<ul>
<li>object</li>
<li>array</li>
<li>function</li>
</ul>
<p>特性</p>
<ol>
<li>Heap Memory</li>
<li>mutable</li>
<li>compared by reference</li>
<li>copied by reference</li>
</ol>
<h1 id="Change-Detection-Strategies"><a class="header-anchor" href="#Change-Detection-Strategies"> </a>Change Detection Strategies</h1>
<p><code>Default</code>和 <code>OnPush</code> 細節部份，可參考這篇<a href="http://blog.kevinyang.net/2016/06/05/angular2-ChangeDetectionStrategy/">[Angular] ChangeDetectionStrategy</a></p>
<p>根據上面的運作原理，我們可以針對個別的Change Detector做策略上的設定，例如下面的圖</p>
<p><img src="https://farm1.staticflickr.com/753/32328351742_3920853cee_o.png" alt=""></p>
<h2 id="OnPush"><a class="header-anchor" href="#OnPush"> </a>OnPush</h2>
<p><code>OnPush</code>的設定方法如下列程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span>, <span class="title class_">ChangeDetectionStrategy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MovieComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() movie;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當該Component的<code>changeDetection</code>被設定為<code>ChangeDetectionStrategy.OnPush</code>時，這個Component的檢查關注點就只會在 @Input的這個物件上，所以如果想要讓該Component的 <code>DoCheck</code>被觸發，就必須重新指定新的Input Value。</p>
<p>而這裡應用的的原理是，單獨改變Object內的值而不重新給予一個新的Object，在檢查時，將舊object和異動後的object比較後，結果為兩個是同一個object，所以視為無異動(Reference value的特性)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">title</span>: <span class="string">&#x27;kevin&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.<span class="property">title</span> = <span class="string">&#x27;KEVIN&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 == obj2);</span><br><span class="line">&gt; <span class="literal">true</span></span><br><span class="line">obj2 = &#123;<span class="attr">title</span>: <span class="string">&#x27;KEVIN&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 == obj2);</span><br><span class="line">&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p><strong>用正確的ChangeDetectionStrategy，減少系統檢查資料異動狀態的次數，就可以大大的提升系統的效能。</strong></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 自訂Decorators</title>
    <url>/2017/01/30/angular2-decorators/</url>
    <content><![CDATA[<p>Decorators 是 function 掛有 <code>@</code>前綴符號，可以用於 <code>class</code>、<code>paramemter</code>、<code>method</code> 或 <code>property</code>的前面。用來提供額外的資訊。</p>
<p>Angular也將Decorators的功能，應用於本身的架構內，例如 <code>@Component</code>、<code>@NgModule</code>等，本篇文章會討論如果我們也想要自訂Decorators時，我們要怎麼去實作。</p>
<span id="more"></span>
<h1 id="自訂Decorator"><a class="header-anchor" href="#自訂Decorator"> </a>自訂Decorator</h1>
<p>就如前言所說的，Decorator是一個function, 如果要使用他時，可以在 class/parameter/method/property前面使用 <code>@&lt;function&gt;</code> 就可以了。</p>
<p>一個基本的Decorator會長這樣子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">myDecorator</span>(<span class="params">target</span>)&#123;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而使用他的方式如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; myDecorator &#125; <span class="keyword">from</span> <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@myDecorator</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">class1</span>&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是最基本的使用方式，在decorator的 target 參數，會取得使用者的class/parameter/method/property的程式碼內容</p>
<h1 id="應用情境"><a class="header-anchor" href="#應用情境"> </a>應用情境</h1>
<h2 id="Property-Decorators"><a class="header-anchor" href="#Property-Decorators"> </a>Property Decorators</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ReadOnly</span>(<span class="params">defaultValue</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target, key: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">        target[key] = defaultValue;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, &#123; <span class="attr">writable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="meta">@ReadOnly</span>(<span class="string">&quot;app works!&quot;</span>)</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeTitle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&#x27;change app title&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這個例子，是自訂一個ReadOnly的Decorator，功能是讓所設定到的屬性有預設值並且是唯讀狀態, 無法被修改。</p>
<p>如果試著去修改該屬性，如 #16行要做的事情，就會發生錯誤訊息</p>
<p><img src="https://farm1.staticflickr.com/767/31761591604_72a01010a5_o.png" alt=""></p>
<h2 id="Class-Decorators"><a class="header-anchor" href="#Class-Decorators"> </a>Class Decorators</h2>
<p>如果將Decorators應用在Class上，我們就可以改寫/擴充constructor的行為</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">prefix?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// save a reference to the original constructor</span></span><br><span class="line">        <span class="keyword">var</span> original = target;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a utility function to generate instances of a class</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">construct</span>(<span class="params">constructor, args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="attr">c</span>: <span class="built_in">any</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> constructor.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">            &#125;</span><br><span class="line">            c.<span class="property"><span class="keyword">prototype</span></span> = constructor.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the new constructor behavior</span></span><br><span class="line">        <span class="keyword">var</span> <span class="attr">f</span>: <span class="built_in">any</span> = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(prefix + <span class="string">&quot; - &quot;</span> + original.<span class="property">name</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">construct</span>(original, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// copy prototype so instanceof operator still works</span></span><br><span class="line">        f.<span class="property"><span class="keyword">prototype</span></span> = original.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return new constructor (will override original)</span></span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>輸出結果</p>
<p><img src="https://farm1.staticflickr.com/445/32226359900_be1f10ac0c_o.png" alt=""></p>
<h1 id="現有Library有使用自訂Decorators的"><a class="header-anchor" href="#現有Library有使用自訂Decorators的"> </a>現有Library有使用自訂Decorators的</h1>
<ul>
<li>
<p><a href="https://github.com/ngrx/effects">ngrx/effects</a></p>
<p>ngrx/store搭配 effects套件，讓angular內在設定redux動作時，變得比較直覺，程式碼也精簡很多</p>
</li>
</ul>
<div class="video-container"><iframe src="https://www.youtube.com/embed/Rw9ZQW2z0M8" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h1 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h1>
<p>Decorators真的很強大，但是就目前這個階段，我尚未想到到底在哪種情境下是可以使用的，但是早一點知道這個東西的存在也好，因為實作上並不複雜，只是不知道在何時何地會用到他。</p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://youtu.be/Rw9ZQW2z0M8">ngAir 90 - ngrx with Mike Ryan</a></li>
<li><a href="https://angular-2-training-book.rangle.io/handout/features/decorators.html">Decorators</a></li>
<li><a href="https://toddmotto.com/angular-decorators">A deep dive on Angular decorators</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 使用 ngrx/store 來實做 Redux Style&#39;s App</title>
    <url>/2017/02/05/angular-ngrx-store/</url>
    <content><![CDATA[<p>Angular 裡面有許多管理 Application State 的方法 ，<code>ngrx</code> 是其中一種。ngrx 提供幾個 libraries 可以讓將 RxJS 與 Redux Style 結合在一起。</p>
<span id="more"></span>
<h1 id="設定"><a class="header-anchor" href="#設定"> </a>設定</h1>
<p>為每一個資料集建立一個 Reducer Function，這個 Reducer 就負責用來更新 Store 內的資料。而各個 Reducer  集合起來就是整個應用程式的資料狀態了。下面為Reducer的範例程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// counter.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ActionReducer</span>, <span class="title class_">Action</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">INCREMENT</span> = <span class="string">&#x27;INCREMENT&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DECREMENT</span> = <span class="string">&#x27;DECREMENT&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">RESET</span> = <span class="string">&#x27;RESET&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">counterReducer</span>(<span class="params">state: <span class="built_in">number</span> = <span class="number">0</span>, action: Action</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">INCREMENT</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="attr">DECREMENT</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="attr">RESET</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 AppModule 下，將Reducer註冊到 Store裡，範例如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StoreModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; counterReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;./counter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">StoreModule</span>.<span class="title function_">provideStore</span>(&#123; <span class="attr">counter</span>: counterReducer &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>在 Component 要讀取 store內的資料時，程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Store</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAppComponent</span> &#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> store: Store&lt;AppState&gt;</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">counter</span> = store.<span class="title function_">select</span>(<span class="string">&#x27;counter&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這裡要留意的是， store.select 出來的物件是 Observable 物件。</p>
<p>操作資料的方式，可以透過以下的方式做操作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">	  <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">	  payload?: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">dispatch</span>(&lt;<span class="variable constant_">ACTION</span>&gt;action);</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAppComponent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> store: Store&lt;AppState&gt;</span>)&#123;</span><br><span class="line">      ...    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>)&#123;      </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">store</span>.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="variable constant_">INCREMENT</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Redux的運作流程"><a class="header-anchor" href="#Redux的運作流程"> </a>Redux的運作流程</h2>
<blockquote>
<p>Action -&gt; Dispatch -&gt; Reducer -&gt; Store -&gt; View</p>
</blockquote>
<p>基本的動作流程是，在 Controller的 method 裡去 Dispatch an Action，之後所有的Reducer都會判斷是否有定義該 Action 行為，如果有的話，就執行該區塊的會重新指定新的資料到 Store 裡。</p>
<h1 id="實際範例"><a class="header-anchor" href="#實際範例"> </a>實際範例</h1>
<h2 id="AppModule"><a class="header-anchor" href="#AppModule"> </a>AppModule</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">StoreModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EffectsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/effects&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppRoutingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-routing.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PostReducer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./post.reducer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyEffects</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./post.effects&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="title class_">StoreModule</span>.<span class="title function_">provideStore</span>(&#123;</span><br><span class="line">      <span class="attr">posts</span>: <span class="title class_">PostReducer</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">EffectsModule</span>.<span class="title function_">runAfterBootstrap</span>(<span class="title class_">MyEffects</span>)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>這裡需要自己寫幾個 Function</p>
<ol>
<li>PostReducer</li>
<li>PostEffects</li>
</ol>
<h2 id="AppComponent"><a class="header-anchor" href="#AppComponent"> </a>AppComponent</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Store</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Models/app-state.model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Posts</span>, <span class="title class_">Post</span>, <span class="title class_">PostComment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Models/post.model&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;app works!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">posts</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Posts</span>&gt;;</span><br><span class="line">  <span class="attr">post</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Post</span>&gt;;</span><br><span class="line">  <span class="attr">comment</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">PostComment</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> store: Store&lt;AppState&gt;</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">posts</span> = store.<span class="title function_">select</span>(<span class="function"><span class="params">state</span>=&gt;</span> state.<span class="property">posts</span>);</span><br><span class="line">    <span class="comment">// or 你也可以這樣子寫</span></span><br><span class="line">    <span class="comment">// this.posts = store.select(&#x27;posts&#x27;);</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">store</span>.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;QUERY&quot;</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="title function_">display</span>(<span class="params">post: Post</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">store</span>.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;DETAIL&quot;</span>, <span class="attr">payload</span>: post &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  &#123;&#123;title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let post of (posts | async).list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> (<span class="attr">click</span>)=<span class="string">&quot;display(post)&quot;</span>&gt;</span>&#123;&#123; post | json &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123; post | async | json &#125;&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;&#123; comment | async | json &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>AppComponent</code>裡面有兩個動作，</p>
<ol>
<li>當 OnInit 時，取得 Post 清單。</li>
<li>當點選 Post 時，顯示 Post 的詳細資料及 Comment 資料</li>
</ol>
<p>這裡會搭配 @ngrx/effects 一起使用，@ngrx/effects 是用來處理任何side-effect的事情，包括 API Call等，這部分的程式碼會寫在 <code>PostEffects</code>裡</p>
<h2 id="PostEffects"><a class="header-anchor" href="#PostEffects"> </a>PostEffects</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Http</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Actions</span>, <span class="title class_">Effect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/effects&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Action</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Posts</span>, <span class="title class_">Post</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./Models/post.model&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/switchMap&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PostEffects</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> actions$: Actions, <span class="keyword">private</span> http: Http</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Effect</span>() <span class="attr">posts$</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Action</span>&gt; = <span class="variable language_">this</span>.<span class="property">actions$</span></span><br><span class="line">  .<span class="title function_">ofType</span>(<span class="string">&quot;QUERY&quot;</span>)</span><br><span class="line">  .<span class="title function_">switchMap</span>(<span class="function"><span class="params">action</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">res</span>=&gt;</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;QUERY_SUCCESS&#x27;</span>, <span class="attr">payload</span>: &#123; <span class="attr">list</span>: res.<span class="title function_">json</span>()&#125;&#125;));</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Effect</span>() <span class="attr">comments$</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Action</span>&gt; = <span class="variable language_">this</span>.<span class="property">actions$</span></span><br><span class="line">  .<span class="title function_">ofType</span>(<span class="string">&#x27;DETAIL&#x27;</span>)</span><br><span class="line">  .<span class="title function_">switchMap</span>(<span class="function"><span class="params">action</span> =&gt;</span>         <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">`https://jsonplaceholder.typicode.com/posts/<span class="subst">$&#123;action.payload.id&#125;</span>/comments`</span>)</span><br><span class="line">                    .<span class="title function_">map</span>(<span class="function"><span class="params">res</span> =&gt;</span> (&#123; </span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;COMMENT&#x27;</span>, </span><br><span class="line">                        <span class="attr">payload</span>: &#123; <span class="attr">detail</span>: action.<span class="property">payload</span>, <span class="attr">comment</span>: res.<span class="title function_">json</span>()&#125;</span><br><span class="line">                    &#125;))</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ngrx 提供了<code>effects</code>的 library， 用來處理 side-effect，搭配 RxJS 的 Operator，來組合 service 或是其他的行為，透過這樣子的方式，可以讓資料處理上單純化。</p>
<h2 id="PostReducer"><a class="header-anchor" href="#PostReducer"> </a>PostReducer</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Action</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngrx/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Posts</span>, <span class="title class_">Post</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Models/post.model&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">initState</span>: <span class="title class_">Posts</span> = &#123;</span><br><span class="line">    <span class="attr">list</span>: &lt;Post[]&gt;[],</span><br><span class="line">    detail: &lt;Post&gt;&#123;&#125;,</span><br><span class="line">    comment: undefined</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export function PostReducer(state: Posts = initState, action: Action) &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">        case &quot;QUERY_SUCCESS&quot;:</span><br><span class="line">            return Object.assign(&#123;&#125;, state, action.payload);</span><br><span class="line">       case &quot;COMMENT&quot;:</span><br><span class="line">            return Object.assign(&#123;&#125;, state, action.payload);</span><br><span class="line">        default:</span><br><span class="line">            return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Reducer 是用來更新 Store 的一個 function，每一個的更新是透過給予一個新的值，而不是修改既有的值，這樣子可以避免一些 JavaScript mutable 的問題產生。</p>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>@ngrx/store 真的提供一個很簡易但容易管理的 Application State 管理機制。或許在以後的文章可以有更實務上的應用情境。</p>
<p>其實，Redux 也有類似的處理機制，相關的內容可以參閱以下的網址</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/ngrx/store">ngrx/store</a></li>
<li><a href="https://github.com/ngrx/effects">ngrx/effects</a></li>
<li><a href="https://github.com/angular-redux/store">angular-redux/store</a></li>
<li><a href="https://github.com/angular-redux/store/blob/master/docs/epics.md">Side-Effect Management Using Epics</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS]使用情境(2)- Component Input watcher</title>
    <url>/2017/02/12/rxjs-context-demo-2/</url>
    <content><![CDATA[<p>另外一個簡單的使用情境：Angular Component的 @Input Value，我要怎麼持續併動態的根據 @Input Value 取得相對應的資料呢?</p>
<span id="more"></span>
<p>假設我有一個 Component，這個 Component 有一個 @Input() 的 id 欄位，我想要根據這個 id 的值，每 5 秒跟主機要一次資料，但是這個 id 有可能會被改變掉，所以從主機要資料回來的條件，也要跟著改變。以下解法，可以參考看看，並非唯一解法。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DetailComponent</span> <span class="keyword">implements</span> <span class="title class_">OnChanges</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">sub$</span>: <span class="title class_">Subscription</span>;</span><br><span class="line">  <span class="attr">subject</span>: <span class="title class_">Subject</span>&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">sub$</span> = <span class="title class_">Observable</span>.<span class="title function_">combineLatest</span>(</span><br><span class="line">      <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>,<span class="number">5000</span>), </span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">subject</span>, </span><br><span class="line">      <span class="function">(<span class="params">t, s</span>) =&gt;</span> s)</span><br><span class="line">      .<span class="title function_">switchMap</span>(<span class="function"><span class="params">id</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">getData</span>(id))</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">data</span> = x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnChanges</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subject</span>.<span class="title function_">next</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sub$</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getData</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="comment">// here can be http call</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">of</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡用到 <code>combineLatest</code> 這個 operator，有三個參數要輸入，前兩個接受 Observable，第三個參數是前兩個 Observable 最後一次分別所產生的資料，可以透過第三個參數將兩條 Stream 資料傳出或是傳給下一個 operator 使用。</p>
<p>以上的程式碼，就可以做到每 5 秒取一次資料，再取資料時，會依當下 id 這個欄位作為取資料的條件。</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>RxJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS]使用情境(3)- 利用 BehaviorSubject 來管理使用者登入狀態</title>
    <url>/2017/02/26/rxjs-context-demo-3/</url>
    <content><![CDATA[<p>RxJS 裡的 Subject 有 4 種類型，Subject、BehaviorSubject、ReplaySubject 和 AsyncSubject，每一種類型的 Subject 都有各自的特性及使用時機，這次會使用 <code>BehaviorSubject</code>來管理使用者的登入狀態</p>
<span id="more"></span>
<h1 id="BehaviorSubject"><a class="header-anchor" href="#BehaviorSubject"> </a>BehaviorSubject</h1>
<p>BehaviorSubject  與一般的 Subject 有什麼不一樣，差別有兩個</p>
<ol>
<li>BehaviorSubject 可以給予初始值</li>
<li>每一個 Observer 都可以在註冊的當下，立刻取得目前 BehavoirSubject 的值 (以下皆簡稱為 Subject)</li>
</ol>
<p>這兩種特性，就非常適合用在使用者登入狀態管理的這種情境</p>
<h1 id="使用情境"><a class="header-anchor" href="#使用情境"> </a>使用情境</h1>
<p>使用者登入基本上，狀態就兩種，登入與尚未登入，而每一個頁面都可以在取得該使用者目前的登入狀態。也可以即時知道已登入的使用者登出的時間點。</p>
<p>根據上列的描述，我們會實作一個 UserService，用來執行跟管理使用者的登入，登出行為及狀態。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BehaviorSubject</span>, <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    isLoginSubject = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>&lt;<span class="built_in">boolean</span>&gt;(<span class="variable language_">this</span>.<span class="title function_">hasToken</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果有取得token，表示使用者有登入系統</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">hasToken</span>() : <span class="built_in">boolean</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> !!<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  登入使用者，並通知所有訂閱者</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="title function_">login</span>() : <span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;JWT&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isLoginSubject</span>.<span class="title function_">next</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 登出使用者，並通知所有訂閱者</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="title function_">logout</span>() : <span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isLoginSubject</span>.<span class="title function_">next</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@returns</span> &#123;<span class="type">Observable&lt;T&gt;</span>&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="title function_">isLoggedIn</span>() : <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isLoginSubject</span>.<span class="title function_">asObservable</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Component 的使用方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../auth.service&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-main-nav&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li *ngIf=&quot;!(isLoggedIn | async)&quot; (click)=&quot;authService.login()&gt;</span></span><br><span class="line"><span class="string">        &lt;a&gt;Login&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li *ngIf=&quot;(isLoggedIn | async)&quot; (click)=&quot;authService.logout()&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;a&gt;Logout&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MainNavComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  isLoggedIn : <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"> <span class="keyword">public</span> userService : UserService </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isLoggedIn</span> = userService.<span class="title function_">isLoggedIn</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣子就完成了一個陽春型的使用者登入狀態管理 service。</p>
<h1 id="最後"><a class="header-anchor" href="#最後"> </a>最後</h1>
<p>其實，善用 Subject 與 Subscribe 的特性，可以讓 Component 裡的程式碼減少很多，Component之間的溝通也變得很簡單。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="http://reactivex.io/rxjs/manual/overview.html#behaviorsubject">BehaviroSubject</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Router 的 resetConfig 方法</title>
    <url>/2017/03/03/angular2-router-resetconfig/</url>
    <content><![CDATA[<p>這次要介紹的是 Router 的 resetConfig 方法，這個方法可以讓我們動態的設定路由。以下就詳細的介紹一下</p>
<span id="more"></span>
<h1 id="resetConfig"><a class="header-anchor" href="#resetConfig"> </a>resetConfig</h1>
<blockquote>
<p>resetConfig(config: Routes) : void</p>
</blockquote>
<p>Resets the configuration used for navigation and generating links.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">resetConfig</span>([</span><br><span class="line"> &#123; <span class="attr">path</span>: <span class="string">&#x27;team/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">TeamCmp</span>,</span><br><span class="line">   <span class="attr">children</span>: [</span><br><span class="line">       &#123; <span class="attr">path</span>: <span class="string">&#x27;simple&#x27;</span>, <span class="attr">component</span>: <span class="title class_">SimpleCmp</span> &#125;,</span><br><span class="line">       &#123; <span class="attr">path</span>: <span class="string">&#x27;user/:name&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserCmp</span> &#125;</span><br><span class="line"> 	]&#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>我們可以透過這樣子的方式，重新設定路由的規則。</p>
<p>這裡有個地方要注意的是，如果所指定的 component 沒有在現有的路由規則中使用時，則需要再 <code>ngModule </code>的設定檔內的 <code>entryComponents</code> 設定，而這裡也跟要動態產生 component 的情況是一樣的。</p>
<h1 id="進階使用法"><a class="header-anchor" href="#進階使用法"> </a>進階使用法</h1>
<p>那可不可以從 server 端下載路由的設定檔，答案是可以的，但是這裡需要留意的是，從 server 取下來的設定檔，裡面的 component 是文字型態，而路由設定檔的 component 是不能接受文字，只能接受 <code>componentType</code> 型態</p>
<p>所以要從 Angular 的應用程式裡面取得 componentType 的方式，可以參考以下的程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span>, <span class="title class_">ComponentFactoryResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line"></span><br><span class="line">  factories = [];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http, </span></span><br><span class="line"><span class="params">              <span class="keyword">private</span> router: Router, </span></span><br><span class="line"><span class="params">              <span class="keyword">private</span> resolver: ComponentFactoryResolver</span>) &#123;</span><br><span class="line">    <span class="comment">// resolver[&#x27;_factories&#x27;] 可取到 ngModule 裡 bootstrap, </span></span><br><span class="line">    <span class="comment">// entryComponents 裡定義的 Component</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">factories</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">resolver</span>[<span class="string">&#x27;_factories&#x27;</span>].<span class="title function_">values</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">	...    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;./routes.json&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">resetConfig</span>(<span class="variable language_">this</span>.<span class="title function_">processRoute</span>(data));</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">processRoute</span>(<span class="params">routes: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _finalRoutes = [];</span><br><span class="line">    routes.<span class="title function_">forEach</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 根據 componentType 的名稱取回對應的 componentType</span></span><br><span class="line">      <span class="keyword">let</span> <span class="attr">factory</span>: <span class="built_in">any</span> = <span class="variable language_">this</span>.<span class="property">factories</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">x: <span class="built_in">any</span></span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="property">componentType</span>.<span class="property">name</span> === r.<span class="property">component</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      _finalRoutes.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: r.<span class="property">path</span>,</span><br><span class="line">        <span class="attr">component</span>: factory.<span class="property">componentType</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> _finalRoutes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上的寫法，就可以完成從 server 端取得路由設定檔後並更新 Angular 應用程式的路由設定檔，希望這段程式碼對你們有幫助</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p><a href="https://angular.io/docs/ts/latest/api/router/index/Router-class.html#!#resetConfig-anchor">API</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Custom Validator</title>
    <url>/2017/03/10/angular-custom-validator/</url>
    <content><![CDATA[<p>Angular 內建的表單驗證項目其實不多，網路上雖然也有人寫好的驗證擴充套件可以使用。但是，真正強大的是 Angular 允許我們自訂驗證規則，且很容易的套用到系統內，當然也可以簡單的讓其他專案使用。</p>
<p>這裡將會介紹 Custom Validator 的幾種實作方式</p>
<span id="more"></span>
<h1 id="什麼是-Validator"><a class="header-anchor" href="#什麼是-Validator"> </a>什麼是 Validator</h1>
<p>Validator 是用來做資料驗證的，資料驗證的結果只會有兩種，<code>null</code> 或 <code>錯誤訊息</code>，Angular 內建的 validator 有這些</p>
<ol>
<li>required: 必填欄位</li>
<li>minLength: 最短長度</li>
<li>maxLength: 最長長度</li>
<li>pattern: regex 驗證</li>
</ol>
<p>內建的表單驗證功能真的很少，所以是否有其他人寫好的驗證規則可以使用呢? 其實是有的，<a href="https://github.com/yuyang041060120/ng2-validation">GitHub 連結</a> 在此</p>
<p>如果想自己自訂驗證規則，要怎麼寫呢?</p>
<h1 id="自訂-Validator"><a class="header-anchor" href="#自訂-Validator"> </a>自訂 Validator</h1>
<h2 id="Version-1"><a class="header-anchor" href="#Version-1"> </a>Version 1</h2>
<p>最簡單的 Validator 就是一個 function，但是這樣子的寫法，只能在 Reactive Form (model-driven) 下使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">validateEmail</span>(<span class="params">c: FormControl</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable constant_">EMAIL_REGEXP</span> = <span class="regexp">/^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="variable constant_">EMAIL_REGEXP</span>.<span class="title function_">test</span>(c.<span class="property">value</span>) ? <span class="literal">null</span> : &#123;</span><br><span class="line">    <span class="attr">validateEmail</span>: &#123;</span><br><span class="line">      <span class="attr">valid</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">form</span> = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">email</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>, validateEmail)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要在 template-driven 表單下也可以使用這個驗證方法的話，又該怎麼辦?</p>
<h2 id="Version-2"><a class="header-anchor" href="#Version-2"> </a>Version 2</h2>
<p>我們可以透過 <code>directive</code> 的方式將我們自訂的驗證規則給 template-driven 表單使用，在需要被驗證的 <code>FormControl</code> 上，加上我們設定的屬性即可，所以我們需要來建立一個 <code>directive</code>，建立步驟如下</p>
<p>使用 CLI 的指令</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">ng generate directive emailValidator</span><br></pre></td></tr></table></figure>
<p>所產生出來的程式碼會長這樣</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[appEmailValidator]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EmailValidatorDirective</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<p>稍微調整一下 Class 的名稱，讓這個更容易辨識，並將之前寫好的 validateEmail 方法搬進來</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">NG_VALIDATORS</span>, <span class="title class_">FormControl</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">validateEmail</span>(<span class="params">c: FormControl</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[validateEmail][ngModel]&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>:[</span><br><span class="line">    &#123; <span class="attr">provide</span>: <span class="variable constant_">NG_VALIDATORS</span>, <span class="attr">useValue</span>: validateEmail, <span class="attr">multi</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EmailValidator</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>selector 的部分，<code>[valiateEmail]</code> 和 <code>[ngModel]</code>，表示要使用這個 directive 的條件是 element 裡需要同時擁有這兩個 attribute 才會生效，範例如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">myForm</span>=<span class="string">&quot;ngForm&quot;</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">ngModel</span> <span class="attr">validateEmail</span>  #<span class="attr">email</span>=<span class="string">&quot;ngModel&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; email.errors | json &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Version-3"><a class="header-anchor" href="#Version-3"> </a>Version 3</h2>
<p>上面的寫法，雖然是可以跑，但是，程式碼看起來就有點散落在四處，有沒有可以把驗證的規則包在 <code>directive</code> 裡面呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">NG_VALIDATORS</span>, <span class="title class_">Validator</span>, <span class="title class_">FormControl</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[validateEmail][ngModel]&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123; <span class="attr">provide</span>: <span class="variable constant_">NG_VALIDATORS</span>, </span><br><span class="line">     <span class="attr">useExisting</span>: <span class="title function_">forwardRef</span>(<span class="function">() =&gt;</span> <span class="title class_">EmailValidator</span>), </span><br><span class="line">     <span class="attr">multi</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">EmailValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line">  <span class="attr">validator</span>: <span class="title class_">Function</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">validate</span>(<span class="params">c: FormControl</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable constant_">EMAIL_REGEXP</span> = <span class="regexp">/^(([^&lt;&gt;()\[\]\\.,;:\s@&quot;]+(\.[^&lt;&gt;()\[\]\\.,;:\s@&quot;]+)*)|(&quot;.+&quot;))@((\[[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]&#123;2,&#125;))$/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">EMAIL_REGEXP</span>.<span class="title function_">test</span>(c.<span class="property">value</span>) ? <span class="literal">null</span> : &#123;</span><br><span class="line">      <span class="attr">validateEmail</span>: &#123;</span><br><span class="line">        <span class="attr">valid</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修正了幾個地方</p>
<ol>
<li>class  需要實作 <code>Validator</code></li>
<li>使用 <code>useExisting</code> 來設定 <code>provider</code></li>
<li>使用 <a href="https://angular.io/docs/ts/latest/api/core/index/forwardRef-function.html">forwardRef</a> 來避免初始時 NG_VALIDATORS token 尚未產生的錯誤</li>
<li>使用 multi 來擴充 <code>NG_VALIDTORS </code>的功能</li>
<li>將原本的驗證 function 的程式碼搬進  validate 裡面</li>
</ol>
<p>到這個階段，template-driven 的表單已經可以使用了，可是， model-driven 的表單就不能直接在樣版上使用，原因是 selector 裡並沒有給予 <code>formControlName</code> 使用的條件，所以，再來將缺少的部分補上</p>
<h2 id="Version-4"><a class="header-anchor" href="#Version-4"> </a>Version 4</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; Directive &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; NG_VALIDATORS, Validator, AbstractControl &#125; from &#x27;@angular/forms&#x27;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">   selector: &#x27;[validateEmail][ngModel],[formControlName][ngModel],[formControl][ngModel]&#x27;,</span><br><span class="line">  providers: [</span><br><span class="line">   ...</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class EmailValidator implements Validator &#123;</span><br><span class="line">  ...</span><br><span class="line">  validate(c: AbstractControl) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是一個自訂驗證的基本型的寫法</p>
<h1 id="顯示結果"><a class="header-anchor" href="#顯示結果"> </a>顯示結果</h1>
<p><img src="https://content.screencast.com/users/chgc/folders/Snagit/media/42deda5a-1d4e-4159-b2ac-4111afdedab5/03.10.2017-23.05.GIF" alt=""></p>
<h1 id="補充資訊"><a class="header-anchor" href="#補充資訊"> </a>補充資訊</h1>
<ul>
<li>provide 的部分有兩種可以設定 <code>NG_VALIDATORS</code> 和 <code>NG_ASYNC_VALIDATORS</code>，class 的 validator 的寫法是一樣的，唯一的差別是回傳的型別， <code>NG_ASYNC_VALIDATORS</code> 可以回傳 Promise/Observable 的型別。可參考延伸閱讀的第一篇文章</li>
</ul>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://netbasal.com/angular-2-forms-create-async-validator-directive-dd3fd026cb45#.kqtmuxumh"> Create Async Validator Directive</a></li>
<li><a href="https://scotch.io/tutorials/how-to-implement-a-custom-validator-directive-confirm-password-in-angular-2">How to Implement a Custom Validator Directive (Confirm Password) in Angular 2</a></li>
<li><a href="https://blog.thoughtram.io/angular/2016/03/14/custom-validators-in-angular-2.html">FORWARD REFERENCES IN ANGULAR</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 結構性 Directive</title>
    <url>/2017/03/23/angular-structural-directive/</url>
    <content><![CDATA[<p>Angular 的 <code>directive</code> 真的很厲害，幾乎什麼都能做，除了可以擴充原本 element 的功能外，也還可以做到結構上的控制變化，而這一類型的稱為 <code>Structural directive</code></p>
<span id="more"></span>
<blockquote>
<p>Structural directives—change the DOM layout by adding and removing DOM elements.</p>
</blockquote>
<p>我們常用的  <code>ngIf</code> 就是其中之一，我們可以透過這一款的 directive 來新增或移除 DOM element。但在這之前，需要重新介紹 <code>*</code> 這一個語法糖</p>
<h1 id="asterisk"><a class="header-anchor" href="#asterisk"> </a>asterisk (*)</h1>
<p><code>*</code> 會用 <code>&lt;ng-template&gt;</code> 將 directive 所處的 element  包起來。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;hero&quot;</span> &gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 上述將會轉換成下述</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span>  [<span class="attr">ngIf</span>]=<span class="string">&quot;hero&quot;</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ng-template 裡的內容可以透過 <code>TemplateRef</code> 取得</p>
<h1 id="簡易版"><a class="header-anchor" href="#簡易版"> </a>簡易版</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123; <span class="attr">selector</span>: <span class="string">&#x27;[myIf]&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyIfDirective</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> templateRef: TemplateRef&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> viewContainer: ViewContainerRef</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>() <span class="keyword">set</span> <span class="title function_">myIf</span>(<span class="params">condition: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">      <span class="comment">// 新增 DOM</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">viewContainer</span>.<span class="title function_">createEmbeddedView</span>(<span class="variable language_">this</span>.<span class="property">templateRef</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 移除 DOM</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">viewContainer</span>.<span class="title function_">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 directive 的方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">myIf</span>=<span class="string">&#x27;condition&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>templteRef</code> 的部分，請參閱上一區段的說明</p>
</li>
<li>
<p><code>ViewContainerRef</code> 是指目前 <code>directive</code>的所在位置</p>
</li>
</ul>
<p>透過這兩個物件，就可以完成 <code>structural directive</code>的實作，其實並不困難</p>
<h1 id="稍微進階版"><a class="header-anchor" href="#稍微進階版"> </a>稍微進階版</h1>
<p>我們也可以將 service 注入到 directive 裡面，透過 RxJS 的幫助，可以讓 directive 處於自動監測的狀態，當全域某特定變數改變時，directive 也會跟著改變。聽起來很神奇，那實作起來會很困難嗎?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123; <span class="attr">selector</span>: <span class="string">&#x27;[isAuth]&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyIfDirective</span> &#123;</span><br><span class="line">  user$ : <span class="title class_">Subscription</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> templateRef: TemplateRef&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> viewContainer: ViewContainerRef</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> userService: UserService</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user$</span> = <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="property">user</span></span><br><span class="line">      .<span class="title function_">do</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">viewContainer</span>.<span class="title function_">clear</span>())</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">isLogin</span>)</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewContainer</span>.<span class="title function_">createEmbeddedView</span>(<span class="variable language_">this</span>.<span class="property">templateRef</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user$</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打完收工，其實還蠻簡單的。</p>
<p>這寫法跟寫 Component 根本就沒有差別，這就是 Angular 的優點，程式碼格式的一致性很高。</p>
<h1 id="參考閱讀"><a class="header-anchor" href="#參考閱讀"> </a>參考閱讀</h1>
<ul>
<li><a href="https://angular.io/docs/ts/latest/guide/structural-directives.html">STRUCTURAL DIRECTIVES</a></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Angular 4 以後，原本的<code>&lt;template&gt;</code> 會使用 <code>&lt;ng-template&gt;</code> 替代 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular 4 - Universal with ASP.NET Core</title>
    <url>/2017/03/26/angular4-universal-aspnetcore/</url>
    <content><![CDATA[<p>Angular 4 將 Universal 的功能整合到 <code>@angular/platform-server</code> 裡，目前(2017/3/26) dotnet cli 所提供的 SPA 樣板尚未更新至最新版，如果在這個時間點想要更新到最新版時，就需要手動更新部分的檔案內容，這篇文章就是這描述這些異動，或許在未來的某一個時間點後，就不需要這麼麻煩了</p>
<span id="more"></span>
<h1 id="引言"><a class="header-anchor" href="#引言"> </a>引言</h1>
<p>以下的操作步驟，有可能在未來的版本更新後就不需要了，請詳閱相關的說明文件。</p>
<h1 id="步驟1-package-json"><a class="header-anchor" href="#步驟1-package-json"> </a>步驟1: package.json</h1>
<p>手動更新 package.json 的內容</p>
<h2 id="scripts"><a class="header-anchor" href="#scripts"> </a>scripts</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;karma start ClientApp/test/karma.conf.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postinstall&quot;</span>: <span class="string">&quot;npm run build:webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build:webpack&quot;</span>: <span class="string">&quot;npm run webpack-vendor &amp;&amp; npm run webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;webpack --progress&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-vendor&quot;</span>: <span class="string">&quot;webpack --config webpack.config.vendor.js --progress&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Dependencies"><a class="header-anchor" href="#Dependencies"> </a>Dependencies</h2>
<h3 id="替換"><a class="header-anchor" href="#替換"> </a>替換</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;@angular/common&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/compiler&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/core&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/forms&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/http&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/platform-browser&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/platform-browser-dynamic&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/platform-server&quot;</span>: <span class="string">&quot;^2.4.5&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/router&quot;</span>: <span class="string">&quot;^3.4.5&quot;</span>,</span><br></pre></td></tr></table></figure>
<p>將上列的 @angular 模組的版本更換成下列的版本</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;@angular/animations&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/common&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/compiler&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/compiler-cli&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/core&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/forms&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/http&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/platform-browser&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/platform-browser-dynamic&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/platform-server&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/router&quot;</span>: <span class="string">&quot;^4.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;@angular/tsc-wrapped&quot;</span>: <span class="string">&quot;^0.5.0&quot;</span>,</span><br></pre></td></tr></table></figure>
<h3 id="移除"><a class="header-anchor" href="#移除"> </a>移除</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;angular2-platform-node&quot;</span>: <span class="string">&quot;~2.0.11&quot;</span>,</span><br><span class="line"><span class="string">&quot;angular2-universal&quot;</span>: <span class="string">&quot;^2.1.0-rc.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;angular2-universal-patch&quot;</span>: <span class="string">&quot;^0.2.1&quot;</span>,</span><br><span class="line"><span class="string">&quot;angular2-universal-polyfills&quot;</span>: <span class="string">&quot;^2.1.0-rc.1&quot;</span>,</span><br></pre></td></tr></table></figure>
<h1 id="步驟2-webpack-config-vendor-ts"><a class="header-anchor" href="#步驟2-webpack-config-vendor-ts"> </a>步驟2: webpack.config.vendor.ts</h1>
<h2 id="移除-v2"><a class="header-anchor" href="#移除-v2"> </a>移除</h2>
<p>將下列的兩項 library 給刪除掉</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">            <span class="attr">vendor</span>: [</span><br><span class="line">                <span class="string">&#x27;angular2-universal&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;angular2-universal-polyfills&#x27;</span>,</span><br><span class="line">              ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="步驟3-異動-ClientApp"><a class="header-anchor" href="#步驟3-異動-ClientApp"> </a>步驟3: 異動 ClientApp</h1>
<h2 id="異動"><a class="header-anchor" href="#異動"> </a>異動</h2>
<h3 id="boot-client-ts"><a class="header-anchor" href="#boot-client-ts"> </a>boot-client.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./polyfills/browser.polyfills&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser-dynamic&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppBrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/browser-app.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElemTagName = <span class="string">&#x27;app&#x27;</span>; <span class="comment">// Update this if you change your root component selector</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Enable either Hot Module Reloading or production mode</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>[<span class="string">&#x27;hot&#x27;</span>]) &#123;</span><br><span class="line">    <span class="variable language_">module</span>[<span class="string">&#x27;hot&#x27;</span>].<span class="title function_">accept</span>();</span><br><span class="line">    <span class="variable language_">module</span>[<span class="string">&#x27;hot&#x27;</span>].<span class="title function_">dispose</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Before restarting the app, we create a new root element and dispose the old one</span></span><br><span class="line">        <span class="keyword">const</span> oldRootElem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(rootElemTagName);</span><br><span class="line">        <span class="keyword">const</span> newRootElem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(rootElemTagName);</span><br><span class="line">        oldRootElem.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(newRootElem, oldRootElem);</span><br><span class="line">        platform.<span class="title function_">destroy</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boot the application, either now or when the DOM content is loaded</span></span><br><span class="line"><span class="keyword">const</span> platform = <span class="title function_">platformBrowserDynamic</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">bootApplication</span> = (<span class="params"></span>) =&gt; &#123; platform.<span class="title function_">bootstrapModule</span>(<span class="title class_">AppBrowserModule</span>); &#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">&#x27;complete&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">bootApplication</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, bootApplication);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>移除 <code>import 'angular2-universal-polyfills/browser'</code></li>
<li>移除 <code>import &#123; platformUniversalDynamic &#125; from 'angular2-universal';</code></li>
<li>新增 <code>import './polyfills/browser.polyfills';</code></li>
<li>新增 <code>import &#123; platformBrowserDynamic &#125; from '@angular/platform-browser-dynamic';</code></li>
<li>修正 <code>platform</code> 的建立方式，從 <code>platformUniversalDynamic</code> 更換成  <code>platformBrowserDynamic</code></li>
<li>修正 bootstrapMoudle，從 <code>AppModule</code> 更換成 <code>AppBrowserModule</code></li>
</ul>
<h3 id="boot-server-ts"><a class="header-anchor" href="#boot-server-ts"> </a>boot-server.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./polyfills/server.polyfills&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">INITIAL_CONFIG</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createServerRenderer, <span class="title class_">RenderResult</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;aspnet-prerendering&#x27;</span>;</span><br><span class="line"><span class="comment">// Grab the (Node) server-specific NgModule</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppServerModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/server-app.module&#x27;</span>;</span><br><span class="line"><span class="comment">// Temporary * the engine will be on npm soon (`@universal/ng-aspnetcore-engine`)</span></span><br><span class="line"><span class="keyword">import</span> &#123; ngAspnetCoreEngine &#125; <span class="keyword">from</span> <span class="string">&#x27;./polyfills/temporary-aspnetcore-engine&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">enableProdMode</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createServerRenderer</span>(<span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Platform-server provider configuration</span></span><br><span class="line">    <span class="keyword">const</span> providers = [&#123;</span><br><span class="line">        <span class="attr">provide</span>: <span class="variable constant_">INITIAL_CONFIG</span>,</span><br><span class="line">        <span class="attr">useValue</span>: &#123;</span><br><span class="line">            <span class="attr">document</span>: <span class="string">&#x27;&lt;app&gt;&lt;/app&gt;&#x27;</span>, <span class="comment">// Our Root application document</span></span><br><span class="line">            <span class="attr">url</span>: params.<span class="property">url</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ngAspnetCoreEngine</span>(providers, <span class="title class_">AppServerModule</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (&#123;</span><br><span class="line">            <span class="attr">html</span>: response.<span class="property">html</span>,</span><br><span class="line">            <span class="attr">globals</span>: response.<span class="property">globals</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="app-app-module-ts"><a class="header-anchor" href="#app-app-module-ts"> </a>app/app.module.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/app/app.component&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavMenuComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/navmenu/navmenu.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/home/home.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FetchDataComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/fetchdata/fetchdata.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CounterComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/counter/counter.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">    <span class="attr">declarations</span>: [</span><br><span class="line">        <span class="title class_">AppComponent</span>,</span><br><span class="line">        <span class="title class_">NavMenuComponent</span>,</span><br><span class="line">        <span class="title class_">CounterComponent</span>,</span><br><span class="line">        <span class="title class_">FetchDataComponent</span>,</span><br><span class="line">        <span class="title class_">HomeComponent</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">imports</span>: [</span><br><span class="line">        <span class="title class_">CommonModule</span>,</span><br><span class="line">        <span class="title class_">HttpModule</span>,</span><br><span class="line">        <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>([</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;counter&#x27;</span>, <span class="attr">component</span>: <span class="title class_">CounterComponent</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;fetch-data&#x27;</span>, <span class="attr">component</span>: <span class="title class_">FetchDataComponent</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">redirectTo</span>: <span class="string">&#x27;home&#x27;</span> &#125;</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>移除 <code>UniversalModule</code></li>
<li>移除 <code>bootstrap</code> 區塊</li>
<li>新增 <code>CommonModule</code>、<code>HttpModule</code></li>
</ul>
<h2 id="新增檔案"><a class="header-anchor" href="#新增檔案"> </a>新增檔案</h2>
<h3 id="browser-app-module-ts"><a class="header-anchor" href="#browser-app-module-ts"> </a>browser-app.module.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/app/app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserAnimationsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser/animations&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">    <span class="attr">imports</span>: [</span><br><span class="line">        <span class="title class_">BrowserAnimationsModule</span>,</span><br><span class="line">        <span class="title class_">BrowserModule</span>.<span class="title function_">withServerTransition</span>(&#123;</span><br><span class="line">            <span class="attr">appId</span>: <span class="string">&#x27;my-app-id&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title class_">AppModule</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppBrowserModule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="server-app-module-ts"><a class="header-anchor" href="#server-app-module-ts"> </a>server-app.module.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ServerModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NoopAnimationsModule</span>  &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser/animations&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/app/app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">    <span class="attr">bootstrap</span>: [ <span class="title class_">AppComponent</span> ],</span><br><span class="line">    <span class="attr">imports</span>: [</span><br><span class="line">        <span class="title class_">NoopAnimationsModule</span>,</span><br><span class="line">        <span class="title class_">BrowserModule</span>.<span class="title function_">withServerTransition</span>(&#123;</span><br><span class="line">            <span class="attr">appId</span>: <span class="string">&#x27;my-app-id&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title class_">ServerModule</span>,</span><br><span class="line">        <span class="title class_">AppModule</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppServerModule</span> &#123;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="polyfills-temporary-aspnetcore-engine-ts"><a class="header-anchor" href="#polyfills-temporary-aspnetcore-engine-ts"> </a>polyfills/temporary-aspnetcore-engine.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  ********* TEMPORARILY HERE **************</span></span><br><span class="line"><span class="comment"> * - will be on npm soon -</span></span><br><span class="line"><span class="comment"> *   import &#123; ngAspnetCoreEngine &#125; from `@universal/ng-aspnetcore-engine`;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Type</span>, <span class="title class_">NgModuleRef</span>, <span class="title class_">ApplicationRef</span>, <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; platformDynamicServer, <span class="title class_">PlatformState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ngAspnetCoreEngine</span>(<span class="params"></span></span><br><span class="line"><span class="params">    providers: Provider[],</span></span><br><span class="line"><span class="params">    ngModule: Type&lt;&#123;&#125;&gt;</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;&#123; <span class="attr">html</span>: <span class="built_in">string</span>, <span class="attr">globals</span>: &#123; <span class="attr">styles</span>: <span class="built_in">string</span>, <span class="attr">title</span>: <span class="built_in">string</span>, <span class="attr">meta</span>: <span class="built_in">string</span>, [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; &#125;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> platform = <span class="title function_">platformDynamicServer</span>(providers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> platform.<span class="title function_">bootstrapModule</span>(&lt;<span class="title class_">Type</span>&lt;&#123;&#125;&gt;&gt;ngModule).<span class="title function_">then</span>(<span class="function">(<span class="params">moduleRef: NgModuleRef&lt;&#123;&#125;&gt;</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> <span class="attr">state</span>: <span class="title class_">PlatformState</span> = moduleRef.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">PlatformState</span>);</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">appRef</span>: <span class="title class_">ApplicationRef</span> = moduleRef.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">ApplicationRef</span>);</span><br><span class="line"></span><br><span class="line">            appRef.<span class="property">isStable</span></span><br><span class="line">                .<span class="title function_">filter</span>(<span class="function">(<span class="params">isStable: <span class="built_in">boolean</span></span>) =&gt;</span> isStable)</span><br><span class="line">                .<span class="title function_">first</span>()</span><br><span class="line">                .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">stable</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Fire the TransferCache</span></span><br><span class="line">                    <span class="keyword">const</span> bootstrap = moduleRef.<span class="property">instance</span>[<span class="string">&#x27;ngOnBootstrap&#x27;</span>];</span><br><span class="line">                    bootstrap &amp;&amp; <span class="title function_">bootstrap</span>();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// The parse5 Document itself</span></span><br><span class="line">                    <span class="keyword">const</span> <span class="variable constant_">AST_DOCUMENT</span> = state.<span class="title function_">getDocument</span>();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Strip out the Angular application</span></span><br><span class="line">                    <span class="keyword">const</span> htmlDoc = state.<span class="title function_">renderToString</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(htmlDoc);</span><br><span class="line">                    <span class="keyword">const</span> <span class="variable constant_">APP_HTML</span> = htmlDoc.<span class="title function_">substring</span>(</span><br><span class="line">                        htmlDoc.<span class="title function_">indexOf</span>(<span class="string">&#x27;&lt;body&gt;&#x27;</span>) + <span class="number">6</span>,</span><br><span class="line">                        htmlDoc.<span class="title function_">indexOf</span>(<span class="string">&#x27;&lt;/body&gt;&#x27;</span>)</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Strip out Styles / Meta-tags / Title</span></span><br><span class="line">                    <span class="keyword">const</span> <span class="variable constant_">STYLES</span> = [];</span><br><span class="line">                    <span class="keyword">const</span> <span class="variable constant_">META</span> = [];</span><br><span class="line">                    <span class="keyword">const</span> <span class="variable constant_">LINKS</span> = [];</span><br><span class="line">                    <span class="keyword">let</span> <span class="variable constant_">TITLE</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">const</span> <span class="variable constant_">STYLES_STRING</span> = htmlDoc.<span class="title function_">substring</span>(</span><br><span class="line">                        htmlDoc.<span class="title function_">indexOf</span>(<span class="string">&#x27;&lt;style ng-transition&#x27;</span>),</span><br><span class="line">                        htmlDoc.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;&lt;/style&gt;&#x27;</span>) + <span class="number">8</span></span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// console.log(AST_DOCUMENT);</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">const</span> <span class="variable constant_">HEAD</span> = <span class="variable constant_">AST_DOCUMENT</span>.<span class="property">head</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable constant_">HEAD</span>.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">let</span> element = <span class="variable constant_">HEAD</span>.<span class="property">children</span>[i];</span><br><span class="line"></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">name</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(element.<span class="property">children</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (element.<span class="property">name</span> === <span class="string">&#x27;title&#x27;</span>) &#123;</span><br><span class="line">                            <span class="variable constant_">TITLE</span> = element.<span class="property">children</span>[<span class="number">0</span>].<span class="property">data</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Broken after 4.0 (worked in rc)</span></span><br><span class="line">                        <span class="comment">// if (element.name === &#x27;style&#x27;) &#123;</span></span><br><span class="line">                        <span class="comment">//     let styleTag = &#x27;&lt;style &#x27;;</span></span><br><span class="line">                        <span class="comment">//     for (let key in element.attribs) &#123;</span></span><br><span class="line">                        <span class="comment">//         styleTag += `$&#123;key&#125;=&quot;$&#123;element.attribs[key]&#125;&quot;&gt;`;</span></span><br><span class="line">                        <span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//     styleTag += `$&#123;element.children[0].data&#125;&lt;/style&gt;`;</span></span><br><span class="line">                        <span class="comment">//     STYLES.push(styleTag);</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (element.<span class="property">name</span> === <span class="string">&#x27;meta&#x27;</span>) &#123;</span><br><span class="line">                            count = count + <span class="number">1</span>;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\n\n\n ******* Meta count = <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">                            <span class="keyword">let</span> metaString = <span class="string">&#x27;&lt;meta&#x27;</span>;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> element.<span class="property">attribs</span>) &#123;</span><br><span class="line">                                metaString += <span class="string">` <span class="subst">$&#123;key&#125;</span>=&quot;<span class="subst">$&#123;element.attribs[key]&#125;</span>&quot;`</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable constant_">META</span>.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;metaString&#125;</span> /&gt;\n`</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (element.<span class="property">name</span> === <span class="string">&#x27;link&#x27;</span>) &#123;</span><br><span class="line">                            <span class="keyword">let</span> linkString = <span class="string">&#x27;&lt;link&#x27;</span>;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> element.<span class="property">attribs</span>) &#123;</span><br><span class="line">                                linkString += <span class="string">` <span class="subst">$&#123;key&#125;</span>=&quot;<span class="subst">$&#123;element.attribs[key]&#125;</span>&quot;`</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable constant_">LINKS</span>.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;linkString&#125;</span> /&gt;\n`</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                        <span class="attr">html</span>: <span class="variable constant_">APP_HTML</span>,</span><br><span class="line">                        <span class="attr">globals</span>: &#123;</span><br><span class="line">                            <span class="attr">styles</span>: <span class="variable constant_">STYLES_STRING</span>,</span><br><span class="line">                            <span class="attr">title</span>: <span class="variable constant_">TITLE</span>,</span><br><span class="line">                            <span class="attr">meta</span>: <span class="variable constant_">META</span>.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>),</span><br><span class="line">                            <span class="attr">links</span>: <span class="variable constant_">LINKS</span>.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    moduleRef.<span class="title function_">destroy</span>();</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="polyfills-browser-polyfills-ts"><a class="header-anchor" href="#polyfills-browser-polyfills-ts"> </a>polyfills/browser.polyfills.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zone.js/dist/zone&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./rx-imports&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="polyfills-server-polyfills-ts"><a class="header-anchor" href="#polyfills-server-polyfills-ts"> </a>polyfills/server.polyfills.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;es6-promise&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;es6-shim&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;zone.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./rx-imports&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="polyfills-rx-imports-ts"><a class="header-anchor" href="#polyfills-rx-imports-ts"> </a>polyfills/rx-imports.ts</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* -=- RxJs imports -=-</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Here you can place any RxJs imports so you don&#x27;t have to constantly </span></span><br><span class="line"><span class="comment"> * import them throughout your App :)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Observable</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/Observable/throw&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Subject</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/Subject&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Operators</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/filter&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/first&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/catch&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/mergeMap&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="步驟四-npm-install"><a class="header-anchor" href="#步驟四-npm-install"> </a>步驟四: npm install</h1>
<p>重新執行 <code>npm install</code>，由於我們在一開始有新增一個 <code>postinstall</code>的工作，所以在安裝完後，npm 會跟著執行我們所設定的動作。</p>
<h1 id="步驟五-dotnet-run"><a class="header-anchor" href="#步驟五-dotnet-run"> </a>步驟五: dotnet run</h1>
<p>重新將 <a href="http://asp.net">asp.net</a> core 跑起來，看看有沒有發生什麼錯誤</p>
<hr>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>以上就是手動升級需要異動的項目，希望之後 SPA Template 更新後，就不需要這麼麻煩了。</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 啟用 strictNullChecks</title>
    <url>/2017/04/13/angular-strictNullChecks/</url>
    <content><![CDATA[<p>Typescript 2.0 新增了一個功能 <code>strictNullChecks</code> ，這一功能的主要目的是將 <code>null</code> 與 <code>undefined</code> 視為不同的型別。在這個選項啟動時， Typescript 會去檢查所有有可能發生 <code>null</code> 的程式碼，在下面會看到當開啟時，需要調整的項目有哪些。這樣的嚴謹模式，可以大大的降低一些例外的發生</p>
<p>而 Angular 所使用的 Typescript 版本也是 2.0 以後的版本，爾當然支援這樣的功能，以下我就拿一個手上練習的專案將該功能該起後，所遇到的一些狀況跟解決方式。</p>
<span id="more"></span>
<h1 id="前言"><a class="header-anchor" href="#前言"> </a>前言</h1>
<blockquote>
<h1 id="Null-and-undefined-aware-types"><a class="header-anchor" href="#Null-and-undefined-aware-types"> </a>Null- and undefined-aware types</h1>
<p>TypeScript has two special types, Null and Undefined, that have the values <code>null</code> and <code>undefined</code> respectively. Previously it was not possible to explicitly name these types, but <code>null</code> and <code>undefined</code> may now be used as type names regardless of type checking mode.</p>
<p>The type checker previously considered <code>null</code> and <code>undefined</code> assignable to anything. Effectively, <code>null</code> and <code>undefined</code> were valid values of <em>every</em> type and it wasn’t possible to specifically exclude them (and therefore not possible to detect erroneous use of them).</p>
</blockquote>
<h1 id="Angular-環境設定"><a class="header-anchor" href="#Angular-環境設定"> </a>Angular 環境設定</h1>
<p>在 <code>tsconfig.json</code> 內開啟 strictNullChecks 功能，由於 Angular 主程式內還有部分的程式碼還沒有辦法通過 <code>strictNullChecks</code> 的檢查，所以必須再多開啟 <code>skipLibCheck</code> 的選項</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compileOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="檢查開始"><a class="header-anchor" href="#檢查開始"> </a>檢查開始</h1>
<p>當執行 <code>npm start</code> 時，Typescript 就會開始做檢查的動作了，在最近更新的 Visual Studio Code 支援從 Terminal 直接開啟該檔案的功能，<code>Ctrl + Click</code>  就可以開啟了。</p>
<p>第一次的檢查，會跳出很多紅色的錯誤。就一個一個看吧</p>
<h2 id="錯誤-1-Type-any-is-not-assignable-to-type-never"><a class="header-anchor" href="#錯誤-1-Type-any-is-not-assignable-to-type-never"> </a>錯誤 1: Type any[] is not assignable to type never[]</h2>
<p><img src="https://farm4.staticflickr.com/3839/33966106616_47d4595064_o.png" alt=""></p>
<p>圖片中的 errMessage 是發生錯誤的地方。造成這個錯誤的原因是 errMessage 在定義時，並沒有宣告型別，而是直接給予一個空陣列。</p>
<p><img src="https://farm3.staticflickr.com/2870/33878082021_5228371f40_o.png" alt=""></p>
<p><strong>修正方式 :</strong>  明確的給予型別，即可修正此類型的錯誤</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">errMessage</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj[prop])) &#123;</span><br><span class="line">      errMessage = [...errMessage, ...obj[prop]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="錯誤-2-Argument-of-Type-…-is-not-assignable-to-type-『…』"><a class="header-anchor" href="#錯誤-2-Argument-of-Type-…-is-not-assignable-to-type-『…』"> </a>錯誤 2: Argument of Type … is not assignable to type 『…』</h2>
<p><img src="https://farm4.staticflickr.com/3942/33966175946_d3fb790e8a_o.png" alt=""></p>
<p><img src="https://farm3.staticflickr.com/2825/33966186516_b0bca33e9c_o.png" alt=""></p>
<p>這裡的 AuthConfig 接受的參數型別是 <code>IAuthConfigOptional</code>，而程式碼裡所傳入的 Object 並未指定型別。</p>
<p><img src="https://farm3.staticflickr.com/2819/33966196546_d41c75867c_o.png" alt=""></p>
<p><strong>修正方式 :</strong> 給予正確的型別</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AuthHttp</span>(<span class="keyword">new</span> <span class="title class_">AuthConfig</span>(&lt;<span class="title class_">IAuthConfigOptional</span>&gt;&#123;</span><br><span class="line">        <span class="attr">tokenName</span>: <span class="string">&#x27;token&#x27;</span>,</span><br><span class="line">        <span class="attr">noJwtError</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">tokenGetter</span>: (<span class="function">() =&gt;</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)),</span><br><span class="line">    &#125;), http, options);</span><br></pre></td></tr></table></figure>
<h2 id="錯誤-3-Object-is-possibly-null"><a class="header-anchor" href="#錯誤-3-Object-is-possibly-null"> </a>錯誤 3: Object is possibly null</h2>
<p><img src="https://farm3.staticflickr.com/2848/33878182561_27142d36fe_o.png" alt=""></p>
<p>在這裡的錯誤訊息是指，這段程式碼有可能因為某一個Object是 null 時，後續的程式碼就無法繼續下去，所以必須先排除 null 的狀態，才能確保後續的動作是正常的。而這個行為，在 Typescript 2.0 稱為 <code>Control flow based type analysis</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>
<p>這裡有幾種修正方式</p>
<ol>
<li>告訴 Typescript, 這裡有可能發生 null 的 Object 是不會有 null 值的情形，需使用 <code>!</code>  <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">number</span> = <span class="variable language_">this</span>.<span class="property">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">number</span> &gt; <span class="number">130</span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">document</span>!.<span class="title function_">getElementById</span>(<span class="string">&#x27;control-panel&#x27;</span>)!.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;panel-fixed&#x27;</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">document</span>!.<span class="title function_">getElementById</span>(<span class="string">&#x27;control-panel&#x27;</span>)!.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;panel-fixed&#x27;</span>);</span><br><span class="line">       &#125;           </span><br></pre></td></tr></table></figure>
<ol start="2">
<li>根據 Type 來控制流程</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">document</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">number</span> = <span class="variable language_">this</span>.<span class="property">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line"><span class="keyword">const</span> panel = <span class="variable language_">this</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;control-panel&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (panel === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">number</span> &gt; <span class="number">130</span>) &#123;</span><br><span class="line">  panel.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;panel-fixed&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  panel.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;panel-fixed&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="錯誤4-Type-『null』-is-not-assignable-to-type-『file-undefined』"><a class="header-anchor" href="#錯誤4-Type-『null』-is-not-assignable-to-type-『file-undefined』"> </a>錯誤4: Type 『null』 is not assignable to type 『file | undefined』</h2>
<p><img src="https://farm3.staticflickr.com/2937/34007884075_3ffb7190eb_o.png" alt=""></p>
<p><strong>修正方式 :</strong> 這個錯誤其實很簡單，就是不要指定 null 到變數上即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">photo.<span class="property">file</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>透過這一系列的型別設定檢查，雖然在開發時期，因為型別的指定會降低開發的速度，可是當系統越來越龐大時，可以在開發時期確保程式不會壞掉。就投報率的角度來說，是非常值得投資的。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html">TypeScript 2.0</a></p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">A new <code>!</code> post-fix expression operator may be used to assert that its operand is non-null and non-undefined in contexts where the type checker is unable to conclude that fact. Specifically, the operation <code>x!</code> produces a value of the type of <code>x</code>with <code>null</code> and <code>undefined</code> excluded. Similar to type assertions of the forms <code>&lt;T&gt;x</code> and <code>x as T</code>, the <code>!</code> non-null assertion operator is simply removed in the emitted JavaScript code.</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">TypeScript 2.0 implements a control flow-based type analysis for local variables and parameters. Previously, the type analysis performed for type guards was limited to <code>if</code> statements and <code>?:</code> conditional expressions and didn't include effects of assignments and control flow constructs such as <code>return</code> and <code>break</code> statements. With TypeScript 2.0, the type checker analyses all possible flows of control in statements and expressions to produce the most specific type possible (the <em>narrowed type</em>) at any given location for a local variable or parameter that is declared to have a union type.</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] EventManager</title>
    <url>/2017/04/19/angular-eventmanager/</url>
    <content><![CDATA[<p>EventManager 是一個很強大的 Angular 內建功能。預設有開啟三種 Event，<code>Dom</code>、<code>Key</code>、<code>HammerGestures</code> Plugin可以使用。EventManager 可以讓我們很簡單的控制全域 (window)  的事件。</p>
<span id="more"></span>
<h1 id="EventManager"><a class="header-anchor" href="#EventManager"> </a>EventManager</h1>
<p>EventManager 的 Class 如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">plugins: EventManagerPlugin[], _zone: NgZone</span>)</span><br><span class="line">  <span class="title function_">addEventListener</span>(<span class="attr">element</span>: <span class="title class_">HTMLElement</span>, <span class="attr">eventName</span>: <span class="built_in">string</span>, <span class="attr">handler</span>: <span class="title class_">Function</span>) : <span class="title class_">Function</span></span><br><span class="line">  <span class="title function_">addGlobalEventListener</span>(<span class="attr">target</span>: <span class="built_in">string</span>, <span class="attr">eventName</span>: <span class="built_in">string</span>, <span class="attr">handler</span>: <span class="title class_">Function</span>) : <span class="title class_">Function</span></span><br><span class="line">  <span class="title function_">getZone</span>() : <span class="title class_">NgZone</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>constructor 所指的 plugins 項目，在 browser 一開始讀取時，就已經在 provider 的地方設定好了</p>
<p><img src="https://farm3.staticflickr.com/2909/34131483385_dec465902e_o.png" alt=""></p>
<p><img src="https://farm4.staticflickr.com/3933/33320171663_cb29e7749d_o.png" alt=""></p>
<p>根據文件，我們可以使用 <code>addGlobalEventListener</code> 的方式來註冊事件到某一個對象上，所以如果要將 <code>keyup</code> 事件註冊到 <code>windows</code>物件上，那我們可以這樣子寫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> eventManger: EventManager</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventManger</span>.<span class="title function_">addGlobalEventListener</span>(<span class="string">&#x27;window&#x27;</span>, <span class="string">&#x27;keyup.enter&#x27;</span>, <span class="function">(<span class="params">e: KeyboardEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// do something here</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h1>
<p><code>ctrl+a</code>全選的功能，也可以透過這個方式給覆寫掉</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">eventManger</span>.<span class="title function_">addGlobalEventListener</span>(<span class="string">&#x27;window&#x27;</span>, <span class="string">&#x27;keydown.control.a&#x27;</span>, <span class="function">(<span class="params">e: KeyboardEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">eventManger</span>.<span class="title function_">addGlobalEventListener</span>(<span class="string">&#x27;window&#x27;</span>, <span class="string">&#x27;keyup.control.a&#x27;</span>, <span class="function">(<span class="params">e: KeyboardEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// do soemthing..</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="其他說明"><a class="header-anchor" href="#其他說明"> </a>其他說明</h1>
<p>那至於 EventManager 會使用哪一個 EventPlugin，他自己會去判斷。</p>
<p><img src="https://farm3.staticflickr.com/2813/33974350672_0a52ccdacb_o.png" alt=""></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p><a href="https://github.com/angular/angular/blob/4.0.0/packages/platform-browser/src/dom/events/event_manager.ts#L17-L61">source code</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] ngIf 跟他的新朋友 else 和 then</title>
    <url>/2017/04/19/angular-ngIf-else/</url>
    <content><![CDATA[<p>Angular 4 將原本的 <code>ngIf</code> 的功能給擴充了。多了兩個新朋友 <code>else</code> 跟 <code>then</code>，就讓我們了解一下用法跟使用情境</p>
<span id="more"></span>
<h1 id="else"><a class="header-anchor" href="#else"> </a>else</h1>
<p><code>else</code> 比較好理解。就是當 <code>ngIf</code> 的條件還是假的時候，就顯示<code>else</code>所指定的 <code>&lt;ng-template&gt;</code>，先比較之前的寫法與使用 <code>else</code>寫法的差異。</p>
<h2 id="舊寫法"><a class="header-anchor" href="#舊寫法"> </a>舊寫法</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>UserName:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngIf</span>=<span class="string">&quot;user|async&quot;</span>&gt;</span></span><br><span class="line">    	&#123;&#123; (user|asnyc)?.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這樣的寫法個問題，因為 <code>async</code> 跑了兩次，所以 user 這個 Observable 也就被執行了兩次 (該Observable沒有設定為multicast的模式)，站在效能的角度來看，並不是很好。</p>
<p>新版的 <code>ngIf else</code>的語法就可以幫我們解決這個問題。</p>
<h2 id="新寫法"><a class="header-anchor" href="#新寫法"> </a>新寫法</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>UserName:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngIf</span>=<span class="string">&quot;user|async as _user; else elseTmpl&quot;</span>&gt;</span></span><br><span class="line">    	&#123;&#123; _user.name &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">elseTmpl</span>&gt;</span></span><br><span class="line">      loading user...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>這個 <code>as</code> 可以讓我們將前面的資料儲存成一個變數 (storing the value locally)，供自己的 template 使用。這範例裡 _user 變數就是會儲存 <code>user</code>  subscribe 回來的結果，而 <code>as</code> 的語法，也可以使用在 <code>ngFor</code>的情境<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
</ul>
<p>執行效果如下</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/AVG4E8mzOzI" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h1 id="then"><a class="header-anchor" href="#then"> </a>then</h1>
<p>那 <code>then</code> 又是怎麼一回事呢? 我們知道 三元條件運算 的用法 <code> condition? true: false</code> ，而  <code>then</code> 在這邊是指 條件為真的情形，就顯示所指定的 <code>&lt;ng-template&gt;</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;ng-if-then-else&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;show = !show&quot;&gt;&#123;&#123;show ? &#x27;hide&#x27; : &#x27;show&#x27;&#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;switchPrimary()&quot;&gt;Switch Primary&lt;/button&gt;</span></span><br><span class="line"><span class="string">    show = &#123;&#123;show&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;div *ngIf=&quot;show; then thenBlock; else elseBlock&quot;&gt;this is ignored&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;ng-template #primaryBlock&gt;Primary text to show&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">    &lt;ng-template #secondaryBlock&gt;Secondary text to show&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">    &lt;ng-template #elseBlock&gt;Alternate text while primary text is hidden&lt;/ng-template&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NgIfThenElse</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">thenBlock</span>: <span class="title class_">TemplateRef</span>&lt;<span class="built_in">any</span>&gt; = <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">show</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">&#x27;primaryBlock&#x27;</span>)</span><br><span class="line">  <span class="attr">primaryBlock</span>: <span class="title class_">TemplateRef</span>&lt;<span class="built_in">any</span>&gt; = <span class="literal">null</span>;</span><br><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">&#x27;secondaryBlock&#x27;</span>)</span><br><span class="line">  <span class="attr">secondaryBlock</span>: <span class="title class_">TemplateRef</span>&lt;<span class="built_in">any</span>&gt; = <span class="literal">null</span>;</span><br><span class="line">  <span class="title function_">switchPrimary</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">thenBlock</span> = <span class="variable language_">this</span>.<span class="property">thenBlock</span> === <span class="variable language_">this</span>.<span class="property">primaryBlock</span> ? <span class="variable language_">this</span>.<span class="property">secondaryBlock</span> : <span class="variable language_">this</span>.<span class="property">primaryBlock</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">thenBlock</span> = <span class="variable language_">this</span>.<span class="property">primaryBlock</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行效果如下</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/e5JyDE7kCR8" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li>
<p><a href="https://angular.io/docs/ts/latest/api/common/index/NgIf-directive.html">NgIf</a></p>
<p>​<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">*ngFor=「let user of users | async as _users」</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Meta 與 Route</title>
    <url>/2017/04/20/angular-meta/</url>
    <content><![CDATA[<p>Angular 4 版內建了 Meta 的服務，雖然目前還是標示 EXPERIMENTAL (表示未來有可能會有 break change)，但還是先來玩看看，希望能和路由設定檔綁在一起。</p>
<span id="more"></span>
<h1 id="路由設定"><a class="header-anchor" href="#路由設定"> </a>路由設定</h1>
<p>我們知道 Route 的設定檔裡面可以設定 data 或是透過 resolve 來預先處理非同步的資料取得行為 ( 例如 call API)，可參閱<a href="http://blog.kevinyang.net/2016/12/11/ng2-router-resolve/">這篇文章</a></p>
<p>假設，我們的路由設定檔，長這樣</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeComponent</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">meta</span>: [</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">&#x27;twitter:title&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;Good Morning Harwood&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">property</span>: <span class="string">&#x27;og:title&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;Good Morning Harwood&#x27;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">AboutComponent</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">meta</span>: [</span><br><span class="line">        &#123;<span class="attr">name</span>: <span class="string">&#x27;twitter:title&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;About Us&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">property</span>: <span class="string">&#x27;og:title&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;About Us&#x27;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>以上的設定，就可以透過 <code>Router</code> 和 <code>ActivatedRoute</code>的方式取得 data 下 meta 的資訊。而這些資訊就是要設定到 <code>&lt;head&gt;&lt;/head&gt;</code> 間的訊息</p>
<h1 id="Meta"><a class="header-anchor" href="#Meta"> </a>Meta</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Meta</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">_doc: <span class="built_in">any</span></span>)</span><br><span class="line">  <span class="title function_">addTag</span>(<span class="attr">tag</span>: <span class="title class_">MetaDefinition</span>, forceCreation?: <span class="built_in">boolean</span>) : <span class="title class_">HTMLMetaElement</span></span><br><span class="line">  <span class="title function_">addTags</span>(<span class="attr">tags</span>: <span class="title class_">MetaDefinition</span>[], forceCreation?: <span class="built_in">boolean</span>) : <span class="title class_">HTMLMetaElement</span>[]</span><br><span class="line">  <span class="title function_">getTag</span>(<span class="attr">attrSelector</span>: <span class="built_in">string</span>) : <span class="title class_">HTMLMetaElement</span></span><br><span class="line">  <span class="title function_">getTags</span>(<span class="attr">attrSelector</span>: <span class="built_in">string</span>) : <span class="title class_">HTMLMetaElement</span>[]</span><br><span class="line">  <span class="title function_">updateTag</span>(<span class="attr">tag</span>: <span class="title class_">MetaDefinition</span>, selector?: <span class="built_in">string</span>) : <span class="title class_">HTMLMetaElement</span></span><br><span class="line">  <span class="title function_">removeTag</span>(<span class="attr">attrSelector</span>: <span class="built_in">string</span>) : <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">removeTagElement</span>(<span class="attr">meta</span>: <span class="title class_">HTMLMetaElement</span>) : <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>雖然有這麼多功能，比較需要提的是 <code>updateTag</code> 這一個包含新增的功能，他會判斷如果你想要更新的MetaDefiniton 不存在時，就會幫你建立一個。</p>
<h1 id="實作範例"><a class="header-anchor" href="#實作範例"> </a>實作範例</h1>
<p>路由設定檔關於 meta 資料這邊就先略過，可以參照上面的路由設定範例，這段範例的主要目的，要讓  Angular 可以自動更新 Meta 資訊，我先把程式貼出來，在一行行的解釋</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">      <span class="keyword">private</span> metaService: Meta, </span></span><br><span class="line"><span class="params">      <span class="keyword">private</span> router: Router,</span></span><br><span class="line"><span class="params">      <span class="keyword">private</span> activatedRoute: ActivatedRoute</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">events</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">event</span> =&gt;</span> (event <span class="keyword">instanceof</span> <span class="title class_">NavigationEnd</span>))</span><br><span class="line">        .<span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> snapshot = <span class="variable language_">this</span>.<span class="property">activatedRoute</span>.<span class="property">snapshot</span>;</span><br><span class="line">          <span class="keyword">let</span> child = snapshot.<span class="property">firstChild</span>;</span><br><span class="line">          <span class="keyword">while</span> (child.<span class="property">firstChild</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">            child = child.<span class="property">firstChild</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">from</span>(child.<span class="property">data</span>.<span class="property">meta</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">do</span>(<span class="function">(<span class="params">meta: <span class="built_in">any</span></span>) =&gt;</span> <span class="variable language_">this</span>.<span class="property">metaService</span>.<span class="title function_">updateTag</span>(meta))</span><br><span class="line">        .<span class="title function_">subscribe</span>();</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>為了避免重複執行，這段程式碼我是放在 <code>app.component.ts</code>的地方，因為正常情況下，app.component 只會被執行一次。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">events</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">event</span> =&gt;</span> (event <span class="keyword">instanceof</span> <span class="title class_">NavigationEnd</span>))</span><br></pre></td></tr></table></figure>
<p>這我之前有寫過，就參讀<a href="http://blog.kevinyang.net/2017/01/22/angular2-router-event/">這篇文章</a> 吧</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> snapshot = <span class="variable language_">this</span>.<span class="property">activatedRoute</span>.<span class="property">snapshot</span>;</span><br><span class="line">  <span class="keyword">let</span> child = snapshot.<span class="property">firstChild</span>;</span><br><span class="line">  <span class="keyword">while</span> (child.<span class="property">firstChild</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">    child = child.<span class="property">firstChild</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">from</span>(child.<span class="property">data</span>.<span class="property">meta</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>為什麼要取snapShot，因為 snapShot 是當時的值，透過這種方式取得的資料就不是 Observable 型別了。透過 while 的方式取得 data 區段的資料。然後將 meta 的陣列轉換成 stream 的模式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">do</span>(<span class="function">(<span class="params">meta: <span class="built_in">any</span></span>) =&gt;</span> <span class="variable language_">this</span>.<span class="property">metaService</span>.<span class="title function_">updateTag</span>(meta))</span><br></pre></td></tr></table></figure>
<p>依前一個 Operator 傳回的結果，一個一個的更新 meta 資訊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">subscribe</span>();</span><br></pre></td></tr></table></figure>
<p>執行上面的工作。</p>
<h1 id="執行結果"><a class="header-anchor" href="#執行結果"> </a>執行結果</h1>
<div class="video-container"><iframe src="https://www.youtube.com/embed/IJw4KLpozQA" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] DotNet Core 基本環境設定</title>
    <url>/2017/05/14/core-environment-setup/</url>
    <content><![CDATA[<p>.NET Core 在近期發布了 2.0 preview，看起來離 2.0 的正式發表也不遠了。是時候可以出手學習一下 .NET Core 這一新架構，但在正式學習之前，還是得把環境設定好。</p>
<span id="more"></span>
<p>.NET Core 是一個可跨平台的架構，所以在 windows 或是 mac 甚至  Ubuntu 上都可以做開發，微軟講好久的跨平台的口號，終於實踐啦。</p>
<p>開發 .NET Core 的方式基本上有兩種</p>
<ol>
<li>使用 IDE
<ol>
<li>windows版本，直接上 <a href="https://www.visualstudio.com/zh-hant/vs/whatsnew/">visual studio 2017</a></li>
<li>mac 版本，可以使用 <a href="https://www.visualstudio.com/zh-hant/vs/visual-studio-mac/?rr=https%3A%2F%2Fwww.google.com.tw%2F">visual studio for mac</a></li>
<li><a href="https://www.jetbrains.com/rider/">Jetbrains Rider</a></li>
</ol>
</li>
<li>使用 CLI + <a href="https://code.visualstudio.com/">Visual Studio Core</a>
<ol>
<li><a href="https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-preview1-download.md">CLI on GitHub</a></li>
<li><a href="https://www.microsoft.com/net/core#windowscmd">穩定版</a></li>
</ol>
</li>
</ol>
<p>安裝步驟不難，把安裝下載下來，執行安裝，完成後即可。之後的學習筆記將會以 CLI 的方式進行。</p>
<h1 id="建立第一個專案"><a class="header-anchor" href="#建立第一個專案"> </a>建立第一個專案</h1>
<p>當 CLI 安裝完成後，可以使用 <code>dotnet --info</code> 的方式得知目前所安裝的版本資訊</p>
<p><img src="https://farm5.staticflickr.com/4171/33802930844_6c63f570c6_o.png" alt=""></p>
<p><code>dotnet --help</code> 可以知道有那些指令可以使用</p>
<p><img src="https://farm5.staticflickr.com/4185/34645600185_df1bbc19af_o.png" alt=""></p>
<h2 id="建立新專案"><a class="header-anchor" href="#建立新專案"> </a>建立新專案</h2>
<p>CLI 建立專案的順序是</p>
<ol>
<li>建立一個新的專案用的資料夾</li>
<li>進入開資料夾</li>
<li>執行 <code>dotnet new [專案類型]</code></li>
<li>完成</li>
</ol>
<p>在 <code>步驟 3</code> 所提到的<strong>專案類型</strong>，可以利用 <code>dotnet new</code>的指令查詢</p>
<p><img src="https://farm5.staticflickr.com/4162/33835675403_5c4239423f_o.png" alt=""></p>
<p>這裡可以看到，CLI 提供了一些初始範本可以使用。因為我們要從頭開始學習，所以預設先由最單純的 Console Application 開始</p>
<p><img src="https://farm5.staticflickr.com/4178/34604682536_c80ea37a4d_o.png" alt=""></p>
<p>專案的檔案結構</p>
<p><img src="https://farm5.staticflickr.com/4179/34260096790_fdc395ba3f_o.png" alt=""></p>
<p><code>programs.cs</code> 是專案的進入點</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">study_001</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>xxx.csproj</code> 是專案檔，用來管理該專案的狀態，例如 package 的使用等</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Exe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="執行"><a class="header-anchor" href="#執行"> </a>執行</h2>
<p>透過 CLI 將 .NET Core 的程式執行起來，可以下 <code>dotnet run</code> 就可以執行了。</p>
<p><img src="https://farm5.staticflickr.com/4175/34483688792_7ff357d932_o.png" alt=""></p>
<h2 id="建置"><a class="header-anchor" href="#建置"> </a>建置</h2>
<p>指令 <code>dotnet build</code> 會將程式建置為一個 dll 檔案，並放在 bin 的資料夾下</p>
<p><img src="https://farm5.staticflickr.com/4180/33836146513_1b2aebd573_o.png" alt=""></p>
<p>執行該 dll 的方式，執行 <code>dotnet xxx.dll</code></p>
<p><img src="https://farm5.staticflickr.com/4177/33803404014_d244fc65f7_o.png" alt=""></p>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<ul>
<li><code>dotnet --help</code> 查詢可使用的指令</li>
<li><code>dotnet --info</code> 查詢目前 CLI 版本</li>
<li><code>dotnet new &lt;template&gt;</code> 建立範本專案</li>
<li><code>dotnet restore</code> 恢復安裝 packages</li>
<li><code>dotnet run</code> 執行專案程式</li>
<li><code>dotnet build</code> 建置專案</li>
<li><code>dotnet &lt;xxx&gt;.dll</code> 執行建置後的 dll 檔案</li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] Web MVC 001 - program.cs</title>
    <url>/2017/05/15/core-web-mvc-001/</url>
    <content><![CDATA[<p>.NET Core 的專案的底層，都是從 Console Program 開始的。就稍微比較一下透過 dotnet cli 所產生的 console program 和 empty web program 的檔案差異。</p>
<span id="more"></span>
<h1 id="檔案差異"><a class="header-anchor" href="#檔案差異"> </a>檔案差異</h1>
<h2 id="Program-cs"><a class="header-anchor" href="#Program-cs"> </a>Program.cs</h2>
<h3 id="Console"><a class="header-anchor" href="#Console"> </a>Console</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">using <span class="title class_">System</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> study_001</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">void</span> <span class="title class_">Main</span>(<span class="built_in">string</span>[] args)</span><br><span class="line">        &#123;           </span><br><span class="line">            <span class="title class_">Console</span>.<span class="title class_">WriteLine</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Web"><a class="header-anchor" href="#Web"> </a>Web</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">study_002</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BuildWebHost(args).Run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHost <span class="title">BuildWebHost</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            WebHost.CreateDefaultBuilder(args)</span><br><span class="line">                .UseStartup&lt;Startup&gt;()</span><br><span class="line">                .Build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="差異"><a class="header-anchor" href="#差異"> </a>差異</h3>
<p><code>Console</code> 與 <code>Web</code> 專案架構基本上是一樣的，唯一有差異的是，Web 專案需要跑 WebHost Builder 來建立網站。</p>
<h2 id="csproj"><a class="header-anchor" href="#csproj"> </a>.csproj</h2>
<h3 id="Console-v2"><a class="header-anchor" href="#Console-v2"> </a>Console</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Exe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Web-v2"><a class="header-anchor" href="#Web-v2"> </a>Web</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk.Web&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UserSecretsId</span>&gt;</span>aspnet-study_002-741020AF-3B35-4E03-A07A-E2EFF47D6CCA<span class="tag">&lt;/<span class="name">UserSecretsId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Folder</span> <span class="attr">Include</span>=<span class="string">&quot;wwwroot\&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.AspNetCore.All&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;2.0.0-preview1-final&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="差異-v2"><a class="header-anchor" href="#差異-v2"> </a>差異</h3>
<p><code>web</code> 專案多包含了一個 <code>wwwroot</code> 資料夾，及 <code>Microsoft.AspNetCore.All</code> 的 package。</p>
<h1 id="建立WebHost"><a class="header-anchor" href="#建立WebHost"> </a>建立WebHost</h1>
<h2 id="WebHost"><a class="header-anchor" href="#WebHost"> </a>WebHost</h2>
<p>透過 <code>WebHost.CreateDefaultBuilder</code> 建立一個 <code>Microsoft.AspNetCore.Hosting.IWebHost </code> 並在 <code>Main</code> 下執行</p>
<h3 id="CreateDefaultBuilder"><a class="header-anchor" href="#CreateDefaultBuilder"> </a>CreateDefaultBuilder</h3>
<p>執行<code>CreateDefaultBuilder(args)</code> 時， <code>WebHostBuilder</code> 會有以下的預設值</p>
<ol>
<li>使用 Kestrel 為網站伺服器</li>
<li>跟目錄為目前所在的資料夾位置</li>
<li>預設載入 <code>appsetting.json</code> 及 <code>appsettings.[environment].json</code> 設定檔</li>
<li>如果是開發模式時，會載入 User Secrets</li>
<li>使用環境變數 (environment variables)</li>
<li>接受從命令列傳入的參數</li>
<li>當做 logging 時，會輸出到 <code>console</code> 跟 <code>debug output</code></li>
<li>開啟 <code>IISIntegration</code></li>
<li>如果是開發模式，新增例外狀況頁面</li>
</ol>
<h3 id="UseStartup"><a class="header-anchor" href="#UseStartup"> </a>UseStartup</h3>
<p><code>UseStartUp</code> 是 <code>IWebHostBuilder</code> 的擴充功能，接受一個 AssemblyName 並使用 <code>IWebHostBuilder</code> 內部的 <code>UseSetting</code> 的方法新增或更新 <code>_config</code> 裡鍵值為<code>WebHostDefaults.ApplicationKey</code> 與 <code>WebHostDefaults.StartupAssemblyKey</code> 下，<code>_config</code>為一個 <code>IConfiguration </code> 物件。建立程式碼如下，僅供參考使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> IConfiguration _config;</span><br><span class="line"></span><br><span class="line">_config = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">                .AddEnvironmentVariables(prefix: <span class="string">&quot;ASPNETCORE_&quot;</span>)</span><br><span class="line">                .Build();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> IWebHostBuilder <span class="title">UseSetting</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   _config[key] = <span class="keyword">value</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="build"><a class="header-anchor" href="#build"> </a>build</h3>
<p>建立 <code>WebHost</code> 物件</p>
<h2 id="Startup"><a class="header-anchor" href="#Startup"> </a>Startup</h2>
<p><code>Startup</code> 用來設定網站會使用到的 <code>service</code>，<code>參數</code>、<code>middleware</code> 等。基本上都在這支程式內搞定</p>
<h3 id="ConfigureServices"><a class="header-anchor" href="#ConfigureServices"> </a>ConfigureServices</h3>
<p><strong>設定有哪些服務可以使用</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Add framework services.</span></span><br><span class="line">    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;</span><br><span class="line">        options.UseSqlServer(Configuration.GetConnectionString(<span class="string">&quot;DefaultConnection&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()</span><br><span class="line">        .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()</span><br><span class="line">        .AddDefaultTokenProviders();</span><br><span class="line"></span><br><span class="line">    services.AddMvc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add application services.</span></span><br><span class="line">    services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();</span><br><span class="line">    services.AddTransient&lt;ISmsSender, AuthMessageSender&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>ConfigureServices</code>不一定要存在，如果有，他會在 <code>Configure</code>前被執行</li>
<li>如果要設定 <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration">Configuration options</a>，需要在此設定</li>
<li>使用的服務需要設定時，可透過<code>IServiceCollection</code>的 <code>Add[Service]</code> 的方式註冊
<ol>
<li>如上述範例為註冊 Entity Framework、Identity、MVC</li>
</ol>
</li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection">DI</a> 也會在 <code>ConfigureServices</code>裡設定</li>
</ol>
<h3 id="Configure"><a class="header-anchor" href="#Configure"> </a>Configure</h3>
<p><strong>設定使用哪些服務</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    loggerFactory.AddConsole(Configuration.GetSection(<span class="string">&quot;Logging&quot;</span>));</span><br><span class="line">    loggerFactory.AddDebug();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">    &#123;</span><br><span class="line">        app.UseDeveloperExceptionPage();</span><br><span class="line">        app.UseDatabaseErrorPage();</span><br><span class="line">        app.UseBrowserLink();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        app.UseExceptionHandler(<span class="string">&quot;/Home/Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line"></span><br><span class="line">    app.UseIdentity();</span><br><span class="line"></span><br><span class="line">    app.UseMvc(routes =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        routes.MapRoute(</span><br><span class="line">            name: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            template: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>Congiure</code> 是用來設定 <a href="http://ASP.NET">ASP.NET</a> 應用程式會對請求，透過 <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware">middleware</a> 組合的方式，做出一系列的動作與回應。</li>
<li><code>middleware</code> 物件使用 <code>Use</code> 的方法，將物件家到在 <code>IApplicationBuilder</code> 上</li>
</ol>
<p><img src="https://farm5.staticflickr.com/4156/34635488816_b7a08aefd6_o.png" alt=""></p>
<h3 id="初始服務"><a class="header-anchor" href="#初始服務"> </a>初始服務</h3>
<p>在一開始就有一些初始服務的存在，分別為</p>
<ul>
<li>constructor: <code>IHostingEnvironment</code>，<code>ILoggerFactory</code></li>
<li>ConfigureServices: <code>IServiceCollecton</code></li>
<li><code>Configure</code>: <code>IApplicationBuilder</code>、<code>IHostingEnvironment</code>、<code>ILoggerFactory</code>、<code>IApplicationLifetime</code></li>
</ul>
<h3 id="Empty-Web-Template-的-startup-cs"><a class="header-anchor" href="#Empty-Web-Template-的-startup-cs"> </a>Empty Web Template 的 startup.cs</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;      </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            app.Run(<span class="keyword">async</span> (context) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在初始的專案範本裡，只有在 <code>Configure</code> 的地方寫了兩個功能</p>
<ol>
<li>注入 <code>IApplicationHilder</code> 與 <code>IHostingEnvironment</code> 兩個服務</li>
<li>判斷如在開發模式下，新增顯示開發者例外狀況頁面功能</li>
<li>回傳 「Hello World!」 的文字給畫面顯示</li>
</ol>
<h1 id="回顧"><a class="header-anchor" href="#回顧"> </a>回顧</h1>
<ul>
<li>Web 應用程式也是 Console 程式</li>
<li>使用 <code>IWebHostBuilder</code> 的方式建立一個 <code>WebHost</code> 並將其執行起來，就可將 Console 程式變成一個網頁伺服器</li>
<li>可透過 <code>Startup.cs</code> 的方式設定 WebHost</li>
<li>所有的 <code>Dependency Injection</code> 需要在 Startup.cs 檔案內的 <code>ConfigureServices</code> 方法做註冊動作</li>
<li>.NET Core Web 是使用 middleware 的方式來設定網站會如何對連線請求做回應</li>
<li>在 <code>Configure</code> 方法內做 <code>middleware</code> 的順序及相關功能設定</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/aspnet/MetaPackages/blob/f245512f6e68d65309b65528d479f32b34c67718/src/Microsoft.AspNetCore/WebHost.cs#L150-L196">WebHost -  CreateDefaultBuilder</a></li>
<li><a href="https://github.com/aspnet/Hosting/blob/3485a04ea184cb7410d3432b497873af3f2d912c/src/Microsoft.AspNetCore.Hosting/WebHostBuilder.cs">WebHostBuilder</a></li>
<li><a href="https://github.com/aspnet/Hosting/blob/58cc0bc3f98398089df28f1a00f44b5f31edb15a/src/Microsoft.AspNetCore.Hosting.Abstractions/HostingAbstractionsWebHostBuilderExtensions.cs#L51-L62">WbeHostBuilderExtensions - UseStartup</a></li>
<li><a href="https://github.com/aspnet/Hosting/blob/c1949b340a5755c96632679ba2a1feb8f59bb655/src/Microsoft.AspNetCore.Hosting/Internal/WebHost.cs">WebHost</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/startup">Startup Class</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
        <tag>Core MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 開發 Excel 增益集</title>
    <url>/2017/05/28/angular-excel-addins/</url>
    <content><![CDATA[<p>Office 2016 的增益集，讓我們可以使用 javascript + html 來開發。既然可以使用 Jquery，那 Angular 應該是沒有問題的，這是使用 Angular 實作 Excel 增益集的筆記</p>
<span id="more"></span>
<h1 id="建立-Angular-專案"><a class="header-anchor" href="#建立-Angular-專案"> </a>建立 Angular 專案</h1>
<p>使用 Angular CLI 建立新專案，如果有需要使用路由的，記得要將 <code>LocationStrategy</code> 設定為 <code>HashLocationStrategy</code></p>
<h2 id="安裝-types"><a class="header-anchor" href="#安裝-types"> </a>安裝 @types</h2>
<blockquote>
<p>npm install --save-dev @types/office-js</p>
</blockquote>
<h2 id="tsconfig-app-json"><a class="header-anchor" href="#tsconfig-app-json"> </a>tsconfig.app.json</h2>
<p>在 <code>types</code> 的的區塊加上 <code>office-js</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;office-js&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h2 id="main-ts"><a class="header-anchor" href="#main-ts"> </a>main.ts</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;enableProdMode&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;platformBrowserDynamic&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser-dynamic&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">AppModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;environment&#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="title class_">Office</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Office</span>.<span class="property">initialize</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>platformBrowser</code> 這段一定要包在 function() {…} 裡面。</p>
<h2 id="index-html"><a class="header-anchor" href="#index-html"> </a>index.html</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">... </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://appsforoffice.microsoft.com/lib/1/hosted/office.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://appsforoffice.microsoft.com/fabric/1.0/fabric.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://appsforoffice.microsoft.com/fabric/1.0/fabric.components.min.css&quot;</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>新增這四行到 <code>&lt;head&gt;</code> 內</p>
<h2 id="app-component-ts"><a class="header-anchor" href="#app-component-ts"> </a>app.component.ts</h2>
<p>這裡的程式，我是先用官方提供的範例翻寫的。詳細的 API 部分，請參閱官方文件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/observable/from&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/mergeMap&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ApplicationRef</span>, <span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Http</span>, <span class="title class_">Response</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;用Angular寫Excel Addin!!&#x27;</span>;</span><br><span class="line">  data = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> appRef: ApplicationRef, <span class="keyword">private</span> http: Http</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">loadData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">clickMe</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Run a batch operation against the Excel object model</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">loadData</span>()</span><br><span class="line">        .<span class="title function_">mergeMap</span>(</span><br><span class="line">            <span class="function">(<span class="params">data: <span class="built_in">any</span>[]</span>) =&gt;</span> &#123;<span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">from</span>(<span class="title class_">Excel</span>.<span class="title function_">run</span>(<span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// Create a proxy object for the active worksheet</span></span><br><span class="line">              <span class="keyword">const</span> <span class="attr">sheet</span>: <span class="title class_">Excel</span>.<span class="property">Worksheet</span> =</span><br><span class="line">                  ctx.<span class="property">workbook</span>.<span class="property">worksheets</span>.<span class="title function_">getActiveWorksheet</span>();</span><br><span class="line">              sheet.<span class="title function_">getRange</span>().<span class="title function_">clear</span>();</span><br><span class="line">              <span class="comment">// sheet.charts.items.forEach(c =&gt; c.delete());</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (sheet) &#123;</span><br><span class="line">                <span class="comment">// Queue commands to set the report title in the worksheet</span></span><br><span class="line">                sheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A1&#x27;</span>).<span class="property">values</span> = [[<span class="string">&#x27;Quarterly Sales Report&#x27;</span>]];</span><br><span class="line">                sheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A1&#x27;</span>).<span class="property">format</span>.<span class="property">font</span>.<span class="property">name</span> = <span class="string">&#x27;Century&#x27;</span>;</span><br><span class="line">                sheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A1&#x27;</span>).<span class="property">format</span>.<span class="property">font</span>.<span class="property">size</span> = <span class="number">26</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// Create an array containing sample data</span></span><br><span class="line">              <span class="keyword">let</span> values = [</span><br><span class="line">                [<span class="string">&#x27;Product&#x27;</span>, <span class="string">&#x27;Qtr1&#x27;</span>, <span class="string">&#x27;Qtr2&#x27;</span>, <span class="string">&#x27;Qtr3&#x27;</span>, <span class="string">&#x27;Qtr4&#x27;</span>],</span><br><span class="line">                [<span class="string">&#x27;Frames&#x27;</span>, <span class="number">5000</span>, <span class="number">7000</span>, <span class="number">6544</span>, <span class="number">4377</span>],</span><br><span class="line">                [<span class="string">&#x27;Saddles&#x27;</span>, <span class="number">400</span>, <span class="number">323</span>, <span class="number">276</span>, <span class="number">651</span>],</span><br><span class="line">                [<span class="string">&#x27;Brake levers&#x27;</span>, <span class="number">12000</span>, <span class="number">8766</span>, <span class="number">8456</span>, <span class="number">9812</span>],</span><br><span class="line">                [<span class="string">&#x27;Chains&#x27;</span>, <span class="number">1550</span>, <span class="number">1088</span>, <span class="number">692</span>, <span class="number">853</span>],</span><br><span class="line">                [<span class="string">&#x27;Mirrors&#x27;</span>, <span class="number">225</span>, <span class="number">600</span>, <span class="number">923</span>, <span class="number">544</span>],</span><br><span class="line">                [<span class="string">&#x27;Spokes&#x27;</span>, <span class="number">6005</span>, <span class="number">7634</span>, <span class="number">4589</span>, <span class="number">8765</span>]</span><br><span class="line">              ];</span><br><span class="line"></span><br><span class="line">              <span class="comment">// Queue a command to write the sample data to the specified</span></span><br><span class="line">              <span class="comment">// range in the worksheet and bold the header row</span></span><br><span class="line">              <span class="keyword">const</span> range = sheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A2:E8&#x27;</span>);</span><br><span class="line">              range.<span class="property">values</span> = values;</span><br><span class="line">              sheet.<span class="title function_">getRange</span>(<span class="string">&#x27;A2:E2&#x27;</span>).<span class="property">format</span>.<span class="property">font</span>.<span class="property">bold</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// Queue a command to add a new chart</span></span><br><span class="line">              <span class="keyword">const</span> chart = sheet.<span class="property">charts</span>.<span class="title function_">add</span>(<span class="string">&#x27;ColumnClustered&#x27;</span>, range, <span class="string">&#x27;auto&#x27;</span>);</span><br><span class="line">              <span class="comment">// Queue commands to set the properties and format the chart</span></span><br><span class="line">              chart.<span class="title function_">setPosition</span>(<span class="string">&#x27;G1&#x27;</span>, <span class="string">&#x27;L10&#x27;</span>);</span><br><span class="line">              chart.<span class="property">title</span>.<span class="property">text</span> = <span class="string">&#x27;Quarterly sales chart&#x27;</span>;</span><br><span class="line">              chart.<span class="property">legend</span>.<span class="property">position</span> = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">              chart.<span class="property">legend</span>.<span class="property">format</span>.<span class="property">fill</span>.<span class="title function_">setSolidColor</span>(<span class="string">&#x27;white&#x27;</span>);</span><br><span class="line">              chart.<span class="property">dataLabels</span>.<span class="property">format</span>.<span class="property">font</span>.<span class="property">size</span> = <span class="number">15</span>;</span><br><span class="line">              chart.<span class="property">dataLabels</span>.<span class="property">format</span>.<span class="property">font</span>.<span class="property">color</span> = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">              <span class="keyword">const</span> points = chart.<span class="property">series</span>.<span class="title function_">getItemAt</span>(<span class="number">0</span>).<span class="property">points</span>;</span><br><span class="line">              points.<span class="title function_">getItemAt</span>(<span class="number">0</span>).<span class="property">format</span>.<span class="property">fill</span>.<span class="title function_">setSolidColor</span>(<span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line">              points.<span class="title function_">getItemAt</span>(<span class="number">1</span>).<span class="property">format</span>.<span class="property">fill</span>.<span class="title function_">setSolidColor</span>(<span class="string">&#x27;indigo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> i = <span class="number">12</span>;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line">              values = data.<span class="title function_">reduce</span>(<span class="function">(<span class="params">preValue, d</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> [...preValue, [d.<span class="property">userId</span>, d.<span class="property">id</span>, d.<span class="property">title</span>, d.<span class="property">body</span>]];</span><br><span class="line">              &#125;, []);</span><br><span class="line"></span><br><span class="line">              sheet.<span class="title function_">getRange</span>(<span class="string">`A<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>:D<span class="subst">$&#123;i + data.length&#125;</span>`</span>).<span class="property">values</span> = values;</span><br><span class="line">              <span class="comment">// Run the queued commands, and return a promise to indicate</span></span><br><span class="line">              <span class="comment">// task completion</span></span><br><span class="line">              <span class="keyword">return</span> ctx.<span class="title function_">sync</span>();</span><br><span class="line">            &#125;))&#125;)</span><br><span class="line">        .<span class="title function_">subscribe</span>(</span><br><span class="line">            <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">appRef</span>.<span class="title function_">tick</span>();</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="程式碼解釋"><a class="header-anchor" href="#程式碼解釋"> </a>程式碼解釋</h3>
<h4 id="loadData"><a class="header-anchor" href="#loadData"> </a>loadData()</h4>
<p>這個 method 主要是用來驗證 CORS 的情況下， 是否還可以在 Excel 裡正常的運作。</p>
<h4 id="Excel-run"><a class="header-anchor" href="#Excel-run"> </a>Excel.run</h4>
<blockquote>
<p>Ｅxcel.run((ctx) =&gt; {　… })</p>
</blockquote>
<p>這段是準備要在Excel上顯示的資料</p>
<h4 id="ctx-sync"><a class="header-anchor" href="#ctx-sync"> </a>ctx.sync()</h4>
<p>準備好的內容，更新同步到 Excel 的 activateSheet 上</p>
<h2 id="polyfills-ts"><a class="header-anchor" href="#polyfills-ts"> </a>polyfills.ts</h2>
<p>需要打開以下的檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** IE9, IE10 and IE11 requires all of the following polyfills. **/</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/symbol&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/object&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/function&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/parse-int&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/parse-float&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/number&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/string&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/date&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/array&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/regexp&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/map&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/weak-map&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core-js/es6/set&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>到這邊為止，已經完成了 Angular 端最基本的環境設定</p>
<h1 id="新增-Manifest-xml"><a class="header-anchor" href="#新增-Manifest-xml"> </a>新增 Manifest.xml</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Created:cb85b80c-f585-40ff-8bfc-12ff4d0e34a9--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OfficeApp</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/office/appforoffice/1.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:type</span>=<span class="string">&quot;TaskPaneApp&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Id</span>&gt;</span>534a9c82-e492-4b03-a0df-7e6e97815039<span class="tag">&lt;/<span class="name">Id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Version</span>&gt;</span>1.0.0.0<span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ProviderName</span>&gt;</span>Microsoft<span class="tag">&lt;/<span class="name">ProviderName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DefaultLocale</span>&gt;</span>en-US<span class="tag">&lt;/<span class="name">DefaultLocale</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DisplayName</span> <span class="attr">DefaultValue</span>=<span class="string">&quot;Angular App Sample&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Description</span> <span class="attr">DefaultValue</span>=<span class="string">&quot;Angular App Sample&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Capabilities</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Capability</span> <span class="attr">Name</span>=<span class="string">&quot;Workbook&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Capabilities</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">DefaultSettings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SourceLocation</span> <span class="attr">DefaultValue</span>=<span class="string">&quot;https://localhost:4200&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">DefaultSettings</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Permissions</span>&gt;</span>ReadWriteDocument<span class="tag">&lt;/<span class="name">Permissions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">OfficeApp</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Manifest 的進階說明，請參閱這篇<a href="https://dev.office.com/docs/add-ins/overview/add-in-manifests">文件</a></p>
<h1 id="Excel-的環境設定"><a class="header-anchor" href="#Excel-的環境設定"> </a>Excel 的環境設定</h1>
<p>要在 Excel 內新增我們自己開發的增益集，首先</p>
<ol>
<li>
<p>建立一個分享資料夾</p>
</li>
<li>
<p>將設定好的 Manifest.xml 搬進去，記得每一個增益集的 manifest 檔名都要不一樣</p>
</li>
<li>
<p>將分享資料夾的位置新增到 Excel 裡面去</p>
<ol>
<li>
<p>檔案 --&gt; 選項</p>
<p><img src="https://farm5.staticflickr.com/4220/34905439666_74bcded75e_o.png" alt=""></p>
</li>
<li>
<p>信任中心</p>
<p><img src="https://farm5.staticflickr.com/4222/34782185172_5d669b534e_o.png" alt=""></p>
</li>
<li>
<p>受信任的增益集目錄</p>
<p><img src="https://farm5.staticflickr.com/4222/34782226082_c62009d9e7_o.png" alt=""></p>
</li>
<li>
<p>確定完成</p>
</li>
</ol>
</li>
<li>
<p>插入 -&gt; 我的增益集 -&gt; 共享資料夾</p>
</li>
<li>
<p>可以看到自己寫的增益集了</p>
<p><img src="https://farm5.staticflickr.com/4272/34905548796_0b4b678254_o.png" alt=""></p>
</li>
<li>
<p>選擇要安裝的增益集</p>
<p><img src="https://farm5.staticflickr.com/4271/34813937441_7e6b889bf5_o.png" alt=""></p>
</li>
<li>
<p>安裝完成後，即可看到所建立的增益集畫面在螢幕的右側出現</p>
<p><img src="https://farm5.staticflickr.com/4222/34905598216_6213f0269e_o.png" alt=""></p>
<p>這時右側的操作，就可以直接反應在左側 Excel 工作表內了。</p>
<p><img src="https://farm5.staticflickr.com/4268/34135385293_2969d33e26_o.png" alt=""></p>
</li>
</ol>
<h1 id="Debug"><a class="header-anchor" href="#Debug"> </a>Debug</h1>
<p>請參閱這篇<a href="https://dev.office.com/docs/add-ins/testing/debug-add-ins-using-f12-developer-tools-on-windows-10">文章</a>，在 windows 內提供 F12 開發者工具可以做 Add In 的網頁除錯，但目前看起來是 Windows 10 限定</p>
<h1 id="參閱資料"><a class="header-anchor" href="#參閱資料"> </a>參閱資料</h1>
<ul>
<li><a href="">Manifest</a></li>
<li><a href="https://dev.office.com/docs/add-ins/develop/add-ins-with-angular2">Tips for creating Office Add-ins with Angular 2</a></li>
<li><a href="https://dev.office.com/docs/add-ins/excel/excel-add-ins-javascript-programming-overview">Excel JavaScript API programming overview</a></li>
<li><a href="https://dev.office.com/docs/add-ins/excel/build-your-first-excel-add-in">Build your first Excel add-in</a></li>
<li><a href="https://dev.office.com/docs/add-ins/overview/add-in-manifests">Office Add-ins XML manifest</a></li>
<li><a href="https://dev.office.com/docs/add-ins/testing/debug-add-ins-using-f12-developer-tools-on-windows-10">Debug add-ins using F12 developer tools on Windows 10</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] 加入設定參數</title>
    <url>/2017/06/11/core-configuration/</url>
    <content><![CDATA[<p>.NET Core 提供多種參數設定資料的來源，例如: Json 檔案、ini 檔案或使用 Azure 的 KeyValue 設定檔。雖然預設啟動的 web 環境，已經有載入  <code>appsetting.json</code> 及 <code>appsettings.[environment].json</code> 設定檔，但是如果要自行設定，或是其他 Controller 要使用參數設定，又該怎麼處理呢?</p>
<span id="more"></span>
<h1 id="Startup-cs"><a class="header-anchor" href="#Startup-cs"> </a>Startup.cs</h1>
<p>設定檔可以透過 <code>ConfigurationBuilder</code>建立，以下為簡單的基本架構</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> IConfigurationRoot Configuration &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IHostingEnvironment env</span>)</span></span><br><span class="line">  &#123;            </span><br><span class="line">    <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">      .SetBasePath(env.ContentRootPath)                        </span><br><span class="line">      .AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>, optional: <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    Configuration = builder.Build();    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如 <a href="http://blog.kevinyang.net/2017/05/15/core-web-mvc-001/">這篇筆記</a>，在 <code>constructor</code> 可以取得 <code>IHostingEnvironment</code> 的服務，這個 <code>env</code> 提供了目前程式系統的基本環境，例如根目錄的資訊</p>
<p>ConfigurationBuilder 提供多種設定檔來源的選擇</p>
<h2 id="Add"><a class="header-anchor" href="#Add"> </a>Add</h2>
<p>新增符合 <code>IConfigurationSource</code> 格式的自訂設定檔</p>
<h2 id="AddAzureKeyValue"><a class="header-anchor" href="#AddAzureKeyValue"> </a>AddAzureKeyValue</h2>
<p>使用 <a href="https://azure.microsoft.com/zh-tw/services/key-vault/">Azure KeyValue</a> 服務，作為參數設定檔的資料來源，基本程式架構如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.AddAzureKeyVault(</span><br><span class="line">          <span class="string">$&quot;https://<span class="subst">&#123;Vault&#125;</span>.vault.azure.net/&quot;</span>,</span><br><span class="line">          <span class="string">&quot;ClientId&quot;</span>,</span><br><span class="line">          <span class="string">&quot;ClientSecret&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>AddAzurekeyValue</code> 也提供  <code>IKeyVaultSecretManager</code> ，實作方式範本如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnvironmentSecretManager</span> : <span class="title">IKeyVaultSecretManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _appNamePrefix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnvironmentSecretManager</span>(<span class="params"><span class="built_in">string</span> appName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _appNamePrefix = appName + <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Load</span>(<span class="params">SecretItem secret</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> secret.Identifier.Name.StartsWith(_appNamePrefix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetKey</span>(<span class="params">SecretBundle secret</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> secret.SecretIdentifier.Name.Substring(_appNamePrefix.Length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.AddAzureKeyVault(</span><br><span class="line">    <span class="string">$&quot;https://<span class="subst">&#123;config[<span class="string">&quot;Vault&quot;</span>]&#125;</span>.vault.azure.net/&quot;</span>,</span><br><span class="line">    config[<span class="string">&quot;ClientId&quot;</span>],</span><br><span class="line">    config[<span class="string">&quot;ClientSecret&quot;</span>],</span><br><span class="line">    <span class="keyword">new</span> EnvironmentSecretManager(env.ApplicationName));</span><br></pre></td></tr></table></figure>
<h2 id="AddCommandLine"><a class="header-anchor" href="#AddCommandLine"> </a>AddCommandLine</h2>
<p>利用 command line 的方式，將參數設定值，傳入至系統內</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IConfigurationBuilder <span class="title">AddCommandLine</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">this</span> IConfigurationBuilder configurationBuilder, </span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="built_in">string</span>[] args, IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; switchMappings</span>)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; <span class="title">GetSwitchMappings</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    IReadOnlyDictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; configurationStrings</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> configurationStrings.Select(item =&gt;</span><br><span class="line">            <span class="keyword">new</span> KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;(</span><br><span class="line">                <span class="string">&quot;-&quot;</span> + item.Key.Substring(item.Key.LastIndexOf(<span class="string">&#x27;:&#x27;</span>) + <span class="number">1</span>),</span><br><span class="line">                item.Key))</span><br><span class="line">                .ToDictionary(</span><br><span class="line">                    item =&gt; item.Key, item =&gt; item.Value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> dict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123;<span class="string">&quot;Profile:MachineName&quot;</span>, <span class="string">&quot;Rick&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;App:MainWindow:Left&quot;</span>, <span class="string">&quot;11&quot;</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">        builder.AddInMemoryCollection(dict)</span><br><span class="line">              .AddCommandLine(args, GetSwitchMappings(dict));</span><br><span class="line">        Configuration = builder.Build();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">dotnet run /Profile:MachineName=Bob /App:MainWindow:Left=<span class="number">1234</span></span><br></pre></td></tr></table></figure>
<p><code>AddCommandLine</code> 也可以搭配 <code>AddInMemoryCollection</code> 一起使用，如上述的程式碼</p>
<h2 id="AddDockerSecrets"><a class="header-anchor" href="#AddDockerSecrets"> </a>AddDockerSecrets</h2>
<p>使用 Docker Secrets 作為參數設定檔的資料來源</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .AddDockerSecrets()</span><br></pre></td></tr></table></figure>
<h2 id="AddEnvironmentVariables"><a class="header-anchor" href="#AddEnvironmentVariables"> </a>AddEnvironmentVariables</h2>
<p>使用系統環境變數作為參數設定檔的資料來源</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">                  .AddEnvironmentVariables();</span><br></pre></td></tr></table></figure>
<h2 id="AddIniFile"><a class="header-anchor" href="#AddIniFile"> </a>AddIniFile</h2>
<p>使用 ini 檔案作為參數設定檔的資料來源</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">          .SetBasePath(env.ContentRootPath)            </span><br><span class="line">          .AddJsonFile(<span class="string">&quot;appsettings.ini&quot;</span>, optional: <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h2 id="AddInMemoryCollection"><a class="header-anchor" href="#AddInMemoryCollection"> </a>AddInMemoryCollection</h2>
<p>使用自訂的 Dictionary 作為參數設定檔的資料來源</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#123;<span class="string">&quot;Profile:MachineName&quot;</span>, <span class="string">&quot;Rick&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;App:MainWindow:Left&quot;</span>, <span class="string">&quot;11&quot;</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">                 .AddInMemoryCollection(dict)</span><br></pre></td></tr></table></figure>
<h2 id="AddJsonFile"><a class="header-anchor" href="#AddJsonFile"> </a>AddJsonFile</h2>
<p>使用 Json 檔案作為參數設定檔的資料來源</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">          .SetBasePath(env.ContentRootPath)            </span><br><span class="line">          .AddJsonFile(<span class="string">&quot;appsettings.json&quot;</span>, optional: <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h2 id="AddUserSecrets"><a class="header-anchor" href="#AddUserSecrets"> </a>AddUserSecrets</h2>
<p>使用UserSecrets作為參數設定檔的資料來源，這一個檔案並不會存在於專案資訊裡，實際的檔案會存放在於開發者的電腦內，故這個功能在預設模式下，只有處於開發模式下才會被開啟。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()            </span><br><span class="line">           .AddUserSecrets&lt;Startup&gt;();</span><br></pre></td></tr></table></figure>
<p>至於他的實際的存放位置是在哪裡，在 <code>專案.csproj</code> 裡會存放一組 <code>UserSecretsId</code> ，這組 ID 會是資料夾的名稱</p>
<h2 id="AddXmlFile"><a class="header-anchor" href="#AddXmlFile"> </a>AddXmlFile</h2>
<p>使用 xml 檔案作為參數設定檔的資料來源</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">          .SetBasePath(env.ContentRootPath)            </span><br><span class="line">          .AddJsonFile(<span class="string">&quot;appsettings.xml&quot;</span>, optional: <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h1 id="註冊至Service內"><a class="header-anchor" href="#註冊至Service內"> </a>註冊至Service內</h1>
<p>將 <code>Configuration</code> 加入到 service 內</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  services.Configure&lt;MyOptions&gt;(Configuration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>MyOptions</code> 是 Configuration 的格式定義</li>
</ul>
<p>使用方式如下，在 Controller 的地方，利用 IOptions 的方式取得在 <code>Startup.cs</code> 內加入至 services 內的設定檔</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> MyOptions _myOptions = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">IOptions&lt;MyOptions&gt; options</span>)</span></span><br><span class="line">&#123;        </span><br><span class="line">  <span class="keyword">this</span>._myOptions = options.Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">string</span> option1 = <span class="keyword">this</span>._myOptions.Option1;</span><br><span class="line">  <span class="built_in">int</span> Option2 = <span class="keyword">this</span>._myOptions.Option2;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p>.NET Core 提供很多種方式可以取得或是設定設定檔，其他地方如果要使用，是透過注入的方式取得，這樣子的模式，在管理設定檔上，就變得非常有彈性了。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/security/key-vault-configuration">Azure Key Vault configuration provider</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration">Configuration</a></li>
<li><a href="http://www.jamessturtevant.com/posts/Acessing-Docker-Swarm-Secrets-From-ASPNET-Core/">Accessing Docker Swarm Secrets from ASP.NET Core</a></li>
<li><a href="https://andrewlock.net/creating-a-custom-iconfigurationprovider-in-asp-net-core-to-parse-yaml/">Creating a custom ConfigurationProvider in ASP.NET Core to parse YAML</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Animation 4.2版 = wow</title>
    <url>/2017/06/11/ng-animation-4-2/</url>
    <content><![CDATA[<p>Animation 在  4.2 版以後，整個功能強度往上跳了好幾級，我對 Animation 本身真的沒什麼研究，但是還是盡量整理了一下，新增的功能有哪些(目前尚無完整的文件)</p>
<span id="more"></span>
<h1 id="新增功能"><a class="header-anchor" href="#新增功能"> </a>新增功能</h1>
<p>Animation在 4.2 版以後有增加了許多功能，以下一一的整理，如果有遺漏或是不正確的地方，還請指教</p>
<h2 id="animation"><a class="header-anchor" href="#animation"> </a>animation</h2>
<p><code>animation</code> 方法讓我們可以使用包裝動畫效果，也可使用變數來當作動畫的參數範本。範例程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">steps: AnimationMetadata | AnimationMetadata[], options?: AnimationOptions | <span class="literal">null</span></span>): <span class="title class_">AnimationReferenceMetadata</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> flyIn = <span class="title function_">animation</span>(</span><br><span class="line">    [</span><br><span class="line">      ...</span><br><span class="line">      <span class="title function_">group</span>([</span><br><span class="line">        <span class="title function_">animate</span>(</span><br><span class="line">            <span class="string">&#x27;0.3s 0.1s ease&#x27;</span>,</span><br><span class="line">            <span class="title function_">style</span>(&#123;<span class="attr">transform</span>: <span class="string">&#x27;translateX(0px)&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;&#123;&#123;width&#125;&#125;px&#x27;</span>&#125;)),</span><br><span class="line">        <span class="title function_">animate</span>(<span class="string">&#x27;0.3s ease&#x27;</span>, <span class="title function_">style</span>(&#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;))</span><br><span class="line">      ])</span><br><span class="line">    ],</span><br><span class="line">    &#123;<span class="attr">params</span>: &#123;<span class="attr">width</span>: <span class="number">120</span>&#125;&#125;);</span><br></pre></td></tr></table></figure>
<p>透過上述的方式，可以將 <code>animation</code> 單獨的抽離至新檔案，也可以給予參數的能力，如果使用這個 <code>animation</code> 的當下如設定任何參數時，就會使用預設值。</p>
<h2 id="useAnimation"><a class="header-anchor" href="#useAnimation"> </a>useAnimation</h2>
<p>如果要使用單獨抽離的 <code>animation</code> 時，可以使用 <code>useAnimation</code> ，第一個參數是要使用的 animation 名稱，如果使用的 <code>animation</code> 允使使用參數來改變內建的變數，那就可以設定於第二個參數位置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">useAnimation</span>(<span class="params">animation: AnimationReferenceMetadata, options?: AnimationOptions | <span class="literal">null</span></span>): <span class="title class_">AnimationAnimateRefMetadata</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;flyIn&#125; <span class="keyword">from</span> <span class="string">&#x27;./my-animation&#x27;</span>;</span><br><span class="line">...  </span><br><span class="line"><span class="attr">animations</span>: [<span class="title function_">trigger</span>(</span><br><span class="line">      <span class="string">&#x27;heroState&#x27;</span>,</span><br><span class="line">      [</span><br><span class="line">        ...</span><br><span class="line">        <span class="title function_">transition</span>(<span class="string">&#x27;void =&gt; *&#x27;</span>, [<span class="title function_">useAnimation</span>(flyIn, &#123;<span class="attr">params</span>: &#123;<span class="attr">width</span>: <span class="number">100</span>&#125;&#125;)]),      </span><br><span class="line">        ...</span><br><span class="line">      ])]</span><br></pre></td></tr></table></figure>
<h2 id="query"><a class="header-anchor" href="#query"> </a>query</h2>
<p>這也是另外一個強大的新功能，這功能允許使用類似 jquery 的 query 功能，透過這個可以快速地針對特定的 HTMLElement 加上動畫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">animations</span>: [<span class="title function_">trigger</span>(</span><br><span class="line">      <span class="string">&#x27;flyInOut&#x27;</span>,</span><br><span class="line">      [</span><br><span class="line">       ...</span><br><span class="line">        <span class="title function_">transition</span>(<span class="string">&#x27;:enter&#x27;</span>, [<span class="title function_">group</span>([</span><br><span class="line">              <span class="title function_">useAnimation</span>(flyIn, &#123;<span class="attr">params</span>: &#123;<span class="attr">width</span>: <span class="number">100</span>&#125;&#125;),</span><br><span class="line">              <span class="title function_">query</span>(<span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">                [</span><br><span class="line">                  <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;),</span><br><span class="line">                  <span class="title function_">animate</span>(<span class="number">4000</span>, <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;))</span><br><span class="line">                ])</span><br><span class="line">            ])</span><br><span class="line">        ])</span><br><span class="line">        ...</span><br><span class="line">      ])]</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let hero of heroes&quot;</span> [@<span class="attr">flyInOut</span>]=<span class="string">&quot;&#x27;in&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="animateChild"><a class="header-anchor" href="#animateChild"> </a>animateChild</h2>
<p><code>animateChild</code> 搭配 <code>query</code> 的使用，可以觸發內層元件的動畫事件。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;parent-child-component&#x27;</span>,</span><br><span class="line">  <span class="attr">animations</span>: [</span><br><span class="line">    <span class="title function_">trigger</span>(<span class="string">&#x27;parentAnimation&#x27;</span>, [</span><br><span class="line">      <span class="title function_">transition</span>(<span class="string">&#x27;false =&gt; true&#x27;</span>, [</span><br><span class="line">        <span class="title function_">query</span>(<span class="string">&#x27;header&#x27;</span>, [</span><br><span class="line">          <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;),</span><br><span class="line">          <span class="title function_">animate</span>(<span class="number">500</span>, <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;))</span><br><span class="line">        ]),</span><br><span class="line">        <span class="title function_">query</span>(<span class="string">&#x27;@childAnimation&#x27;</span>, [</span><br><span class="line">          <span class="title function_">animateChild</span>()</span><br><span class="line">        ])</span><br><span class="line">      ])</span><br><span class="line">    ]),</span><br><span class="line">    <span class="title function_">trigger</span>(<span class="string">&#x27;childAnimation&#x27;</span>, [</span><br><span class="line">      <span class="title function_">transition</span>(<span class="string">&#x27;false =&gt; true&#x27;</span>, [</span><br><span class="line">        <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;),</span><br><span class="line">        <span class="title function_">animate</span>(<span class="number">500</span>, <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;))</span><br><span class="line">      ])</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentChildCmp</span> &#123;</span><br><span class="line">  <span class="attr">exp</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [@<span class="attr">parentAnimation</span>]=<span class="string">&quot;exp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> [@<span class="attr">childAnimation</span>]=<span class="string">&quot;exp&quot;</span>&gt;</span></span><br><span class="line">      one</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> [@<span class="attr">childAnimation</span>]=<span class="string">&quot;exp&quot;</span>&gt;</span></span><br><span class="line">      two</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> [@<span class="attr">childAnimation</span>]=<span class="string">&quot;exp&quot;</span>&gt;</span></span><br><span class="line">      three</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="stagger"><a class="header-anchor" href="#stagger"> </a>stagger</h2>
<p><code>stagger</code> 這個方法可以去設定再跑 ngFor 時，可以讓動畫一筆一筆的跑，這方法需要再 <code>query</code> 內使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">stagger</span>(<span class="params">timings: <span class="built_in">string</span> | <span class="built_in">number</span>, animation: AnimationMetadata | AnimationMetadata[]</span>): <span class="title class_">AnimationStaggerMetadata</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">   <span class="attr">templateUrl</span>: <span class="string">&#x27;list.component.html&#x27;</span>,</span><br><span class="line">   <span class="attr">animations</span>: [</span><br><span class="line">      <span class="title function_">trigger</span>(<span class="string">&#x27;listAnimation&#x27;</span>, [</span><br><span class="line">        <span class="title function_">transition</span>(<span class="string">&#x27;* =&gt; *&#x27;</span>, [ <span class="comment">// each time the binding value changes</span></span><br><span class="line">        <span class="title function_">query</span>(<span class="string">&#x27;:leave&#x27;</span>, [</span><br><span class="line">          <span class="title function_">stagger</span>(<span class="number">100</span>, [</span><br><span class="line">            <span class="title function_">animate</span>(<span class="string">&#x27;0.5s&#x27;</span>, <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;))</span><br><span class="line">          ], &#123;<span class="attr">optional</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        ]),</span><br><span class="line">        <span class="title function_">query</span>(<span class="string">&#x27;:enter&#x27;</span>, [</span><br><span class="line">          <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;),</span><br><span class="line">          <span class="title function_">stagger</span>(<span class="number">100</span>, [</span><br><span class="line">            <span class="title function_">animate</span>(<span class="string">&#x27;0.5s&#x27;</span>, <span class="title function_">style</span>(&#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;))</span><br><span class="line">          ], &#123;<span class="attr">optional</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">        ])</span><br><span class="line">      ])</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">ListComponent</span> &#123;</span><br><span class="line">   items = [];</span><br><span class="line"></span><br><span class="line">   <span class="title function_">showItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">items</span> = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">hideItems</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">items</span> = [];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> ? <span class="variable language_">this</span>.<span class="title function_">hideItems</span>() : <span class="variable language_">this</span>.<span class="title function_">showItems</span>();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;toggle()&quot;</span>&gt;</span>Show / Hide Items<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> [@<span class="attr">listAnimation</span>]=<span class="string">&quot;items.length&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of items&quot;</span>&gt;</span></span><br><span class="line">     &#123;&#123; item &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="AnimationBuilder"><a class="header-anchor" href="#AnimationBuilder"> </a>AnimationBuilder</h2>
<p><code>AnimationBuilder</code> 的 <code>build</code> 方法會產生一個 <code>AnimationFactory</code>，而 <code>AnimationFactory</code> 的 <code>create</code> 方法可以產生一個 <code>AnimationPlayer</code>，這個 <code>AnimationPlayer</code> 是可以被撥放，暫停或停止。這模式可以讓我們用程式碼的方式，建立與 decorator 內 animations 區塊相同功能出來，且可以手動控制執行動畫的時間點。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroListComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> _builder: AnimationBuilder</span>) &#123;&#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">makeAnimation</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="comment">// first build the animation</span></span><br><span class="line">    <span class="keyword">const</span> myAnimation = <span class="variable language_">this</span>.<span class="property">_builder</span>.<span class="title function_">build</span>(</span><br><span class="line">        [<span class="title function_">style</span>(&#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;), <span class="title function_">animate</span>(<span class="string">&#x27;0.3s 0.2s ease&#x27;</span>, <span class="title function_">style</span>(&#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;))]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// then create a player from it</span></span><br><span class="line">    <span class="keyword">const</span> player = myAnimation.<span class="title function_">create</span>(element);</span><br><span class="line">    player.<span class="title function_">play</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p>Angular 4.2 版大大的加強 animation 的功能，或許還有些新功能我沒有注意到，但是上述的這些新用法，就已經足以玩出很多種變化。</p>
<p>尤其是讓動畫的效果可以重複使用，對於前端設計者，就可以專注於動畫的設計，而其他對於 animation 不熟悉的人，也可以簡單的使用已經設計好的動畫效果。</p>
<p>非常期待一些大師發布 angular animation 作品，可以讓我們簡單的使用設計好的動畫效果。</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] Dependency Injection</title>
    <url>/2017/06/13/dotnetcore-dependency-injection/</url>
    <content><![CDATA[<p>.NET Core web 專案, a.k.a <a href="http://ASP.NET">ASP.NET</a> Core, 內建了 Dependency Injection 機制，不需要再另外安裝套件才可使用 DI 了。事實上，.NET Core的專案要擴充功能，也都是利用 DI 來新增至系統內。例如 <code>.AddMvc()</code></p>
<span id="more"></span>
<h1 id="內建服務"><a class="header-anchor" href="#內建服務"> </a>內建服務</h1>
<p>初始時，就已經有以下的服務</p>
<p><img src="https://farm5.staticflickr.com/4242/34890280460_72c9e84e8d_o.png" alt=""></p>
<p><a href="http://ASP.NET">ASP.NET</a> 也內建許多服務，像是 <code>MVC</code>, <code>EntityFramework</code>，而這一類的新增方式是透過 <code>AddServiceName</code> 的模式新增至 <code>IServiceCollection</code> 中。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Add framework services.</span></span><br><span class="line">    services.AddDbContext&lt;ApplicationDbContext&gt;(options =&gt;</span><br><span class="line">        options.UseSqlServer(Configuration.GetConnectionString(<span class="string">&quot;DefaultConnection&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()</span><br><span class="line">        .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;()</span><br><span class="line">        .AddDefaultTokenProviders();</span><br><span class="line"></span><br><span class="line">    services.AddMvc();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="註冊服務"><a class="header-anchor" href="#註冊服務"> </a>註冊服務</h1>
<p>當自己所開發的功能想要註冊系統內，也需要走一樣的路徑。是需要被加到 <code>ServiceCollection</code> 內。但根據生命週期的差異，所使用的註冊方式也會有所不一樣</p>
<h2 id="AddTransient"><a class="header-anchor" href="#AddTransient"> </a>AddTransient</h2>
<p><code>Transient</code> : 服務在每次被執行時，都會建立一個新的執行實體。這模式很適合 <code>lightweight</code>、<code>stateless</code>的服務。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddTransient&lt;IOperationTransient, Operation&gt;();</span><br></pre></td></tr></table></figure>
<h2 id="AddScoped"><a class="header-anchor" href="#AddScoped"> </a>AddScoped</h2>
<p><code>Scoped</code> : 服務會在被要求時建立一次，而在這次要求期間，服務不論執行幾次，都不會再次被重新建立。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddScoped&lt;IOperationScoped, Operation&gt;();</span><br></pre></td></tr></table></figure>
<h2 id="AddSingleton"><a class="header-anchor" href="#AddSingleton"> </a>AddSingleton</h2>
<p><code>Singleton</code> 會在第一次呼叫時被建立或是在 <code>ConfigureServies</code> 內被執行，之後程序如果有執行到這一個服務時，基本上都是使用相同的實體</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddSingleton&lt;IOperationSingleton, Operation&gt;();</span><br><span class="line">services.AddSingleton&lt;IOperationSingletonInstance&gt;(<span class="keyword">new</span> Operation(Guid.Empty)); <span class="comment">// 立即執行</span></span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection">Dependency Injection</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]angular.io官網程式碼學習筆記002</title>
    <url>/2017/06/15/angular-aio-code-study-002/</url>
    <content><![CDATA[<p>繼續<a href="http://blog.kevinyang.net/2017/06/15/angular-aio-code-study-001/">筆記001</a>，繼續研究下去。這篇會研讀 <code>&lt;aio-top-menu&gt;</code> component</p>
<span id="more"></span>
<h1 id="aio-top-menu"><a class="header-anchor" href="#aio-top-menu"> </a>aio-top-menu</h1>
<p>component 所在路徑 <code>src/app/layout/top-menu</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavigationNode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;app/navigation/navigation.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;aio-top-menu&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul role=&quot;navigation&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;li *ngFor=&quot;let node of nodes&quot;&gt;&lt;a class=&quot;nav-link&quot; [href]=&quot;node.url&quot; [title]=&quot;node.title&quot;&gt;&#123;&#123; node.title &#125;&#125;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TopMenuComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">nodes</span>: <span class="title class_">NavigationNode</span>[];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>由 <code>app.component.ts</code> 提供要顯示的資料</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">NavigationNode</span> &#123;</span><br><span class="line">  url?: <span class="built_in">string</span>;</span><br><span class="line">  title?: <span class="built_in">string</span>;</span><br><span class="line">  tooltip?: <span class="built_in">string</span>;</span><br><span class="line">  hidden?: <span class="built_in">string</span>;</span><br><span class="line">  children?: <span class="title class_">NavigationNode</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="app-component-ts"><a class="header-anchor" href="#app-component-ts"> </a>app.component.ts</h1>
<p>提供 <code>&lt;aio-top-menu&gt;</code>的資料來源是  <code>navigationService.navigationViews</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">navigationViews</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">views</span> =&gt;</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">topMenuNodes</span> = views[<span class="string">&#x27;TopBar&#x27;</span>]  || [];</span><br><span class="line">      ...      </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在 <code>navigationService</code> 內的 <code>navigationView</code> 方法如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> navigationInfo = <span class="variable language_">this</span>.<span class="title function_">fetchNavigationInfo</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">navigationViews</span> = <span class="variable language_">this</span>.<span class="title function_">getNavigationViews</span>(navigationInfo);</span><br></pre></td></tr></table></figure>
<h2 id="fetchNavigationInfo"><a class="header-anchor" href="#fetchNavigationInfo"> </a>fetchNavigationInfo</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> navigationPath = <span class="variable constant_">CONTENT_URL_PREFIX</span> + <span class="string">&#x27;navigation.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">fetchNavigationInfo</span>(): <span class="title class_">Observable</span>&lt;<span class="title class_">NavigationResponse</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> navigationInfo = <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(navigationPath)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>() <span class="keyword">as</span> <span class="title class_">NavigationResponse</span>)</span><br><span class="line">  .<span class="title function_">publishLast</span>();</span><br><span class="line">  navigationInfo.<span class="title function_">connect</span>();</span><br><span class="line">  <span class="keyword">return</span> navigationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其實這段很有趣，以下是程式碼裡的註解，詳細說明為什麼他們要這樣子寫</p>
<blockquote>
<p>Get an observable that fetches the <code>NavigationResponse</code> from the server.
We create an observable by calling <code>http.get</code> but then publish it to share the result
among multiple subscribers, without triggering new requests.
We use <code>publishLast</code> because once the http request is complete the request observable completes.
If you use <code>publish</code> here then the completed request observable will cause the subscribed  observables to complete too.
We <code>connect</code> to the published observable to trigger the request immediately.
We could use <code>.refCount</code> here but then if the subscribers went from 1 -&gt; 0 -&gt; 1 then you would get another request to the server.
We are not storing the subscription from connecting as we do not expect this service to be destroyed.</p>
</blockquote>
<ul>
<li><code>publishLast()</code> 只會記錄 Observable <strong>完成後</strong>的值。</li>
<li><code>connect()</code> 會立即執行 Obervable。</li>
</ul>
<p>透過這兩個 Operator 的組合就可以避免重複發出 request，又可以保留最後的資料。</p>
<hr>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">NavigationResponse</span> = &#123;<span class="attr">__versionInfo</span>: <span class="title class_">VersionInfo</span> &#125; &amp; &#123; [<span class="attr">name</span>: <span class="built_in">string</span>]: <span class="title class_">NavigationNode</span>[]|<span class="title class_">VersionInfo</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>這種 <code>type</code> 的定義方式為 TypeScript 的 <code>Intersection Types</code>，意思是指當指定到這種型別時，需同時符合第一種及第二種型別。</p>
<p>而在這 function 內所取得的資料來源 (generated/navigation.json)，就是符合這種格式的。</p>
<h2 id="getNavigationViews"><a class="header-anchor" href="#getNavigationViews"> </a>getNavigationViews</h2>
<p>繼上一段取完資料後的 Observable，接著會傳進這個 function，這 function 的功能是將關於 View 的部分抽離出來</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">getNavigationViews</span>(<span class="attr">navigationInfo</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">NavigationResponse</span>&gt;): <span class="title class_">Observable</span>&lt;<span class="title class_">NavigationViews</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> navigationViews = navigationInfo</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> views = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, response);</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(views).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123; <span class="keyword">delete</span> views[key]; &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> views <span class="keyword">as</span> <span class="title class_">NavigationViews</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">publishLast</span>();</span><br><span class="line">    navigationViews.<span class="title function_">connect</span>();</span><br><span class="line">    <span class="keyword">return</span> navigationViews;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Object.assign(&#123;&#125;, response)</code>  將原有的資料複製成一份全新的</li>
<li><code>map</code> 裡的行為是將 __versionInfo 的部分從既有的資料中刪除</li>
<li>使用 <code>publishLast()</code> 跟 <code>connect()</code> 的理由同上一段</li>
<li>回傳的結果，就只會剩下 <code>NavigationViews</code> 而已</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">NavigationViews</span> &#123;</span><br><span class="line">  [<span class="attr">name</span>: <span class="built_in">string</span>]: <span class="title class_">NavigationNode</span>[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>接著回到 <code>app.component.ts</code> ，在 subscribe 之後就可以取得 <code>NavigationViews</code> 了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">navigationViews</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">views</span> =&gt;</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">topMenuNodes</span> = views[<span class="string">&#x27;TopBar&#x27;</span>]  || [];</span><br><span class="line">      ...      </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>所以 <code>topmenuNodes</code> 就透過 KeyValue 的形式從 NavigationViews 中取出並讓 <code>&lt;aio-top-menu&gt;</code> 做顯示的動作</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="http://blog.kevinyang.net/2016/10/06/rx-subject/#behaviorsubject-replaysubject-asyncsubject-%E8%88%87-publish-%E7%9A%84%E9%97%9C%E4%BF%82">rx-subject</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]angular.io官網程式碼學習筆記003</title>
    <url>/2017/06/16/angular-aio-code-study-003/</url>
    <content><![CDATA[<p>繼續<a href="http://blog.kevinyang.net/2017/06/15/angular-aio-code-study-002/">筆記002</a>，繼續研究下去。這篇會研讀 <code>&lt;aio-search-box&gt;</code> 與 <code>&lt;aio-search-result&gt;</code> component</p>
<span id="more"></span>
<h1 id="aio-search-box"><a class="header-anchor" href="#aio-search-box"> </a>aio-search-box</h1>
<h2 id="檔案位置"><a class="header-anchor" href="#檔案位置"> </a>檔案位置</h2>
<blockquote>
<p>src/app/search/search-box</p>
</blockquote>
<h2 id="search-box-component"><a class="header-anchor" href="#search-box-component"> </a>search-box.component</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;aio-search-box&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;input #searchBox</span></span><br><span class="line"><span class="string">    type=&quot;search&quot;</span></span><br><span class="line"><span class="string">    aria-label=&quot;search&quot;</span></span><br><span class="line"><span class="string">    placeholder=&quot;Search&quot;</span></span><br><span class="line"><span class="string">    (input)=&quot;doSearch()&quot;</span></span><br><span class="line"><span class="string">    (keyup)=&quot;doSearch()&quot;</span></span><br><span class="line"><span class="string">    (focus)=&quot;doFocus()&quot;</span></span><br><span class="line"><span class="string">    (click)=&quot;doSearch()&quot;&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SearchBoxComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="ngOnInit"><a class="header-anchor" href="#ngOnInit"> </a>ngOnInit</h3>
<p>如果網址有類似這種情況時 <code>https://angular.io/?search=xxxxxx</code>， 會預先使用網址的查詢條件並執行搜尋</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> query = <span class="variable language_">this</span>.<span class="property">locationService</span>.<span class="title function_">search</span>()[<span class="string">&#x27;search&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (query) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">query</span> = query;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">doSearch</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>locationService.search() 的程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">search</span>(): &#123; [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>; &#125; &#123;</span><br><span class="line">    <span class="keyword">const</span> search = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> path = <span class="variable language_">this</span>.<span class="property">location</span>.<span class="title function_">path</span>();</span><br><span class="line">    <span class="keyword">const</span> q = path.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (q &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> params = path.<span class="title function_">substr</span>(q + <span class="number">1</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">          params.<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> pair = p.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (pair[<span class="number">0</span>]) &#123;</span><br><span class="line">              search[<span class="built_in">decodeURIComponent</span>(pair[<span class="number">0</span>])] = pair[<span class="number">1</span>] &amp;&amp; <span class="built_in">decodeURIComponent</span>(pair[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">/* don&#x27;t care */</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> search;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="doSearch"><a class="header-anchor" href="#doSearch"> </a>doSearch()</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> searchSubject = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Output</span>() onSearch = <span class="variable language_">this</span>.<span class="property">searchSubject</span>.<span class="title function_">distinctUntilChanged</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">doSearch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">searchSubject</span>.<span class="title function_">next</span>(<span class="variable language_">this</span>.<span class="property">query</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>searchSubject</code> 是 @Output，所以會將查詢條件輸出並觸發 <code>app.component.ts</code> 的搜尋功能</p>
<ul>
<li>
<p><code>app.component.ts</code> 的 <code>doSearch(query)</code> 會執行 <code>searchService.search(query)</code> 的動作，並判斷是否要顯示 <code>aio-search-result</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">doSearch</span>(<span class="params">query</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">searchService</span>.<span class="title function_">search</span>(query);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">showSearchResults</span> = !!query;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>另外一個要注意的地方是，這一個 <code>@Output onSearch</code> 是使用 Subject 的方式作為溝通介面，以下幾點原因</p>
<ul>
<li><code>EventEmitter</code> 的本質原本就是 <code>Subject</code>，所以使用 <code>Subject</code> 做替換是沒有問題的</li>
<li>直接使用 Subject 而不使用 <code>EventEmitter</code> 的好處是，可以搭配 RxJS 的 Operator，例如 <code>distinctUntilChanged</code></li>
<li>使用 <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-distinctUntilChanged">distinctUntilChanged</a> 可以減少不必要的執行查詢的動作</li>
</ul>
</li>
</ul>
<h3 id="doFocus"><a class="header-anchor" href="#doFocus"> </a>doFocus()</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Output</span>() onFocus = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"><span class="title function_">doFocus</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFocus</span>.<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">query</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">focus</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchBox</span>.<span class="property">nativeElement</span>.<span class="title function_">focus</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>當停駐於這個物件時，也會觸發搜尋功能</li>
<li><code>focus()</code> 是公開方法，可以讓游標停留在搜尋欄位。</li>
</ul>
<h3 id="小技巧"><a class="header-anchor" href="#小技巧"> </a>小技巧</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(<span class="string">&#x27;searchBox&#x27;</span>) <span class="attr">searchBox</span>: <span class="title class_">ElementRef</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">get</span> <span class="title function_">query</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchBox</span>.<span class="property">nativeElement</span>.<span class="property">value</span>; &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">set</span> <span class="title function_">query</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123; <span class="variable language_">this</span>.<span class="property">searchBox</span>.<span class="property">nativeElement</span>.<span class="property">value</span> = value; &#125;</span><br></pre></td></tr></table></figure>
<p>使用 getter / setter 的方式，來簡化程式碼的撰寫，這個專案內，這技巧到處都可以看到。</p>
<h1 id="aio-search-result"><a class="header-anchor" href="#aio-search-result"> </a>aio-search-result</h1>
<h2 id="檔案位置-v2"><a class="header-anchor" href="#檔案位置-v2"> </a>檔案位置</h2>
<blockquote>
<p>src/app/search/search-results</p>
</blockquote>
<h2 id="search-results-component"><a class="header-anchor" href="#search-results-component"> </a>search-results.component</h2>
<h3 id="樣板"><a class="header-anchor" href="#樣板"> </a>樣板</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-results&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;searchAreas.length; then searchResults; else notFound&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">searchResults</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;visually-hidden&quot;</span>&gt;</span>Search Results<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search-area&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let area of searchAreas&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;area.name&#125;&#125; (&#123;&#123;area.pages.length + area.priorityPages.length&#125;&#125;)<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;priority-pages&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;search-page&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let page of area.priorityPages&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;search-result-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; page.path &#125;&#125;&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onResultSelected(page)&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;symbol &#123;&#123;page.type&#125;&#125;&quot;</span> *<span class="attr">ngIf</span>=<span class="string">&quot;area.name === &#x27;api&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.title &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;search-page&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let page of area.pages&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;search-result-item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; page.path &#125;&#125;&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;onResultSelected(page)&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;symbol &#123;&#123;page.type&#125;&#125;&quot;</span> *<span class="attr">ngIf</span>=<span class="string">&quot;area.name === &#x27;api&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.title &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">notFound</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>No results found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>利用 <code>ngIf then else</code> 搭配 <code>&lt;ng-template&gt;</code> 加樣版變數來控制要顯示的內容區塊</li>
</ul>
<h3 id="ngOnInit-v2"><a class="header-anchor" href="#ngOnInit-v2"> </a>ngOnInit</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resultsSubscription</span> = <span class="variable language_">this</span>.<span class="property">searchService</span>.<span class="property">searchResults</span></span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function"><span class="params">search</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">searchAreas</span> = <span class="variable language_">this</span>.<span class="title function_">processSearchResults</span>(search));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>註冊 searchService的 searchResults</li>
<li>當有資料產生時經過 <code>processSearchResults</code> 處理後，再將其結果顯示</li>
</ul>
<h3 id="ngOnDestory"><a class="header-anchor" href="#ngOnDestory"> </a>ngOnDestory</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">resultsSubscription</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>取消<code>searchService.searchResults</code> 的訂閱</li>
</ul>
<h3 id="processSearchRestuls"><a class="header-anchor" href="#processSearchRestuls"> </a>processSearchRestuls</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SearchResults</span> &#123;</span><br><span class="line">  <span class="attr">query</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">results</span>: <span class="title class_">SearchResult</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SearchResult</span> &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">titleWords</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">keywords</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">processSearchResults</span>(<span class="params">search: SearchResults</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> searchAreaMap = &#123;&#125;;</span><br><span class="line">    search.<span class="property">results</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!result.<span class="property">title</span>) &#123; <span class="keyword">return</span>; &#125; <span class="comment">// bad data; should fix</span></span><br><span class="line">      <span class="keyword">const</span> areaName = <span class="variable language_">this</span>.<span class="title function_">computeAreaName</span>(result) || <span class="variable language_">this</span>.<span class="property">defaultArea</span>;</span><br><span class="line">      <span class="keyword">const</span> area = searchAreaMap[areaName] = searchAreaMap[areaName] || [];</span><br><span class="line">      area.<span class="title function_">push</span>(result);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(searchAreaMap).<span class="title function_">sort</span>(<span class="function">(<span class="params">l, r</span>) =&gt;</span> l &gt; r ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> keys.<span class="title function_">map</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="attr">pages</span>: <span class="title class_">SearchResult</span>[] = searchAreaMap[name];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Extract the top 5 most relevant results as priorityPages</span></span><br><span class="line">      <span class="keyword">const</span> priorityPages = pages.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">      pages = pages.<span class="title function_">sort</span>(compareResults);</span><br><span class="line">      <span class="keyword">return</span> &#123; name, pages, priorityPages &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Split the search result path and use the top level folder, if there is one, as the area name.</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">computeAreaName</span>(<span class="params">result: SearchResult</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">topLevelFolders</span>.<span class="title function_">indexOf</span>(result.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">path</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [areaName, rest] = result.<span class="property">path</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> rest &amp;&amp; areaName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// outside class</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compareResults</span>(<span class="params">l: &#123;title: <span class="built_in">string</span>&#125;, r: &#123;title: <span class="built_in">string</span>&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> l.<span class="property">title</span>.<span class="title function_">toUpperCase</span>() &gt; r.<span class="property">title</span>.<span class="title function_">toUpperCase</span>() ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>將結果依組別並字母排序顯示</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]angular.io官網程式碼學習筆記004</title>
    <url>/2017/06/19/angular-aio-code-study-004/</url>
    <content><![CDATA[<p>這篇會研讀 <code>&lt;aio-nav-menu&gt;</code> 及 <code>&lt;aio-select&gt;</code> component，就是這一區塊</p>
<p><img src="https://farm5.staticflickr.com/4234/35007784610_d8f3bb54a1_o.png" alt=""></p>
<span id="more"></span>
<h1 id="template"><a class="header-anchor" href="#template"> </a>template</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">md-sidenav</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;&#x27;collapsed&#x27;: !isSideBySide &#125;&quot;</span> #<span class="attr">sidenav</span> <span class="attr">class</span>=<span class="string">&quot;sidenav&quot;</span> [<span class="attr">opened</span>]=<span class="string">&quot;isOpened&quot;</span> [<span class="attr">mode</span>]=<span class="string">&quot;mode&quot;</span></span></span><br><span class="line"><span class="tag">    (<span class="attr">open</span>)=<span class="string">&quot;updateHostClasses()&quot;</span> (<span class="attr">close</span>)=<span class="string">&quot;updateHostClasses()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aio-nav-menu</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!isSideBySide&quot;</span> [<span class="attr">nodes</span>]=<span class="string">&quot;topMenuNarrowNodes&quot;</span> [<span class="attr">currentNode</span>]=<span class="string">&quot;currentNodes?.TopBarNarrow&quot;</span></span></span><br><span class="line"><span class="tag">      [<span class="attr">isWide</span>]=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-nav-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aio-nav-menu</span> [<span class="attr">nodes</span>]=<span class="string">&quot;sideNavNodes&quot;</span> [<span class="attr">currentNode</span>]=<span class="string">&quot;currentNodes?.SideNav&quot;</span> [<span class="attr">isWide</span>]=<span class="string">&quot;isSideBySide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-nav-menu</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">md-sidenav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>這裡的 <code>&lt;aio-nav-menu&gt;</code>有兩個，依 <code>isSideBySide</code> 變數來決定要顯示哪一個，這兩個不會同時存在，判斷的規則是根據視窗大小</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> sideBySideWidth = <span class="number">992</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HostListener</span>(<span class="string">&#x27;window:resize&#x27;</span>, [<span class="string">&#x27;$event.target.innerWidth&#x27;</span>])</span><br><span class="line"><span class="title function_">onResize</span>(<span class="params">width</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isSideBySide</span> = width &gt; <span class="variable language_">this</span>.<span class="property">sideBySideWidth</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>nodes 的取法，請參閱<a href="http://blog.kevinyang.net/2017/06/15/angular-aio-code-study-002/">這篇文章</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">navigationViews</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">views</span> =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">topMenuNodes</span> = views[<span class="string">&#x27;TopBar&#x27;</span>] || [];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">topMenuNarrowNodes</span> = views[<span class="string">&#x27;TopBarNarrow&#x27;</span>] || <span class="variable language_">this</span>.<span class="property">topMenuNodes</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h1 id="NavMenuComponent"><a class="header-anchor" href="#NavMenuComponent"> </a>NavMenuComponent</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aio-nav-item</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let node of filteredNodes&quot;</span> [<span class="attr">node</span>]=<span class="string">&quot;node&quot;</span> [<span class="attr">selectedNodes</span>]=<span class="string">&quot;currentNode?.nodes&quot;</span> [<span class="attr">isWide</span>]=<span class="string">&quot;isWide&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aio-nav-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NavMenuComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">currentNode</span>: <span class="title class_">CurrentNode</span>;</span><br><span class="line">  <span class="meta">@Input</span>() isWide = <span class="literal">false</span>;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">nodes</span>: <span class="title class_">NavigationNode</span>[];</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">filteredNodes</span>() &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">nodes</span> ? <span class="variable language_">this</span>.<span class="property">nodes</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> !n.<span class="property">hidden</span>) : []; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="NavItemComponent"><a class="header-anchor" href="#NavItemComponent"> </a>NavItemComponent</h1>
<h2 id="ngOnChanges"><a class="header-anchor" href="#ngOnChanges"> </a>ngOnChanges</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Input</span>() isWide = <span class="literal">false</span>;</span><br><span class="line"><span class="meta">@Input</span>() level = <span class="number">1</span>;</span><br><span class="line"><span class="meta">@Input</span>() <span class="attr">node</span>: <span class="title class_">NavigationNode</span>;</span><br><span class="line"><span class="meta">@Input</span>() <span class="attr">selectedNodes</span>: <span class="title class_">NavigationNode</span>[];</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnChanges</span>(<span class="params">changes: SimpleChanges</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (changes[<span class="string">&#x27;selectedNodes&#x27;</span>] || changes[<span class="string">&#x27;node&#x27;</span>] || changes[<span class="string">&#x27;isWide&#x27;</span>]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">selectedNodes</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ix = <span class="variable language_">this</span>.<span class="property">selectedNodes</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">node</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isSelected</span> = ix !== -<span class="number">1</span>; <span class="comment">// this node is the selected node or its ancestor</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isExpanded</span> = <span class="variable language_">this</span>.<span class="property">isSelected</span> || <span class="comment">// expand if selected or ...</span></span><br><span class="line">          <span class="comment">// preserve expanded state when display is wide; collapse in mobile.</span></span><br><span class="line">          (<span class="variable language_">this</span>.<span class="property">isWide</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">isExpanded</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isSelected</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setClasses</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ngOnChanges</code> 的 <code>changes</code> 內會包含所有 <code>@Input</code> 的變數</li>
</ul>
<h2 id="小技巧"><a class="header-anchor" href="#小技巧"> </a>小技巧</h2>
<ul>
<li>
<p>如果想要定義的型別，不確定裡面的型態會如何，可以裡用這樣子定義</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">classes</span>: &#123;[<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span> &#125;;</span><br></pre></td></tr></table></figure>
<p>這樣定義的資料格式會是 <code>&#123; 'level-1': true, collapsed: false&#125;</code></p>
<p>在 template 上面的用法，f其實還聰明的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[ngClass]=&quot;classes&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="aio-select"><a class="header-anchor" href="#aio-select"> </a>aio-select</h1>
<ul>
<li>
<p>Component 檔案位置: <code>src/app/shared/select</code></p>
</li>
<li>
<p>此 Component 使用 ul 來模擬 select-option的效果</p>
</li>
<li>
<p>Version 資訊的來源</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// Compute the version picker list from the current version and the versions in the navigation</span></span><br><span class="line">    <span class="comment">// map</span></span><br><span class="line"><span class="title function_">combineLatest</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">versionInfo</span>.<span class="title function_">map</span>(<span class="function"><span class="params">versionInfo</span> =&gt;</span> (&#123;<span class="attr">title</span>: versionInfo.<span class="property">raw</span>, <span class="attr">url</span>: <span class="literal">null</span>&#125;)),</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">navigationViews</span>.<span class="title function_">map</span>(<span class="function"><span class="params">views</span> =&gt;</span> views[<span class="string">&#x27;docVersions&#x27;</span>]),</span><br><span class="line">    <span class="function">(<span class="params">currentVersion, otherVersions</span>) =&gt;</span> [currentVersion, ...otherVersions])</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">versions</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">docVersions</span> = versions;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">currentDocVersion</span> = <span class="variable language_">this</span>.<span class="property">docVersions</span>[<span class="number">0</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>利用 <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-combineLatest"><code>combineLatest</code></a> 來將兩組資料源合併成一個新的資料源</li>
</ul>
</li>
<li>
<p><code>onDocVersionChange</code> 會跳至所選擇的版本網址</p>
</li>
</ul>
<h2 id="小技巧-v2"><a class="header-anchor" href="#小技巧-v2"> </a>小技巧</h2>
<ul>
<li><code>HostListener</code>搭配 <code>document:event</code> 就可以監聽到全域事件</li>
<li><code>constructor</code>內所取得的 <code>ElementRef</code> 就是 <code>Component</code> 本身的 DOM</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]angular.io官網程式碼學習筆記005</title>
    <url>/2017/06/19/angular-aio-code-study-005/</url>
    <content><![CDATA[<p><code>&lt;aio-doc-viewer&gt;</code>  Component 是顯示主要內容的區域，來研讀一下是如何動態抽換顯示內容的</p>
<span id="more"></span>
<p><code>&lt;aio-doc-viewer&gt;</code> 預設的 template 是空白的，所以並沒有預設的 html template, <code>&lt;aio-doc-viewer&gt;</code> 是類似 placeholder 的角色，用來定位內容顯示位置用</p>
<h1 id="初始值"><a class="header-anchor" href="#初始值"> </a>初始值</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialDocViewerElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;aio-doc-viewer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> initialDocViewerContent = initialDocViewerElement ? initialDocViewerElement.<span class="property">innerHTML</span> : <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>這兩行是定義在 class DocViewerComponent，主要的用途是避免畫面閃爍</p>
<h1 id="constructor"><a class="header-anchor" href="#constructor"> </a>constructor</h1>
<p>constructor 共注入了以下幾個 provider</p>
<ul>
<li>ComponentFactoryResolver：用來動態產生 component 的方法</li>
<li>ElementRef：當下 Component 的 DOM 參考</li>
<li>EmbeddedComponents：可以動態載入的自訂component 陣列</li>
<li>Injector：可以手動取得 provider 的方法</li>
<li>Title：用來更新網頁標題的服務</li>
<li>TocService：自訂的 service，負責 TOC 區塊的相關行為</li>
</ul>
<h2 id="建立-components"><a class="header-anchor" href="#建立-components"> </a>建立 components</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">EmbeddedComponentFactory</span> &#123;</span><br><span class="line">  <span class="attr">contentPropertyName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">factory</span>: <span class="title class_">ComponentFactory</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="attr">embeddedComponentFactories</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">EmbeddedComponentFactory</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">...</span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> component <span class="keyword">of</span> embeddedComponents.<span class="property">components</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> factory = componentFactoryResolver.<span class="title function_">resolveComponentFactory</span>(component);</span><br><span class="line">    <span class="keyword">const</span> selector = factory.<span class="property">selector</span>;</span><br><span class="line">    <span class="keyword">const</span> contentPropertyName = <span class="variable language_">this</span>.<span class="title function_">selectorToContentPropertyName</span>(selector);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">embeddedComponentFactories</span>.<span class="title function_">set</span>(selector, &#123; contentPropertyName, factory &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據預先設定好的 components 陣列，分別動態建立 componentFactory，供之後顯示使用</p>
<h3 id="selectorToContentPropertyName"><a class="header-anchor" href="#selectorToContentPropertyName"> </a>selectorToContentPropertyName</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">selectorToContentPropertyName</span>(<span class="params">selector: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> selector.<span class="title function_">replace</span>(<span class="regexp">/-(.)/g</span>, <span class="function">(<span class="params">match, $1</span>) =&gt;</span> $1.<span class="title function_">toUpperCase</span>()) + <span class="string">&#x27;Content&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行效果:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">selector = <span class="string">&#x27;aio-doc-viewer&#x27;</span>;</span><br><span class="line"><span class="title function_">selectorToContentPropertyName</span>(selector); <span class="comment">//輸出結果: aioDocViewerContent</span></span><br></pre></td></tr></table></figure>
<h1 id="觸發點-set-doc"><a class="header-anchor" href="#觸發點-set-doc"> </a>觸發點 - set doc</h1>
<p>當外部指定新的 <code>DocumentContents</code> 至 <code>DocViewerComponent</code> 時，需要執行的工作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Output</span>()</span><br><span class="line">docRendered = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Input</span>()</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">doc</span>(<span class="params">newDoc: DocumentContents</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">ngOnDestroy</span>();</span><br><span class="line">  <span class="keyword">if</span> (newDoc) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">build</span>(newDoc);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">docRendered</span>.<span class="title function_">emit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>先清空現有的狀態</li>
<li>重新建置要顯示的內容</li>
<li>當建置完成後，透過 <code>docRendered</code> 發出完成通知</li>
</ul>
<h2 id="ngOndestory"><a class="header-anchor" href="#ngOndestory"> </a>ngOndestory</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// destroy these components else there will be memory leaks</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">embeddedComponents</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">comp</span> =&gt;</span> comp.<span class="title function_">destroy</span>());</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">embeddedComponents</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>摧毀產生的 <code>componennts</code></li>
<li>將 <code>embeddedComponents</code> 清空</li>
</ul>
<h2 id="build"><a class="header-anchor" href="#build"> </a>build</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">build</span>(<span class="params">doc: DocumentContents</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// security: the doc.content is always authored by the documentation team</span></span><br><span class="line">  <span class="comment">// and is considered to be safe</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hostElement</span>.<span class="property">innerHTML</span> = doc.<span class="property">contents</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!doc.<span class="property">contents</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">addTitleAndToc</span>(doc.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO(i): why can&#x27;t I use for-of? why doesn&#x27;t typescript like Map#value() iterators?</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">embeddedComponentFactories</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; contentPropertyName, factory &#125;, selector</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> embeddedComponentElements = <span class="variable language_">this</span>.<span class="property">hostElement</span>.<span class="title function_">querySelectorAll</span>(selector);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cast due to https://github.com/Microsoft/TypeScript/issues/4947</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">of</span> embeddedComponentElements <span class="keyword">as</span> <span class="built_in">any</span> <span class="keyword">as</span> <span class="title class_">HTMLElement</span>[])&#123;</span><br><span class="line">      <span class="comment">// hack: preserve the current element content because the factory will empty it out</span></span><br><span class="line">      <span class="comment">// security: the source of this innerHTML is always authored by the documentation team</span></span><br><span class="line">      <span class="comment">// and is considered to be safe</span></span><br><span class="line">      element[contentPropertyName] = element.<span class="property">innerHTML</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">embeddedComponents</span>.<span class="title function_">push</span>(factory.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">injector</span>, [], element));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>調整網頁的抬頭並建立 TOC 樣版</li>
<li>由於官網的 docContent 都是預先產生的，所以這裡認定為無安全性的問題。實務上也請盡量避免直接操作 DOM，以避免不必要的問題</li>
<li>根據 content html 的內容，決定要產生哪些 component</li>
<li>透過在 constructor 存入的 <code>componentFactory</code> 來建立 <code>component</code>，並將建立後的 <code>componentRef</code> 存入至 <code>embeddedComponents</code> 陣列中</li>
</ul>
<h2 id="addTitleAndToc"><a class="header-anchor" href="#addTitleAndToc"> </a>addTitleAndToc</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">addTitleAndToc</span>(<span class="params">docId: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tocService</span>.<span class="title function_">reset</span>();</span><br><span class="line">  <span class="keyword">let</span> title = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> titleEl = <span class="variable language_">this</span>.<span class="property">hostElement</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line">  <span class="comment">// Only create TOC for docs with an &lt;h1&gt; title</span></span><br><span class="line">  <span class="comment">// If you don&#x27;t want a TOC, add &quot;no-toc&quot; class to &lt;h1&gt;</span></span><br><span class="line">  <span class="keyword">if</span> (titleEl) &#123;</span><br><span class="line">    title = titleEl.<span class="property">innerText</span>.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/(no-toc|notoc)/i</span>.<span class="title function_">test</span>(titleEl.<span class="property">className</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tocService</span>.<span class="title function_">genToc</span>(<span class="variable language_">this</span>.<span class="property">hostElement</span>, docId);</span><br><span class="line">      titleEl.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;afterend&#x27;</span>, <span class="string">&#x27;&lt;aio-toc class=&quot;embedded&quot;&gt;&lt;/aio-toc&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">titleService</span>.<span class="title function_">setTitle</span>(title ? <span class="string">`Angular - <span class="subst">$&#123;title&#125;</span>`</span> : <span class="string">&#x27;Angular&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>透過 <code>insertAdjacentHTML </code> 將內容新增到想要的位置</li>
</ul>
<h1 id="DoCheck"><a class="header-anchor" href="#DoCheck"> </a>DoCheck</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="attr">embeddedComponents</span>: <span class="title class_">ComponentRef</span>&lt;<span class="built_in">any</span>&gt;[] = [];</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngDoCheck</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">embeddedComponents</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">comp</span> =&gt;</span> comp.<span class="property">changeDetectorRef</span>.<span class="title function_">detectChanges</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>每次當畫面上有觸發 <code>Check</code> 動作時，執行每一個動態產生的 <code>componentRef</code>  的 <code>changeDetectorRef</code> 的 <code>detectChagnes</code> (功能: 檢查是否有資料異動)</li>
<li><code>ChangeDetectorRef</code> 是的功能是用來檢查資料異動並同步頁面與程式。在每一個 Component 都會有自己的 ChangeDetector。</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/api/core/ComponentFactoryResolver">ComponentFactoryResolver</a></li>
<li><a href="https://angular.io/api/core/ComponentFactory">ComponentFactory</a></li>
<li><a href="https://angular.io/api/core/Injector">Injector</a></li>
<li><a href="https://angular.io/api/platform-browser/Title">Title</a></li>
<li><a href="https://angular.io/api/core/ComponentRef">ComponentRef</a></li>
<li><a href="http://localhost:4200/api/core/ChangeDetectorRef">ChangeDetectorRef</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Element/insertAdjacentHTML">insertAdjacentHTML</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 另外一種簡單的方式載入 Component</title>
    <url>/2017/07/02/angular-component-outlet/</url>
    <content><![CDATA[<p>原本 Angular 就提供動態載入 Component 的方式，但是 Angular 又提供另外一種更簡單的方式，<code>ngComponentOutlet</code>，簡單到一個變態的境界</p>
<span id="more"></span>
<h1 id="Overview"><a class="header-anchor" href="#Overview"> </a>Overview</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">directive <span class="title class_">NgComponentOutlet</span> <span class="keyword">implements</span> <span class="title class_">OnChanges</span>,  <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">_viewContainerRef: ViewContainerRef</span>)</span><br><span class="line">  <span class="attr">ngComponentOutlet</span>: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="attr">ngComponentOutletInjector</span>: <span class="title class_">Injector</span></span><br><span class="line">  <span class="attr">ngComponentOutletContent</span>: <span class="built_in">any</span>[][]</span><br><span class="line">  <span class="attr">ngComponentOutletNgModuleFactory</span>: <span class="title class_">NgModuleFactory</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="title function_">ngOnChanges</span>(<span class="attr">changes</span>: <span class="title class_">SimpleChanges</span>)</span><br><span class="line">  <span class="title function_">ngOnDestroy</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="基本款"><a class="header-anchor" href="#基本款"> </a>基本款</h1>
<p>在介紹之前，先簡單看一下程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;ng-component-outlet-simple-example&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;ng-container *ngComponentOutlet=&quot;Hello&quot;&gt;&lt;/ng-container&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NgTemplateOutletSimpleExample</span> &#123;  </span><br><span class="line">  <span class="title class_">Hello</span> = <span class="title class_">HelloComponent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>沒錯，就只有這樣。這是不是比另外一種動態載入 Component 的方式更簡單</p>
<ul>
<li>備註: 只要是要動態載入的，就必須在 <code>ngModule</code> 的 <code>entryComponents</code> 裡註冊</li>
</ul>
<h1 id="進階使用"><a class="header-anchor" href="#進階使用"> </a>進階使用</h1>
<h2 id="Injector"><a class="header-anchor" href="#Injector"> </a>Injector</h2>
<p>當想要動態載入的 <code>Component</code> 需要注入其他服務時，又該如何處理呢，還好 <code>ngComponentOutlet</code> 也有提供 <code>injector</code> 的方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Injector</span>, <span class="title class_">ReflectiveInjector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HelloComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./hello/hello.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GreeterService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./greeter.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ng-container *ngComponentOutlet=&quot;HelloWorld;</span></span><br><span class="line"><span class="string">                                      injector: myInjector&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title class_">HelloWorld</span> = <span class="title class_">HelloComponent</span>;</span><br><span class="line">  <span class="attr">myInjector</span>: <span class="title class_">Injector</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">injector: Injector</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myInjector</span> = <span class="title class_">ReflectiveInjector</span>.<span class="title function_">resolveAndCreate</span>(</span><br><span class="line">      [<span class="title class_">GreeterService</span>],</span><br><span class="line">      injector</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Content"><a class="header-anchor" href="#Content"> </a>Content</h2>
<p>如果動態載入的Component, 有 <code>&lt;ng-content&gt;</code> 時，要如何將內容填入呢?  <code>ngComponentOutlet</code> 有提供 <code>content</code> 的方式可以將 DOM 內容傳入並顯示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Injector</span>, <span class="title class_">ReflectiveInjector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HelloComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./hello/hello.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GreeterService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./greeter.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ng-container *ngComponentOutlet=&quot;HelloWorld;</span></span><br><span class="line"><span class="string">                                      content: myContent&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title class_">HelloWorld</span> = <span class="title class_">HelloComponent</span>;</span><br><span class="line">  myContent = [</span><br><span class="line">    [<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;Ahoj&#x27;</span>)],</span><br><span class="line">    [<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;second content&#x27;</span>)]</span><br><span class="line">  ];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>注意: <code>content</code> 接受一個二微陣列，陣列的第一層的順序，是依 <code>&lt;ng-content&gt;</code> 的顯示順序</li>
<li>第二層的這陣列，則是所屬的 <code>&lt;ng-content&gt;</code> 要顯示的內容</li>
<li>需使用 document.createXX 的方式建立顯示內容</li>
</ul>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4209/35540547751_f55f594bc3_o.png" alt=""></p>
<h2 id="ngModuleFactory"><a class="header-anchor" href="#ngModuleFactory"> </a>ngModuleFactory</h2>
<p>如果想要載入的 <code>Component</code> 是來自其他的 <code>Module</code> 時，又該怎麼處理呢? 這時就要利用 <code>ngModuleFactory</code> 了，寫法也很簡單，請參閱下面的程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Compiler</span>, <span class="title class_">NgModuleFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HelloComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./other/hello/hello.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OtherModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./other/other.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ng-container *ngComponentOutlet=&quot;HelloWorld;</span></span><br><span class="line"><span class="string">                                      ngModuleFactory: myModule&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title class_">HelloWorld</span> = <span class="title class_">HelloComponent</span>;</span><br><span class="line">  <span class="attr">myModule</span>: <span class="title class_">NgModuleFactory</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compiler: Compiler</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myModule</span> = compiler.<span class="title function_">compileModuleSync</span>(<span class="title class_">OtherModule</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>這裡的 <code>OtherModule</code> 不需要事先 Import 到 <code>AppModule</code> 裡</li>
</ul>
<h2 id="範例-動態切換"><a class="header-anchor" href="#範例-動態切換"> </a>範例: 動態切換</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Compiler</span>, <span class="title class_">NgModuleFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GreeterService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./greeter.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HelloComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./other/hello/hello.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">OtherModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./other/other.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">WorldComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./other/world/world.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ng-container *ngComponentOutlet=&quot;HelloWorld;</span></span><br><span class="line"><span class="string">                                      ngModuleFactory: myModule&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">    &lt;button type=&quot;button&quot; (click)=&quot;switch()&quot;&gt;switch&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title class_">HelloWorld</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="attr">myModule</span>: <span class="title class_">NgModuleFactory</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">compiler: Compiler</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myModule</span> = compiler.<span class="title function_">compileModuleSync</span>(<span class="title class_">OtherModule</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">HelloWorld</span> = <span class="title class_">HelloComponent</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">HelloWorld</span>.<span class="property">name</span> === <span class="string">&#x27;HelloComponent&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">HelloWorld</span> = <span class="title class_">WorldComponent</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">HelloWorld</span> = <span class="title class_">HelloComponent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/api/common/NgComponentOutlet">NgComponentOutlet</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular 下拉選單的隱藏菜單</title>
    <url>/2017/07/02/angular-select-option/</url>
    <content><![CDATA[<p>看完 Sam 所寫的 <a href="http://oomusou.io/angular/angular-select/">如何使用 Angular 實作下拉選單?</a>，其實 Angular 針對 Select 這個控制項，有提供一些額外的功能，這邊文章就來整理一下這控制項的隱藏菜單</p>
<span id="more"></span>
<h1 id="隱藏菜單"><a class="header-anchor" href="#隱藏菜單"> </a>隱藏菜單</h1>
<h2 id="ngValue"><a class="header-anchor" href="#ngValue"> </a>ngValue</h2>
<p>AngularJS 有提供 <code>ngOptions</code> 的方法，可以讓我們把 <code>Object</code> 當作 <code>Option</code> 的值，當我們做下拉選單選擇時，就可以取得所選取的物件資料，十分的方便。但在 Angular 裡面應該要怎麼寫才能有同樣的效果。</p>
<p>Angular 如果想要達到同樣的效果，就需要將 <code>Object資料</code> 塞到 <code>ngValue</code> 內即可達到一樣的效果</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;example-app&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;form #f=&quot;ngForm&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;select name=&quot;state&quot; ngModel&gt;</span></span><br><span class="line"><span class="string">        &lt;option value=&quot;&quot; disabled&gt;Choose a state&lt;/option&gt;</span></span><br><span class="line"><span class="string">        &lt;option *ngFor=&quot;let state of states&quot; [ngValue]=&quot;state&quot;&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123; state.abbrev &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/option&gt;</span></span><br><span class="line"><span class="string">      &lt;/select&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">     &lt;p&gt;Form value: &#123;&#123; f.value | json &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">     &lt;!-- example value: &#123;state: &#123;name: &#x27;New York&#x27;, abbrev: &#x27;NY&#x27;&#125; &#125; --&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SelectControlComp</span> &#123;</span><br><span class="line">  states = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Arizona&#x27;</span>, <span class="attr">abbrev</span>: <span class="string">&#x27;AZ&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;California&#x27;</span>, <span class="attr">abbrev</span>: <span class="string">&#x27;CA&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Colorado&#x27;</span>, <span class="attr">abbrev</span>: <span class="string">&#x27;CO&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="attr">abbrev</span>: <span class="string">&#x27;NY&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Pennsylvania&#x27;</span>, <span class="attr">abbrev</span>: <span class="string">&#x27;PA&#x27;</span>&#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="compareWith"><a class="header-anchor" href="#compareWith"> </a>compareWith</h2>
<p>當使用 <code>Object</code> 當作資料時，要怎麼設定下拉選單所選取的值呢，這時候可以透過 <code>compareWith</code> 的方法來實現</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">classs <span class="title class_">AppComponent</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">compareFn</span>(<span class="attr">c1</span>: <span class="title class_">Country</span>, <span class="attr">c2</span>: <span class="title class_">Country</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> c1 &amp;&amp; c2 ? c1.<span class="property">id</span> === c2.<span class="property">id</span> : c1 === c2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>template 的部分是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> [<span class="attr">compareWith</span>]=<span class="string">&quot;compareFn&quot;</span>  [(<span class="attr">ngModel</span>)]=<span class="string">&quot;selectedCountries&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let country of countries&quot;</span> [<span class="attr">ngValue</span>]=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;country.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>透過自訂的方式來決定要依什麼條件來選取下拉選單的選項</p>
<ul>
<li>注意: compareWith 是監聽 <code>change</code> 事件，因為 <code>input</code>  事件在 Firefox 和 IE 上是不會被觸發的。</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/api/forms/SelectControlValueAccessor">SelectControlValueAccessor</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Extension Method</title>
    <url>/2017/07/03/angular-method-extension/</url>
    <content><![CDATA[<p>如果有寫 C# 的人，多少都會寫到擴充方法(Extension Method) ，在 JavaScript 裡面也有雷同的功能，就是直接擴充 <code>prototype</code> 的功能，而 TypeScript 也同理，這裡整理 3 種擴充方法的寫法，並將擴充方法加入到 Angular 專案內使用</p>
<span id="more"></span>
<h1 id="擴充"><a class="header-anchor" href="#擴充"> </a>擴充</h1>
<ul>
<li>情境：要讓文字有可以直接轉述字型的功能，不想自己在寫 <code>parseFloat</code> 了</li>
</ul>
<p>我目前想到的寫法有以下三種</p>
<h2 id="寫法一-直接擴充-prototype"><a class="header-anchor" href="#寫法一-直接擴充-prototype"> </a>寫法一 直接擴充 prototype</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toNumber</span> = <span class="keyword">function</span>(<span class="params"></span>):<span class="built_in">number</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">parseFloat</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>這樣的寫法作為直接</p>
<h2 id="寫法二-Object-assign"><a class="header-anchor" href="#寫法二-Object-assign"> </a>寫法二 Object.assign</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="title function_">toNumber</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="寫法三-Object-defineProperty"><a class="header-anchor" href="#寫法三-Object-defineProperty"> </a>寫法三 Object.defineProperty</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;toNumber&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">value</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>使用這種方式，可以有更多的彈性來設定物件的功能。可參閱<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">API</a>文件</p>
<h1 id="加入至-Angular-專案中"><a class="header-anchor" href="#加入至-Angular-專案中"> </a>加入至 Angular 專案中</h1>
<p>以上的三種方式都可以達到目的，就依個人喜好選擇了。現在問題是，如何將寫好的擴充方法，加入至 Angular 專案裡。</p>
<p>基本上，只要有網站也載入該擴充功能，整個網站底層就會直接生效，但在開發時期，會遇到的錯誤提示是 <code>TypeScript</code> 編譯器不認識擴充的功能，這時候，就需要再 <code>typings.d.ts</code> 內加上所擴充的功能</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">String</span> &#123;</span><br><span class="line">  <span class="title function_">toNumber</span>(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當這樣子將擴充方法的定義補上後，TypeScript 編譯器就會認識我們所擴充的功能了，之後就是開心的寫程式了。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty()</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] Middleware</title>
    <url>/2017/07/05/core-middleware/</url>
    <content><![CDATA[<p><code>middleware</code>  在 .NET Core 裡也是一個很重要的機制，來學習吧</p>
<span id="more"></span>
<h1 id="什麼是-middleware"><a class="header-anchor" href="#什麼是-middleware"> </a>什麼是 middleware?</h1>
<p><code>middleware</code>  就像逆滲透的濾水器，自來水 (Request) 要沿著管路 (pipeline) 經過多層的濾心 (middleware) 後，就能得到乾淨的水 (Response)。</p>
<p><img src="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/_static/request-delegate-pipeline.png" alt=""></p>
<p>簡單看一下在 .NET Core 內是怎麼使用的</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    app.UseExceptionHandler(<span class="string">&quot;/Home/Error&quot;</span>); <span class="comment">// Call first to catch exceptions</span></span><br><span class="line">                                            <span class="comment">// thrown in the following middleware.</span></span><br><span class="line">  </span><br><span class="line">    app.UseStaticFiles();                   <span class="comment">// Return static files and end pipeline.</span></span><br><span class="line"></span><br><span class="line">    app.UseIdentity();                     <span class="comment">// Authenticate before you access</span></span><br><span class="line">                                           <span class="comment">// secure resources.</span></span><br><span class="line"></span><br><span class="line">    app.UseMvcWithDefaultRoute();          <span class="comment">// Add MVC to the request pipeline.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣子系統就會依設定的順序，依序執行</p>
<h1 id="IApplicationBuilder"><a class="header-anchor" href="#IApplicationBuilder"> </a>IApplicationBuilder</h1>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IApplicationBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Summary:</span></span><br><span class="line">    <span class="comment">//     /// Adds a middleware delegate to the application&#x27;s request pipeline. ///</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Parameters:</span></span><br><span class="line">    <span class="comment">//   middleware:</span></span><br><span class="line">    <span class="comment">//     The middleware delgate.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Returns:</span></span><br><span class="line">    <span class="comment">//     The Microsoft.AspNetCore.Builder.IApplicationBuilder.</span></span><br><span class="line">    <span class="function">IApplicationBuilder <span class="title">Use</span>(<span class="params">Func&lt;RequestDelegate, RequestDelegate&gt; middleware</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡跟 middleware 有關的，就是最後一個 <code>Use</code>，如果想要加入 <code>middleware</code> ，就是透過 <code>Use</code> 這方法加入(方法之一)，用以下簡單的程式碼做個說明</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  app.Use((context, next) =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">this</span>.list.Clear();</span><br><span class="line">            <span class="keyword">this</span>.list.Add(context.Request.Host.Host);</span><br><span class="line">            <span class="keyword">return</span> next();</span><br><span class="line">          &#125;);</span><br><span class="line">  app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//Do some work here</span></span><br><span class="line">            context.Response.Headers.Add(<span class="string">&quot;X-Content-Type-Options&quot;</span>, <span class="string">&quot;nosniff&quot;</span>);</span><br><span class="line">            <span class="comment">//Pass the request on down to the next pipeline (Which is the MVC middleware)</span></span><br><span class="line">            <span class="keyword">await</span> next.Invoke();</span><br><span class="line">          &#125;);</span><br><span class="line">  app.Use((context, next) =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">this</span>.list.Add(<span class="string">&quot;pipe 2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> next();</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">  app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">await</span> context.Response.WriteAsync(<span class="built_in">string</span>.Join(<span class="string">&quot; || &quot;</span>, <span class="keyword">this</span>.list));</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">  app.Use((context, next) =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">this</span>.list.Add(<span class="string">&quot;pipe 3&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> next();</span><br><span class="line">          &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這樣的執行結果如下</p>
<p><img src="https://farm5.staticflickr.com/4241/35561134662_911c938442_o.png" alt=""></p>
<p>重點整理</p>
<ul>
<li>context 的變數是代表 <code>HttpContext</code> 本體</li>
<li>可以從 <code>context</code> 裡取得 <code>Request</code>的資訊，也可以增加 <code>Response Headers</code>的內容</li>
<li>如果在 <code>middleware</code> 間有異動到 <code>Response</code>時，之後的 <code>middleware</code> 就會失效</li>
<li>可以使用 <code>return next()</code> 或是 <code>await next.Invoke()</code> 兩種方式執行下一個 <code>middleware</code></li>
<li><code>middleware</code> 是有順序性的，<strong>要留意!!</strong></li>
</ul>
<h1 id="進階用法：Map、MapWhen"><a class="header-anchor" href="#進階用法：Map、MapWhen"> </a>進階用法：Map、MapWhen</h1>
<blockquote>
<p>針對不同的網址，給予不同的 Response Header</p>
</blockquote>
<p>如果想要做到上述的情境，就可以利用 <code>Map</code> 這方法，寫法如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">app.Map(<span class="string">&quot;/api/post&quot;</span>, HandlePath2);</span><br><span class="line">app.Map(<span class="string">&quot;/api&quot;</span>, HandlePath1);</span><br></pre></td></tr></table></figure>
<p>或是這樣子寫也是可以的</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">app.Map(<span class="string">&quot;/api&quot;</span>, apiLevel =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    apiLevel.Map(<span class="string">&quot;/post&quot;</span>, HandlePath2);</span><br><span class="line">    apiLevel.Map(<span class="string">&quot;&quot;</span>, HandlePath1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HandlePath1</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//Do some work here</span></span><br><span class="line">            context.Response.Headers.Add(<span class="string">&quot;X-Content-Type-Options&quot;</span>, <span class="string">&quot;api&quot;</span>);</span><br><span class="line">            <span class="comment">//Pass the request on down to the next pipeline (Which is the MVC middleware)</span></span><br><span class="line">            <span class="keyword">await</span> next.Invoke();</span><br><span class="line">          &#125;);</span><br><span class="line">  app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">&quot;API Page&quot;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一種寫法是使用 <code>MapWhen</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">app.MapWhen(context =&gt; context.Request.Query.ContainsKey(<span class="string">&quot;branch&quot;</span>),</span><br><span class="line">                              HandleBranch);</span><br></pre></td></tr></table></figure>
<p>**注意事項 : **</p>
<ol>
<li>如果使用 <code>Map</code> 的話，就會與主線脫離關係了，變成是獨立的執行環境。這點要留意。</li>
<li><code>Run</code>、<code>Map</code>、<code>MapWhen</code> 皆是 <code>IApplicationBuilder</code> 的擴充方法</li>
</ol>
<h1 id="內建-Middleware"><a class="header-anchor" href="#內建-Middleware"> </a>內建 Middleware</h1>
<table>
<thead>
<tr>
<th>Middleware</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity">Authentication</a></td>
<td>Provides authentication support.</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/aspnet/core/security/cors">CORS</a></td>
<td>Configures Cross-Origin Resource Sharing.</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/aspnet/core/performance/caching/middleware">Response Caching</a></td>
<td>Provides support for caching responses.</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/aspnet/core/performance/response-compression">Response Compression</a></td>
<td>Provides support for compressing responses.</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/routing">Routing</a></td>
<td>Defines and constrains request routes.</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/app-state">Session</a></td>
<td>Provides support for managing user sessions.</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files">Static Files</a></td>
<td>Provides support for serving static files and directory browsing.</td>
</tr>
<tr>
<td><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/url-rewriting">URL Rewriting Middleware</a></td>
<td>Provides support for rewriting URLs and redirecting requests.</td>
</tr>
</tbody>
</table>
<h1 id="自訂-Middleware"><a class="header-anchor" href="#自訂-Middleware"> </a>自訂 Middleware</h1>
<p>自訂 <code>middleware</code> 有兩種寫法，一種是如一開始使用 <code>Use</code> 的方式來寫，另外一種，就是寫成 <code>Middleware</code> 的元件，如同內建的 <code>middleware</code></p>
<p>基本架構如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDemoMiddleware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDemoMiddleware</span>(<span class="params">RequestDelegate next</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task <span class="title">Invoke</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">        &#123;            </span><br><span class="line">            <span class="comment">// Call the next delegate/middleware in the pipeline</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._next(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要使用自己所寫的 <code>middleware</code>時，有兩種方式</p>
<ol>
<li>
<p>擴充 <code>IApplicationBuilder</code> 的方法，使用 <code>Extension Methods</code> 的方式。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">UseRequestCulture</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder builder</span>)</span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">return</span> builder.UseMiddleware&lt;MyDemoMiddleware&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>利用 <code>UseMiddleware</code> 的方式加入</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  app.UseMiddleware&lt;MyDemoMiddleware&gt;();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware">Middleware</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]angular.io官網程式碼學習筆記006</title>
    <url>/2017/07/11/angular-aio-code-study-006/</url>
    <content><![CDATA[<p>最近很多人在瘋 Angular 測試，那官網程式學習筆記006 就來看官方是怎麼寫測試，這次只會先看 Angular Team 是怎麼測試service 類的程式碼</p>
<span id="more"></span>
<h1 id="研究對象"><a class="header-anchor" href="#研究對象"> </a>研究對象</h1>
<p><code>document.service.spec.ts</code> 是這次研讀的對象，這是一個單純的 service，他的功能很簡單 (程式行數 100 行內)，就是將文件顯示到畫面上。</p>
<p><code>document.service.ts</code> 的程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Http</span>, <span class="title class_">Response</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/http&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AsyncSubject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/AsyncSubject&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/observable/of&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/catch&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/switchMap&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DocumentContents</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./document-contents&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">DocumentContents</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./document-contents&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LocationService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;app/shared/location.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Logger</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;app/shared/logger.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DocumentService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">Observable</span>&lt;<span class="title class_">DocumentContents</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="attr">currentDocument</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">DocumentContents</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> logger: Logger,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> http: Http,</span></span><br><span class="line"><span class="params">    location: LocationService</span>) &#123;</span><br><span class="line">    <span class="comment">// Whenever the URL changes we try to get the appropriate doc</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentDocument</span> = location.<span class="property">currentPath</span>.<span class="title function_">switchMap</span>(<span class="function"><span class="params">path</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">getDocument</span>(path));</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>這一個 service 有注入 3 個東西，<code>Logger</code>、<code>Http</code>、<code>LocationService</code> ，這些在測試程式碼內也是需要被處理的</li>
</ul>
<h1 id="spec"><a class="header-anchor" href="#spec"> </a>spec</h1>
<h2 id="初始化"><a class="header-anchor" href="#初始化"> </a>初始化</h2>
<p>Angular Team 為了這個 <code>document.service</code>  另外寫了兩個 function 來建立要測試的實體</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createInjector</span>(<span class="params">initialUrl: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ReflectiveInjector</span>.<span class="title function_">resolveAndCreate</span>([</span><br><span class="line">      <span class="title class_">DocumentService</span>,</span><br><span class="line">      &#123; <span class="attr">provide</span>: <span class="title class_">LocationService</span>, <span class="attr">useFactory</span>: <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">MockLocationService</span>(initialUrl) &#125;,</span><br><span class="line">      &#123; <span class="attr">provide</span>: <span class="title class_">ConnectionBackend</span>, <span class="attr">useClass</span>: <span class="title class_">MockBackend</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">provide</span>: <span class="title class_">RequestOptions</span>, <span class="attr">useClass</span>: <span class="title class_">BaseRequestOptions</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">provide</span>: <span class="title class_">Logger</span>, <span class="attr">useClass</span>: <span class="title class_">MockLogger</span> &#125;,</span><br><span class="line">      <span class="title class_">Http</span>,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getServices</span>(<span class="params">initialUrl: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> injector = <span class="title function_">createInjector</span>(initialUrl);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">backend</span>: injector.<span class="title function_">get</span>(<span class="title class_">ConnectionBackend</span>) <span class="keyword">as</span> <span class="title class_">MockBackend</span>,</span><br><span class="line">    <span class="attr">locationService</span>: injector.<span class="title function_">get</span>(<span class="title class_">LocationService</span>) <span class="keyword">as</span> <span class="title class_">MockLocationService</span>,</span><br><span class="line">    <span class="attr">docService</span>: injector.<span class="title function_">get</span>(<span class="title class_">DocumentService</span>) <span class="keyword">as</span> <span class="title class_">DocumentService</span>,</span><br><span class="line">    <span class="attr">logger</span>: injector.<span class="title function_">get</span>(<span class="title class_">Logger</span>) <span class="keyword">as</span> <span class="title class_">MockLogger</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;DocumentService&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should be creatable&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; docService &#125; = <span class="title function_">getServices</span>();</span><br><span class="line">    <span class="title function_">expect</span>(docService).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>利用 <code>ReflectiveInjector</code> 建立 <code>Injector</code>，當建立 <code>Injector</code> 時，也同時會處理 DI 的部分</p>
</li>
<li>
<p>透過 <code>Injector.get</code> 的方式取得 <code>provider</code> 的實體</p>
</li>
<li>
<p><code>const &#123; docService &#125; = getServices()</code> 是 Object 解構子的寫法</p>
</li>
<li>
<p><code>MockLogger</code> 是共用的測試 Mock 模型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MockLogger</span> &#123;</span><br><span class="line"></span><br><span class="line">  output = &#123;</span><br><span class="line">    <span class="attr">log</span>: [],</span><br><span class="line">    <span class="attr">error</span>: [],</span><br><span class="line">    <span class="attr">warn</span>: []</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">log</span>(<span class="params">value: <span class="built_in">any</span>, ...rest</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">output</span>.<span class="property">log</span>.<span class="title function_">push</span>([value, ...rest]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">error</span>(<span class="params">value: <span class="built_in">any</span>, ...rest</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">output</span>.<span class="property">error</span>.<span class="title function_">push</span>([value, ...rest]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">warn</span>(<span class="params">value: <span class="built_in">any</span>, ...rest</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">output</span>.<span class="property">warn</span>.<span class="title function_">push</span>([value, ...rest]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>利用巢狀 <code>describe</code>的方式將要測試的項目分組，提供更好的閱讀體驗</p>
</li>
</ul>
<h2 id="測試-Http"><a class="header-anchor" href="#測試-Http"> </a>測試 Http</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">docService.<span class="property">currentDocument</span>.<span class="title function_">subscribe</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>這動作會觸發 <code>fetchDocument</code> 的私有方法，但這裡並不直接測試 <code>fetchDocument</code>，而是間接測試中間過程可能引發的變化</p>
</li>
<li>
<p><code>fetchDocument</code> 會做 <code>http.get</code> 的行為，所以利用 <code>MockBackend</code> 可以取得呼叫 <code>Http</code> 時的相關資訊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should fetch a document for the initial location&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; docService, backend &#125; = <span class="title function_">getServices</span>(<span class="string">&#x27;initial/doc&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> connections = backend.<span class="property">connectionsArray</span>;</span><br><span class="line">  docService.<span class="property">currentDocument</span>.<span class="title function_">subscribe</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(connections.<span class="property">length</span>).<span class="title function_">toEqual</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">expect</span>(connections[<span class="number">0</span>].<span class="property">request</span>.<span class="property">url</span>).<span class="title function_">toEqual</span>(<span class="variable constant_">CONTENT_URL_PREFIX</span> + <span class="string">&#x27;initial/doc.json&#x27;</span>);</span><br><span class="line">  <span class="title function_">expect</span>(backend.<span class="property">connectionsArray</span>[<span class="number">0</span>].<span class="property">request</span>.<span class="property">url</span>).<span class="title function_">toEqual</span>(<span class="variable constant_">CONTENT_URL_PREFIX</span> + <span class="string">&#x27;initial/doc.json&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>docService.currentDocument</code> 裡面有包含一個 <code>switchMap</code> ，所以當路徑變化時，也會重新取得文件內容</p>
<ul>
<li>
<p>測試程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should emit a document each time the location changes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">latestDocument</span>: <span class="title class_">DocumentContents</span>;</span><br><span class="line">  <span class="keyword">const</span> doc0 = &#123; <span class="attr">contents</span>: <span class="string">&#x27;doc 0&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;initial/doc&#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">const</span> doc1 = &#123; <span class="attr">contents</span>: <span class="string">&#x27;doc 1&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;new/doc&#x27;</span>  &#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123; docService, backend, locationService &#125; = <span class="title function_">getServices</span>(<span class="string">&#x27;initial/doc&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> connections = backend.<span class="property">connectionsArray</span>;</span><br><span class="line"></span><br><span class="line">  docService.<span class="property">currentDocument</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">doc</span> =&gt;</span> latestDocument = doc);</span><br><span class="line">  <span class="title function_">expect</span>(latestDocument).<span class="title function_">toBeUndefined</span>();</span><br><span class="line"></span><br><span class="line">  connections[<span class="number">0</span>].<span class="title function_">mockRespond</span>(<span class="title function_">createResponse</span>(doc0));</span><br><span class="line">  <span class="title function_">expect</span>(latestDocument).<span class="title function_">toEqual</span>(doc0);</span><br><span class="line"></span><br><span class="line">  locationService.<span class="title function_">go</span>(<span class="string">&#x27;new/doc&#x27;</span>);</span><br><span class="line">  connections[<span class="number">1</span>].<span class="title function_">mockRespond</span>(<span class="title function_">createResponse</span>(doc1));</span><br><span class="line">  <span class="title function_">expect</span>(latestDocument).<span class="title function_">toEqual</span>(doc1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>createResponse</code> 用來建立模擬回傳結果的一個方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createResponse</span>(<span class="params">body: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="keyword">new</span> <span class="title class_">ResponseOptions</span>(&#123; <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(body) &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>利用 <code>locationService.go</code> 來做網址的切換</p>
</li>
</ul>
</li>
<li>
<p>模擬 <code>Http Fail</code> 的狀況</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">connections[<span class="number">0</span>].<span class="title function_">mockError</span>(<span class="keyword">new</span> <span class="title class_">Response</span>(<span class="keyword">new</span> <span class="title class_">ResponseOptions</span>(&#123; <span class="attr">status</span>: <span class="number">404</span>, <span class="attr">statusText</span>: <span class="string">&#x27;NOT FOUND&#x27;</span>&#125;)) <span class="keyword">as</span> <span class="built_in">any</span>);</span><br></pre></td></tr></table></figure>
<p><code>mockError</code> 會造成 <code>Http</code> 呼叫產生 <code>Exception</code></p>
</li>
<li>
<p><code>mockBackend.connectionsArray</code></p>
<ul>
<li>這一個陣列會在執行任何 <code>Http</code> 呼叫後，才會有值</li>
<li>使用陣列的原因是，如果一個動作裡面有呼叫多個 <code>Http</code> 時，就可以針對個別的 Connection 給予不同的<code>mockRespond</code></li>
<li>使用這種方式，可以減少 <code>subscribe</code> 的次數，以接近同步的方式寫測試</li>
</ul>
</li>
</ul>
<h1 id="重點回顧"><a class="header-anchor" href="#重點回顧"> </a>重點回顧</h1>
<ul>
<li>測試 <code>service</code> 不一定需要使用 <code>TestBed</code> 的方式來建立 <code>serivce</code> 實體，可以透過 <code>ReflectiveInjector.resolveAndCreate([])</code> 的方式建立 <code>Injector</code> ，進而使用 <code>injector.get</code>  的方式取得 <code>service</code> 實體</li>
<li>如果要測試 <code>HttpClient</code> ，可以透過 <code>MockBackend</code> 內建的模組來模擬回傳結果或錯誤結果</li>
<li>利用 <code>mockBackend.connectionsArray</code> 的方式取得每次 <code>Http</code> 呼叫時所建立的連線，並給予相對應的模擬資料 ，須留意取得的順序</li>
</ul>
<h1 id="程式碼"><a class="header-anchor" href="#程式碼"> </a>程式碼</h1>
<ul>
<li><a href="https://github.com/angular/angular/blob/master/aio/src/app/documents/document.service.ts">document.service.ts</a></li>
<li><a href="https://github.com/angular/angular/blob/master/aio/src/app/documents/document.service.spec.ts">document.service.spec.ts</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular 網站與 CDN 共舞</title>
    <url>/2017/07/15/angular-work-with-cdn/</url>
    <content><![CDATA[<p>今天去參加社群的分享活動時，有人問到怎麼讓 Angular 的網站也可以使用 CDN 來加快網站的開啟方式。當下想到的方式是手動改 index.html，但事實上， Angular CLI 有提供更方便的方式。</p>
<span id="more"></span>
<h1 id="設定方式"><a class="header-anchor" href="#設定方式"> </a>設定方式</h1>
<h2 id="angular-cli-json"><a class="header-anchor" href="#angular-cli-json"> </a>.angular-cli.json</h2>
<p>Angular CLI 提供 <code>deployUrl</code> 的參數，該參數所設定的網址會影響 index.html 內的 <code>main.bundle.js</code>、<code>vendor.bundle.js</code>、 css 裡面的圖片等網址，這些網址會被加上 <code>deployUrl</code> 所設定的網址</p>
<p>所以透過這個參數，就可以很簡單的將 CDN 的位置，加到現有的 <code>script</code> 的 <code>src</code> 裡。</p>
<h2 id="建置指令掛參數"><a class="header-anchor" href="#建置指令掛參數"> </a>建置指令掛參數</h2>
<blockquote>
<p>ng build --deploy-url=『CDN  網址』</p>
</blockquote>
<p>或是</p>
<blockquote>
<p>ng build -d 『CDN 網址』</p>
</blockquote>
<h1 id="其他注意事項"><a class="header-anchor" href="#其他注意事項"> </a>其他注意事項</h1>
<ul>
<li>
<p>網址需要是 <code>/</code> 結尾，這樣子 lazyLoading 時才不會出錯</p>
</li>
<li>
<p>每一次部屬都需要讓 CDN 先清除(purge)原本就有的快取檔 (我是使用 Azure CDN 做為測試環境)</p>
</li>
<li>
<p>每一次的 CDN 更新都需要蠻長的一段時間</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Protractor</title>
    <url>/2017/08/02/angular-protractor/</url>
    <content><![CDATA[<p>Protractor 也是一個出自 Google 之手的 E2E 測試框架，當初是為了測試 AngularJS 所開發出來的 E2E，當然也可以用來測試其他的一般網站，跟 Angular 2 (廢言)。雖然 Protractor 出來很久了，但是一直都沒有仔細的去研究怎麼使用，這篇文章就來記錄一些。</p>
<p>(不談怎麼設定環境，因為 Angular CLI 已經幫我們處理好了)</p>
<span id="more"></span>
<h1 id="目的"><a class="header-anchor" href="#目的"> </a>目的</h1>
<p>E2E 是利用程式來模擬使用者操作網頁的動作，測試網頁程式有符合預期的實際操作流程與結果</p>
<h1 id="語法"><a class="header-anchor" href="#語法"> </a>語法</h1>
<h2 id="browser"><a class="header-anchor" href="#browser"> </a>browser</h2>
<p>跟瀏覽器有關的行為，可透過這物件控制，列出幾個常用的方法</p>
<ul>
<li>
<p><a href="http://www.protractortest.org/#/api?view=ProtractorBrowser.prototype.get">get</a>：網址改變</p>
</li>
<li>
<p><a href="http://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.getCurrentUrl">getCurrentUrl</a>：取得目前的網址</p>
</li>
<li>
<p><a href="http://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.wait">wait</a>：等到條件符合後，在繼續執行</p>
</li>
<li>
<p><a href="http://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.getTitle">getTitle</a>： 取得網頁的 <code>&lt;title&gt;</code> 內容</p>
</li>
<li>
<p><a href="http://www.protractortest.org/#/api?view=webdriver.WebDriver.prototype.takeScreenshot">takeScreenshot</a>：擷取網頁畫面，範例程式如下</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// at the top of the test spec:</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// abstract writing screen shot to a file</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writeScreenShot</span>(<span class="params">data, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stream = fs.<span class="title function_">createWriteStream</span>(filename);</span><br><span class="line">  stream.<span class="title function_">write</span>(<span class="keyword">new</span> <span class="title class_">Buffer</span>(data, <span class="string">&#x27;base64&#x27;</span>));</span><br><span class="line">  stream.<span class="title function_">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should have selected&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  page.<span class="title function_">navigateTo</span>();</span><br><span class="line">  browser.<span class="title function_">takeScreenshot</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">png</span>) &#123;</span><br><span class="line">    <span class="title function_">writeScreenShot</span>(png, <span class="string">&#x27;exception.png&#x27;</span>);</span><br><span class="line">  &#125;);    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="by"><a class="header-anchor" href="#by"> </a>by</h2>
<p><code>by</code> 是定位器 (locator)，用來搜尋 element 使用的，常用的方法有</p>
<ul>
<li>單一 element
<ul>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.By.css">css</a>：使用 <code>CSS Selector</code> 來定位 element</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.By.id">id</a>：利用 Id 來定位 element</li>
</ul>
</li>
<li>一個或多個 elements
<ul>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.By.linkText">linkText</a>：利用連結文字來定位 elements</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.By.partialLinkText">partialLinkText</a>：利用<strong>部分</strong>連結文字來定位 elements</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.By.name">name</a>：利用 name 來定位 elements</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.By.className">className</a>：利用 css class 來定位 elements</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.By.tagName">tagName</a>：利用 tag name 來定位 elements</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.By.xpath">xpath</a>：利用 xpath 來定位 elements (可透過瀏覽器取得該元件的 xpath)</li>
</ul>
</li>
<li>尋找按鈕(button) - 建議使用 <code>by.css</code> 取代
<ul>
<li><a href="http://www.protractortest.org/#/api?view=ProtractorBy.prototype.buttonText">buttonText</a>: 用按鈕名稱找 <code>button</code></li>
<li><a href="http://www.protractortest.org/#/api?view=ProtractorBy.prototype.partialButtonText">partialButtonText</a>：根據部分按鈕名稱找 <code>button</code></li>
</ul>
</li>
</ul>
<h2 id="element"><a class="header-anchor" href="#element"> </a>element</h2>
<p>element 需要搭配 locator 使用，進而取得想要的 HTMLElement。常用方法(<a href="http://www.protractortest.org/#/api?view=ElementFinder">完整文件</a>)如下</p>
<ul>
<li>element(locator)
<ul>
<li><a href="http://www.protractortest.org/#/api?view=ElementFinder.prototype.isPresent">isPresent</a>：是否有符合條件的 element</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.click">click</a>：執行 click 動作</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.sendKeys">sendKeys</a>：送出鍵盤動作。例如：打字到 Input 上</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.getAttribute">getAttribute</a>： 取得 element 的 屬性值</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.getText">getText</a>： 取得 <code>innerText</code></li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.isEnabled">isEnabled</a>：判斷 element 是否有 disabled 屬性</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.isSelected">isSelected</a>：判斷 element 是否 selected 屬性</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.submit">submit</a>： 執行 Form submit 動作</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.clear">clear</a>：清除 value 欄位</li>
<li><a href="http://www.protractortest.org/#/api?view=webdriver.WebElement.prototype.isDisplayed">isDisplayed</a>：判斷 element 是否有顯示在畫面上 ，可能被設定 visibility 被設定為 false</li>
</ul>
</li>
<li>element.all(locator)
<ul>
<li><a href="http://www.protractortest.org/#/api?view=ElementArrayFinder.prototype.get">get</a>：使用 <code>ElementArrayIndex</code> 取得特定位置的 element</li>
<li><a href="http://www.protractortest.org/#/api?view=ElementArrayFinder.prototype.count">count</a>：符合條件的 element 數量</li>
<li><a href="http://www.protractortest.org/#/api?view=ElementArrayFinder.prototype.isPresent">isPresent</a>：是否有符合條件的 element</li>
</ul>
</li>
</ul>
<h1 id="小技巧"><a class="header-anchor" href="#小技巧"> </a>小技巧</h1>
<h2 id="加快-E2E-的測試速度"><a class="header-anchor" href="#加快-E2E-的測試速度"> </a>加快 E2E 的測試速度</h2>
<h3 id="關掉-serve"><a class="header-anchor" href="#關掉-serve"> </a>關掉 serve</h3>
<p>預設的 E2E 是會先執行 <code>serve</code> 後在進行測試，可是這樣子的預設行為，都會因為 <code>server</code> 的建置時間而拖慢測試速度。所以可以將這兩個動作分別執行。 E2E 可以關掉 <code>serve</code>的動作，指令如下</p>
<blockquote>
<p>ng e2e --serve=false</p>
</blockquote>
<p>以上的設定方式，當執行 <code>ng e2e</code>時，就只會單純跑測試了。</p>
<h3 id="使用-chrome-headless"><a class="header-anchor" href="#使用-chrome-headless"> </a>使用 chrome headless</h3>
<p>修改 protractor.conf.js，新增 <code>chromeOptions</code> 區塊內容，這樣的設定在執行 e2e 時，就不會跳出瀏覽器了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"> <span class="attr">capabilities</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;browserName&#x27;</span>: <span class="string">&#x27;chrome&#x27;</span>,</span><br><span class="line">    <span class="attr">chromeOptions</span>: &#123;</span><br><span class="line">      <span class="attr">args</span>: [ <span class="string">&quot;--headless&quot;</span>, <span class="string">&quot;--disable-gpu&quot;</span>, <span class="string">&quot;--window-size=1920, 1080&quot;</span> ]</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>
<p>詳細說明請參閱<a href="http://oomusou.io/protractor/protractor-headless-chrome/">燈哥的文章</a></p>
<h2 id="使用-PageObject"><a class="header-anchor" href="#使用-PageObject"> </a>使用 PageObject</h2>
<p>一個頁面上的 Element 很多，大多數的時間，這些 Element 都因為不同的操作流程而被重複操作著，這時候利用 PageObject 的方式將 Element 封裝。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;browser, by, element&#125; <span class="keyword">from</span> <span class="string">&#x27;protractor&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NgRPage</span> &#123;</span><br><span class="line">  <span class="title function_">navigateTo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getParagraphText</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;app-root h1&#x27;</span>)).<span class="title function_">getText</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgRPage</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app.po&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;ng-r App&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">page</span>: <span class="title class_">NgRPage</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    page = <span class="keyword">new</span> <span class="title class_">NgRPage</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should display welcome message&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    page.<span class="title function_">navigateTo</span>();</span><br><span class="line">    <span class="title function_">expect</span>(page.<span class="title function_">getParagraphText</span>()).<span class="title function_">toEqual</span>(<span class="string">&#x27;todos&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="element-與-element-all-的混搭"><a class="header-anchor" href="#element-與-element-all-的混搭"> </a>element 與 element.all 的混搭</h2>
<p><code>element(locator)</code> 只能取回單一元素，但是可以串接下去的。例如說，我想要取得某個 select options 的值，寫法可以有兩種</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// method 2</span></span><br><span class="line"><span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;ul&gt;li&#x27;</span>));  </span><br><span class="line"><span class="comment">// method 2</span></span><br><span class="line"><span class="title function_">element</span>(by.<span class="title function_">name</span>(<span class="string">&#x27;sel&#x27;</span>)).<span class="title function_">all</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;li&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>我個人是比較喜歡第二種的寫法，比較清爽一點</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="http://www.protractortest.org/#/api">Protractor API</a></li>
<li><a href="http://pageobject.io/">pageobject.io/</a></li>
<li><a href="http://oomusou.io/protractor/protractor-headless-chrome/">如何使 Protractor 跑 Headless Chrome?</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Server-Side Rendering with Angular CLI 1.3.x 基本設定</title>
    <url>/2017/08/08/angular-cli-universal/</url>
    <content><![CDATA[<p>Angular CLI 1.3.0 和 Angular 4.3 版本之前，要使用 SSR (Server Side Rendering) 其實還蠻複雜的，並不是無法做到，只是<strong>很麻煩</strong>。可是，當版本升級到 Angular 4.3 及 CLI 1.3.0 以後，這一切都變得非常簡單。這裡先說明如何快速地將 SSR 的環境建置起來</p>
<span id="more"></span>
<h1 id="前置作業"><a class="header-anchor" href="#前置作業"> </a>前置作業</h1>
<ol>
<li>
<p>先將 CLI 的版本升級到 1.3.0。可以從這看到目前的釋出版本 <a href="https://github.com/angular/angular-cli/releases">CLI Release</a> (2017/08/08 時，CLI版本是 1.3.0-rc.5)</p>
<blockquote>
<p>npm install @angular/cli@1.3.0-rc.5</p>
</blockquote>
</li>
<li>
<p>安裝 <code>@angular/platform-server</code></p>
<blockquote>
<p>npm install @angular/platform-server</p>
</blockquote>
</li>
</ol>
<h1 id="設定步驟"><a class="header-anchor" href="#設定步驟"> </a>設定步驟</h1>
<h2 id="angular-cli-json"><a class="header-anchor" href="#angular-cli-json"> </a>.angular-cli.json</h2>
<p>多新增一個 <code>app</code> 設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;universal&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;platform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;server&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main-server.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tsconfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsconfig.server.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environmentSource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environments&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.prod.ts&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>刪除 <code>polyfiils</code>，伺服器不需要這個</p>
</li>
<li>
<p>移除 <code>assets</code>、<code>styles</code>、<code>scripts</code> ，這部分已經在 browser 版本中處理過了。</p>
</li>
</ul>
<h2 id="main-server-ts"><a class="header-anchor" href="#main-server-ts"> </a>main-server.ts</h2>
<p>在 <code>scr</code> 資料夾下新增 <code>main-server.ts </code> 檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;enableProdMode&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;<span class="title class_">AppServerModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app-server.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">enableProdMode</span>();</span><br></pre></td></tr></table></figure>
<h2 id="app-server-module"><a class="header-anchor" href="#app-server-module"> </a>app-server.module</h2>
<p>在 <code>src/app</code> 資料夾下，新增 `app-server.module.ts’ 檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NgModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ServerModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">AppComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">AppModule</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;<span class="attr">imports</span>: [<span class="title class_">AppModule</span>, <span class="title class_">ServerModule</span>], <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppServerModule</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="app-module"><a class="header-anchor" href="#app-module"> </a>app.module</h2>
<p>修改 <code>app.module.ts</code> 檔案，給予 <code>withServerTransition</code> 的設定值，<code>appId</code> 可以任取。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="attr">imports</span>: [</span><br><span class="line">  <span class="title class_">BrowserModule</span>.<span class="title function_">withServerTransition</span>(&#123;<span class="attr">appId</span>: <span class="string">&#x27;universal&#x27;</span>&#125;), </span><br><span class="line">  ...</span><br><span class="line">],</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="tsconfig-server-json"><a class="header-anchor" href="#tsconfig-server-json"> </a>tsconfig.server.json</h2>
<p>在 <code>src</code> 資料夾下，新增 <code>tsconfig.server.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.app.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../out-tsc/server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">/* For now, Node only understand CommonJS modules, so you can&#x27;t stick to es2015 here */</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;test.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/*.spec.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">/* Additional informations to bootstrap Angular */</span></span><br><span class="line">  <span class="attr">&quot;angularCompilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;entryModule&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app/app-server.module#AppServerModule&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="package-json"><a class="header-anchor" href="#package-json"> </a>package.json</h2>
<p>修改 <code>scripts</code> 指令</p>
<blockquote>
<p>「build」: 「ng build --prod &amp;&amp; ng build --prod --app universal --output-hashing=none」</p>
</blockquote>
<p>這樣子當執行 <code>npm run build</code> 時，就會分別建置瀏覽器端及伺服器端所需要的程式了</p>
<h2 id="設定-node-express-server"><a class="header-anchor" href="#設定-node-express-server"> </a>設定 node express server</h2>
<p>在專案跟目錄下新增 <code>server.js</code> 檔案，這檔案的功能是執行一個 <code>node express</code> 網站伺服器</p>
<h3 id="套件安裝"><a class="header-anchor" href="#套件安裝"> </a>套件安裝</h3>
<blockquote>
<p>npm install express @nguniversal/express-engine</p>
</blockquote>
<h3 id="server-js"><a class="header-anchor" href="#server-js"> </a>server.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Server specific version of Zone.js */</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;zone.js/dist/zone-node&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ngUniversal = <span class="built_in">require</span>(<span class="string">&#x27;@nguniversal/express-engine&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The server bundle is loaded here, it&#x27;s why you don&#x27;t want a changing hash in</span></span><br><span class="line"><span class="comment"> * it */</span></span><br><span class="line"><span class="keyword">const</span> appServer = <span class="built_in">require</span>(<span class="string">&#x27;./dist-server/main.bundle&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Server-side rendering */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">angularRouter</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">/* Server-side rendering */</span></span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>, &#123;req, res&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Root route before static files, or it will serve a static index.html, without</span></span><br><span class="line"><span class="comment"> * pre-rendering */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, angularRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Serve the static files generated by the CLI (index.html, CSS? JS, assets...)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/dist`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure Angular Express engine */</span></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, ngUniversal.<span class="title function_">ngExpressEngine</span>(&#123;</span><br><span class="line">  <span class="attr">bootstrap</span>: appServer.<span class="property">AppServerModuleNgFactory</span></span><br><span class="line">&#125;));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;dist&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Direct all routes to index.html, where Angular will take care of routing */</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;*&#x27;</span>, angularRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Listening on http://localhost:3000`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="執行方式"><a class="header-anchor" href="#執行方式"> </a>執行方式</h3>
<blockquote>
<p>node server.js</p>
</blockquote>
<p>執行上述指令後，就會將一個網站伺服器跑起來，而開啟 <code>http://localhost:3000</code> 的網站，即可看到由伺服器產生的 Angular 網站</p>
<p><img src="http://i.imgur.com/4LQaISE.png" alt=""></p>
<p><img src="http://i.imgur.com/lAXq8qD.png" alt=""></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://medium.com/@cyrilletuzi/angular-server-side-rendering-in-node-with-express-universal-engine-dce21933ddce">Angular server-side rendering in Node with Express Universal Engine</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] ChangeDetector 之 markForCheck 篇</title>
    <url>/2017/08/09/angular-changedetector-markforcheck/</url>
    <content><![CDATA[<p>Angular 的 Change Detection 機制，問題： 在使用 <code>onPush</code> 策略時，一定都要重新傳新物件才能出發更新嗎? 答案：<strong>不用</strong></p>
<span id="more"></span>
<p>ChangeDetecotrRef 提供了一些方法，允許我們手動觸發檢查更新機制，而 <code>markForCheck</code> 是其中一個</p>
<h1 id="markForCheck"><a class="header-anchor" href="#markForCheck"> </a>markForCheck</h1>
<p><code>markForCheck</code> 的用途，當呼叫這個方法時，就是告訴 <code>ChangeDetector</code> ，請檢查我本身及我上頭的 <code>Component</code>。更新的方向性是往 <code>Root</code>  向上移動</p>
<p><code>markForCheck</code>的程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">currView</span>: <span class="title class_">ViewData</span>|<span class="literal">null</span> = view;</span><br><span class="line"><span class="keyword">while</span> (currView) &#123;</span><br><span class="line">  <span class="keyword">if</span> (currView.<span class="property">def</span>.<span class="property">flags</span> &amp; <span class="title class_">ViewFlags</span>.<span class="property">OnPush</span>) &#123;</span><br><span class="line">    currView.<span class="property">state</span> |= <span class="title class_">ViewState</span>.<span class="property">ChecksEnabled</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  currView = currView.<span class="property">viewContainerParent</span> || currView.<span class="property">parent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以下提供幾個可能使用情境</p>
<h1 id="使用情境"><a class="header-anchor" href="#使用情境"> </a>使用情境</h1>
<h2 id="setTimeout、setInterval"><a class="header-anchor" href="#setTimeout、setInterval"> </a>setTimeout、setInterval</h2>
<p>可以從我之前寫的<a href="https://blog.kevinyang.net/2017/01/23/angular2-change-detection/">文章</a>溫習一下什麼是 <code>ChangeDetectionStrategy.OnPush</code></p>
<p>當 Component 的 <code>changeDetection</code> 設定為 <code>ChangeDetectionStrategy.OnPush</code>，如果有使用 <code>setTimeout</code> 時，就必須配合 <code>markForCheck()</code> 的方法來更新 View 的顯示。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ChangeDetectionStrategy</span>, <span class="title class_">ChangeDetectorRef</span>, <span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [ <span class="string">&#x27;./app.component.css&#x27;</span> ],</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span>  &#123;</span><br><span class="line">  vcard = [&#123;<span class="attr">name</span>: <span class="string">&#x27;Kevin&#x27;</span>&#125;];  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> cd: ChangeDetectorRef</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vcard</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Jeff&#x27;</span>&#125;);</span><br><span class="line">      <span class="comment">// this.cd.markForCheck(); // you can comment/uncomment this line to see the difference</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡有<a href="https://stackblitz.com/edit/markforcheck-settimeout?embed=1&amp;file=app/app.component.ts">簡單的程式碼</a> 可以實際執行看看，取消註解後看看執行的結果。</p>
<h2 id="Input-as-DataStream"><a class="header-anchor" href="#Input-as-DataStream"> </a>Input as DataStream</h2>
<p>當 <code>@Input</code> 的資料型態為 Observable 再加上 <code>onPush</code> 時，也會有 <code>setTimeout</code>、<code>setInterval</code> 的情況出現，所以這時候也必須依賴 <code>markForCheck</code> 來執行顯示更新</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ChangeDetectionStrategy</span>, <span class="title class_">ChangeDetectorRef</span>, <span class="title class_">Component</span>, <span class="title class_">Input</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-v-card&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./v-card.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./v-card.component.css&#x27;</span>],</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">VCardComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">data</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">  <span class="attr">info</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> cd: ChangeDetectorRef</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">info</span> = data;</span><br><span class="line">      <span class="comment">// this.cd.markForCheck();</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡有<a href="https://stackblitz.com/edit/markforcheck-datastream?embed=1&amp;file=app/v-card.component.ts">簡單的程式碼</a> 可實際執行看看，取消註解後看看執行的結果。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/api/core/ChangeDetectorRef#markForCheck">API - ChangeDetectorRef</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Two-way Binding 的運作方式</title>
    <url>/2017/08/14/angular-two-way-binding/</url>
    <content><![CDATA[<p>Angular 的雙向繫結與 AngularJS 的雙向繫結運作原理是完全不同的，目前看起來是沒有 AngularJS 會遇到效能問題。那 Angular 的雙向繫結到底是怎麼運作的呢?</p>
<span id="more"></span>
<h1 id="如何使用-雙向繫結-Two-way-Binding"><a class="header-anchor" href="#如何使用-雙向繫結-Two-way-Binding"> </a>如何使用 雙向繫結 (Two-way Binding)</h1>
<p>以下的三種寫法都可以達到雙向繫結的效果</p>
<h2 id="方法1"><a class="header-anchor" href="#方法1"> </a>方法1</h2>
<p>使用 <code>[()]</code> 的寫法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;input [(ngModel)]=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;username&#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="方法2"><a class="header-anchor" href="#方法2"> </a>方法2</h2>
<p>將 <code>[]</code> <code>()</code> 分開寫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;input [ngModel]=<span class="string">&quot;username&quot;</span> (ngModelChange)=<span class="string">&quot;username = $event&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;username&#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="方法3"><a class="header-anchor" href="#方法3"> </a>方法3</h2>
<p>不使用 <code>ngModel</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;input [value]=<span class="string">&quot;username&quot;</span> (input)=<span class="string">&quot;username = $event.target.value&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;&#123;username&#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h1 id="的秘密"><a class="header-anchor" href="#的秘密"> </a>[()] 的秘密</h1>
<p>我們知道 <code>[()]</code> 是 Angular 所提供給雙向繫結的語法糖，但是底層到底是怎麼運作的，為什麼會可以轉換成 <code>[&lt;name&gt;]</code> +<code> (&lt;name&gt;Change)</code> 呢? 以下簡單說明</p>
<ol>
<li><code>compiler/src/template_parser/template_parser.ts</code> 裡面會去分析 Element 的 attribute 是否有符合各種格式的內容</li>
</ol>
   <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重點在此</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BIND_NAME_REGEXP</span> =</span><br><span class="line">    <span class="regexp">/^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Group 1 = &quot;bind-&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">KW_BIND_IDX</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// Group 2 = &quot;let-&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">KW_LET_IDX</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// Group 3 = &quot;ref-/#&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">KW_REF_IDX</span> = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// Group 4 = &quot;on-&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">KW_ON_IDX</span> = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// Group 5 = &quot;bindon-&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">KW_BINDON_IDX</span> = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// Group 6 = &quot;@&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">KW_AT_IDX</span> = <span class="number">6</span>;</span><br><span class="line"><span class="comment">// Group 7 = the identifier after &quot;bind-&quot;, &quot;let-&quot;, &quot;ref-/#&quot;, &quot;on-&quot;, &quot;bindon-&quot; or &quot;@&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IDENT_KW_IDX</span> = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// Group 8 = identifier inside [()]</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IDENT_BANANA_BOX_IDX</span> = <span class="number">8</span>;</span><br><span class="line"><span class="comment">// Group 9 = identifier inside []</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IDENT_PROPERTY_IDX</span> = <span class="number">9</span>;</span><br><span class="line"><span class="comment">// Group 10 = identifier inside ()</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IDENT_EVENT_IDX</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
   <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">_parseAttr</span>(</span><br><span class="line">      <span class="attr">isTemplateElement</span>: <span class="built_in">boolean</span>, <span class="attr">attr</span>: html.<span class="property">Attribute</span>, <span class="attr">targetMatchableAttrs</span>: <span class="built_in">string</span>[][],</span><br><span class="line">      <span class="attr">targetProps</span>: <span class="title class_">BoundProperty</span>[], <span class="attr">targetEvents</span>: <span class="title class_">BoundEventAst</span>[],</span><br><span class="line">      <span class="attr">targetRefs</span>: <span class="title class_">ElementOrDirectiveRef</span>[], <span class="attr">targetVars</span>: <span class="title class_">VariableAst</span>[]): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="title function_">_normalizeAttributeName</span>(attr.<span class="property">name</span>);</span><br><span class="line">    <span class="keyword">const</span> value = attr.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">const</span> srcSpan = attr.<span class="property">sourceSpan</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> bindParts = name.<span class="title function_">match</span>(<span class="variable constant_">BIND_NAME_REGEXP</span>);</span><br><span class="line">    <span class="keyword">let</span> hasBinding = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bindParts !== <span class="literal">null</span>) &#123;</span><br><span class="line">      hasBinding = <span class="literal">true</span>;</span><br><span class="line">      ...</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bindParts[<span class="variable constant_">IDENT_BANANA_BOX_IDX</span>]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_bindingParser</span>.<span class="title function_">parsePropertyBinding</span>(</span><br><span class="line">            bindParts[<span class="variable constant_">IDENT_BANANA_BOX_IDX</span>], value, <span class="literal">false</span>, srcSpan, targetMatchableAttrs,</span><br><span class="line">            targetProps);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_parseAssignmentEvent</span>(</span><br><span class="line">            bindParts[<span class="variable constant_">IDENT_BANANA_BOX_IDX</span>], value, srcSpan, targetMatchableAttrs, targetEvents);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    <span class="keyword">return</span> hasBinding;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>根據 <code>_parseAssigmentEvent</code> 就會將部分<code>[(ngModel)]=&quot;username&quot;</code> 轉換成  <code> (ngModelChange)=&quot;username = $event&quot;</code> 傳入 <code>bindingParser.parseEvent</code> 的方法內</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">_parseAssignmentEvent</span>(<span class="params"></span></span><br><span class="line"><span class="params">      name: <span class="built_in">string</span>, expression: <span class="built_in">string</span>, sourceSpan: ParseSourceSpan,</span></span><br><span class="line"><span class="params">      targetMatchableAttrs: <span class="built_in">string</span>[][], targetEvents: BoundEventAst[]</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_bindingParser</span>.<span class="title function_">parseEvent</span>(</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;name&#125;</span>Change`</span>, <span class="string">`<span class="subst">$&#123;expression&#125;</span>=$event`</span>, sourceSpan, targetMatchableAttrs, targetEvents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>this._bindingParse.parseEvent</code>，會更新 Element 的屬性值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">_parseEvent</span>(<span class="params"></span></span><br><span class="line"><span class="params">     name: <span class="built_in">string</span>, expression: <span class="built_in">string</span>, sourceSpan: ParseSourceSpan,</span></span><br><span class="line"><span class="params">     targetMatchableAttrs: <span class="built_in">string</span>[][], targetEvents: BoundEventAst[]</span>) &#123;</span><br><span class="line">   <span class="comment">// long format: &#x27;target: eventName&#x27;</span></span><br><span class="line">   <span class="keyword">const</span> [target, eventName] = <span class="title function_">splitAtColon</span>(name, [<span class="literal">null</span> !, name]);</span><br><span class="line">   <span class="keyword">const</span> ast = <span class="variable language_">this</span>.<span class="title function_">_parseAction</span>(expression, sourceSpan);</span><br><span class="line">   targetMatchableAttrs.<span class="title function_">push</span>([name !, ast.<span class="property">source</span> !]);</span><br><span class="line">   targetEvents.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">BoundEventAst</span>(eventName, target, <span class="literal">null</span>, ast, sourceSpan));</span><br><span class="line">   <span class="comment">// Don&#x27;t detect directives for event names for now,</span></span><br><span class="line">   <span class="comment">// so don&#x27;t add the event name to the matchableAttrs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>這就是 <code>[()]</code> 語法糖的運作方式</p>
<p>​</p>
<p>​</p>
</li>
</ol>
<h1 id="ngModel"><a class="header-anchor" href="#ngModel"> </a>ngModel</h1>
<p><code>ngModel</code> 是 Angular 所提供的 Directive，主要用途是用來簡化雙向繫結的寫法，程式碼可以參閱<a href="https://github.com/angular/angular/blob/master/packages/forms/src/directives/ng_model.ts">這裡</a></p>
<h2 id="程式碼說明"><a class="header-anchor" href="#程式碼說明"> </a>程式碼說明</h2>
<h3 id="ngOnChanges"><a class="header-anchor" href="#ngOnChanges"> </a>ngOnChanges</h3>
<p>第一次 Input Change 時，註冊 Control 等相關事件，註冊流程如下</p>
<ol>
<li>檢查是否有註冊過，如果沒有，執行 <code>_setUpControl</code> 的方法，<code>setUpControl</code>是在 <code>./shared.ts</code> 內實作的，主要功能是 <code>Control</code> 的事件註冊。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnChanges</span>(<span class="params">changes: SimpleChanges</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_checkForErrors</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_registered</span>) <span class="variable language_">this</span>.<span class="title function_">_setUpControl</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;isDisabled&#x27;</span> <span class="keyword">in</span> changes) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_updateDisabled</span>(changes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPropertyUpdated</span>(changes, <span class="variable language_">this</span>.<span class="property">viewModel</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_updateValue</span>(<span class="variable language_">this</span>.<span class="property">model</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewModel</span> = <span class="variable language_">this</span>.<span class="property">model</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">_setUpControl</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_isStandalone</span>() ? <span class="variable language_">this</span>.<span class="title function_">_setUpStandalone</span>() :</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">formDirective</span>.<span class="title function_">addControl</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_registered</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">_isStandalone</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">_parent</span> || !!(<span class="variable language_">this</span>.<span class="property">options</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">standalone</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">_setUpStandalone</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="title function_">setUpControl</span>(<span class="variable language_">this</span>.<span class="property">_control</span>, <span class="variable language_">this</span>); </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_control</span>.<span class="title function_">updateValueAndValidity</span>(&#123;<span class="attr">emitEvent</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>setUpControl</code> 內有許多事件註冊行為，而跟 two-way binding 有關的事件是 <code> dir.valueAccessor!.registerOnChange</code>，這裡會傳入一個 callback function</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setUpControl</span>(<span class="params">control: FormControl, dir: NgControl</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">setUpViewChangePipeline</span>(control, dir);</span><br><span class="line">  ...</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setUpViewChangePipeline</span>(<span class="params">control: FormControl, dir: NgControl</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  dir.<span class="property">valueAccessor</span> !.<span class="title function_">registerOnChange</span>(<span class="function">(<span class="params">newValue: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    control.<span class="property">_pendingValue</span> = newValue;</span><br><span class="line">    control.<span class="property">_pendingDirty</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (control.<span class="property">updateOn</span> === <span class="string">&#x27;change&#x27;</span>) <span class="title function_">updateControl</span>(control, dir); <span class="comment">// 觸發更新</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateControl</span>(<span class="params">control: FormControl, dir: NgControl</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  dir.<span class="title function_">viewToModelUpdate</span>(control.<span class="property">_pendingValue</span>);</span><br><span class="line">  <span class="keyword">if</span> (control.<span class="property">_pendingDirty</span>) control.<span class="title function_">markAsDirty</span>();</span><br><span class="line">  control.<span class="title function_">setValue</span>(control.<span class="property">_pendingValue</span>, &#123;<span class="attr">emitModelToViewChange</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>而當 Input 欄位有資料輸入時，就會觸發事件並將回傳值發送到到頁面上</li>
</ol>
<p><code>ng_model.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">viewToModelUpdate</span>(<span class="attr">newValue</span>: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">viewModel</span> = newValue;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">update</span>.<span class="title function_">emit</span>(newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="NG-VALUE-ACCESSOR"><a class="header-anchor" href="#NG-VALUE-ACCESSOR"> </a>NG_VALUE_ACCESSOR</h1>
<p>這個 provider 是讓 <code>ngModleChange</code> 接受 <code>$event</code> 而不是 <code>$event.target.value</code> 的魔法使，內部細節如下</p>
<p><img src="http://i.imgur.com/Qsb228V.png" alt=""></p>
<p>在各類型的 <code>Control</code> 都會有一份 <code>NG_VALUE_ACCESSOR</code> ，而針對 <code>ngModel</code> 我們需留意的是 <code>DEFAULT_VALUE_ACCESSOR</code> ，檔案是 <code>default_value_accessor.ts</code></p>
<p>(使用 multi 的 DI 設定方式並不是這篇文章的重點，只要知道這樣子設定，可以讓 Provider 使用同一個名稱但又可同時存在不互相影響)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">DEFAULT_VALUE_ACCESSOR</span>: <span class="built_in">any</span> = &#123;</span><br><span class="line">  <span class="attr">provide</span>: <span class="variable constant_">NG_VALUE_ACCESSOR</span>,</span><br><span class="line">  <span class="attr">useExisting</span>: <span class="title function_">forwardRef</span>(<span class="function">() =&gt;</span> <span class="title class_">DefaultValueAccessor</span>),</span><br><span class="line">  <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>:</span><br><span class="line">      <span class="string">&#x27;input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;(input)&#x27;</span>: <span class="string">&#x27;_handleInput($event.target.value)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(blur)&#x27;</span>: <span class="string">&#x27;onTouched()&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(compositionstart)&#x27;</span>: <span class="string">&#x27;_compositionStart()&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(compositionend)&#x27;</span>: <span class="string">&#x27;_compositionEnd($event.target.value)&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="variable constant_">DEFAULT_VALUE_ACCESSOR</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DefaultValueAccessor</span> <span class="keyword">implements</span> <span class="title class_">ControlValueAccessor</span> &#123;  </span><br><span class="line">  onChange = <span class="function">(<span class="params">_: <span class="built_in">any</span></span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  onTouched = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Whether the user is creating a composition string (IME events). */</span></span><br><span class="line">  <span class="keyword">private</span> _composing = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">      <span class="keyword">private</span> _renderer: Renderer, <span class="keyword">private</span> _elementRef: ElementRef,</span></span><br><span class="line"><span class="params">      <span class="meta">@Optional</span>() <span class="meta">@Inject</span>(COMPOSITION_BUFFER_MODE) <span class="keyword">private</span> _compositionMode: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_compositionMode</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_compositionMode</span> = !<span class="title function_">_isAndroid</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">writeValue</span>(<span class="attr">value</span>: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> normalizedValue = value == <span class="literal">null</span> ? <span class="string">&#x27;&#x27;</span> : value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_renderer</span>.<span class="title function_">setElementProperty</span>(<span class="variable language_">this</span>.<span class="property">_elementRef</span>.<span class="property">nativeElement</span>, <span class="string">&#x27;value&#x27;</span>, normalizedValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">registerOnChange</span>(<span class="attr">fn</span>: <span class="function">(<span class="params">_: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span> &#123; <span class="variable language_">this</span>.<span class="property">onChange</span> = fn; &#125;</span><br><span class="line">  <span class="title function_">registerOnTouched</span>(<span class="attr">fn</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span> &#123; <span class="variable language_">this</span>.<span class="property">onTouched</span> = fn; &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title function_">_handleInput</span>(<span class="attr">value</span>: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_compositionMode</span> || (<span class="variable language_">this</span>.<span class="property">_compositionMode</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">_composing</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">onChange</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>DefaultValueAccessor</code> 裡 <code>registerOnChange</code> 與 <code>onChange</code> 的關係是，<code>ngModel</code> 會經 <code>setUpControl</code> 的方法將自訂方法透過 <code>registerOnChange</code> 註冊到 <code>onChange</code> 上，</p>
<p><code>DefaultValueAccessor</code> 的 <code>@Directive</code> 的宣告的地方，有註冊 <code>(input)</code> 事件發生時會觸發的方法， <code>_handleInput($event.target.value)</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">_handleInput</span>(<span class="attr">value</span>: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_compositionMode</span> || (<span class="variable language_">this</span>.<span class="property">_compositionMode</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">_composing</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">onChange</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>經過這一串的折騰，魔法就出現了，<code>ngModle</code> 的 <code>@Output('ngModelChange')</code> 會收到並發送資料到頁面上，這也就是為什麼 <code>(ngModelChange)</code> 的 <code>$event</code> 不需要加上 target.value，又可以取得異動的資料</p>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p>以下是雙向繫結相關的流程順序</p>
<ol>
<li><code>[ngModel]</code>時會觸發 <code>ngOnChanges</code> 事件</li>
<li>在 <code>ngOnChanges</code> 時，會執行 <code>setUpControl()</code> 方法</li>
<li>在 <code>setupControl()</code> 內會註冊 <code>DefaultValueAccess</code> 執行 <code>registerOnChange</code>，並將 callback function 傳入</li>
<li>透過 <code>registerOnChanges</code> 傳入的 callback function 會被綁定到 <code>onChanges</code> 上</li>
<li>當 <code>(input)</code> 事件被觸發時，會執行 <code>_handleInput($event.target.value)</code> 的方法</li>
<li>將傳入 <code>_handleInput(value)</code> 的值傳給註冊在 <code>onChange</code> 的 callback function</li>
<li>callback function 會執行 <code>ngModel</code> 裡的 <code>viewToModelUpdate(newValue)</code> 方法</li>
<li>最後將 <code>viewToModelUpdate</code> 所接受到的值，透過 <code>ngModelChange</code> 的 EventEmiiter emit 值到頁面上</li>
<li>完成整個雙向繫結的動作</li>
</ol>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 自訂雙向繫結 - 簡易版</title>
    <url>/2017/08/15/angular-custom-two-way-binding/</url>
    <content><![CDATA[<p>在上一篇介紹 Two-way Binding 的文章裡，有提到 <code>[()]</code> 的運作原理，我們也可以利用這原理，來寫自己的雙向繫結屬性，使用的場景會是 <code>Component</code></p>
<span id="more"></span>
<h1 id="自訂雙向繫結的功能-陽春版"><a class="header-anchor" href="#自訂雙向繫結的功能-陽春版"> </a>自訂雙向繫結的功能 - 陽春版</h1>
<p>重新複習一下，Angular 的編譯器，會將 <code>[()]</code> 轉換成 <code>[name]=&quot;expression&quot;</code> 跟  <code>(nameChange)=&quot;expression = $event&quot;</code> 的型態，所以在 <code>Component</code> 需要設定 <code>@Input('name')</code> 與 <code>@Output('nameChange')</code> 這兩個項目</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;custom-counter&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;decrement()&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;&#123;&#123;counter&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;increment()&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CustomCounterComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">  counterValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Input</span>()</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">counter</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">counterValue</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">counter</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counterValue</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counter</span>--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counter</span>++<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在外部使用這個 Component 時</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-counter</span> [<span class="attr">counter</span>]=<span class="string">&quot;someValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-counter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這時如果讓這個 counter 也有雙向繫結的效果時，<code>custom-counter</code> Component 的程式碼要稍微改一下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;custom-counter&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;decrement()&quot;&gt;-&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;&#123;&#123;counter&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;increment()&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CustomCounterComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">  counterValue = <span class="number">0</span>;</span><br><span class="line">  <span class="meta">@Output</span>() counterChange = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Input</span>()</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">counter</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">counterValue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">counter</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counterValue</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counterChange</span>.<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">counterValue</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counter</span>--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">counter</span>++<span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>這樣子修正完後，<code>counter</code> 這個對外的屬性，就可以使用 <code>[()]</code> 來做到雙向繫結的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-counter</span> [(<span class="attr">counter</span>)]=<span class="string">&quot;someValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>counterValue = &#123;&#123; someValue &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="範例程式"><a class="header-anchor" href="#範例程式"> </a><a href="https://stackblitz.com/edit/custom-twoway-bindings-simple?embed=1&amp;file=app/custom-counter.component.ts">範例程式</a></h1>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS]Observable 的 subscribe 與 forEach</title>
    <url>/2017/08/26/rxjs-observable-foreach/</url>
    <content><![CDATA[<p>RxJS 的 Observable 除了我們所熟悉的 subscribe，其實還可以透過 forEach 的方式取得 Observable 的資料。</p>
<span id="more"></span>
<h1 id="subscribe"><a class="header-anchor" href="#subscribe"> </a>subscribe</h1>
<p>Observable.subscribe 所需要傳入的引數可以是一個 <code>observer</code>物件，或是至少有一個負責 next 階段的函式。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Observable</span>.<span class="title function_">from</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>
<p>而 subscribe 會回傳一個 <code>subscription</code> 的物件，可以讓我們取消 Observable。</p>
<h1 id="forEach"><a class="header-anchor" href="#forEach"> </a>forEach</h1>
<p>仔細看 Observable 的原始碼，其實還有另外一個函式可以達到跟 <code>subscribe</code> 一樣的結果，<code>forEach</code> 只接受一個函式，這個函式只負責處理 <code>next</code> 階段的行為，且回傳的是一個 Promise<void>，而不是 <code>subscription</code>。<code>forEach</code> 的原始碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">forEach</span>(<span class="attr">next</span>: <span class="function">(<span class="params">value: T</span>) =&gt;</span> <span class="built_in">void</span>, <span class="title class_">PromiseCtor</span>?: <span class="keyword">typeof</span> <span class="title class_">Promise</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">PromiseCtor</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (root.<span class="property">Rx</span> &amp;&amp; root.<span class="property">Rx</span>.<span class="property">config</span> &amp;&amp; root.<span class="property">Rx</span>.<span class="property">config</span>.<span class="property">Promise</span>) &#123;</span><br><span class="line">        <span class="title class_">PromiseCtor</span> = root.<span class="property">Rx</span>.<span class="property">config</span>.<span class="property">Promise</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.<span class="property">Promise</span>) &#123;</span><br><span class="line">        <span class="title class_">PromiseCtor</span> = root.<span class="property">Promise</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">PromiseCtor</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;no Promise impl found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PromiseCtor</span>&lt;<span class="built_in">void</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Must be declared in a separate statement to avoid a RefernceError when</span></span><br><span class="line">      <span class="comment">// accessing subscription below in the closure due to Temporal Dead Zone.</span></span><br><span class="line">      <span class="keyword">let</span> <span class="attr">subscription</span>: <span class="title class_">Subscription</span>;</span><br><span class="line">      subscription = <span class="variable language_">this</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (subscription) &#123;</span><br><span class="line">          <span class="comment">// if there is a subscription, then we can surmise</span></span><br><span class="line">          <span class="comment">// the next handling is asynchronous. Any errors thrown</span></span><br><span class="line">          <span class="comment">// need to be rejected explicitly and unsubscribe must be</span></span><br><span class="line">          <span class="comment">// called manually</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>(value);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">            subscription.<span class="title function_">unsubscribe</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// if there is NO subscription, then we&#x27;re getting a nexted</span></span><br><span class="line">          <span class="comment">// value synchronously during subscription. We can just call it.</span></span><br><span class="line">          <span class="comment">// If it errors, Observable&#x27;s `subscribe` will ensure the</span></span><br><span class="line">          <span class="comment">// unsubscription logic is called, then synchronously rethrow the error.</span></span><br><span class="line">          <span class="comment">// After that, Promise will trap the error and send it</span></span><br><span class="line">          <span class="comment">// down the rejection path.</span></span><br><span class="line">          <span class="title function_">next</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, reject, resolve);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>使用方法如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Observable</span>.<span class="title function_">from</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// complete;</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>為什麼 RxJS 要有一個函式會回傳 Promise？當這個函式搭配 await / async ，會有一些不可思議的火花。</p>
<h1 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h1>
<p>沒有使用 async / await 時</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/Rx&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">getData</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finish&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">execute</span>();</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://c1.staticflickr.com/5/4399/36011067723_3983404229_o.png" alt=""></p>
<p>使用 async / await 時</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/Rx&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).<span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">getData</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finish&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">execute</span>();</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://c1.staticflickr.com/5/4343/36680520501_b225a6f130_o.png" alt=""></p>
<h1 id="回顧"><a class="header-anchor" href="#回顧"> </a>回顧</h1>
<p>一起想想看，這樣子的特性，在開發 Angular 的時候，是否有使用的情境呢? 是否有使用 async / await 而讓程式碼的可閱讀性提高呢?</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>RxJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] 練習曲(1) - pull to refresh</title>
    <url>/2017/09/01/rxjs-practice-1/</url>
    <content><![CDATA[<p>跟著 <a href="https://twitter.com/BenLesh">Ben Lesh</a> 在 Google <a href="https://www.youtube.com/watch?v=DBai5EEFioI">分享範例</a>，從頭練習一次。這個範例是利用 RxJS 來實做 <strong>Pull To Refresh</strong> 的功能。</p>
<span id="more"></span>
<p>Pull To Refresh 這個效果在很多的手機 App 上面常看到，例如 FB、Twitter 等</p>
<p><img src="http://i.imgur.com/SEPYv2G.gif" alt=""></p>
<p>這一個練習，就是要透過 RxJS 來實作這一個功能出來</p>
<h1 id="實作步驟"><a class="header-anchor" href="#實作步驟"> </a>實作步驟</h1>
<h2 id="1-先建立讀取使用者資料的-service"><a class="header-anchor" href="#1-先建立讀取使用者資料的-service"> </a>1.先建立讀取使用者資料的 service</h2>
<p>假的使用者資料 API 可以從我架設的 RandomAPI 位置取得</p>
<blockquote>
<p>API 網址 : <a href="https://randomapi.azurewebsites.net/api/users">https://randomapi.azurewebsites.net/api/users</a></p>
</blockquote>
<p>建立 <code>UserFeedService</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/observable/empty&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/catch&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpClient</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="string">&#x27;https://randomapi.azurewebsites.net/api/users&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserFeedService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getUsers</span>(): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>[]|&#123;&#125;&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="built_in">any</span>[]&gt;(api)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">users</span> =&gt;</span> users.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;an error occured&#x27;</span>, err);</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">empty</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這裡我們使用  <code>HttpClient</code> ，記得在 <code>AppModule</code> 載入 <code>HttpClientModule</code></p>
<h2 id="2-建立新的-Component-用來顯示使用者資料"><a class="header-anchor" href="#2-建立新的-Component-用來顯示使用者資料"> </a>2.建立新的 Component 用來顯示使用者資料</h2>
<p>建立 <code>LatestUsersComponent</code>，並將 component 加到 app.component.html 裡</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserFeedService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../user-feed.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-latest-users&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h3&gt;Latest Users&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;article *ngFor=&quot;let user of (users$ | async)&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h4&gt;&#123;&#123; user.first &#125;&#125; &#123;&#123; user.last &#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Joined: &#123;&#123; user.created | date: &#x27;yyyy/MM/dd&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Balance: &#123;&#123; user.balance | currency: &#x27;USD&#x27;: true &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Contact: &#123;&#123; user.address &#125;&#125;, &#123;&#123; user.email &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/article&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LatestUsersComponent</span> &#123;</span><br><span class="line">  users$ = <span class="variable language_">this</span>.<span class="property">userFeedService</span>.<span class="title function_">getUsers</span>();</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> userFeedService: UserFeedService</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-定時重新讀取使用者資料"><a class="header-anchor" href="#3-定時重新讀取使用者資料"> </a>3.定時重新讀取使用者資料</h2>
<blockquote>
<p>希望每 10 秒鐘，重新撈一次資料</p>
</blockquote>
<p>在 <code>LatestUsersComponent</code> 裡面在多一個 Observable 用來觸發 <code>getUsers()</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LatestUsersComponent</span> &#123;</span><br><span class="line">  updateUsersTrigger$ = <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">10000</span>);</span><br><span class="line">  users$ = <span class="variable language_">this</span>.<span class="property">updateUsersTrigger$</span></span><br><span class="line">               .<span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">userFeedService</span>.<span class="title function_">getUsers</span>());</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣的改寫，當註冊當下 ( async piple ) 會先呼叫一次 <code>getUsers()</code>，在之後每 10 秒會觸發 <code>getUsers()</code></p>
<h2 id="4-建立-LoadNotifyService"><a class="header-anchor" href="#4-建立-LoadNotifyService"> </a>4.建立 LoadNotifyService</h2>
<p>接下來要準備實作 <code>pull to refresh</code> 的功能，我們需要兩個通知器，一個負責<strong>請求讀取資料</strong>，另一個是**回傳資料讀取完成 **，這個通知器可以使用 <code>Subject</code> 來實作即可</p>
<p>建立 <code>LoadNotifyService</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Subject</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Subject&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoadNotifyService</span> &#123;</span><br><span class="line">  requestLoad$ = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">  loadComplete$ = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-將通知功能加入到-LatestUsersComponent"><a class="header-anchor" href="#5-將通知功能加入到-LatestUsersComponent"> </a>5. 將通知功能加入到 LatestUsersComponent</h2>
<p><code>updateUsersTrigger$</code> 現在除了每 10 秒會發出一次資料，當有人請求更新資料時，也會發出一筆資料。當 <code>getUsers()</code> 完成讀取資料時，會發出 <code>loadComplete$</code> 的通知</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LatestUsersComponent</span> &#123;</span><br><span class="line">  updateUsersTrigger$ =</span><br><span class="line">      <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">10000</span>).<span class="title function_">merge</span>(<span class="variable language_">this</span>.<span class="property">loadNotifyService</span>.<span class="property">requestLoad$</span>);</span><br><span class="line">  users$ =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">updateUsersTrigger$</span>.<span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">userFeedService</span>.<span class="title function_">getUsers</span>())</span><br><span class="line">          .<span class="title function_">do</span>(<span class="variable language_">this</span>.<span class="property">loadNotifyService</span>.<span class="property">loadComplete$</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">      <span class="keyword">private</span> userFeedService: UserFeedService,</span></span><br><span class="line"><span class="params">      <span class="keyword">private</span> loadNotifyService: LoadNotifyService</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-建立新的-Component-來負責-pull-to-refresh-的功能"><a class="header-anchor" href="#6-建立新的-Component-來負責-pull-to-refresh-的功能"> </a>6.建立新的 Component 來負責 <strong>pull to refresh</strong> 的功能</h2>
<p>建立 <code>PullToRefreshComponent</code> 並加到 <code>LatestUsersComponent</code> 裡</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-pull-to-refresh&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div style=&quot;position: absolute; top: 0; left: 50%&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div style=&quot;margin-left: -35px&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;svg width=&quot;70px&quot; height=&quot;70&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;circle cy=&quot;35&quot; cx=&quot;35&quot; r=&quot;35&quot; fill=&quot;lightgrey&quot;&gt;&lt;/circle&gt;</span></span><br><span class="line"><span class="string">        &lt;circle cy=&quot;15&quot; cx=&quot;35&quot; r=&quot;10&quot; fill=&quot;black&quot;&gt;&lt;/circle&gt;</span></span><br><span class="line"><span class="string">      &lt;/svg&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PullToRefreshComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="7-實作往-Pull-To-Refresh-動作"><a class="header-anchor" href="#7-實作往-Pull-To-Refresh-動作"> </a>7.實作往 Pull To Refresh 動作</h2>
<p>先來分析一下要實作功能會有哪些動作</p>
<ol>
<li><code>touchstart</code></li>
<li><code>tocuhmove</code></li>
<li>計算移動的距離，決定是否出發撈資料的請求</li>
<li>如果符合條件，則發出請求</li>
<li><code>touchend </code></li>
<li>如果有發出撈資料的請求時，等待完成讀取資料動作，並恢復初始狀態</li>
<li>如果沒有發出撈資料的請求，恢復初始狀態</li>
</ol>
<p>步驟1，需要先將 <code>touchstart</code>、<code>touchmove</code> 和 <code>touchend</code> 事件轉換成 Observable</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">touchstart$ = <span class="title class_">Observable</span>.<span class="property">fromEvent</span>&lt;<span class="title class_">TouchEvent</span>&gt;(<span class="variable language_">document</span>, <span class="string">&#x27;touchstart&#x27;</span>);</span><br><span class="line">touchend$ = <span class="title class_">Observable</span>.<span class="property">fromEvent</span>&lt;<span class="title class_">TouchEvent</span>&gt;(<span class="variable language_">document</span>, <span class="string">&#x27;touchend&#x27;</span>);</span><br><span class="line">touchmove$ = <span class="title class_">Observable</span>.<span class="property">fromEvent</span>&lt;<span class="title class_">TouchEvent</span>&gt;(<span class="variable language_">document</span>, <span class="string">&#x27;touchmove&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>步驟2，計算開始後手指滑動的距離</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">drag$ = <span class="variable language_">this</span>.<span class="property">touchstart$</span>.<span class="title function_">switchMap</span>(<span class="function"><span class="params">start</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> pos = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">touchmove$</span></span><br><span class="line">       .<span class="title function_">map</span>(<span class="function"><span class="params">move</span> =&gt;</span> move.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span> - start.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span>)</span><br><span class="line">       .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> pos = p)</span><br><span class="line">       .<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">touchend$</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p>步驟3，判斷是否要發出通知，如果已經發出請求通知，停止 Observable</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">drag$ = <span class="variable language_">this</span>.<span class="property">touchstart$</span> </span><br><span class="line">    .<span class="title function_">switchMap</span>(<span class="function"><span class="params">start</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pos = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">touchmove$</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">move</span> =&gt;</span> move.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span> - start.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span>)</span><br><span class="line">        .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> pos = p)</span><br><span class="line">        .<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">touchend$</span>)</span><br><span class="line">        .<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">defer</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(pos, <span class="number">0</span>, <span class="number">200</span>)))</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p &gt;= <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">requestLoad$</span>.<span class="title function_">next</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">takeWhile</span>(<span class="function"><span class="params">p</span> =&gt;</span> p &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>步驟4，當上述動作完成時，Observable 本身會停止，可透過 <code>repeat()</code> 重新啟動</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">drag$ = <span class="variable language_">this</span>.<span class="property">touchstart$</span></span><br><span class="line">            .<span class="title function_">switchMap</span>(<span class="function"><span class="params">start</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> pos = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">touchmove$</span></span><br><span class="line">                  .<span class="title function_">map</span>(<span class="function"><span class="params">move</span> =&gt;</span> move.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span> - start.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span>)</span><br><span class="line">                  .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> pos = p)</span><br><span class="line">                  .<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">touchend$</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (p &gt;= <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">requestLoad$</span>.<span class="title function_">next</span>();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">takeWhile</span>(<span class="function"><span class="params">p</span> =&gt;</span> p &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>)</span><br><span class="line">            .<span class="title function_">repeat</span>();</span><br></pre></td></tr></table></figure>
<p>步驟5，記錄目前所在位置，加上動畫功能，將該 Observable  綁定到 template 上</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">currentPos = <span class="number">0</span>;</span><br><span class="line"><span class="attr">position$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt; = <span class="variable language_">this</span>.<span class="property">drag$</span></span><br><span class="line">    .<span class="title function_">merge</span>(<span class="variable language_">this</span>.<span class="property">completeAnimation$</span>)</span><br><span class="line">    .<span class="title function_">startWith</span>(<span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">do</span>(<span class="function"><span class="params">pos</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">currentPos</span> = pos)</span><br><span class="line"></span><br><span class="line"><span class="attr">positionTranslate3d$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">string</span>&gt; = <span class="variable language_">this</span>.<span class="property">position$</span>.<span class="title function_">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> <span class="string">`translate3d(0, <span class="subst">$&#123;p - <span class="number">70</span>&#125;</span>px, 0)`</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; top: 0; left: 50%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: -35px&quot;</span> [<span class="attr">style.transform</span>]=<span class="string">&quot;positionTranslate3d$ | async&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;70px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;70&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cy</span>=<span class="string">&quot;35&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;35&quot;</span> <span class="attr">r</span>=<span class="string">&quot;35&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;lightgrey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cy</span>=<span class="string">&quot;15&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;35&quot;</span> <span class="attr">r</span>=<span class="string">&quot;10&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>到這個步驟時，畫面已經可以往下拉的效果，而且也可以送出重新讀取資料的請求了</p>
<p><img src="http://i.imgur.com/vjL13RV.png" alt=""></p>
<p>步驟6: 當放掉或當資料讀取完成後，要恢復至初始狀態</p>
<p>先處理資料讀取完成後，恢復至初始狀態</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">completeAnimation$ = <span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">loadComplete$</span></span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">currentPos</span>)</span><br><span class="line">    .<span class="title function_">switchMap</span>(<span class="function"><span class="params">currentPos</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(currentPos, <span class="number">0</span> , <span class="number">200</span>));</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="attr">position$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt; = <span class="variable language_">this</span>.<span class="property">drag$</span></span><br><span class="line">    .<span class="title function_">merge</span>(<span class="variable language_">this</span>.<span class="property">completeAnimation$</span>)</span><br><span class="line">    .<span class="title function_">startWith</span>(<span class="number">0</span>)</span><br><span class="line">    .<span class="title function_">do</span>(<span class="function"><span class="params">pos</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">currentPos</span> = pos);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">tweenObservable</span>(<span class="params">start, end, time</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> emissions = time / <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> step = (start - end) / emissions;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> start - step * (x + <span class="number">1</span>))</span><br><span class="line">      .<span class="title function_">take</span>(emissions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在來處理未觸發資料讀取請求時，當手指頭離開畫面時，也需要恢復初始狀態</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">drag$ = <span class="variable language_">this</span>.<span class="property">touchstart$</span> </span><br><span class="line">    .<span class="title function_">switchMap</span>(<span class="function"><span class="params">start</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pos = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">touchmove$</span></span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">move</span> =&gt;</span> move.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span> - start.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span>)</span><br><span class="line">        .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> pos = p)</span><br><span class="line">        .<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">touchend$</span>)</span><br><span class="line">        .<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">defer</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(pos, <span class="number">0</span>, <span class="number">200</span>))) <span class="comment">// 恢復初始狀態</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (p &gt;= <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">requestLoad$</span>.<span class="title function_">next</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">takeWhile</span>(<span class="function"><span class="params">p</span> =&gt;</span> p &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">repeat</span>()</span><br></pre></td></tr></table></figure>
<h2 id="8-實作轉圈圈的動作"><a class="header-anchor" href="#8-實作轉圈圈的動作"> </a>8.實作轉圈圈的動作</h2>
<p>其實到階段 7 時，Pull To Refresh 的功能已經完成了，在多一點讀取時的 loading 效果，讓圈圈旋轉吧</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Start rotating when a request is made and spin until it completes</span></span><br><span class="line"><span class="attr">rotate$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt; =</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">requestLoad$</span>.<span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> rot = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(<span class="number">0</span>, <span class="number">360</span>, <span class="number">500</span>)</span><br><span class="line">          .<span class="title function_">repeat</span>()</span><br><span class="line">          .<span class="title function_">do</span>(<span class="function"><span class="params">r</span> =&gt;</span> rot = r)</span><br><span class="line">          .<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">loadComplete$</span>)</span><br><span class="line">          .<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">defer</span>(</span><br><span class="line">              <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(rot, <span class="number">360</span>, <span class="number">360</span> - rot)));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="attr">rotateTransform$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">string</span>&gt; =</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rotate$</span>.<span class="title function_">map</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="string">`rotate(<span class="subst">$&#123;r&#125;</span>deg)`</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; top: 0; left: 50%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: -35px&quot;</span> [<span class="attr">style.transform</span>]=<span class="string">&quot;positionTranslate3d$ | async&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;70px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;70&quot;</span> [<span class="attr">style.transform</span>]=<span class="string">&quot;rotateTransform$ | async&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cy</span>=<span class="string">&quot;35&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;35&quot;</span> <span class="attr">r</span>=<span class="string">&quot;35&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;lightgrey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cy</span>=<span class="string">&quot;15&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;35&quot;</span> <span class="attr">r</span>=<span class="string">&quot;10&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="完整程式碼"><a class="header-anchor" href="#完整程式碼"> </a>完整程式碼</h1>
<h2 id="pull-to-refresh-component-ts"><a class="header-anchor" href="#pull-to-refresh-component-ts"> </a>pull-to-refresh.component.ts</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/observable/fromEvent&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/observable/defer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/takeUntil&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/takeWhile&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/repeat&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/startWith&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/take&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/concat&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">LoadNotifyService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../load-notify.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-pull-to-refresh&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div style=&quot;position: absolute; top: 0; left: 50%&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div style=&quot;margin-left: -35px&quot; [style.transform]=&quot;positionTranslate3d$ | async&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;svg width=&quot;70px&quot; height=&quot;70&quot; [style.transform]=&quot;rotateTransform$ | async&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;circle cy=&quot;35&quot; cx=&quot;35&quot; r=&quot;35&quot; fill=&quot;lightgrey&quot;&gt;&lt;/circle&gt;</span></span><br><span class="line"><span class="string">        &lt;circle cy=&quot;15&quot; cx=&quot;35&quot; r=&quot;10&quot; fill=&quot;black&quot;&gt;&lt;/circle&gt;</span></span><br><span class="line"><span class="string">      &lt;/svg&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PullToRefreshComponent</span> &#123;</span><br><span class="line">  currentPos = <span class="number">0</span>;</span><br><span class="line">  touchstart$ = <span class="title class_">Observable</span>.<span class="property">fromEvent</span>&lt;<span class="title class_">TouchEvent</span>&gt;(<span class="variable language_">document</span>, <span class="string">&#x27;touchstart&#x27;</span>);</span><br><span class="line">  touchend$ = <span class="title class_">Observable</span>.<span class="property">fromEvent</span>&lt;<span class="title class_">TouchEvent</span>&gt;(<span class="variable language_">document</span>, <span class="string">&#x27;touchend&#x27;</span>);</span><br><span class="line">  touchmove$ = <span class="title class_">Observable</span>.<span class="property">fromEvent</span>&lt;<span class="title class_">TouchEvent</span>&gt;(<span class="variable language_">document</span>, <span class="string">&#x27;touchmove&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  completeAnimation$ =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">loadComplete$</span>.<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">currentPos</span>)</span><br><span class="line">          .<span class="title function_">switchMap</span>(<span class="function"><span class="params">currentPos</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(currentPos, <span class="number">0</span>, <span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">  drag$ = <span class="variable language_">this</span>.<span class="property">touchstart$</span></span><br><span class="line">              .<span class="title function_">switchMap</span>(<span class="function"><span class="params">start</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> pos = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">touchmove$</span></span><br><span class="line">                    .<span class="title function_">map</span>(<span class="function"><span class="params">move</span> =&gt;</span> move.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span> - start.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">pageY</span>)</span><br><span class="line">                    .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> pos = p)</span><br><span class="line">                    .<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">touchend$</span>)</span><br><span class="line">                    .<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">defer</span>(</span><br><span class="line">                        <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(pos, <span class="number">0</span>, <span class="number">200</span>)));</span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="title function_">do</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (p &gt;= <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>) &#123;</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">requestLoad$</span>.<span class="title function_">next</span>();</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="title function_">takeWhile</span>(<span class="function"><span class="params">p</span> =&gt;</span> p &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span> / <span class="number">2</span>)</span><br><span class="line">              .<span class="title function_">repeat</span>();</span><br><span class="line">  <span class="attr">position$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt; = <span class="variable language_">this</span>.<span class="property">drag$</span>.<span class="title function_">merge</span>(<span class="variable language_">this</span>.<span class="property">completeAnimation$</span>)</span><br><span class="line">                                      .<span class="title function_">startWith</span>(<span class="number">0</span>)</span><br><span class="line">                                      .<span class="title function_">do</span>(<span class="function"><span class="params">pos</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">currentPos</span> = pos);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">positionTranslate3d$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">string</span>&gt; =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">position$</span>.<span class="title function_">map</span>(<span class="function"><span class="params">p</span> =&gt;</span> <span class="string">`translate3d(0, <span class="subst">$&#123;p - <span class="number">70</span>&#125;</span>px, 0)`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 開始轉圈圈直到資料讀取完成</span></span><br><span class="line">  <span class="attr">rotate$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt; =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">requestLoad$</span>.<span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> rot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(<span class="number">0</span>, <span class="number">360</span>, <span class="number">500</span>)</span><br><span class="line">            .<span class="title function_">repeat</span>()</span><br><span class="line">            .<span class="title function_">do</span>(<span class="function"><span class="params">r</span> =&gt;</span> rot = r)</span><br><span class="line">            .<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">loadNotification</span>.<span class="property">loadComplete$</span>)</span><br><span class="line">            .<span class="title function_">concat</span>(<span class="title class_">Observable</span>.<span class="title function_">defer</span>(</span><br><span class="line">                <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">tweenObservable</span>(rot, <span class="number">360</span>, <span class="number">360</span> - rot)));</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="attr">rotateTransform$</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">string</span>&gt; =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">rotate$</span>.<span class="title function_">map</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="string">`rotate(<span class="subst">$&#123;r&#125;</span>deg)`</span>);</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> loadNotification: LoadNotifyService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">tweenObservable</span>(<span class="params">start, end, time</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> emissions = time / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> step = (start - end) / emissions;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> start - step * (x + <span class="number">1</span>))</span><br><span class="line">        .<span class="title function_">take</span>(emissions);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="latest-users-component-ts"><a class="header-anchor" href="#latest-users-component-ts"> </a>latest-users.component.ts</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/observable/timer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/switchMap&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/merge&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/do&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Component</span>, <span class="title class_">OnInit</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">LoadNotifyService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../load-notify.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">UserFeedService</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;../user-feed.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-latest-users&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;app-pull-to-refresh&gt;&lt;/app-pull-to-refresh&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;h3&gt;Latest Users&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;article *ngFor=&quot;let user of (users$ | async)&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;h4&gt;&#123;&#123; user.first &#125;&#125; &#123;&#123; user.last &#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Joined: &#123;&#123; user.created | date: &#x27;yyyy/MM/dd&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Balance: &#123;&#123; user.balance | currency: &#x27;USD&#x27;: true &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Contact: &#123;&#123; user.address &#125;&#125;, &#123;&#123; user.email &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/article&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LatestUsersComponent</span> &#123;</span><br><span class="line">  updateUsersTrigger$ =</span><br><span class="line">      <span class="title class_">Observable</span>.<span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">10000</span>).<span class="title function_">merge</span>(<span class="variable language_">this</span>.<span class="property">loadNotifyService</span>.<span class="property">requestLoad$</span>);</span><br><span class="line">  users$ =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">updateUsersTrigger$</span>.<span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">userFeedService</span>.<span class="title function_">getUsers</span>())</span><br><span class="line">          .<span class="title function_">do</span>(<span class="variable language_">this</span>.<span class="property">loadNotifyService</span>.<span class="property">loadComplete$</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">      <span class="keyword">private</span> userFeedService: UserFeedService,</span></span><br><span class="line"><span class="params">      <span class="keyword">private</span> loadNotifyService: LoadNotifyService</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="user-feed-service-ts"><a class="header-anchor" href="#user-feed-service-ts"> </a>user-feed.service.ts</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/observable/empty&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/catch&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpClient</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Observable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="string">&#x27;https://randomapi.azurewebsites.net/api/users&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserFeedService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getUsers</span>(): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>[]|&#123;&#125;&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">get</span>&lt;<span class="built_in">any</span>[]&gt;(api)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">users</span> =&gt;</span> users.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;an error occured&#x27;</span>, err);</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Observable</span>.<span class="title function_">empty</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="load-notify-service-ts"><a class="header-anchor" href="#load-notify-service-ts"> </a>load-notify.service.ts</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Subject</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Subject&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoadNotifyService</span> &#123;</span><br><span class="line">  requestLoad$ = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">  loadComplete$ = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="built_in">any</span>&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="app-component-html"><a class="header-anchor" href="#app-component-html"> </a>app.component.html</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Super Cool App<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-latest-users</span>&gt;</span><span class="tag">&lt;/<span class="name">app-latest-users</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://stackblitz.com/edit/angular-rxjs-pull-to-refresh?embed=1&amp;file=main.ts">stackblitz demo</a></li>
<li><a href="https://github.com/chgc/rxjs-practice1-pull-to-refresh">GitHub Repo</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>RxJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]與DOTNET MVC CORE 整合</title>
    <url>/2017/09/17/mvc-core-with-angular/</url>
    <content><![CDATA[<p>.NET Core 所提供的 Angular SPA 範本，用起來都覺得卡卡的，所以只好自己來整一個給 Angular 所使用的架構，跟著以下的步驟，就可以整理出我覺得還滿意的 .NET MVC Core 的程式架構</p>
<span id="more"></span>
<h1 id="操作步驟"><a class="header-anchor" href="#操作步驟"> </a>操作步驟</h1>
<h2 id="建立-ASP-NET-Core-Web-應用程式"><a class="header-anchor" href="#建立-ASP-NET-Core-Web-應用程式"> </a>建立 <a href="http://ASP.NET">ASP.NET</a> Core Web 應用程式</h2>
<p>首先，先用 Visual Studio 2017 建立一個  <a href="http://ASP.NET">ASP.NET</a> Core Web 應用程式</p>
<p><img src="https://i.imgur.com/k6myBB4.png" alt=""></p>
<p><img src="https://i.imgur.com/VsRyXAX.png" alt=""></p>
<p>按下【確定】建立新專案，當建立完成後，即可獲得一個已經可執行的 <a href="http://ASP.NET">ASP.NET</a> Core 的 Web 應用程式了</p>
<p><img src="https://i.imgur.com/QGTO1hG.png" alt=""></p>
<h2 id="建立-Angular-專案"><a class="header-anchor" href="#建立-Angular-專案"> </a>建立 Angular 專案</h2>
<p>打開命令視窗，並切換至專案目錄下</p>
<p><img src="https://i.imgur.com/bEBfa3c.png" alt=""></p>
<p>執行 <code>ng new clientApp</code> 命令，透過 <code>Angulra CLI</code> 的方式將 Angular 專案建立起來</p>
<p><img src="https://i.imgur.com/T5hqm1I.png" alt=""></p>
<p>建立完成後即可在 Visual Studio 的專案下看到剛剛所建立的 clientApp 資料夾</p>
<h2 id="修改-angular-cli-json"><a class="header-anchor" href="#修改-angular-cli-json"> </a>修改 .angular-cli.json</h2>
<p>由於 Angular 的專案希望是由 MVC 這邊顯示，所以在建置的過程中，需要將 <code>.angular-cli.json</code> 內的設定做些微的調整</p>
<ol>
<li>修改輸出路徑</li>
<li>增加 deployUrl</li>
<li>產生一個 script.html，用來接受 CLI 建置後的檔案路徑</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;apps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../wwwroot/dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;deployUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/dist/&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;assets&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;favicon.ico&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="string">&quot;polyfills.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tsconfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsconfig.app.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;testTsconfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsconfig.spec.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;styles.css&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environmentSource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environments&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.prod.ts&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<h2 id="修改-app-module-ts"><a class="header-anchor" href="#修改-app-module-ts"> </a>修改 app.module.ts</h2>
<p>由於啟動的 component 不一定會存在顯示頁面上，所以必須在 app.module.ts 的地方調整一下啟動方式</p>
<ol>
<li>
<p>先將 AppComponent 從 bootstrap 區塊移動到 entryComponents 的地方</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>, <span class="title class_">HomeComponent</span>, <span class="title class_">EmptyComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">entryComponents</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
<li>
<p>在 AppModule Class 內新增 ngDobootstrap 函式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngDoBootstrap</span>(<span class="params">app: ApplicationRef</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;app-root&#x27;</span>)) &#123;</span><br><span class="line">        app.<span class="title function_">bootstrap</span>(<span class="title class_">AppComponent</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<h2 id="修改-layout-cshtml"><a class="header-anchor" href="#修改-layout-cshtml"> </a>修改 _layout.cshtml</h2>
<p>將在 <code>.angular-cli.json</code> 所設定輸出的 html 檔案內容加入到 <code>_layout.cshtml</code> 內，這裡要使用 <code>ViewComponent</code> 的方式來處理，不然當部屬到 Azure 時會壞掉</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScriptHTMLViewComponent</span> : <span class="title">ViewComponent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IHostingEnvironment _env;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScriptHTMLViewComponent</span>(<span class="params">IHostingEnvironment env</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">       _env = env;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IViewComponentResult&gt; <span class="title">InvokeAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> model = System.IO.File.ReadAllText(Path.Combine(_env.WebRootPath, <span class="string">&quot;dist&quot;</span>, <span class="string">&quot;script.html&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> View(<span class="string">&quot;Index&quot;</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Shared/Components/ScriptHTML/Index.cshtml</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@model string</span><br><span class="line">@Html.Raw(Model)</span><br></pre></td></tr></table></figure>
<p><code>_layout.cshtml</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@await Component.InvokeAsync(&quot;ScriptHTML&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="修改-Startup-cs"><a class="header-anchor" href="#修改-Startup-cs"> </a>修改 Startup.cs</h2>
<p>新增一條新的路由給 Angular 使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">app.UseMvc(routes =&gt;</span><br><span class="line">           &#123;</span><br><span class="line">               routes.MapRoute(</span><br><span class="line">                   name: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                   template: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">               routes.MapSpaFallbackRoute(<span class="string">&quot;spa-fallback&quot;</span>, <span class="keyword">new</span> &#123; controller = <span class="string">&quot;Home&quot;</span>, action = <span class="string">&quot;Angular&quot;</span> &#125;);</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="新增-Home-Angular"><a class="header-anchor" href="#新增-Home-Angular"> </a>新增 Home/Angular</h2>
<p>在 <code>HomeController</code> 內新增 Angular Action</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Angular</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> View();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>並將相對應的 View 檔案也建立起來，並新增 Angular 的 root component</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-root</span>&gt;</span><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基本上經這個幾個步驟的設定，已經將 Angular 的專案整合到 <a href="http://ASP.NET">ASP.NET</a> Core Web 專案內了</p>
<h1 id="路由"><a class="header-anchor" href="#路由"> </a>路由</h1>
<p>關於路由部分，由於 Angular 與 MVC 本身都有自己的路由系統，而這兩個系統都會作用，所以要稍微留意</p>
<p>通常一個頁面有可能是純的 Razor 頁面，或是 Angular 所 render 的頁面，當 MVC 的路由系統找不到時，就會導向 Home/Angular 的頁面，這時候 Angular 的路由機制就會接手處理，一個頁面只有一種產生方式還算是單純</p>
<p>但如果同一個網址，後端與前端都有符合條件的路由時，又該怎麼辦，在這情形下有分兩種處理方式</p>
<ol>
<li>啟動 app-root 後再由此產生對應的 component</li>
<li>直接使用 component</li>
</ol>
<h2 id="啟動-app-root-後再由此產生對應的-component"><a class="header-anchor" href="#啟動-app-root-後再由此產生對應的-component"> </a>啟動 app-root 後再由此產生對應的 component</h2>
<p>例如 ~/home/about 頁面內，在前端的路由檔內也有對應的設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;dash&#x27;</span>, <span class="attr">loadChildren</span>: <span class="string">&#x27;app/dash/dash.module#DashModule&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;home/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">EmptyComponent</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-root</span>&gt;</span><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這樣的設定方式，顯示結果如下</p>
<p><img src="https://i.imgur.com/zgi1bJa.png" alt=""></p>
<h2 id="直接使用-component"><a class="header-anchor" href="#直接使用-component"> </a>直接使用 component</h2>
<p>直接使用 component 時，就必須將該 component 註冊到 <code>entryComponents</code> 內，並於 <code>ngDoBootstrap</code> 時判斷是否有該 element的存在，假設在 Home/Index 頁面有一個 <code>&lt;app-menu&gt;&lt;/app-menu&gt;</code> 的 element，那就需要將 <code>MenuComponent</code> 註冊到 <code>entryComponents</code> 的區塊內</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Index Page</span><br><span class="line"><span class="tag">&lt;<span class="name">app-menu</span>&gt;</span><span class="tag">&lt;/<span class="name">app-menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>App.Module.ts 檔案需要調整的內容如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>, <span class="title class_">HomeComponent</span>, <span class="title class_">EmptyComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes), <span class="title class_">MenuModule</span>],</span><br><span class="line">  <span class="attr">entryComponents</span>: [<span class="title class_">AppComponent</span>, <span class="title class_">MenuComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;  </span><br><span class="line">  <span class="title function_">ngDoBootstrap</span>(<span class="params">app: ApplicationRef</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;app-root&#x27;</span>)) &#123;</span><br><span class="line">        app.<span class="title function_">bootstrap</span>(<span class="title class_">AppComponent</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;app-menu&#x27;</span>)) &#123;</span><br><span class="line">        app.<span class="title function_">bootstrap</span>(<span class="title class_">MenuComponent</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由於這樣子的設定方式，當需要動態顯示的 Components 一多時，就會變得很難管哩，所以稍微調整一下寫法，讓後續的新增動作簡化些</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> entryComponents = [<span class="title class_">AppComponent</span>, <span class="title class_">MenuComponent</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;dash&#x27;</span>, <span class="attr">loadChildren</span>: <span class="string">&#x27;app/dash/dash.module#DashModule&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;home/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;**&#x27;</span>, <span class="attr">component</span>: <span class="title class_">EmptyComponent</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>, <span class="title class_">HomeComponent</span>, <span class="title class_">EmptyComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes), <span class="title class_">MenuModule</span>],</span><br><span class="line">  <span class="attr">entryComponents</span>: [...entryComponents]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> componentFactoryResolver: ComponentFactoryResolver</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">ngDoBootstrap</span>(<span class="params">app: ApplicationRef</span>) &#123;</span><br><span class="line">    entryComponents.<span class="title function_">forEach</span>(<span class="function">(<span class="params">component: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> factory = <span class="variable language_">this</span>.<span class="property">componentFactoryResolver</span>.<span class="title function_">resolveComponentFactory</span>(component);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(factory.<span class="property">selector</span>)) &#123;</span><br><span class="line">        app.<span class="title function_">bootstrap</span>(factory);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>componentFactoryResolver : 會將 Component Type 建立成 componentFactory 以供後續使用</li>
<li>ApplicationRef.bootstrap 接受 componentFactory 或是 Type 的方式啟動</li>
</ul>
<h1 id="結語"><a class="header-anchor" href="#結語"> </a>結語</h1>
<p>基本上到這裡的設定算是很基本的設定方式，這樣的整合方式可以說是 MPA (Multi-Page Application) 與 SPA (Single Page Application ) 的整合，對於開發專案時的彈性是很大的，而且也可以避免一些前後端分離要留意的點，例如 API CORS 的問題</p>
<p>如果要顯示的頁面很簡單，可以直接使用 Razor 的方式完成，如果要處理的頁面使用者操作比較複雜，這時候使用 Angular 的方式來處理頁面動作，可以很漂亮的完成工作。</p>
<p>但是要留意的地方，這個架構只是眾多解決方案的其中一個，所以要仔細評估各專案的性質，選擇最適合的架構，開發起來會省很多力氣</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/chgc/coremvc_angular_new_structure">GitHub Repo</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular 建立 Injector 的流程</title>
    <url>/2017/09/24/angular-injector/</url>
    <content><![CDATA[<p>Angular 有內建一套 Dependency Injection 框架，可以讓我們簡單的完成 DI 的相關行為，Angular 內部是如何運作建置 Injector 的呢? 讓我們來研究一下</p>
<span id="more"></span>
<h1 id="Angular-建立-Injector-的方式"><a class="header-anchor" href="#Angular-建立-Injector-的方式"> </a>Angular 建立 Injector 的方式</h1>
<p>從 <code>platformBrowserDynamic()</code> 執行時，就會開始一系列的初始建置 platform 的動作，這其中包含 Injector 的設定，從原始碼整理出的順序是執行 <code>platformBrowerDynamic()</code> 事實上就是執行 <code>createPlatformFactory</code>的動作。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 進入點</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> platformBrowserDynamic = <span class="title function_">createPlatformFactory</span>(</span><br><span class="line">    platformCoreDynamic, <span class="string">&#x27;browserDynamic&#x27;</span>, <span class="variable constant_">INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二層的 platformCoreDynamic</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> platformCoreDynamic = <span class="title function_">createPlatformFactory</span>(platformCore, <span class="string">&#x27;coreDynamic&#x27;</span>, [</span><br><span class="line">  &#123;<span class="attr">provide</span>: <span class="variable constant_">COMPILER_OPTIONS</span>, <span class="attr">useValue</span>: &#123;&#125;, <span class="attr">multi</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">provide</span>: <span class="title class_">CompilerFactory</span>, <span class="attr">useClass</span>: <span class="title class_">JitCompilerFactory</span>, <span class="attr">deps</span>: [<span class="variable constant_">COMPILER_OPTIONS</span>]&#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最底層的 platformCore</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> platformCore = <span class="title function_">createPlatformFactory</span>(<span class="literal">null</span>, <span class="string">&#x27;core&#x27;</span>, _CORE_PLATFORM_PROVIDERS);</span><br></pre></td></tr></table></figure>
<p><code>createPlatformFactory</code> 接受三個參數，</p>
<ol>
<li>parent platform: 這裡就是 <code>platformCore</code></li>
<li>platform 的名稱</li>
<li>要註冊至 Injector 的 provider ，型別為 <code>StaticProvider</code></li>
</ol>
<p>在 <code>createPlatFormFactory</code> 裡，如果沒有 parent platform 時，才會建立 Injector，而這裡就是指 platformCore 的部分，也是我們要關注的地方， <strong>Injector.Create</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPlatformFactory</span>(<span class="params"></span></span><br><span class="line"><span class="params">    parentPlatformFactory: ((extraProviders?: StaticProvider[]) =&gt; PlatformRef) | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    name: <span class="built_in">string</span>, providers: StaticProvider[] = []</span>): <span class="function">(<span class="params">extraProviders?: StaticProvider[]</span>) =&gt;</span></span><br><span class="line">    <span class="title class_">PlatformRef</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> marker = <span class="keyword">new</span> <span class="title class_">InjectionToken</span>(<span class="string">`Platform: <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">extraProviders: StaticProvider[] = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> platform = <span class="title function_">getPlatform</span>();</span><br><span class="line">    <span class="keyword">if</span> (!platform || platform.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="variable constant_">ALLOW_MULTIPLE_PLATFORMS</span>, <span class="literal">false</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (parentPlatformFactory) &#123;</span><br><span class="line">        <span class="title function_">parentPlatformFactory</span>(</span><br><span class="line">            providers.<span class="title function_">concat</span>(extraProviders).<span class="title function_">concat</span>(&#123;<span class="attr">provide</span>: marker, <span class="attr">useValue</span>: <span class="literal">true</span>&#125;));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 建立 Injector</span></span><br><span class="line">        <span class="title function_">createPlatform</span>(<span class="title class_">Injector</span>.<span class="title function_">create</span>(</span><br><span class="line">            providers.<span class="title function_">concat</span>(extraProviders).<span class="title function_">concat</span>(&#123;<span class="attr">provide</span>: marker, <span class="attr">useValue</span>: <span class="literal">true</span>&#125;)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">assertPlatform</span>(marker);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Injector</code> 裡的 create 方法是一個 static method，真正使用到 Injector.create 的地方有三處，其餘的皆測試檔案裡使用。</p>
<ol>
<li>createPlatformFactory</li>
<li>compiler_factory</li>
<li>TestBed</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Injector</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="variable constant_">THROW_IF_NOT_FOUND</span> = _THROW_IF_NOT_FOUND;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">NULL</span>: <span class="title class_">Injector</span> = <span class="keyword">new</span> <span class="title function_">_NullInjector</span>();</span><br><span class="line">  ... </span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">create</span>(<span class="attr">providers</span>: <span class="title class_">StaticProvider</span>[], parent?: <span class="title class_">Injector</span>): <span class="title class_">Injector</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StaticInjector</span>(providers, parent);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>StaticInjector</code> 的程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">StaticInjector</span> <span class="keyword">implements</span> <span class="title class_">Injector</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">parent</span>: <span class="title class_">Injector</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_records</span>: <span class="title class_">Map</span>&lt;<span class="built_in">any</span>, <span class="title class_">Record</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">providers: StaticProvider[], parent: Injector = NULL_INJECTOR</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = parent;    </span><br><span class="line">    <span class="comment">// 重點在這裡</span></span><br><span class="line">    <span class="keyword">const</span> records = <span class="variable language_">this</span>.<span class="property">_records</span> = <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">any</span>, <span class="title class_">Record</span>&gt;();</span><br><span class="line">    records.<span class="title function_">set</span>(</span><br><span class="line">        <span class="title class_">Injector</span>, &lt;<span class="title class_">Record</span>&gt;&#123;<span class="attr">token</span>: <span class="title class_">Injector</span>, <span class="attr">fn</span>: <span class="variable constant_">IDENT</span>, <span class="attr">deps</span>: <span class="variable constant_">EMPTY</span>, <span class="attr">value</span>: <span class="variable language_">this</span>, <span class="attr">useNew</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">    <span class="title function_">recursivelyProcessProviders</span>(records, providers);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get&lt;T&gt;(<span class="attr">token</span>: <span class="title class_">Type</span>&lt;T&gt;|<span class="title class_">InjectionToken</span>&lt;T&gt;, notFoundValue?: T): T;</span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">token</span>: <span class="built_in">any</span>, notFoundValue?: <span class="built_in">any</span>): <span class="built_in">any</span>;</span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">token</span>: <span class="built_in">any</span>, notFoundValue?: <span class="built_in">any</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可以看出 Injector 其實內部是透過 Map 的方式來管理 Providers 的，而 <code>recursivelyProcessProviders</code> 是用來將傳入的 providers 陣列註冊到 records 中，以供後續使用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">recursivelyProcessProviders</span>(<span class="params">records: <span class="built_in">Map</span>&lt;<span class="built_in">any</span>, Record&gt;, provider: StaticProvider</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (provider) &#123;</span><br><span class="line">    provider = <span class="title function_">resolveForwardRef</span>(provider);</span><br><span class="line">    <span class="keyword">if</span> (provider <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">      <span class="comment">// if we have an array recurse into the array</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; provider.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">recursivelyProcessProviders</span>(records, provider[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> provider === <span class="string">&#x27;function&#x27;</span>) &#123;     </span><br><span class="line">      <span class="keyword">throw</span> <span class="title function_">staticError</span>(<span class="string">&#x27;Function/Class not supported&#x27;</span>, provider);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (provider &amp;&amp; <span class="keyword">typeof</span> provider === <span class="string">&#x27;object&#x27;</span> &amp;&amp; provider.<span class="property">provide</span>) &#123;      </span><br><span class="line">      <span class="comment">// 對應 forwardRef decorator</span></span><br><span class="line">      <span class="keyword">let</span> token = <span class="title function_">resolveForwardRef</span>(provider.<span class="property">provide</span>);</span><br><span class="line">      <span class="comment">// resolveProvider 是另外一個重點 function，解析各式的 provider 設定</span></span><br><span class="line">      <span class="keyword">const</span> resolvedProvider = <span class="title function_">resolveProvider</span>(provider);</span><br><span class="line">      <span class="keyword">if</span> (provider.<span class="property">multi</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// This is a multi provider.</span></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">multiProvider</span>: <span class="title class_">Record</span>|<span class="literal">undefined</span> = records.<span class="title function_">get</span>(token);</span><br><span class="line">        <span class="keyword">if</span> (multiProvider) &#123;</span><br><span class="line">          <span class="keyword">if</span> (multiProvider.<span class="property">fn</span> !== <span class="variable constant_">MULTI_PROVIDER_FN</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="title function_">multiProviderMixError</span>(token);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// Create a placeholder factory which will look up the constituents of the multi provider.</span></span><br><span class="line">          records.<span class="title function_">set</span>(token, multiProvider = &lt;<span class="title class_">Record</span>&gt;&#123;</span><br><span class="line">            <span class="attr">token</span>: provider.<span class="property">provide</span>,</span><br><span class="line">            <span class="attr">deps</span>: [],</span><br><span class="line">            <span class="attr">useNew</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">fn</span>: <span class="variable constant_">MULTI_PROVIDER_FN</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="variable constant_">EMPTY</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Treat the provider as the token.</span></span><br><span class="line">        token = provider;</span><br><span class="line">        multiProvider.<span class="property">deps</span>.<span class="title function_">push</span>(&#123;token, <span class="attr">options</span>: <span class="title class_">OptionFlags</span>.<span class="property">Default</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> record = records.<span class="title function_">get</span>(token);</span><br><span class="line">      <span class="keyword">if</span> (record &amp;&amp; record.<span class="property">fn</span> == <span class="variable constant_">MULTI_PROVIDER_FN</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="title function_">multiProviderMixError</span>(token);</span><br><span class="line">      &#125;</span><br><span class="line">      records.<span class="title function_">set</span>(token, resolvedProvider);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="title function_">staticError</span>(<span class="string">&#x27;Unexpected provider&#x27;</span>, provider);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上列的程式碼中，有幾個重點</p>
<ol>
<li>
<p>forwardRef：Allows to refer to references which are not yet defined.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveForwardRef</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">type</span> === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="keyword">type</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;__forward_ref__&#x27;</span>) &amp;&amp;</span><br><span class="line">      <span class="keyword">type</span>.<span class="property">__forward_ref__</span> === forwardRef) &#123;</span><br><span class="line">    <span class="keyword">return</span> (&lt;<span class="title class_">ForwardRefFn</span>&gt;<span class="keyword">type</span>)();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">type</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>resolveProvider：分析 provider 的註冊是否合法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolveProvider</span>(<span class="params">provider: SupportedProvider</span>): <span class="title class_">Record</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> deps = <span class="title function_">computeDeps</span>(provider);</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fn</span>: <span class="title class_">Function</span> = <span class="variable constant_">IDENT</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="variable constant_">EMPTY</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">useNew</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> provide = <span class="title function_">resolveForwardRef</span>(provider.<span class="property">provide</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">USE_VALUE</span> <span class="keyword">in</span> provider) &#123;</span><br><span class="line">    <span class="comment">// We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.</span></span><br><span class="line">    value = (provider <span class="keyword">as</span> <span class="title class_">ValueProvider</span>).<span class="property">useValue</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((provider <span class="keyword">as</span> <span class="title class_">FactoryProvider</span>).<span class="property">useFactory</span>) &#123;</span><br><span class="line">    fn = (provider <span class="keyword">as</span> <span class="title class_">FactoryProvider</span>).<span class="property">useFactory</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((provider <span class="keyword">as</span> <span class="title class_">ExistingProvider</span>).<span class="property">useExisting</span>) &#123;</span><br><span class="line">    <span class="comment">// Just use IDENT</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((provider <span class="keyword">as</span> <span class="title class_">StaticClassProvider</span>).<span class="property">useClass</span>) &#123;</span><br><span class="line">    useNew = <span class="literal">true</span>;</span><br><span class="line">    fn = <span class="title function_">resolveForwardRef</span>((provider <span class="keyword">as</span> <span class="title class_">StaticClassProvider</span>).<span class="property">useClass</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> provide == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    useNew = <span class="literal">true</span>;</span><br><span class="line">    fn = provide;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="title function_">staticError</span>(</span><br><span class="line">        <span class="string">&#x27;StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable&#x27;</span>,</span><br><span class="line">        provider);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;deps, fn, useNew, value&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>到這裡，已經可以看出 Inector 的運作模式，但到這個階段也同時建立 Application-Wild 層級的 Injector，預設在 platform 層級所註冊的 provider 有下列幾項</p>
<ol>
<li>{provide: ResourceLoader, useClass: CachedResourceLoader, deps: []}</li>
<li>{provide: COMPILER_OPTIONS, useValue: {}, multi: true}</li>
<li><strong>{provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS]}</strong></li>
<li>{provide: PLATFORM_ID, useValue: 『unknown』}</li>
<li><strong>{provide: PlatformRef, deps: [Injector]}</strong></li>
<li>{provide: TestabilityRegistry, deps: []}</li>
<li>{provide: Console, deps: []}</li>
</ol>
<p>之前有提過 Injector.create 除了測試檔案外，只有三個地方會出現，而 <code>CompilerFactory</code> 是其中一個，這裡我們可以知道 <code>CompilerFactory</code> 是使用 <code>JitCompilerFactory</code> 來編譯 Component，這裡另外建立一個 Injector，所以這裡所註冊的 Provider 會限制於在此層級使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JitCompilerFactory</span> <span class="keyword">implements</span> <span class="title class_">CompilerFactory</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_defaultOptions</span>: <span class="title class_">CompilerOptions</span>[];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">defaultOptions: CompilerOptions[]</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">compilerOptions</span>: <span class="title class_">CompilerOptions</span> = &#123;</span><br><span class="line">      <span class="attr">useJit</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">defaultEncapsulation</span>: <span class="title class_">ViewEncapsulation</span>.<span class="property">Emulated</span>,</span><br><span class="line">      <span class="attr">missingTranslation</span>: <span class="title class_">MissingTranslationStrategy</span>.<span class="property">Warning</span>,</span><br><span class="line">      <span class="attr">enableLegacyTemplate</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_defaultOptions</span> = [compilerOptions, ...defaultOptions];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">createCompiler</span>(<span class="attr">options</span>: <span class="title class_">CompilerOptions</span>[] = []): <span class="title class_">Compiler</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> opts = <span class="title function_">_mergeOptions</span>(<span class="variable language_">this</span>.<span class="property">_defaultOptions</span>.<span class="title function_">concat</span>(options));   </span><br><span class="line">    <span class="keyword">const</span> injector = <span class="title class_">Injector</span>.<span class="title function_">create</span>([</span><br><span class="line">      <span class="variable constant_">COMPILER_PROVIDERS</span>, &#123;</span><br><span class="line">        <span class="attr">provide</span>: <span class="title class_">CompilerConfig</span>,</span><br><span class="line">        <span class="attr">useFactory</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CompilerConfig</span>(&#123;</span><br><span class="line">            <span class="comment">// let explicit values from the compiler options overwrite options</span></span><br><span class="line">            <span class="comment">// from the app providers</span></span><br><span class="line">            <span class="attr">useJit</span>: opts.<span class="property">useJit</span>,</span><br><span class="line">            <span class="attr">jitDevMode</span>: <span class="title function_">isDevMode</span>(),</span><br><span class="line">            <span class="comment">// let explicit values from the compiler options overwrite options</span></span><br><span class="line">            <span class="comment">// from the app providers</span></span><br><span class="line">            <span class="attr">defaultEncapsulation</span>: opts.<span class="property">defaultEncapsulation</span>,</span><br><span class="line">            <span class="attr">missingTranslation</span>: opts.<span class="property">missingTranslation</span>,</span><br><span class="line">            <span class="attr">enableLegacyTemplate</span>: opts.<span class="property">enableLegacyTemplate</span>,</span><br><span class="line">            <span class="attr">preserveWhitespaces</span>: opts.<span class="property">preserveWhitespaces</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">deps</span>: []</span><br><span class="line">      &#125;,</span><br><span class="line">      opts.<span class="property">providers</span> !</span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">return</span> injector.<span class="title function_">get</span>(<span class="title class_">Compiler</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>JitCompilerFactory</code> 內的 <code>createCompiler</code> 函式會在 <code>bootstrapModule</code> 時被執行，<code>bootstrapModule</code> 是 <code>platformBrowserDynamic()</code> 建立後的下一個動作，<code>bootstrapModule</code> 定義在 <code>PlatformRef</code> 中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">bootstrapModule&lt;M&gt;(</span><br><span class="line">    <span class="attr">moduleType</span>: <span class="title class_">Type</span>&lt;M&gt;, <span class="attr">compilerOptions</span>: (<span class="title class_">CompilerOptions</span>&amp;<span class="title class_">BootstrapOptions</span>)|</span><br><span class="line">    <span class="title class_">Array</span>&lt;<span class="title class_">CompilerOptions</span>&amp;<span class="title class_">BootstrapOptions</span>&gt; = []): <span class="title class_">Promise</span>&lt;<span class="title class_">NgModuleRef</span>&lt;M&gt;&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">compilerFactory</span>: <span class="title class_">CompilerFactory</span> = <span class="variable language_">this</span>.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">CompilerFactory</span>);</span><br><span class="line">  <span class="keyword">const</span> options = <span class="title function_">optionsReducer</span>(&#123;&#125;, compilerOptions);</span><br><span class="line">  <span class="comment">// 建立另外一個新的 Injector</span></span><br><span class="line">  <span class="keyword">const</span> compiler = compilerFactory.<span class="title function_">createCompiler</span>([options]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> compiler.<span class="title function_">compileModuleAsync</span>(moduleType)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">moduleFactory</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">bootstrapModuleFactory</span>(moduleFactory, options));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>了解 Angular 底層 DI 的運作原理後，雖然對實際開發沒有什麼實質上的效益 XD，純粹滿足好奇心而已</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Schematics</title>
    <url>/2017/10/26/angular-schematics/</url>
    <content><![CDATA[<p>Angular CLI 1.4 版以後，樣板的產生器就改使用 <code>@angular-devkit/schematics</code> ，而在 10 月初，<code>Nrwl.io</code> 也推出 nx 版的 schematics 樣版集合，所以什麼是 <code>schematics</code> ，我們可以利用他來做什麼樣的事情呢?</p>
<span id="more"></span>
<h1 id="簡介"><a class="header-anchor" href="#簡介"> </a>簡介</h1>
<p><code>@angular/schematics</code> 是包含在 <code>@angular/devkit</code> 內，他是一個定義樣板的架構，類似 ember cli 內的 blueprint，利用 json 設定檔及預設的檔案範本，可以利用指令產生出我們所設定的檔案內容</p>
<p><code>schematics</code> 有分兩個部分，<code>@angular-devkit/schematics</code> 屬於 runner，而 <code>@schematics/angular</code> 屬於範本集合 (Angular CLI 所使用的範本集合)。</p>
<p><img src="https://i.imgur.com/XODMSSU.png" alt=""></p>
<h1 id="架構"><a class="header-anchor" href="#架構"> </a>架構</h1>
<h2 id="collection-json"><a class="header-anchor" href="#collection-json"> </a>collection.json</h2>
<p>如之前所說，<code>schematics</code> 是一個集合，所有的定義項目都可以在 <code>collection.json</code> 內看到，也可以說是集合的進入點</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;schematics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;application&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;factory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./application&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./application/schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Create an Angular application.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;cl&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;factory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./class&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Create a class.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./class/schema.json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;c&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;factory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./component&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Create an Angular component.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./component/schema.json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>collection.json</code> 檔案的第一層是 <code>schemtaics</code>，在這一個節點下，就是各指令的定義檔，例如 <code>application</code>、<code>class</code> 或 <code>component</code> 等，都會對應一個資料夾</p>
<p>以 <code>class</code> 為例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;cl&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;factory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./class&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Create a class.&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./class/schema.json&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<ul>
<li>aliases: 指令的縮寫，例如 <code>ng generate class</code> 也可以使用縮寫代替 <code>ng generate cl</code></li>
<li>factory: 所有的邏輯存放的所在地</li>
<li>description: 資訊描述</li>
<li>schema: 參數設定檔</li>
</ul>
<h2 id="schema-json"><a class="header-anchor" href="#schema-json"> </a>schema.json</h2>
<p>進入 <code>class</code> 資料夾，並開啟 <code>schema.json</code> 檔案，內容如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://json-schema.org/schema&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SchematicsAngularClass&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Angular Class Options Schema&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;appRoot&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceDir&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if a spec file is generated.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies the type of class.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 <code>properties</code> 下可以定義所有的變數的型別、描述及預設值，<code>requried</code> 設定必須輸入的欄位</p>
<h2 id="index-ts"><a class="header-anchor" href="#index-ts"> </a>index.ts</h2>
<p><code>index.ts</code> 檔案會是 <code>factory</code> 所指定的資料夾下首先會被執行的檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Schema</span> <span class="keyword">as</span> <span class="title class_">ClassOptions</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./schema&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><code>Schema</code> 是針對 <code>schema.json</code> 的 properties 區塊定義項目的介面檔，主要功能是提供 <code>index.ts</code> 內使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Schema</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    appRoot?: <span class="built_in">string</span>;</span><br><span class="line">    path?: <span class="built_in">string</span>;</span><br><span class="line">    sourceDir?: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Specifies if a spec file is generated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    spec?: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Specifies the type of class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">type</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本架構</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">options: ClassOptions</span>): <span class="title class_">Rule</span> &#123;</span><br><span class="line">  options.<span class="property">type</span> = !!options.<span class="property">type</span> ? <span class="string">`.<span class="subst">$&#123;options.<span class="keyword">type</span>&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  options.<span class="property">path</span> = options.<span class="property">path</span> ? <span class="title function_">normalize</span>(options.<span class="property">path</span>) : options.<span class="property">path</span>;</span><br><span class="line">  <span class="keyword">const</span> sourceDir = options.<span class="property">sourceDir</span>;</span><br><span class="line">  <span class="keyword">if</span> (!sourceDir) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SchematicsException</span>(<span class="string">`sourceDir option is required.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 範本存放的位置</span></span><br><span class="line">  <span class="keyword">const</span> templateSource = <span class="title function_">apply</span>(<span class="title function_">url</span>(<span class="string">&#x27;./files&#x27;</span>), [</span><br><span class="line">    options.<span class="property">spec</span> ? <span class="title function_">noop</span>() : <span class="title function_">filter</span>(<span class="function"><span class="params">path</span> =&gt;</span> !path.<span class="title function_">endsWith</span>(<span class="string">&#x27;.spec.ts&#x27;</span>)),</span><br><span class="line">    <span class="comment">// 建立範本</span></span><br><span class="line">    <span class="title function_">template</span>(&#123;</span><br><span class="line">      ...stringUtils,</span><br><span class="line">      ...options <span class="keyword">as</span> <span class="built_in">object</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 移動建立後的檔案到指定的位置</span></span><br><span class="line">    <span class="title function_">move</span>(sourceDir),</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合併新建立的檔案與既有檔案</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">chain</span>([</span><br><span class="line">    <span class="title function_">branchAndMerge</span>(<span class="title function_">chain</span>([</span><br><span class="line">      <span class="title function_">mergeWith</span>(templateSource),</span><br><span class="line">    ])),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="files-資料夾"><a class="header-anchor" href="#files-資料夾"> </a>files  資料夾</h2>
<p>會看到 <code>__name@dasherize____type__.ts</code> 的檔案，這裡看到的 <code>__name</code> (兩個底線) 會對應到 <code>schema.json</code>  properties 所定義的變數名稱 <code>name</code> ，同樣的 <code>__type</code> 也相對應於 <code>type</code> 的參數，同樣的規則，是用於資料夾名稱</p>
<p><img src="https://i.imgur.com/iZ83a3z.png" alt=""></p>
<p><code>@dasherize</code> 是一個函式，接受後面的引數並處理後回結果，這段的效果等同於 <code>dasherize(type)</code></p>
<p>但實際的傳入的值是透過 <code>index.ts</code> 內的 <code>template</code> 傳入的參數集合 (如下註解)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">template</span>(&#123;</span><br><span class="line">      ...stringUtils,</span><br><span class="line">      ...options <span class="keyword">as</span> <span class="built_in">object</span>, <span class="comment">// 傳入的參數集合</span></span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure>
<p>在該檔案內的內容，可以看到 <code>name</code> ，同樣的代表的 <code>name</code> 變數</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> &lt;%= <span class="title function_">classify</span>(name) %&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>classify</code> 函式的效果是將 <code>someFunction</code> 主換成 <code>SomeFunction</code></p>
<h1 id="自訂-schematics-集合"><a class="header-anchor" href="#自訂-schematics-集合"> </a>自訂 schematics 集合</h1>
<p>目前最快的方式，是直接複製 @schematics/angular 來改，但其實 @angular/dev-kit 有提供命令的方式來建立~~(還在研究中，等研究出來後在寫另外一篇文章分享)~~ 請參考下一段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/n/lib/node_modules/@angular/cli/node_modules/ (angular cli 全域的安裝位置)</span><br><span class="line">$ mkdir -p @custom/myangular</span><br><span class="line">$ cp -R @schematics/angular/* @custom/myangular/ </span><br></pre></td></tr></table></figure>
<p>上述的指令，等同於直接在全域的 Angular CLI 下建立一個新的 schematics 範本集合</p>
<p>當在執行 <code>ng new</code> 時，可以加上 <code>--collection</code> 來設定要使用的 schematics</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng new --collection=@custom/myangular myapp</span><br></pre></td></tr></table></figure>
<h1 id="創建-schematic"><a class="header-anchor" href="#創建-schematic"> </a>創建 schematic</h1>
<p>@angular/dev-kit 有提供建立的指令，在這之前需先安裝三個工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g @angular-devkit/schematics</span><br><span class="line">npm i -g @schematics/schematics</span><br><span class="line">npm i -g rxjs</span><br></pre></td></tr></table></figure>
<p>安裝完成後，即可透過 <code>schematics</code> 的指令建立範本集，預設有兩種範本 <code>blank</code> 和 <code>schematic</code> 。建立指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// schematic template</span><br><span class="line">schematics @schematics/schematics:schematic --name &lt;&lt;collection name&gt;&gt;</span><br><span class="line">// blank template</span><br><span class="line">schematics @schematics/schematics:blank --name &lt;&lt;collection name&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>建立後的專案結構</p>
<p><img src="https://i.imgur.com/hN4xSJq.png" alt=""></p>
<p>之後就可按上面所介紹的方式建立自己的範本，當然也可參考其他人的 schematics ，例如 <code>nx</code> 或是 <code>ngrx</code>，我相信之後會有更多各式各樣的範本出來</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://youtu.be/ZKyz0lb0GjA">ngAir 134 - Angular Schematics with Mike Brocchi</a></li>
<li><a href="https://github.com/angular/devkit">angular/devkit</a></li>
<li><a href="https://github.com/ngrx/schematics-builds">ngrx schematic</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 手動創造出 Lazy Loading 的效果</title>
    <url>/2017/11/08/manual-lazy-loading/</url>
    <content><![CDATA[<p>一般提起 Angular 的 Lazy Loading 時，第一個反應都是透過網址的方式來實作，但是否有方法可以借用 <code>RouterModule</code> 的幫助來產生 chunk 檔案，然後手動作載入的動作呢? 答案是可以的</p>
<span id="more"></span>
<h1 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h1>
<p>其實在 <code>RouterModule</code> 底層在執行 Lazy Loading 效果的方法，是藉由 <a href="https://angular.io/api/core/NgModuleFactoryLoader">NgModuleFactoryLoader</a> 來完成的， 而底下有一個 subclass 叫做 <a href="https://angular.io/api/core/SystemJsNgModuleLoader">SystemJsNgModuleLoader</a>，這一個是我們所需要的 <code>NgModuleLoader</code>，<strong>將其註冊在 module providers 區區塊內</strong>，所以 Module Loader 有了，那要怎麼註冊 module 成為可以延遲載入的 module 呢?</p>
<p>方法有兩個</p>
<ol>
<li>
<p>使用 <code>RouterModule.forChild(routes)</code> 的方式註冊 modules</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123; <span class="attr">loadChildren</span>: <span class="string">&#x27;app/lazy1/lazy1.module#Lazy1Module&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">loadChildren</span>: <span class="string">&#x27;app/lazy2/lazy2.module#Lazy2Module&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">FormsModule</span>, <span class="title class_">RouterModule</span>.<span class="title function_">forChild</span>(routes)],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">SystemJsNgModuleLoader</span>],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 <a href="https://angular.io/api/router/provideRoutes">provideRoutes</a> 的方式註冊 modules</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123; <span class="attr">loadChildren</span>: <span class="string">&#x27;app/lazy1/lazy1.module#Lazy1Module&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">loadChildren</span>: <span class="string">&#x27;app/lazy2/lazy2.module#Lazy2Module&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">FormsModule</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title function_">provideRoutes</span>(routes), <span class="title class_">SystemJsNgModuleLoader</span>],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上述的兩種方式都可以達到一樣的效果</p>
<p><img src="https://i.imgur.com/GRMdckF.png" alt=""></p>
<h1 id="使用方式"><a class="header-anchor" href="#使用方式"> </a>使用方式</h1>
<h2 id="constructor"><a class="header-anchor" href="#constructor"> </a>constructor</h2>
<p>環境設定好後，該如何使用呢? 這裡以 <code>app.component.ts</code> 為例，首先先在 <code>constructor</code> 載入 <code>SystemJsNgModuleLoader</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> moduleLoader: SystemJsNgModuleLoader</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="template"><a class="header-anchor" href="#template"> </a>template</h2>
<p>範例我使用的 html 如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;go(&#x27;lazy1&#x27;)&quot;</span>&gt;</span>GO TO Lazy1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;go(&#x27;lazy2&#x27;)&quot;</span>&gt;</span>GO TO Lazy2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div #container&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngComponentOutlet</span>=<span class="string">&quot;OtherModuleComponent;</span></span></span><br><span class="line"><span class="string"><span class="tag">ngModuleFactory: myModule;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>HTML說明</p>
<ul>
<li><code>ngComponentOutlet</code> 支援使用 <code>ngModuleFactory</code> 的方法產生 Component，</li>
<li>兩個按鈕都按下後，會將各 Module 所指定的 <code>EntryComponent</code> 顯示在 <code>ng-conainer</code> 的地方</li>
</ul>
<h2 id="lazy-module"><a class="header-anchor" href="#lazy-module"> </a>lazy module</h2>
<p>其中一個 <code>LazyModule</code> 的程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>],</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">Lazy1Component</span>],</span><br><span class="line">  <span class="attr">entryComponents</span>: [<span class="title class_">Lazy1Component</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Lazy1Module</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> entry = <span class="title class_">Lazy1Component</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要留意的是，由於我們會動態載入 <code>component</code> ，所以該 <code>component</code> 需要被註冊在 <code>entryComponents</code> 的區塊內。</p>
<p>另外於 <code>Lazy1Module</code> 的 區塊內設定一個 static property ，等一下在載入 module’s component 時會用到</p>
<h2 id="go-method"><a class="header-anchor" href="#go-method"> </a>go method</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> modules = &#123;</span><br><span class="line">  <span class="attr">lazy1</span>: <span class="string">&#x27;app/lazy1/lazy1.module#Lazy1Module&#x27;</span>,</span><br><span class="line">  <span class="attr">lazy2</span>: <span class="string">&#x27;app/lazy2/lazy2.module#Lazy2Module&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="title class_">OtherModuleComponent</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="attr">myModule</span>: <span class="title class_">NgModuleFactory</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">go</span>(<span class="params">moduleName</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">path</span>: <span class="built_in">string</span> = modules[moduleName];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">moduleLoader</span>.<span class="title function_">load</span>(path).<span class="title function_">then</span>(<span class="function">(<span class="params">moduleFactory: NgModuleFactory&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> entryComponent = (&lt;<span class="built_in">any</span>&gt;moduleFactory.<span class="property">moduleType</span>).<span class="property">entry</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myModule</span> = moduleFactory;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">OtherModuleComponent</span> = entryComponent;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>還記得在 <code>constructor</code> 所注入的 <code>SystemJsNgModuleLoader</code>，該 class 只有一個 <code>load</code> 函式，這一個 load 函式接受一個引數，是用來指定要載入的 module 位置，這個位置會跟 <code>AppModule</code> 所設定的一樣。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">load</span>(<span class="attr">path</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">NgModuleFactory</span>&lt;<span class="built_in">any</span>&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>當成功載入時，會回傳一個 <code>NgModuleFactory</code> ，這個 <code>NgModuleFactory</code> 就可以直接指定給 <code>ngComponentOutlet</code> 使用，而 component 的部分，可以由剛剛所設定的靜態變數 entry 取得，一樣指定給 <code>ngComponentOutlet</code> 使用。</p>
<p>這樣子就完成手動載入 <code>NgModule</code> 的功能了，是不是很簡單!!!</p>
<h1 id="延伸應用"><a class="header-anchor" href="#延伸應用"> </a>延伸應用</h1>
<p>Angular 在 Multi Page Application 的應用情境下，可以利用這樣的模式，動態的載入所需要的 <code>NgModule</code> 並啟用 <code>Component</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngDoBootstrap</span>(<span class="params">appRef: ApplicationRef</span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> widgets = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;[data-module-path]&#x27;</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> widgets) &#123;</span><br><span class="line">     <span class="keyword">if</span> (widgets.<span class="title function_">hasOwnProperty</span>(i)) &#123;</span><br><span class="line">       <span class="keyword">const</span> modulePath = widgets[i].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-module-path&#x27;</span>);</span><br><span class="line">       <span class="keyword">if</span> (modulePath) &#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">moduleLoader</span>.<span class="title function_">load</span>(modulePath).<span class="title function_">then</span>(<span class="function">(<span class="params">moduleFactory: NgModuleFactory&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">const</span> entryComponent = (&lt;<span class="built_in">any</span>&gt;moduleFactory.<span class="property">moduleType</span>).<span class="property">entry</span>;</span><br><span class="line">           <span class="keyword">const</span> ngModuleRef = moduleFactory.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">injector</span>);</span><br><span class="line">           <span class="keyword">const</span> compFactory = ngModuleRef.<span class="property">componentFactoryResolver</span>.<span class="title function_">resolveComponentFactory</span>(entryComponent);</span><br><span class="line">           <span class="comment">// 這裡的selector 就會跟 app-root 一樣</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(compFactory.<span class="property">selector</span>)) &#123;</span><br><span class="line">             appRef.<span class="title function_">bootstrap</span>(compFactory);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-root</span> <span class="attr">data-module-path</span>=<span class="string">&quot;./lazy1/lazy1.module#Lazy1Module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-root</span> <span class="attr">data-module-path</span>=<span class="string">&quot;./lazy2/lazy2.module#Lazy2Module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://stackblitz.com/edit/angular-ndkgan">stackblitz live demo</a></li>
<li><a href="https://github.com/chgc/manual_load_module">GitHub Repo</a></li>
<li><a href="https://angular.io/api/common/NgComponentOutlet">ngComponentOutlet</a></li>
<li><a href="https://angular.io/api/core/NgModuleFactoryLoader">NgModuleFactoryLoader</a></li>
<li><a href="https://angular.io/api/core/SystemJsNgModuleLoader">SystemJsNgModuleLoader</a></li>
<li><a href="https://blog.novatec-gmbh.de/angular-2-in-a-multi-page-application/">Angular 2 in a multi-page application</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 利用 Angular CLI 1.6 建立 PWA 網站</title>
    <url>/2017/11/25/angular-pwa/</url>
    <content><![CDATA[<p>Angular CLI 1.6 預設內建 service-worker 功能，只要在建立時加個參數，就可以將 service-worker 設定起來，就是這麼方便，但細節設定呢?</p>
<span id="more"></span>
<p><strong>!! 請注意，以下的內容必須使用 Angular CLI 1.6 板材可以使用</strong></p>
<h1 id="基本"><a class="header-anchor" href="#基本"> </a>基本</h1>
<p>當安裝完 Angular CLI  1.6 後，<code>ng new</code> 的指令參數增加了 <code>—service-worker</code> ，建立包含 service-worker 的專案所需要打的指令，可依自己的需求調整參數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng new &lt;project name&gt; --service-worker</span><br></pre></td></tr></table></figure>
<p>當新增這參數後，CLI會幫我們做以下的事情</p>
<ol>
<li>
<p>安裝 <code>npm install @angular/service-worker</code></p>
</li>
<li>
<p><code>.angular-cli.json</code> 內開啟 <code>service-worker: true</code> 的設定</p>
</li>
<li>
<p>在 <code>app.module.ts</code> 內註冊 <code>ngsw-worker.js</code> 檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ServiceWorkerModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/service-worker&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">    environment.<span class="property">production</span> ? <span class="title class_">ServiceWorkerModule</span>.<span class="title function_">register</span>(<span class="string">&#x27;/ngsw-worker.js&#x27;</span>) : []</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立<code>ngsw-config.json</code>檔案，<code>ng build —prod</code> 後產生的 ngsw.json 會根據這個 json 檔案內容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;assetGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;installMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;/favicon.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;/index.html&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;versionedFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;/*.bundle.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;/*.bundle.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;/*.chunk.js&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;installMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lazy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prefetch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;/assets/**&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ol>
<p>service worker 只會在 <code>ng build —prod</code> 的時候被產生出來，所以就讓我們做第一次的建置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure>
<p><img src="https://c1.staticflickr.com/5/4573/38630850271_3f41c6ff70_o.png" alt=""></p>
<p>到這個步驟，最基本的 PWA 網站就算完成了</p>
<p><strong>注意: 請勿在 <code>ng server</code> 模式下測試 Angular Service Worker</strong></p>
<p><img src="https://c1.staticflickr.com/5/4557/38574717996_000cf7d782_o.png" alt=""></p>
<p><img src="https://c1.staticflickr.com/5/4555/37913342274_716cdc2a1a_o.png" alt=""></p>
<h1 id="設定檔"><a class="header-anchor" href="#設定檔"> </a>設定檔</h1>
<p>關於 <code>service worker</code> 相關的設定項目，都可以在 <code>ngsw-config.json</code> 內設定，包含 cacheing 的方式跟時間等</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Copyright Google Inc. All Rights Reserved.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Use of this source code is governed by an MIT-style license that can be</span></span><br><span class="line"><span class="comment"> * found in the LICENSE file at https://angular.io/license</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@experimental</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">type</span> <span class="title class_">Glob</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@experimental</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">type</span> <span class="title class_">Duration</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A top-level Angular Service Worker configuration object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@experimental</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    appData?: &#123;&#125;;</span><br><span class="line">    <span class="attr">index</span>: <span class="built_in">string</span>;</span><br><span class="line">    assetGroups?: <span class="title class_">AssetGroup</span>[];</span><br><span class="line">    dataGroups?: <span class="title class_">DataGroup</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration for a particular group of assets.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@experimental</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">AssetGroup</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    installMode?: <span class="string">&#x27;prefetch&#x27;</span> | <span class="string">&#x27;lazy&#x27;</span>;</span><br><span class="line">    updateMode?: <span class="string">&#x27;prefetch&#x27;</span> | <span class="string">&#x27;lazy&#x27;</span>;</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">        files?: <span class="title class_">Glob</span>[];</span><br><span class="line">        versionedFiles?: <span class="title class_">Glob</span>[];</span><br><span class="line">        urls?: <span class="title class_">Glob</span>[];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration for a particular group of dynamic URLs.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@experimental</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DataGroup</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">urls</span>: <span class="title class_">Glob</span>[];</span><br><span class="line">    version?: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">cacheConfig</span>: &#123;</span><br><span class="line">        <span class="attr">maxSize</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="title class_">Duration</span>;</span><br><span class="line">        timeout?: <span class="title class_">Duration</span>;</span><br><span class="line">        strategy?: <span class="string">&#x27;freshness&#x27;</span> | <span class="string">&#x27;performance&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上列的介面定義檔說明了很詳細，對於 DataGroup 內的 cacheConfig strategy 有兩個可以選擇</p>
<ol>
<li>freshness: network first mode</li>
<li>performance: cache first mode</li>
</ol>
<h1 id="其他備註"><a class="header-anchor" href="#其他備註"> </a>其他備註</h1>
<p>[2018-01-19 更新] 在後來使用時，發現一個很神奇的現象，假如我有使用到 RxJS 的狀態時，單純使用 <code>ServiceWorkerModule.register('/ngsw-worker.js')</code> 是無法將 <code>service-worker</code> 成功註冊起來，必須在 <code>main.ts</code> 修正成這樣，才能成功註冊 service-worker</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">platformBrowserDynamic</span>()</span><br><span class="line">  .<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">      navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;/ngsw-worker.js&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p>Angular CLI 1.6 版讓我們可以很容易地將 service-worker 的功能加到專案內，而 service worker 的功能不只有離線瀏覽的功能，還有 push notification 的功能，或是如何利用程式碼的方式更新 service worker cache 的內容，將在下一篇文章中說明</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] CDK 系列 - Portal</title>
    <url>/2017/12/02/angular-cdk-portal/</url>
    <content><![CDATA[<p>Angular Material 團隊在前一陣子推出 Angular CDK 的套件，什麼是 Angular CDK ? 簡單的說就是 Angular material 2 底層在使用的功能而樣式的部分就留給我們自己設計。</p>
<blockquote>
<p>The goal of the CDK is to give developers more tools to build awesome components for the web. This will be especially useful for projects that want to take advantage of the features of Angular Material without adopting the Material Design visual language. — <strong>Angular Team</strong></p>
</blockquote>
<span id="more"></span>
<h1 id="Introduction"><a class="header-anchor" href="#Introduction"> </a>Introduction</h1>
<p>CDK 這一系列的文章就會記錄探索 CDK 功能的筆記，今天會先從 Portal 開始看起。</p>
<p><code>Portal</code> 是什麼 ? Portal 是一個可以讓我們動態載入 Component 的一個功能。跟 <code>ngComponentOutlet</code> 要達到的效果是一樣的，但是 <code>Portal</code> 又額外提供一些功能能讓我們做延伸的應用</p>
<p>Angular CDK裡的 Portal 有兩個元素</p>
<ol>
<li><code>Portal</code>  是用來包 template 或是 component 的</li>
<li><code>PortalHost</code>  是顯示 portal 的地方，可以附加在網頁上的任何地方，例如 <code>document.body</code></li>
</ol>
<p><img src="https://i.imgur.com/hBGkmW7.png" alt=""></p>
<h1 id="基本用法"><a class="header-anchor" href="#基本用法"> </a>基本用法</h1>
<p>當要使用 Portal 相關的 directive 時，需要 import <code>PortalModule</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PortalModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/cdk/portal&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">PortalModule</span>],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo-portal-outlet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> [<span class="attr">cdkPortalOutlet</span>]=<span class="string">&quot;selectedPortal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;selectedPortal = programmingJoke&quot;</span>&gt;</span></span><br><span class="line">  Programming joke</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;selectedPortal = mathJoke&quot;</span>&gt;</span></span><br><span class="line">  Math joke</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> <span class="attr">cdk-portal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - Why don&#x27;t jokes work in octal?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - Because 7 10 11.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">cdk-portal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - Did you hear about this year&#x27;s Fibonacci Conference? <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - It&#x27;s going to be as big as the last two put together. <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">ViewChildren</span>, <span class="title class_">QueryList</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Portal</span>, <span class="title class_">CdkPortal</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/cdk/portal&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="meta">@ViewChildren</span>(<span class="title class_">CdkPortal</span>) <span class="attr">templatePortals</span>: <span class="title class_">QueryList</span>&lt;<span class="title class_">Portal</span>&lt;<span class="built_in">any</span>&gt;&gt;;</span><br><span class="line">  <span class="attr">selectedPortal</span>: <span class="title class_">Portal</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">programmingJoke</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">templatePortals</span>.<span class="property">first</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">mathJoke</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">templatePortals</span>.<span class="property">last</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當按鈕按下時，就會將 <code>&lt;ng-template [cdkPortalOutlet]=&quot;selectedPortal&quot;&gt;&lt;/ng-template&gt;</code> 換成我們想要顯示的內容，同樣的，如果要將 Component 顯示在同一個位置，可以這樣子寫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">scienceJoke</span>() &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ComponentPortal</span>(<span class="title class_">ScienceJoke</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>ComponentPortal</code> 來將 <code>component</code> 包起來後，就可以顯示在 <code>cdkPortalOutlet</code> 的所在位置了</p>
<h1 id="進階用法"><a class="header-anchor" href="#進階用法"> </a>進階用法</h1>
<p>假使說，不想要透過 <code>ckdPortalOutlet</code> 的方式，是否有辦法透過程式的方式，動態插入到畫面上呢?</p>
<p><code>cdk/portal</code>有提供另外一個方法叫做 PortalHost，可以透過這一個物件來將 Portal 顯示在我們所指定的位置上</p>
<p>app.component.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="attr">bodyPortalHost</span>: <span class="title class_">DomPortalHost</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> componentFactory: ComponentFactoryResolver,</span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> appRef: ApplicationRef,</span></span><br><span class="line"><span class="params">  <span class="keyword">private</span> injector: Injector</span></span><br><span class="line"><span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngAfterViewInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bodyPortalHost</span> = <span class="keyword">new</span> <span class="title class_">DomPortalHost</span>(</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#display&#x27;</span>),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">componentFactory</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">appRef</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">injector</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">setDisplayPort</span>(<span class="params">displayPortal</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">bodyPortalHost</span>.<span class="property">hasAttached</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bodyPortalHost</span>.<span class="title function_">detach</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bodyPortalHost</span>.<span class="title function_">attach</span>(displayPortal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;display&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-root</span>&gt;</span><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>app.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;setDisplayPort(programmingJoke)&quot;</span>&gt;</span></span><br><span class="line">  Programming joke</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;setDisplayPort(mathJoke)&quot;</span>&gt;</span></span><br><span class="line">  Math joke</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> <span class="attr">cdk-portal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - Why don&#x27;t jokes work in octal?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - Because 7 10 11.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">cdk-portal</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - Did you hear about this year&#x27;s Fibonacci Conference? <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - It&#x27;s going to be as big as the last two put together. <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當按鈕按下時，就會將所要顯示的 <code>ng-template</code> 透過 DomPortalHost 的方式插入到所指定的位置，而這個位置不侷限於 Angular 的頁面上，可以指到任何地方，只要能取到該 HTMLElement 即可</p>
<p><img src="https://i.imgur.com/y6UZWEt.png" alt=""></p>
<p>這裡需要留意的是 一個<code>DomPortalHost</code> 一次只能顯示一個 <code>Portal</code> ，當要顯示不同 <code>Portal</code> 時，就必須先將之前的移除 (<code>detach()</code>)</p>
<h2 id="相關API"><a class="header-anchor" href="#相關API"> </a>相關API</h2>
<ul>
<li><code>hasAttached</code> 判斷 DomHostPortal 是否有附加任何的 Portal</li>
<li><code>attach</code> 附加 Portal 至 DomHostPortal 上</li>
<li><code>detach</code> 從 DomHostPortal 上移除 Portal</li>
<li><code>dispose</code>清除 DomHostPortal 物件</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://material.angular.io/cdk/portal/overview">Angular CDK - Portal</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Rendertron</title>
    <url>/2017/12/25/angular-rendertron/</url>
    <content><![CDATA[<p>什麼是 <code>rendertron</code> ? <code>rendertron</code> 是 Google Chrome 團隊推出的另外一個新工具，這工具可以讓 PWA 網站遇到網路爬蟲或是分享到 twitter/Facebook 時，可以產出靜態頁面的效果。換句算說，這工具可以讓我們不用額外處理 Service Side Rendering 卻可以得到相同的效果 (僅局限於網路爬蟲或是 Rich Content Sharing時)。</p>
<span id="more"></span>
<h1 id="簡介"><a class="header-anchor" href="#簡介"> </a>簡介</h1>
<p><code>rendertron</code> 是如何運作的呢? 其實 rendertron 是透過 Headless Chrome 來讀取 PWA 網站並回傳所產生出來的結果，因為是使用瀏覽器來產生 DOM，所以通常在實作 Server Side Rendering 時會遇到的問題都不會發生，例如 <code>document</code> 物件不存在。</p>
<p>另外一個好處是，因為是使用瀏覽器來產生 DOM，所以任何前端技術都可以使用!! 因為是透過 proxy middleware 的方式來完成的，middleware 的設定方是根據文件，看起來並不複雜</p>
<h1 id="Middleware"><a class="header-anchor" href="#Middleware"> </a>Middleware</h1>
<p>根據官方文件有 3 種設定使用的方式</p>
<ol>
<li><a href="https://github.com/GoogleChrome/rendertron/blob/master/middleware">Express.js middleware</a></li>
<li><a href="https://github.com/justinribeiro/pwa-firebase-functions-botrender">Firebase functions</a> (Community maintained)</li>
<li><a href="https://github.com/galamai/AspNetCore.Rendertron">ASP.net core middleware</a> (Community maintained)</li>
</ol>
<p>上述的三種方式都是使用同一個原理，那就判斷發出請求的對象是使用者還是網路爬蟲，如果是網路爬蟲，則使用 rendertron 所生的內容，如果是使用者，則直接輸出預設的內容</p>
<p><img src="https://i.imgur.com/zjfodpF.png" alt=""></p>
<p><img src="https://i.imgur.com/KBQa1RE.png" alt=""></p>
<h2 id="ASP-NET-Core-MVC"><a class="header-anchor" href="#ASP-NET-Core-MVC"> </a><a href="http://ASP.NET">ASP.NET</a> Core MVC</h2>
<p>就以 <a href="http://ASP.NET">ASP.NET</a> Core MVC 來說，安裝使用方式如下</p>
<ol>
<li>
<p>安裝 <code>Galamai.AspNetCore.Rendertron</code> 套件</p>
</li>
<li>
<p>新增 <code>Startup.cs</code></p>
<ol>
<li>
<p>services 加入 <code>AddRendertron</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Add rendertron services</span></span><br><span class="line">    services.AddRendertron(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// use http compression</span></span><br><span class="line">        options.AcceptCompression = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>設定並使用 <code>Rendertron</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use Rendertron middleware</span></span><br><span class="line"><span class="comment">// 指定 rendertron 服務的位置</span></span><br><span class="line">app.UseRendertron(proxyUrl: <span class="string">&quot;http://rendertron:8080/render/&quot;</span>); 成ㄕ</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li>
<p>完成設定，這樣子就可以使用了</p>
</li>
</ol>
<h1 id="安裝"><a class="header-anchor" href="#安裝"> </a>安裝</h1>
<h2 id="本地端"><a class="header-anchor" href="#本地端"> </a>本地端</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/GoogleChrome/rendertron.git</span><br><span class="line">cd rendertron</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>從 Github 將程式碼抓下來後，執行 npm install 後，即可透過 <code>npm start</code> 將 rendertron 執行起來</p>
<h2 id="使用-docker-image"><a class="header-anchor" href="#使用-docker-image"> </a>使用 docker image</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t rendertron . --no-cache=true</span><br><span class="line">docker run -it -p 8080:8080 --name rendertron-container rendertron</span><br></pre></td></tr></table></figure>
<p>開啟網頁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/</span><br></pre></td></tr></table></figure>
<p>停止 container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker kill rendertron-container</span><br></pre></td></tr></table></figure>
<p>清除 container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p><a href="https://github.com/GoogleChrome/rendertron">rendertron</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] monorepo 架構是否可行? </title>
    <url>/2018/01/08/angular-monorepo-1/</url>
    <content><![CDATA[<p>目前的管理程式碼，大致上可以分成兩種方式， mono 與 multiple repositories，通常是採 Multiple Repo，每一個系統都有自己的 repository 做版控，各自管理自己的套件版本，這聽起來很合理，但目前比較大型的軟體公司，像是 Google 、Facebook、Twitter 等。都是採取 mono repo 的開發模式(請留意上述公司都有自己一套的開發流程)</p>
<p><strong>※沒有哪一種方法好，哪一種方法不好。都有各自的優缺點 !</strong></p>
<span id="more"></span>
<p>第一個問題是什麼是 Mono Repo?  Mono Repo 是將各應用程式及相關的程式碼都放在同一個 Repo 下做管理，讓程式碼共用的複雜度降低，這裡有一部在 YouTube 上面的影片，說明 Google 內部是如何使用 Mono Repo 跟為什麼要這樣子做</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/W71BTkUbdqE" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<p>這樣子有什麼樣的好處呢? 在提好處之前，先來看 Multiple Repositories 的好處有哪些</p>
<ol>
<li>Clean ownership</li>
<li>Better scale</li>
<li>Narrow Clones</li>
</ol>
<p>這些好處看起來沒有什麼問題，既然沒有問題，為什麼會有 Mono Repo 這種模式出來呢? 主要原因我想是當系統或是產品線變大時，有些底層重複性高的程式碼，變的很難管理。想想看，在後端寫 C# 專案時，從原本的單一專案，延伸出 n-tier 的架構，是為了怎樣的原因。</p>
<p>我想要表達的是，Mono Repo 的出現就是為了要解決 Multiple Repositories 的問題，而 Mono Repo 的好處有</p>
<ol>
<li>Better developer testing - 開發者可以立即知道自己修改的程式碼會不會造成其他系統出錯</li>
<li>Reduced code complexity - 因為程式碼都在一起，所以初階工程是可以很容易取得並了解公司內標準的程式編寫原則</li>
<li>Effective code reviews</li>
<li>Sharing of common components</li>
<li>Easy refactoring</li>
</ol>
<p>但沒有什麼東西是完美的，一定會有缺點的</p>
<p>Mono Repo 最大的問題是有沒有合適的工具做 CI/CD，當程式越大，建置測試的時間就會越久，所以要如何區分異動的程式碼所影響的範圍，而只針對影響範圍作測試的工作，以降低建置測試時間，這都是開發工具及環境設定要面對的問題。</p>
<p>另外一個問題是程式碼的健康程度，會影響 Mono Repo 所能帶出的效益。因為一個地方寫壞，有可能會造成整個系統的崩壞，Better developer testing 是一把雙刃劍，就看是從哪一個角度來看了</p>
<p>總結，兩種模式都有各自的優缺點，該如何結合兩者的優點，減少缺點，有什麼方式是 Angular 可以拿來用的，我覺得是值得思考的</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://research.google.com/pubs/pub45424.html">Why Google Stores Billions of Lines of Code in a Single Repository</a></li>
<li><a href="http://blog.shippable.com/ci/cd-of-microservices-using-mono-repos">CI/CD FOR MICROSERVICES USING MONOREPOS</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 建立 Schematics Collection</title>
    <url>/2018/01/11/angular-create-schematics/</url>
    <content><![CDATA[<p>之前的文章介紹了 Schematics，現在就來自己建立一個 Schematics collection，我們希望建立出來的 collection 可以保留原有 Angular CLI 的功能，並擴充自己想要的樣板</p>
<span id="more"></span>
<h1 id="基本設定"><a class="header-anchor" href="#基本設定"> </a>基本設定</h1>
<ol>
<li>
<p>先建立一個資料夾</p>
</li>
<li>
<p>新增 <code>package.json</code> 檔案，請依基本的 <code>npm</code> 專案方式設定，新增下列設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;schematics&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./collection.json&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立 <code>collection.json</code> 檔案，並新增以下內容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;schematics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;cl&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:class&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:component&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;directive&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;d&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:directive&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;e&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:enum&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;guard&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;g&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:guard&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;interface&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;i&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:interface&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;m&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:module&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;pipe&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;p&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:pipe&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;service&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;s&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>到這個步驟時，已經將 Angular CLI 既有的功能移植到我們的 collections 內了。接下來就將目前的檔案簽入到 GitHub 上，npm 可以設定 <code>devDependencies</code> 程式碼來源為 GitHub Repo，指定的方式是</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;&lt;&lt;package name&gt;&gt;&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;&lt;GitHub account&gt;&gt;/&lt;&lt;repo name&gt;&gt;&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>在新的或是既有的 Angular 專案，只要 Angular CLI 版本是在 1.4 版以上，都可以設定 <code>collection</code>，可修改 <code>.angular-cli.json</code> 檔案，設定方式如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    </span><br><span class="line">   <span class="attr">&quot;schematics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;collection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;&lt;package name&gt;&gt;&quot;</span> <span class="comment">// 這裡指定你所安裝的 package 名稱</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>當完成以上步驟時，我們還是可以正常的使用 Angular CLI 的指令，但是觸發的指令清單是根據我們版本的 collection，不在是預設的範本了，換句話說，我們可以更換指令，例如說 ng g component 的縮寫，希望從 <code>c</code> 改成 <code>comp</code> ，這是可行的，只要修改 <code>collection.json</code> 對應的 <code>alias</code> 即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前</span></span><br><span class="line"><span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;c&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:component&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改後</span></span><br><span class="line"> <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;comp&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@schematics/angular:component&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<h1 id="自訂範本"><a class="header-anchor" href="#自訂範本"> </a>自訂範本</h1>
<p>上一段我們完成沿用 Angular CLI 所提供的功能，現在要來製作自己的樣板了，基本的操作步驟是</p>
<ol>
<li>
<p>在 <code>collection.json</code> 內新增一個指令區塊</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;feature&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;factory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src/feature&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src/feature/schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Create a feature module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立 <code>feature</code> 資料夾，並在資料夾內新增 <code>index.ts</code> 和 <code>schema.json</code> 兩個檔案</p>
</li>
<li>
<p><code>schema.json</code> 內可設定建立 feature 時所需的參數，相對的也要建立 <code>schema.d.ts</code> 檔案</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://json-schema.org/schema&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SchematicsSchematicSchema&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Schematic Options Schema&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The name for the new feature module.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceDir&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;path&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The path of the source directory.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;visible&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html-selector&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The prefix to apply to generated selectors.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html-selector&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The selector to use for the component.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Schema</span> &#123;</span><br><span class="line">  sourceDir?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The name for the new feature module.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The prefix to apply to generated selectors.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  prefix?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The selector to use for the component.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  selector?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>index.ts</code> 內容</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">Rule</span>,</span><br><span class="line">  <span class="title class_">SchematicsException</span>,</span><br><span class="line">  apply,</span><br><span class="line">  <span class="title class_">Tree</span>,</span><br><span class="line">  <span class="title class_">SchematicContext</span>,</span><br><span class="line">  branchAndMerge,</span><br><span class="line">  chain,</span><br><span class="line">  mergeWith,</span><br><span class="line">  move,</span><br><span class="line">  template,</span><br><span class="line">  url</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular-devkit/schematics&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> stringUtils <span class="keyword">from</span> <span class="string">&#x27;../strings&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Schema</span> <span class="keyword">as</span> <span class="title class_">FeatureOptions</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./schema&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buildSelector</span>(<span class="params">options: FeatureOptions</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> selector = stringUtils.<span class="title function_">dasherize</span>(options.<span class="property">name</span>);</span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">prefix</span>) &#123;</span><br><span class="line">    selector = <span class="string">`<span class="subst">$&#123;options.prefix&#125;</span>-<span class="subst">$&#123;selector&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> selector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">options: FeatureOptions</span>): <span class="title class_">Rule</span> &#123;</span><br><span class="line">  options.<span class="property">selector</span> = options.<span class="property">selector</span> || <span class="title function_">buildSelector</span>(options);</span><br><span class="line">  <span class="keyword">const</span> sourceDir = options.<span class="property">sourceDir</span>;</span><br><span class="line">  <span class="keyword">if</span> (!sourceDir) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SchematicsException</span>(<span class="string">`sourceDir option is required.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">host: Tree, context: SchematicContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> templateSource = <span class="title function_">apply</span>(<span class="title function_">url</span>(<span class="string">&#x27;./files&#x27;</span>), [</span><br><span class="line">      <span class="title function_">template</span>(&#123;</span><br><span class="line">        ...stringUtils,</span><br><span class="line">        ...options</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="title function_">move</span>(sourceDir)</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">chain</span>([<span class="title function_">branchAndMerge</span>(<span class="title function_">chain</span>([<span class="title function_">mergeWith</span>(templateSource)]))])(host, context);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>相關的程式碼請參閱 <a href="https://github.com/chgc/demo-schematics">GitHub Repo</a></p>
</li>
</ol>
<h1 id="參考影片"><a class="header-anchor" href="#參考影片"> </a>參考影片</h1>
<p><a href="https://youtu.be/MpjHW2_w83Q">ngHouston - CLI Schematics w/ Hans Larsen</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] viewProviders V.S. providers</title>
    <url>/2018/01/19/angular-viewproviders-providers/</url>
    <content><![CDATA[<p>Angular Component 的 metadata 資訊內有兩個可以設定 <code>providers</code> 的地方，分別是 <code>viewProviders</code> 和 <code>providers</code> ，這兩者都可以註冊 providers 但有些微的差異</p>
<span id="more"></span>
<p>我們知道 Angular 的 <code>Injection System</code> ，讓 component / service / directive 等可以在 <code>constructor</code> 的地方注入想要使用的服務，根據服務註冊的地方，Angular 會提供一樣或是不一樣的服務實體，到這個地方，是我們所熟知的運作方式</p>
<p>當然我們也可以在 component 註冊服務，已提供本身跟與本身有關的子物件使用，在閱讀 API 文件時，發現 component 有兩個註冊服務的方法，<code>providers</code> 與 <code>viewProviders</code> 這兩者在說明分別為</p>
<ul>
<li><code>providers</code>  list of providers available to this component and its children</li>
<li><code>viewProviders</code> list of providers available to this component and its view children</li>
</ul>
<p>看起來很像，但到底差異在哪裡呢? 主要差異是在於子 component 的呈現方式會因不同註冊服務的方式而有所不同</p>
<h1 id="基本環境設定"><a class="header-anchor" href="#基本環境設定"> </a>基本環境設定</h1>
<p>來解釋一下，但先準備一下程式環境</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AppComponent 的樣版</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span><br><span class="line">	<span class="language-xml"><span class="tag">&lt;<span class="name">app-parent</span>&gt;</span><span class="tag">&lt;/<span class="name">app-parent</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">app-parent</span>&gt;</span><span class="tag">&lt;/<span class="name">app-parent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ParentComponet</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SimpleService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../simple.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h4&gt;Parent Component&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;simpleService.name&quot; /&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./parent.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> simpleService: SimpleService</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChildComponent</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SimpleService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../simple.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-child&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    Child Component &lt;br/&gt;</span></span><br><span class="line"><span class="string">    value: &#123;&#123; simpleService.name &#125;&#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./child.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ChildComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> simpleService: SimpleService</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleService</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SimpleService</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="NgModule-providers"><a class="header-anchor" href="#NgModule-providers"> </a>NgModule.providers</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">SimpleService</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在初始狀態， <code>SimpleService</code> 是註冊在 <code>app.module.ts</code> 內，畫面是這樣</p>
<p><img src="https://i.imgur.com/tPrc6Uc.png" alt=""></p>
<p>不論在左邊或是右邊的 Parent Component 輸入資料時，Child Component 都會顯示所輸入的資料</p>
<p><img src="https://i.imgur.com/c8fTLFW.gif" alt=""></p>
<p>這時 service 取得的順序</p>
<p><img src="https://i.imgur.com/TDQ27YH.png" alt=""></p>
<p>很清楚的，不論是 <code>ParentComponent</code> 或是 <code>ChildComponent</code> 都是存取註冊在 <code>NgModle</code> 的 <code>SimpleService</code></p>
<p>(圖片擷取至<a href="https://codecraft.tv">codecraft.tv</a>)</p>
<h1 id="Component-providers"><a class="header-anchor" href="#Component-providers"> </a>Component.providers</h1>
<p>這時當 <code>ParentComponent</code> 註冊 <code>SimpleService</code> 到 <code>providers</code> 內時，會有怎樣的效果呢</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SimpleService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../simple.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h4&gt;Parent Component&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;simpleService.name&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;br/&gt;</span></span><br><span class="line"><span class="string">    &lt;app-child&gt;&lt;/app-child&gt;</span></span><br><span class="line"><span class="string">	&lt;!--或是這種方式--&gt;</span></span><br><span class="line"><span class="string">    &lt;!--&lt;ng-content&gt;&lt;/ng-content&gt;--&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">SimpleService</span>],  </span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./parent.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> simpleService: SimpleService</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://i.imgur.com/Gq5CFo8.gif" alt=""></p>
<p>service 取得的順序</p>
<p><img src="https://i.imgur.com/J3vmOVb.png" alt=""></p>
<p>(圖片擷取至<a href="https://codecraft.tv">codecraft.tv</a>)</p>
<p>在這個情境，不論 <code>ChildComponent</code> 是已哪一種方式顯示在 <code>ParentComponent</code> 都會存取到註冊在 <code>ParentComponent</code> 的 providers，而因為 <code>AppComponent</code> 有兩個 <code>ParentComponent</code> ，所以各自有各自的 <code>SimpleService</code> 互不干擾</p>
<h1 id="Component-viewProviders"><a class="header-anchor" href="#Component-viewProviders"> </a>Component.viewProviders</h1>
<p>如果將 <code>SimpleService</code> 註冊到 <code>viewProviders</code> 時，並子 component 是透過 <code>&lt;ng-content&gt;</code> 映射到 <code>ParentComponent</code> 時</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SimpleService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../simple.service&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-parent&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h4&gt;Parent Component&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; [(ngModel)]=&quot;simpleService.name&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;br/&gt;</span></span><br><span class="line"><span class="string">    &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">  `</span>,  </span><br><span class="line">  <span class="attr">viewProviders</span>: [<span class="title class_">SimpleService</span>],</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./parent.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> simpleService: SimpleService</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// app-component.html</span><br><span class="line"><span class="tag">&lt;<span class="name">app-parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-child</span>&gt;</span><span class="tag">&lt;/<span class="name">app-child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://i.imgur.com/15sElSa.gif" alt=""></p>
<p>service 取得的順序</p>
<p><img src="https://i.imgur.com/m3eu0oU.png" alt=""></p>
<p>(圖片擷取至<a href="https://codecraft.tv">codecraft.tv</a>)</p>
<p><code>viewProviders</code> 比較特殊一點，透過 <code>&lt;ng-content&gt;</code> 呈現與不透過 <code>&lt;ng-content&gt;</code> 的結果不一樣，假設使用 <code>&lt;ng-content&gt;</code> 的方式將 <code>ChildComponent</code> 映射到 <code>ParentComponent</code> 時，兩者所讀取的 <code>SimpleService</code> 會是不同一個 (可參閱上圖)；但如果是直接在 <code>ParentComponent</code> 上使用 <code>ChildComponent</code> 時，所存取的 <code>SimpleService</code> 就會跟 <code>ParentComponent</code> 一樣，這部分就要留意了</p>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p><code>component.providers</code> 與 <code>component.viewProviders</code> 最大的差異如上述的實驗，是在 <code>&lt;ng-content&gt;&lt;/ng-content&gt;</code> 處理的部分，而這裡就是說明時提到的<code> its view children</code> 的意思了。表示如沒有在 template 上面看到，就不在 <code>viewProviders</code> 的管轄範圍內，可以透過準備好的<a href="https://stackblitz.com/edit/viewprovider-providers?file=app%2Fparent%2Fparent.component.ts">範例程式</a>，自己動手玩看看，比較有感覺。</p>
<p>Angular 的 DI 機制是很強大的，可以利用這樣的特行來滿足一些特需的效果 (暫時還想不到使用情境)，但至少不用因為註冊上的觀念誤解造成找不到資料的窘境出現</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://stackblitz.com/edit/viewprovider-providers?file=app%2Fparent%2Fparent.component.ts">stackblitz demo code</a></li>
<li><a href="https://codecraft.tv/courses/angular/dependency-injection-and-providers/ngmodule-providers-vs-component-providers-vs-component-viewproviders/">NgModule.providers vs Component.providers vs Component.viewProviders</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] @Attribute</title>
    <url>/2018/01/31/angular-attribute/</url>
    <content><![CDATA[<p>Angular 的 Decorator 裡，有一個 <code>@Attribute</code>，但官方文件並沒有介紹這一個 decorator 的用法，所以在此介紹一下</p>
<span id="more"></span>
<h1 id="基本寫法"><a class="header-anchor" href="#基本寫法"> </a>基本寫法</h1>
<p><code>@Attribute</code> 可讓 component 擁有一個一次性的 attribute 屬性可供傳入常數值使用</p>
<p>而基本的使用方式及設定程式碼如下，這裡的 age 就是透過 <code>@Attribute</code> 建立出來的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello</span> <span class="attr">name</span>=<span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span> <span class="attr">age</span>=<span class="string">&quot;30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span>, <span class="title class_">Attribute</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;h1&gt;Hello &#123;&#123;name&#125;&#125;! My age is &#123;&#123; age &#125;&#125;&lt;/h1&gt;`</span>,</span><br><span class="line">  <span class="attr">styles</span>: [<span class="string">`h1 &#123; font-family: Lato; &#125;`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HelloComponent</span>  &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="meta">@Attribute</span>(<span class="string">&#x27;age&#x27;</span>) <span class="keyword">private</span> age</span>)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>透過這種方式定義出來的 <code>attribute</code> 是不能使用任何 binding 的形式傳值，只能直接給予值，並只能在 <code>constructor</code> 設定。</p>
<h1 id="使用情境"><a class="header-anchor" href="#使用情境"> </a>使用情境</h1>
<p>假設有一個共用的元件，希望可以從外部直接指定使用方式，而這一個設定是不會改變的，那這時候使用 <code>@Attribute</code> 來設定就很合適。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Attribute</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ButtonType</span> = <span class="string">&#x27;primary&#x27;</span> | <span class="string">&#x27;secondary&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-button&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button [ngClass]=&quot;type&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ButtonComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="meta">@Attribute</span>(<span class="string">&#x27;type&#x27;</span>) <span class="keyword">public</span> <span class="keyword">type</span>: ButtonType = <span class="string">&#x27;primary&#x27;</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-button</span> <span class="attr">type</span>=<span class="string">&quot;secondary&quot;</span>&gt;</span>Action Button<span class="tag">&lt;/<span class="name">app-button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://netbasal.com/getting-to-know-the-attribute-decorator-in-angular-4f7c9fb61243">Getting to Know the @Attribute Decorator in Angular</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Nrwl Nx - 安裝篇</title>
    <url>/2018/02/11/nx/</url>
    <content><![CDATA[<p>繼上一篇 Mono repo 的討論後，今天要來介紹一下  Nrwl 這間顧問公司所推出的 Nx 工具，這 Nx 工具是建構在 Angular CLI 並使用自訂 schematics 的範本來創造符合企業開發需求的樣板工具，在這一篇會先簡單的介紹如何安裝並建立一個 <code>nx workspace</code></p>
<span id="more"></span>
<h1 id="安裝工具"><a class="header-anchor" href="#安裝工具"> </a>安裝工具</h1>
<p>Nrwl Nx 有將建置工具發佈在 npm 上，可透過 npm install 的方式來完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @nrwl/schematics</span><br></pre></td></tr></table></figure>
<p>基本上，這一個版本的 schematics 可以不需要再安裝 <code>@angualr/cli</code>，但是為了方便使用指令，還是建議將 <code>@angular/cli</code> 給裝起來</p>
<p>當安裝完成後，只需要一個指令就可以完成建立<code> workspace</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create-nx-workspace &lt;&lt;projectname&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>當執行這一行指令後，就會在目前目錄下，新增一個 <code>&lt;&lt;projectName&gt;&gt;</code> 資料夾，並將所需的檔案架構給安裝完成</p>
<p><img src="https://c1.staticflickr.com/5/4752/26332285498_8b0b90db7a_o_d.png" alt=""></p>
<p>Nx 的 workspace 分成兩個資料夾，<code>apps</code>與 <code>libs</code>，提供一個可建置多個 applications 的 mono-repo 環境，細節的部分將會於之後再說明，目前，就先知道兩個指令</p>
<ol>
<li>
<p><code>ng g app</code> : 建立 applications，這會產生一般我們常見的 CLI 的專案類型，會包含 <code>e2e</code> 與 <code>src</code> 資料夾等</p>
<p><img src="https://c1.staticflickr.com/5/4671/28425304299_0dfcfbd5f2_o_d.png" alt=""></p>
</li>
<li>
<p><code>ng g lib</code>：用來存放共用的 library，像是 feature module, service, helper function 等</p>
<p><img src="https://c1.staticflickr.com/5/4754/26332726278_6bc6a32641_b_d.jpg" alt=""></p>
</li>
</ol>
<p>以上兩個指令都可以加上 -h 取得更多的資訊</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://nrwl.io/nx">nrwl.io/nx</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Nx 環境設定介紹</title>
    <url>/2018/02/13/nx-config-file/</url>
    <content><![CDATA[<p>上一篇 Nx 介紹了如何安裝工具及可執行的指令，這一篇來介紹一下 workspace 的架構</p>
<span id="more"></span>
<h1 id="Workspace-架構"><a class="header-anchor" href="#Workspace-架構"> </a>Workspace 架構</h1>
<p>Nx 預設的專案架構有兩個空的資料夾，分別為 <code>apps</code> 與 <code>libs</code></p>
<p><img src="https://i.imgur.com/CMu4Pqo.png" alt=""></p>
<p>而我們熟悉的 CLI 專案，則會透過建立 app 的指令產生再 apps 的資料夾下，指令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng g app &lt;&lt;application name&gt;&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/9mJrRqD.png" alt=""></p>
<p>執行完指令，Nx 會產生一系列預設的檔案，及更新 <code>.angular-cli.json</code> 檔案，產生出來的檔案就是我們很熟悉的 CLI 專案有的相關檔案</p>
<p><img src="https://i.imgur.com/JGVdgov.png" alt=""></p>
<h1 id="設定檔"><a class="header-anchor" href="#設定檔"> </a>設定檔</h1>
<h2 id="angular-cli-json"><a class="header-anchor" href="#angular-cli-json"> </a>angular-cli.json</h2>
<p>當打開 <code>.angular-cli.json</code> 時，會發現內容與 Angular CLI 所產生的設定檔，有些許的不一樣，就一一來解釋</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/@nrwl/schematics/src/schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>這一行是設定此 JSON 格式描述檔的位置，由於 Nx 是一個多 App 的開發環境，所以在設定上當然會與常見的設定檔內容會有所不同</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;project&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nxdemo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;npmScope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nxdemo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;latestMigration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20180130-angular-devkit-schematics&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>描述專案的資訊</p>
<ol>
<li>專案名稱</li>
<li>Libs 的 npm namespace 名稱</li>
<li>Nx 的版本，在之後做升級時比較使用</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;schematics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;collection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@nrwl/schematics&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;postGenerate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run format&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;newProject&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;lib&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>defaults</code> 區塊所描述的資訊有</p>
<ol>
<li>指定要使用的 <code>schematics</code></li>
<li>當產生檔案後要執行的檔案</li>
<li>當建立新專案時，要執行的 collection 名稱</li>
</ol>
<p>另外是，當新增 app 時，會 apps 內新增 app 的相關資訊</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;apps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app-one&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apps/app-one/src&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/apps/app-one&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;assets&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;favicon.ico&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="string">&quot;polyfills.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../../test.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tsconfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsconfig.app.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;testTsconfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../../tsconfig.spec.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;styles.css&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environmentSource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environments&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.prod.ts&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="tsconfig-json"><a class="header-anchor" href="#tsconfig-json"> </a>tsconfig.json</h2>
<p>在初始時，<code>tsconfig.json</code> 內會包含一個路徑別名的設定，這一行的設定會讓我們在使用模組時，簡化注入時要標示的來源路徑</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;@nxdemo/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">       <span class="string">&quot;libs/*&quot;</span></span><br><span class="line">     <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="tslint-json"><a class="header-anchor" href="#tslint-json"> </a>tslint.json</h2>
<p>在 <code>tslint.json</code> 的最後也多加上了這一個檢查條件，細部的功能會在後面介紹</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;nx-enforce-module-boundaries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;lazyLoad&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;allow&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<h2 id="package-json"><a class="header-anchor" href="#package-json"> </a>package.json</h2>
<p>多新增了幾個 Nx 專屬的指令</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;apps:affected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx affected apps&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;build:affected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx affected build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;e2e:affected&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx affected e2e&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;affected:apps&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx affected apps&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;affected:build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx affected build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;affected:e2e&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx affected e2e&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx format write&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;format:write&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx format write&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;format:check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx format check&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;nx-migrate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx migrate&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;nx-migrate:check&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx migrate check&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;nx-migrate:skip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx migrate skip&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;postinstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/nx migrate check&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li>[Nx Workspace]<a href="https://nrwl.io/nx/guide-nx-workspace">https://nrwl.io/nx/guide-nx-workspace</a>)</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Nx 命令篇 - 建立 App</title>
    <url>/2018/02/19/nx-create-app/</url>
    <content><![CDATA[<p>Nx 工具提供兩個建立新範本的指令、<code>ng g app &lt;&lt;name&gt;&gt;</code> 和 <code>ng g lib &lt;&lt;name&gt;&gt;</code>，這一篇文章來看建立 application 的命令</p>
<span id="more"></span>
<h1 id="Create-App"><a class="header-anchor" href="#Create-App"> </a>Create App</h1>
<p>在建立 Application 時，可以有以下的參數可以使用</p>
<p>(注意：透過 <code>ng g app -h</code> 取得說明，其中有些參數是無法使用的)</p>
<ul>
<li>name (必填)：要建立的 Application 名稱</li>
<li>npmScope</li>
<li>directory：如果有設定 directory，application的建立路徑為 <code>&#123;&#123;direcotry&#125;&#125;/&#123;&#123;name&#125;&#125;</code> 如果沒有設定，建立路徑則是 <code>&#123;&#123;name&#125;&#125;</code></li>
<li>sourceDir：預設值為 <code>src</code>，程式碼產生位置，例如: <code>apps/&#123;&#123; directory &#125;&#125;/src</code></li>
<li>inlineStyle：設定使用 <code>inlineStyle</code></li>
<li>inlineTemplate：設定使用 <code>inlineTemplate</code></li>
<li>viewEncapsulation：設定 <code>viewEncapsulation</code>，可設定 <code>Emulated</code>、<code>Native</code> 和 <code>None</code></li>
<li>changeDetection：設定 <code>changeDetection</code>，可設定 <code>Default</code> 及 <code>onPush</code> ，預設值為 <code>Default</code></li>
<li>routing：產生 Routing 區段程式碼，例如 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code></li>
<li>skipTests：取消產生測試檔案</li>
<li>prefix：設定 prefix 文字，預設值為 <code>app</code></li>
<li>style：設定 css 的檔案類型，預設值為 <code>css</code></li>
</ul>
<p>當建立 application 時，除了新增檔案外，還會異動 <code>.angular-cli.json</code> 檔案，異動區塊有 <code>lint</code> 及 <code>apps</code> ，本篇文章建立範例時所執行指令為</p>
<blockquote>
<p>ng g app dashboard --directory=client</p>
</blockquote>
<ul>
<li>
<p>lint section</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;project&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apps/client/dashboard/src/tsconfig.app.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="string">&quot;**/node_modules/**&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;project&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apps/client/dashboard/e2e/tsconfig.e2e.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="string">&quot;**/node_modules/**&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>apps section</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;client/dashboard&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;apps/client/dashboard/src&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/apps/client/dashboard&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;assets&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;favicon.ico&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="string">&quot;polyfills.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../../../test.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tsconfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsconfig.app.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;testTsconfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../../../tsconfig.spec.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;styles.css&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environmentSource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;environments&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;environments/environment.prod.ts&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增檔案清單</p>
<p><img src="https://i.imgur.com/Ffwh3Wt.png" alt=""></p>
<p><img src="https://i.imgur.com/xTJeuDQ.png" alt=""></p>
</li>
<li>
<p>app.module.ts：預設載入 <code>NxModule.forRoot()</code>，預設注入 <code>DataPersistence</code> provider</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NxModule</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">forRoot</span>(): <span class="title class_">ModuleWithProviders</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">ngModule</span>: <span class="title class_">NxModule</span>, <span class="attr">providers</span>: [<span class="title class_">DataPersistence</span>] &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://nrwl.io/nx/guide-data-persistence">DataPersistence</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Nx 命令篇 - 建立 Lib</title>
    <url>/2018/02/24/nx-create-lib/</url>
    <content><![CDATA[<p>建立 App 是小事，真正重頭戲是建立 Libs，在 Nx 所提供的架構下，所有的 <code>NgModule</code>、<code>Serivces</code>、<code>Utility</code> 都是放在 Libs 資料夾下，所以建立 libs 的參數相對的多，影響的範圍比較廣，在這篇文章會稍微整理一下</p>
<span id="more"></span>
<h1 id="參數"><a class="header-anchor" href="#參數"> </a>參數</h1>
<p>Nx 建立 Lib 指令後面可使用的參數有</p>
<ul>
<li>
<p><strong>name</strong> ： Library 名稱</p>
</li>
<li>
<p><strong>directory</strong>：如果有設定 directory，application的建立路徑為 <code>&lt;&lt;directory name&gt;&gt;/&lt;&lt;library name&gt;&gt;</code> 如果沒有設定，建立路徑則是 <code>&lt;&lt;library name&gt;&gt;</code></p>
</li>
<li>
<p><strong>sourceDir</strong>：設定程式碼的存放路徑，這個會接在設定的 <code>directory</code> 之後，完整的設定規則如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="title function_">toFileName</span>(options.<span class="property">name</span>);</span><br><span class="line"><span class="keyword">const</span> fullName = options.<span class="property">directory</span> ? <span class="string">`<span class="subst">$&#123;toFileName(options.directory)&#125;</span>/<span class="subst">$&#123;name&#125;</span>`</span> : name;</span><br><span class="line"><span class="keyword">const</span> fullPath = <span class="string">`libs/<span class="subst">$&#123;fullName&#125;</span>/<span class="subst">$&#123;options.sourceDir&#125;</span>`</span>; <span class="comment">// 程式碼最終輸出位置</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>nomodule</strong>：建立一個沒有 NgModule 的 library</p>
</li>
<li>
<p><strong>routing</strong>：需產生路由設定檔</p>
</li>
<li>
<p><strong>lazy</strong>：設定為 lazyloading 的 NgModule</p>
</li>
<li>
<p><strong>parent-module</strong>：將建立的 Library import 到某一個 NgModule 內，需指定所要注入的 NgModule 實際的檔案位置</p>
</li>
</ul>
<h1 id="建立-Library"><a class="header-anchor" href="#建立-Library"> </a>建立 Library</h1>
<p>預設建立 Library 都會以 <code>NgModule</code> 的方式呈現，這表示，任何所建立的 Library 都會是一個 NgModule，以方便 import 到其他 Module 內。當然也可以設定 <code>--nomodule</code> 即可建立沒有 NgModule 的 library</p>
<p><img src="https://i.imgur.com/Bv1lSnR.png" alt=""></p>
<p>所建立的 library 都會放到 <code>libs</code> 資料夾下，這時會發現 Nx 有多產生一個 index.ts 檔案，而這一個 index.ts 檔案會 export NgModule 的內容，之所以會這樣子設定，是方便我們在其他地方進行 imports 時，只需要指到 library 的最上層位置，即可取得內部所開放出來的所有功能，例如 <code>import &#123; ... &#125; from '@nxdemo/backend'</code></p>
<p>此外，Nx 並會在 <code>.angular-cli.json</code> 的 <code>apps</code> 區塊新增此 library 的相關資訊</p>
<p><img src="https://i.imgur.com/K3qt59i.png" alt=""></p>
<p>這個動作的用意，這方便我們使用 Angular CLI 的 generator 功能，Angular CLI generator 可以指定所產生的範本是要輸出到哪一個 apps 下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng g service ticket -a=backend</span><br></pre></td></tr></table></figure>
<p>上列的指令就可以在剛剛建立的 <code>BackendModule</code> 裡，新增一個 <code>ticket service</code></p>
<h2 id="NgModule-with-routing"><a class="header-anchor" href="#NgModule-with-routing"> </a>NgModule with routing</h2>
<p>我們也可以透過 <code>--routing</code> 的參數，來產生一個含有路由設定檔的 NgModule</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng g lib account --routing</span><br></pre></td></tr></table></figure>
<p>所產生的 NgModule 會長這樣</p>
<p><img src="https://i.imgur.com/dGnzb6A.png" alt=""></p>
<p>會建立一個路由設定檔，並注入 <code>RouterModule</code> 而上一層的 <code>index.ts</code> 檔案內，也同時會輸出路由設定檔</p>
<p><img src="https://i.imgur.com/KNin2x1.png" alt=""></p>
<p>這個動作允許其他 NgModule 可以很容易地取得目前 NgModule 內的路由設定檔</p>
<h2 id="parentModule-設定"><a class="header-anchor" href="#parentModule-設定"> </a>parentModule 設定</h2>
<p><code>parentModule</code> 參數的設定，可以將目前要建立的 library 注入到其他 NgModule 裡</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng g lib profile-setting --routing --parent-module=apps/client/dashboard/src/app/app.module.ts</span><br></pre></td></tr></table></figure>
<p><code>--parent-module</code> 需要指定所要注入的 NgModule 實際的檔案位置</p>
<p><img src="https://i.imgur.com/XLhW7bg.png" alt=""></p>
<p>同時也會將所建立的路由設定檔加入到設定的 <code>parent-module</code> 的路由設定檔內</p>
<p><img src="https://i.imgur.com/u1qEYBq.png" alt=""></p>
<h2 id="lazy"><a class="header-anchor" href="#lazy"> </a>lazy</h2>
<p>如果多加上 <code>--lazy</code> 的參數時，在更新 <code>parent-module</code> 路由檔的方式就會有所差異，而且更新的檔案數量也比較多</p>
<p><img src="https://i.imgur.com/jIu3I6e.png" alt=""></p>
<p><code>parent-module</code> 的路由設定檔會採 <code>loadChildren</code> 的方式將該 NgModule 載入</p>
<p><img src="https://i.imgur.com/KUrjeux.png" alt=""></p>
<p>因為 <code>lazy</code> 的關係，新增的 NgModule 路由設定檔的呈現方式也會有所不同，會直接以 <code>RouterModule.forChild([])</code> 的方式呈現</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">CommonModule</span>,</span><br><span class="line">    <span class="title class_">RouterModule</span>.<span class="title function_">forChild</span>([</span><br><span class="line">      <span class="comment">/* &#123;path: &#x27;&#x27;, pathMatch: &#x27;full&#x27;, component: InsertYourComponentHere&#125; */</span></span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProfileSettingModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>tslin.json</code> 檔案也會被異動，會將 lazy load module 新增到 <code>lazyload</code> 陣列中以避免該 module 以非 lazy load 的方式被載入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;nx-enforce-module-boundaries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">     <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">     <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;lazyLoad&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="string">&quot;profile-setting&quot;</span></span><br><span class="line">       <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;allow&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="nomodule"><a class="header-anchor" href="#nomodule"> </a>nomodule</h2>
<p>要產生一個簡單的 TypeScript library 時，只要加上 <code>--nomodule</code>即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng g lib helper --nomodule</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/ni4NQDs.png" alt=""></p>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p>透過以上建立的方式，可以重新思考 <code>Feature module</code>  的規劃方式，也可以將一些與 Angular 無關的商業邏輯獨立成單一 Library，以便之後的重複利用性</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://angular.io/guide/feature-modules">Feature Modules</a></li>
<li><a href="https://angular.io/guide/lazy-loading-ngmodules">Lazy Loading Feature Modules</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] Blazor - 前置環境設定</title>
    <url>/2018/03/10/blazor/</url>
    <content><![CDATA[<p><strong>※此篇所介紹的技術都還在實驗階段，請勿用在 production 專案上</strong></p>
<p>在去年年底(2017/11)月份左右，有一個非常有趣的 Repo 出現，叫做 <code>Blazor</code> 。什麼是 <code>Blazor</code> ? <code>Blazor</code> 是將 C#/Razor 與 HTML 封裝成 WebAssembly ，然後可以跑在前端的 SPA 架構。目前這框架還處於實驗架構，但我們還是可以建立一個專案來玩玩看，這篇先介紹環境的安裝</p>
<span id="more"></span>
<h1 id="前置條件"><a class="header-anchor" href="#前置條件"> </a>前置條件</h1>
<ul>
<li>.NET Core SDK (&gt; 2.1.4)</li>
<li>Node.js (&gt; 8.3)</li>
</ul>
<p>如果使用 Visual studio 2017 者，需要更新至 <strong>15.6</strong> 版本，或者使用 <strong>preview</strong> 版本也可以</p>
<h1 id="安裝專案範本"><a class="header-anchor" href="#安裝專案範本"> </a>安裝專案範本</h1>
<h2 id="Visual-Studio-2017"><a class="header-anchor" href="#Visual-Studio-2017"> </a>Visual Studio 2017</h2>
<ul>
<li>
<p>將 <code>https://dotnet.myget.org/f/blazor-dev/vsix</code> 新增到 Extension Galleries 內</p>
<p><img src="https://i.imgur.com/JGLiFmx.png" alt=""></p>
</li>
<li>
<p>Nuget 套件來源也需要新增 <code>https://dotnet.myget.org/f/blazor-dev/vsix</code></p>
<p><img src="https://i.imgur.com/KGpJzvK.png" alt=""></p>
</li>
<li>
<p>更新安裝下列兩個套件，都需要關掉 Visual Studio 2017 才可以完成安裝動作</p>
<ul>
<li>Razor Language Services (<em>NOTE</em>: When you later uninstall the Razor Language Services VSIX you will need to do a VS repair to bring back the old one)</li>
<li><a href="http://ASP.NET">ASP.NET</a> Core Blazor Language Services</li>
</ul>
</li>
</ul>
<p>一旦完成上續的動作後，即可獲得 <code>Blazor</code> 的專案範本</p>
<p><img src="https://i.imgur.com/59HQhht.png" alt=""></p>
<p><img src="https://i.imgur.com/98jwMXo.png" alt=""></p>
<h2 id="使用-Command-line"><a class="header-anchor" href="#使用-Command-line"> </a>使用 Command-line</h2>
<p>透過以下指令可以安裝專案範本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet new -i Microsoft.AspNetCore.Blazor.Templates::0.1.0-* --nuget-source https://dotnet.myget.org/F/blazor-dev/api/v3/index.json </span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/oHrFc4Z.png" alt=""></p>
<p>之後的建立 Blazor 專案的方式就可以使用 <code>dotnet new blazor</code> 或是 <code>dotnet new blazorhosted</code> 的方式完成</p>
<h1 id="第一次啟動"><a class="header-anchor" href="#第一次啟動"> </a>第一次啟動</h1>
<p>在 restore 和 建置後，第一次啟動網站，你會看到很熟悉畫面</p>
<p><img src="https://i.imgur.com/jX3gcE4.png" alt=""></p>
<p>開啟開發者介面，也可以看到一堆 dll 檔案被下載到瀏覽器了 XD</p>
<h1 id="相關資源"><a class="header-anchor" href="#相關資源"> </a>相關資源</h1>
<ul>
<li>Blazor repo: <a href="https://github.com/aspnet/blazor">https://github.com/aspnet/blazor</a></li>
<li>Blazor Gitter: <a href="https://gitter.im/aspnet/blazor">https://gitter.im/aspnet/blazor</a></li>
<li>TsToCsharp repo: <a href="https://github.com/mono/TsToCSharp">https://github.com/mono/TsToCSharp</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] RxJS 6 的 Breaking Changes 整理</title>
    <url>/2018/03/22/rxjs-6-breakchanges/</url>
    <content><![CDATA[<p>Angular 6 將會把 RxJS 一起升級到 6 版，在 RxJS 6 版有許多的 breaking changes，這些 breaking changes 有許多是為了簡化開發時的寫法所做的改變，所以不要太緊張，就慢慢的了解就可以了。</p>
<span id="more"></span>
<h1 id="RxJS-6-Breaking-Changes-列表"><a class="header-anchor" href="#RxJS-6-Breaking-Changes-列表"> </a>RxJS 6 Breaking Changes 列表</h1>
<ul>
<li><strong>webSocket</strong>: <code>webSocket</code> creator function now exported from <code>rxjs/websocket</code> as <code>websocket</code>.</li>
<li><strong>IteratorObservable</strong>: IteratorObservable no longer share iterator between subscription</li>
<li><strong>utils</strong>: Many internal use utilities like <code>isArray</code> are now hidden under <code>rxjs/internal</code>, they are implementation details and should not be used.</li>
<li><strong>testing observables</strong>: <code>HotObservable</code> and <code>ColdObservable</code>, and other testing support types are no longer exported directly.</li>
<li><strong>creation functions</strong>: All create functions such as of, from, <code>combineLatest</code> and <code>fromEvent</code> should now be imported from <code>rxjs/create</code>.</li>
<li><strong>types and interfaces</strong>: Can no longer explicitly import types from <code>rxjs/interfaces</code>, import them from <code>rxjs</code> instead</li>
<li><strong>symbols</strong>: Symbols are no longer exported directly from modules such as <code>rxjs/symbol/observable </code>please use <code>Symbol.observable</code> and <code>Symbol.iterator</code> (polyfills may be required)</li>
<li><strong>deep imports</strong>: Can no longer deep import top-level types such as <code>rxjs/Observable</code>, <code>rxjs/Subject</code>, <code>rxjs/ReplaySubject</code>, et al. All imports should be done directly from <code>rxjs</code>, for example: <code>import \&#123; Observable, Subject \&#125; from 'rxjs'</code>;</li>
<li><strong>schedulers</strong>: Scheduler instances have changed names to be suffixed with <code>Scheduler</code>, (e.g. <code>asap</code> -&gt; <code>asapScheduler</code>)</li>
<li><strong>operators</strong>: Pipeable operators must now be <code>imported from rxjs</code> like so: <code>import &#123; map, filter, switchMap &#125; from 'rxjs/operators';</code>. No deep imports.</li>
<li><strong>ajax</strong>: Ajax observable should be imported from <code>rxjs/ajax</code>.</li>
<li><strong>ajax</strong>: will no longer execute a CORS request by default, you must opt-in with the crossDomain flag in the config.</li>
<li><strong>Observable</strong>: You should no longer deep import custom Observable implementations such as <code>ArrayObservable</code> or <code>ForkJoinObservable</code>.</li>
<li><strong>_throw</strong>: _throw is now exported as <code>throwError</code></li>
<li><strong>operators</strong>: Deep imports to <code>rxjs/operator/*</code> will no longer work. Again, pipe operators are still where they were.</li>
<li><strong>error handling</strong>: Unhandled errors are no longer caught and rethrown, rather they are caught and scheduled to be thrown, which causes them to be reported to window.onerror or process.on(『error』), depending on the environment. Consequently, teardown after a synchronous, unhandled, error will no longer occur, as the teardown would not exist, and producer interference cannot occur</li>
<li><strong>distinct</strong>: Using <code>distinct</code> requires a <code>Set</code> implementation and must be polyfilled in older runtimes</li>
<li><strong>asap</strong>: Old runtimes must polyfill Promise in order to use ASAP scheduling.</li>
<li><strong>groupBy</strong>: Older runtimes will require Map to be polyfilled to use <code>groupBy</code></li>
<li><strong>TypeScript</strong>: IE10 and lower will need to polyfill <code>Object.setPrototypeOf</code></li>
<li><strong>operators removed</strong>: Operator versions of static observable creators such as <code>merge</code>, <code>concat</code>, <code>zip</code>, <code>onErrorResumeNext</code>, and <code>race</code> have been removed. Please use the static versions of those operations. e.g. <code>a.pipe(concat(b, c)) becomes concat(a, b, c)</code>.</li>
<li><strong>rxjs</strong>: <code>rxjs/create</code> items are now exported from <code>rxjs</code></li>
<li><strong>throwError</strong>: Observable.throw no longer available in TypeScript without a cast</li>
<li><strong>empty</strong>: <code>empty()</code> without a scheduler will return the same instance every time.</li>
<li><strong>empty</strong>: In TypeScript, <code>empty()</code> no longer accepts a generic argument, as it returns <code>Observable&lt;never&gt;</code></li>
<li><strong>never</strong>: <code>never() </code>always returns the same instance</li>
<li><strong>never</strong>: TypeScript typing for <code>never()</code> is now <code>Observable&lt;never&gt;</code> and the function no longer requires a generic type.</li>
<li><strong>never</strong>: no longer exported. Use the <code>NEVER</code> constant instead.</li>
<li><strong>Symbol.observable</strong>: RxJS will no longer be polyfilling Symbol.observable. That should be done by an actual polyfill library. This is to prevent duplication of code, and also to prevent having modules with side-effects in rxjs.</li>
<li><strong>bindCallback</strong>: removes result selector, use <code>map</code> instead: <code>bindCallback(fn1, fn2)()</code> becomes <code>bindCallback(fn1)().pipe(map(fn2))</code></li>
<li><strong>Symbol.iterator</strong>: We are no longer polyfilling Symbol.iterator. That would be done by a proper polyfilling library</li>
<li><strong>Observable.if</strong>: TypeScript users using <code>Observable.if</code> will have to cast <code>Observable</code> as any to get to if. It is a better idae to just use <code>iif</code> directly via <code>import &#123; iif &#125; from 'rxjs';</code></li>
<li><strong>bindNodeCallback</strong>: resultSelector removed, use <code>map</code> instead: <code>bindNodeCallback(fn1, fn2)()</code> becomes <code>bindNodeCallback(fn1)().pipe(map(fn2))</code></li>
<li><strong>Rx.ts</strong>: importing from <code>rxjs/Rx</code> is no longer available. Upcoming backwards compat solution will allow that</li>
<li><strong>fromEvent</strong>: result selector removed, use <code>map</code> instead: <code>fromEvent(target, 'click', fn)</code> becomes <code>fromEvent(target, 'click').pipe(map(fn))</code></li>
<li><strong>last</strong>: no longer accepts <code>resultSelector</code> argument. To get this same functionality, use <code>map</code>.</li>
<li><strong>first</strong>: no longer supports <code>resultSelector</code> argument. The same functionality can be achieved by simply mapping either before or after <code>first</code> depending on your use case.</li>
<li><strong>exhaustMap</strong>: <code>resultSelector</code> no longer supported, to get this functionality use: <code>source.pipe(exhaustMap(x =&gt; of(x + x).pipe(map(y =&gt; x + y))))</code></li>
<li><strong>switchMap|switchMapTo</strong>: <code>switchMap</code> and <code>switchMapTo</code> no longer take <code>resultSelector</code> arguments, to get the same functionality use <code>switchMap</code> and <code>map</code> in combination: <code>source.pipe(switchMap(x =&gt; of(x + x).pipe(y =&gt; x + y)))</code>.</li>
<li><strong>mergeMapTo</strong>: <code>mergeMapTo</code> no longer accepts a resultSelector, to get this functionality, you’ll want to use <code>mergeMap</code> and <code>map</code> together: <code>source.pipe(mergeMap(() =&gt; inner).pipe(map(y =&gt; x + y)))</code></li>
<li><strong>fromEventPattern</strong>: no longer supports a result selector, use <code>map</code> instead: <code>fromEventPattern(fn1, fn2, fn3)</code> becomes <code>fromEventPattern(fn1, fn2).pipe(map(fn3))</code></li>
</ul>
<h1 id="重點整理"><a class="header-anchor" href="#重點整理"> </a>重點整理</h1>
<ol>
<li>
<p>Import 位置簡化</p>
<ol>
<li>
<p>creation functions 現在改由 <code>rxjs</code> import</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span>, <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>types and interfaces 現在改由 <code>rxjs</code> import</p>
</li>
</ol>
</li>
<li>
<p>語法調整</p>
<ol>
<li><code>_if</code> 修改成 <code>iif</code></li>
<li><code>_throw</code> 修改成 <code>throwError</code></li>
<li><code>asap </code> 修改成 <code>asapScheduler </code> 等</li>
</ol>
</li>
<li>
<p>擁有 <code>resultSelector</code> 的 <code>operators</code> 都被拔掉了，建議改搭配使用 <code>map</code>，例如</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">source.<span class="title function_">pipe</span>(<span class="title function_">mergeMap</span>(<span class="function">(<span class="params">x</span>)=&gt;</span> <span class="title function_">of</span>(x+x).<span class="title function_">pipe</span>(<span class="function"><span class="params">y</span>=&gt;</span> x=y)))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Pipeable operators 必須從 <code>rxjs/operators</code> 引用</p>
</li>
<li>
<p>importing from <code>rxjs/Rx</code> 無法繼續使用. 但會提供 <code>rxjs-compat</code> 套件做向下相容</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[鑑識會計]學習筆記-舞弊查核與財務件事的核心架構-01</title>
    <url>/2018/03/23/forensic-accounting-note-1/</url>
    <content><![CDATA[<p>鑑識會計學習筆記- 舞弊查核與財務件事的核心架構-01</p>
<p><strong>純學習筆記之用</strong></p>
<span id="more"></span>
<h1 id="何謂舞弊"><a class="header-anchor" href="#何謂舞弊"> </a>何謂舞弊</h1>
<ul>
<li>構成舞弊的法律要件
<ul>
<li>重大的虛假陳述</li>
<li><code>故意</code>提出虛假陳述</li>
<li>受害者對虛假陳述的<code>信賴</code></li>
<li>受害者因<code>信任</code>虛假陳述而<code>導致受害</code></li>
</ul>
</li>
<li>偷竊四項基本要件
<ul>
<li>確實拿取或取走之行為</li>
<li>係屬他人金錢或財產</li>
<li>未經所有權人同意</li>
<li>蓄意剝奪所有權人的使用權或保管權</li>
</ul>
</li>
<li>主要舞弊類別
<ul>
<li>挪用資產
<ul>
<li>現金
<ul>
<li>盜竊</li>
<li>截留(未入帳以挪用現金)</li>
<li>支出舞弊
<ul>
<li>報銷 - 空殼公司、虛假供應商、私人費用支出</li>
<li>薪資 - 幽靈員工、佣金式薪資舞弊、偽造工時與薪資率</li>
<li>費用報銷 - 浮報支出、虛構費用、重複報銷</li>
<li>支票</li>
<li>收銀機支出 - 虛構作廢/退款</li>
</ul>
</li>
</ul>
</li>
<li>存貨與其他資產
<ul>
<li>不當使用</li>
<li>盜竊</li>
</ul>
</li>
</ul>
</li>
<li>貪汙
<ul>
<li>利益衝突(未報導或未揭露)</li>
<li>賄賂</li>
<li>非法報酬</li>
<li>敲詐勒索</li>
</ul>
</li>
<li>財務報表舞弊
<ul>
<li>虛構收入(與相關資產)</li>
<li>收入與費用認列時點錯誤</li>
<li>隱匿負債</li>
<li>不實及誤導的揭露</li>
<li>不實資產評價</li>
<li>不當將費用資本化</li>
</ul>
</li>
<li>特殊舞弊(詐欺)背景
<ul>
<li>破產詐欺</li>
<li>契約與採購舞弊</li>
<li>洗錢</li>
<li>稅務舞弊</li>
<li>投資詐欺</li>
<li>贊助恐怖份子</li>
<li>消費者詐欺
<ul>
<li>竊用身分</li>
<li>支票與信用卡詐欺</li>
<li>電腦與網路詐欺</li>
</ul>
</li>
<li>離婚詐欺(包括隱匿資產)</li>
<li>智慧財產</li>
<li>企業評價舞弊</li>
</ul>
</li>
<li>顯著業界特有的舞弊(詐欺)
<ul>
<li>金融</li>
<li>保險</li>
<li>醫療</li>
<li>證券</li>
<li>公共部門</li>
</ul>
</li>
</ul>
</li>
<li><strong>舞弊</strong>與<strong>濫用</strong>的差異</li>
<li>舞弊三角
<ul>
<li>意識到機會：<strong>意識到會被察覺</strong>有抑止的效果</li>
<li>意識到壓力</li>
<li>合理化解釋：自我催眠找理由將行為合理化</li>
</ul>
</li>
<li>M.I.C.E.
<ul>
<li><strong>M</strong>oney(金錢)</li>
<li><strong>I</strong>deology(意識形態)</li>
<li><strong>C</strong>oercion(強迫)</li>
<li><strong>E</strong>go(自我)</li>
</ul>
</li>
<li>舞弊查核方法論
<ul>
<li>分析現有資料</li>
<li>建立假設</li>
<li>檢驗假設</li>
<li>修訂假設</li>
<li>提出結論</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>會計</category>
      </categories>
      <tags>
        <tag>會計</tag>
      </tags>
  </entry>
  <entry>
    <title>[鑑識會計]學習筆記-舞弊罪犯與其犯罪理由</title>
    <url>/2018/03/24/forensic-accounting-note-2/</url>
    <content><![CDATA[<p>鑑識會計學習筆記- 舞弊罪犯與其犯罪理由</p>
<p><strong>純學習筆記之用</strong></p>
<span id="more"></span>
<ul>
<li>守法的因素
<ul>
<li>害怕遭到懲罰</li>
<li>渴望獲得回饋(獎賞)</li>
<li>以符合社會標準的方式，表現出公允且合乎倫理的舉止</li>
</ul>
</li>
<li>職務舞弊與濫權：運用個人職權，蓄意誤用或挪用受雇組織之資源或資產，以求滿足個人私慾</li>
<li>侵權：違約以外的私人或民事過失或傷害，法律對此損失提供補救之道</li>
<li>疏失 - 法律要素 5 點
<ul>
<li>義務</li>
<li>違反</li>
<li>因果關係</li>
<li>近因</li>
<li>造成損害</li>
</ul>
</li>
<li>贏得損失賠償須舉證以下兩點
<ul>
<li>責任 - 對方須承擔主張損害之全部或部分之責</li>
<li>損害 - 受害者基於加害者之行動或無行動而蒙受損失</li>
</ul>
</li>
<li>道德定義的相關關鍵要件
<ul>
<li>道德涉及的問題需要經過深思熟慮的選擇，及對自己及他人造成的後果(決策問題)</li>
<li>道德考量到引導行為的規則和規範，以及違反這些規則與規範的後果</li>
<li>道德常依賴道德原則來引導是非的選擇</li>
<li>道德重視後果，後果係指決策相關的衝擊，此衝擊反映出個人與組織的根本價值</li>
</ul>
</li>
<li>舞弊防範、遏止與偵測的五步驟
<ul>
<li>了解舞弊曝顯狀況</li>
<li>將曝顯情況轉為可能徵兆</li>
<li>隨時尋找徵兆</li>
<li>制定查核與資料採礦計畫以尋找徵兆</li>
<li>尋求這些問題的邏輯結論，根據證據來做出決定</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>會計</category>
      </categories>
      <tags>
        <tag>會計</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] Blazor 基本介紹</title>
    <url>/2018/03/25/blazor-basic/</url>
    <content><![CDATA[<p>上一篇介紹了如何安裝 Blazor 範本，這一篇就來分享基本的 Blazor 的檔案及語法結構</p>
<span id="more"></span>
<h1 id="新增-Blazor-專案"><a class="header-anchor" href="#新增-Blazor-專案"> </a>新增 Blazor 專案</h1>
<ol>
<li>
<p>新增 <code>ASP.NET Core Web 應用程式</code></p>
<p><img src="https://i.imgur.com/dqNpI7J.png" alt=""></p>
</li>
<li>
<p>選擇 <code>Blazor</code> 類型專案，確定新增</p>
<p><img src="https://i.imgur.com/cabv0c3.png" alt=""></p>
</li>
<li>
<p>第一次執行</p>
<p><img src="https://i.imgur.com/GeNjlF9.png" alt=""></p>
</li>
<li>
<p>專案的檔案結構</p>
<p><img src="https://i.imgur.com/c2sAdCB.png" alt=""></p>
</li>
</ol>
<h1 id="專案檔案說明"><a class="header-anchor" href="#專案檔案說明"> </a>專案檔案說明</h1>
<h2 id="program-cs"><a class="header-anchor" href="#program-cs"> </a>program.cs</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> serviceProvider = <span class="keyword">new</span> BrowserServiceProvider(configure =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Add any custom services here</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> BrowserRenderer(serviceProvider).AddComponent&lt;App&gt;(<span class="string">&quot;root-app&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code> new BrowserRenderer(serviceProvider).AddComponent&lt;App&gt;(&quot;root-app&quot;);</code> 這裡是啟動點，用來設定要將 <code>BlazorComponent</code> 產生在 <code>index.html</code> 上的哪一個節點，預設的 element 是 <code>app</code>，這是可以依 <code>index.html</code> 的設定做改變</p>
<p><img src="https://i.imgur.com/R1btWD1.png" alt=""></p>
</li>
<li>
<p><code>AddComponent&lt;App&gt;</code> 裡的 <code>App</code> 是對應到起始 <code>BlazorComponent</code>，檔名即 component 物件名稱</p>
<p><img src="https://i.imgur.com/EQE9Kqb.png" alt=""></p>
</li>
<li>
<p><code>App2.cshtml</code> 內的檔案內容，只是一個類似 <code>&lt;router-outlet&gt;</code> 的東西，用來顯示對應路由要顯示的 <code>BlazorComponent</code>，根據該檔案的內容，之後還會做調整</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">    Configuring <span class="keyword">this</span> here <span class="keyword">is</span> temporary. Later we<span class="string">&#x27;ll move the app config</span></span><br><span class="line"><span class="string">    into Program.cs, and it won&#x27;</span>t be necessary to specify AppAssembly.</span><br><span class="line">--&gt;</span><br><span class="line">&lt;Router AppAssembly=<span class="keyword">typeof</span>(Program).Assembly /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Counter-cshtml"><a class="header-anchor" href="#Counter-cshtml"> </a>Counter.cshtml</h2>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@page <span class="string">&quot;/counter&quot;</span></span><br><span class="line">&lt;h1&gt;Counter&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;Current count: @currentCount&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button @onclick(IncrementCount)&gt;Click me&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">@functions &#123;</span><br><span class="line">    <span class="built_in">int</span> currentCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">IncrementCount</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>@page &quot;/counter&quot;</code> ，<code>@page</code> 是用來設定此頁面的路由位置</li>
<li><code>@functions&#123; ... &#125;</code> 是頁面功能程式碼撰寫的位置</li>
<li><code>@currentCount</code> 會對應寫在 <code>@functions</code> 內的 <code>property</code> 變數</li>
<li><code>@onclick</code> 是 blazor 對應原生 JavaScript onClick 的寫法，內設定要觸發的 <code>method</code></li>
</ul>
<h2 id="Pages-ViewImports-cshtml"><a class="header-anchor" href="#Pages-ViewImports-cshtml"> </a>Pages/_ViewImports.cshtml</h2>
<p>頁面的 <code>Layout</code> 會依 <code>_ViewImports.cshtml</code> 的設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@layout MainLayout</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@layout</code> 設定要使用的 Layout 頁面</li>
</ul>
<h2 id="Shared-MainLayout-cshtml"><a class="header-anchor" href="#Shared-MainLayout-cshtml"> </a>Shared/MainLayout.cshtml</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@implements ILayoutComponent</span><br><span class="line"></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&#x27;container-fluid&#x27;</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&#x27;row&#x27;</span>&gt;</span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">&#x27;col-sm-3&#x27;</span>&gt;</span><br><span class="line">            &lt;NavMenu /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">&#x27;col-sm-9&#x27;</span>&gt;</span><br><span class="line">            @Body</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">@functions &#123;</span><br><span class="line">    <span class="keyword">public</span> RenderFragment Body &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>@implements ILayoutComponent</code> 標示此檔案為實作 <code>ILayoutComponent</code>，可被用來設定 <code>@layout</code></li>
<li><code>&lt;Navmenu&gt;</code> 載入 <code>NavMenu.cshtml</code> Component</li>
<li><code>@Body</code> 是用來顯示 <code>BlazorComponent</code> 的地方</li>
</ul>
<h2 id="FetchData-cshtml"><a class="header-anchor" href="#FetchData-cshtml"> </a>FetchData.cshtml</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@page <span class="string">&quot;/fetchdata&quot;</span></span><br><span class="line">@inject HttpClient Http</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Weather forecast&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;This component demonstrates fetching data <span class="keyword">from</span> the server.&lt;/p&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@inject</code> 注入要使用的 service ，Dependency Injection 的用法</li>
</ul>
<h2 id="Pages-Index-cshtml"><a class="header-anchor" href="#Pages-Index-cshtml"> </a>Pages/Index.cshtml</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@page <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">Welcome to your <span class="keyword">new</span> app.</span><br><span class="line"></span><br><span class="line">&lt;SurveyPrompt Title=<span class="string">&quot;How is Blazor working for you?&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>&lt;SurveyPromt Title=&quot;....&quot;&gt;</code>  裡的 <code>Title</code> 是該 Component 允許從外部設定屬性欄位</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Shared/SurveyPrompt.cshtml</span></span><br><span class="line">@functions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// This is to demonstrate how a parent component can supply parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="wwwroot-Index-html"><a class="header-anchor" href="#wwwroot-Index-html"> </a>wwwroot/Index.html</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root-app</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">root-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;css/bootstrap/bootstrap-native.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;blazor-boot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;script type=&quot;blazor-boot&quot;&gt;&lt;/script&gt;</code> 會在建置時間置換成 <code>&lt;script src=&quot;_framework/blazor.js&quot; main=&quot;BlazorApp1.dll&quot; entrypoint=&quot;BlazorApp1.Program::Main&quot; references=&quot;Microsoft.AspNetCore.Blazor.dll,netstandard.dll,...&quot;&gt;&lt;/script&gt;</code></li>
</ul>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p>Blazor 的語法與結構就目前看起來並不複雜，很期待之後的發展</p>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 第一次體驗 NGXS</title>
    <url>/2018/03/30/angular-ngxs/</url>
    <content><![CDATA[<p>沒錯，又是另外一套 State management 工具，這套叫做 <code>NGXS</code> ，為什麼會想嘗試這一套呢? 主要是他的語法與 Angular 現有的寫法及運作方式幾乎是一樣的，學習門檻變得很低，而且，重點是要產生的檔案變得非常的少!!</p>
<span id="more"></span>
<h1 id="安裝-NGXS"><a class="header-anchor" href="#安裝-NGXS"> </a>安裝 NGXS</h1>
<p>安裝 <code>NGXS</code> 的方式很簡單，透過 npm 安裝 <code>@ngxs/store</code> 即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @ngxs/store</span><br></pre></td></tr></table></figure>
<p>在 <code>app.module.ts</code> 將 <code>NgxsModule</code> imports 進來</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgxsModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngxs/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, </span><br><span class="line">            <span class="title class_">NgxsModule</span>.<span class="title function_">forRoot</span>([]) <span class="comment">// 用來註冊 state 用</span></span><br><span class="line">           ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>當遇到 lazy loading modules 時，在該 module 下會使用 <code>NgxsModule.forFeature([])</code>來註冊 state；即使所有的 module 都是 lazy load 時，還是得在 root module 裡註冊 <code>NgxsModule.forRoot([])</code></li>
</ul>
<p>到這個步驟時，NGXS 已經加入到 Angular 專案裡了</p>
<h1 id="建立-State"><a class="header-anchor" href="#建立-State"> </a>建立 State</h1>
<p>NGXS 的 State  是一個單純的 class  檔案，可以透過  <code>ng g class &lt;&lt;state file name&gt;&gt;</code> 來產生，作者建議的檔案名稱是 <code>[stateName].state.ts</code> ，就此篇練習的目的，建立一個 <code>todos.state.ts</code> 檔案，Class 名稱為 <code>TodosState</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TodoItem</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> content: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">TodosStateModel</span> &#123;</span><br><span class="line">  <span class="attr">dataset</span>: <span class="title class_">TodoItem</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@State</span>&lt;<span class="title class_">TodosStateModel</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;todos&#x27;</span>,</span><br><span class="line">  <span class="attr">defaults</span>: &#123;</span><br><span class="line">    <span class="attr">dataset</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TodosState</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@State</code> decorator 用來描述 <code>state</code> 的狀態
<ul>
<li><code>@State&lt;T&gt;</code> ：定義此 state 的資料型別</li>
<li><code>name</code>：該 state 在 store 裡的名稱</li>
<li><code>defaults</code>: 資料存放位置，(預設值)</li>
</ul>
</li>
<li>用來描述 <code>@State</code> 的型別，建議在最後加上 Model，例如 <code>TodoStateModel</code></li>
</ul>
<p>完成建立 state 時，這時候在到 <code>app.module.ts</code> 內註冊到 <code>NgxsModule.forRoot([])</code> 內</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TodosState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./todos.state&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, </span><br><span class="line">            <span class="title class_">NgxsModule</span>.<span class="title function_">forRoot</span>([<span class="title class_">TodosState</span>]) <span class="comment">// 註冊 state</span></span><br><span class="line">           ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="建立-Action"><a class="header-anchor" href="#建立-Action"> </a>建立 Action</h1>
<p>在 NGXS 的架構下，要設定可以被執行的 action 方法時，是不需要額外新增檔案的，直接寫在 state class 下即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ADDTODO</span> &#123;</span><br><span class="line">  <span class="attr">payload</span>: <span class="title class_">TodoItem</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">payload</span> = <span class="keyword">new</span> <span class="title class_">TodoItem</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@State</span>&lt;<span class="title class_">TodosStateModel</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;todos&#x27;</span>,</span><br><span class="line">  <span class="attr">defaults</span>: &#123;</span><br><span class="line">    <span class="attr">dataset</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TodosState</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    	<span class="comment">// 可以透過 constrcutor 將 service 注入進來</span></span><br><span class="line">  	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Action</span>(<span class="variable constant_">ADDTODO</span>)</span><br><span class="line"> 	<span class="title function_">addTodo</span>(<span class="params">&#123; getState, setState &#125;: StateContext&lt;TodosStateModel&gt;, &#123; payload &#125;: ADDTODO</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> state = <span class="title function_">getState</span>();</span><br><span class="line">        <span class="title function_">setState</span>(&#123;</span><br><span class="line">          ...state,</span><br><span class="line">          <span class="attr">dataset</span>: [...state.<span class="property">dataset</span>, payload]</span><br><span class="line">        &#125;);</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>@Action</code> 內傳的 Class ，是用來定義此 Action 的名稱，在 store dispatch 時，就是根據 class 來決定所要執行的動作</p>
</li>
<li>
<p><code>addTodo(StateContenxt&lt;T&gt;, ActionClass? )</code></p>
<ul>
<li>第一個參數是取得可操作目前 state 的 context 物件，內有的方法有
<ul>
<li><code>getState():T</code> 取得目前 state 的值</li>
<li><code>setState(val:T):any</code> 重設目前 state 的值(重新建立一個新的state)</li>
<li><code>patchState(valu: Partial&lt;T&gt;)</code> 更新目前 state 的值 (不會產生一個全新 state)</li>
<li><code>dispatch(actions)</code> 觸發 action，一個或是多個(用陣列包)</li>
</ul>
</li>
<li>第二個參數是取得 Action 對應的 Class 實體，NGXS 是透過這樣子的模式傳遞資料</li>
</ul>
</li>
<li>
<p>由於 <code>State</code> 本身是活在 Angular 的 DI 機制下，所以也可以在 <code>constructor</code> 的注入其他 service，所以當要呼叫 API 時，也可以直接寫在 action function 就可以了，不需要額外在建立檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> service: ApiService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Action</span>(<span class="variable constant_">ADDTODO</span>)</span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="params">&#123; getState, setState &#125;: StateContext&lt;TodosStateModel&gt;, &#123; payload &#125;: ADDTODO</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">service</span>.<span class="title function_">someApiCall</span>().<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">tap</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> state = <span class="title function_">getState</span>();</span><br><span class="line">        <span class="title function_">setState</span>(&#123;</span><br><span class="line">          ...state,</span><br><span class="line">          <span class="attr">dataset</span>: [...state.<span class="property">dataset</span>, payload]</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用-Store"><a class="header-anchor" href="#使用-Store"> </a>使用 Store</h1>
<p>當 State class 寫完後，接下來就可以在各個地方透過 store 的方式做執行 action 及取得資料的行為了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Store</span>, <span class="title class_">Select</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ngxs/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TodoItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./todos.state&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;app&#x27;</span>;</span><br><span class="line">  <span class="meta">@Select</span>(<span class="string">&#x27;todos.dataset&#x27;</span>) <span class="attr">todos</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">TodoItem</span>[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> store: Store</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>@Select</code> 該 decorator 允許我們透過 path 的設定取到特定的 state 資料，而取得的資料型態為 Observable</p>
<ul>
<li>
<p>如果不想要這樣子寫，可以透過 store.select 的方式做設定，結果是一樣的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;  </span><br><span class="line">  <span class="attr">todos</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">TodoItem</span>[]&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> store: Store</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todos</span> = store.<span class="title function_">select</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">todos</span>.<span class="property">dataset</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>執行 action 的動作，一樣是透過 <code>store.dispatch</code> 來執行，可以傳入一個或是多個(用陣列傳) actions，而 <code>dispatch</code> 是一個 observable，並會回傳 action 後的 state 狀況，這表示我們可以用 RxJS 的方式最很多變化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of todos | async&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.content &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> #<span class="attr">f</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;addTodo(f)&quot;</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>app.component.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addTodo</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">store</span>.<span class="title function_">dispatch</span>(<span class="keyword">new</span> <span class="title function_">ADDTODO</span>(input.<span class="property">value</span>)).<span class="title function_">subscribe</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(state);</span><br><span class="line">    input.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/mbH2lYr.png" alt=""></p>
</li>
</ul>
</li>
</ul>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p>NGXS 是以 Angular 的角度重新思考 Redux 風格的 state management，個人是覺得這樣的模式大幅降低學習及編寫的門檻，而 NGXS 內還有更多的功能都有在電子書上說到，有興趣的人真的可以動手玩看看，寫起來跟寫  Angular service 真的沒什麼差異。</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://ngxs.gitbooks.io/ngxs/">NGXS GitBook</a></li>
<li><a href="https://stackblitz.com/edit/ngxs-simple-demo?file=app%2Fapp.component.ts">範例程式</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Capacitor</title>
    <url>/2018/04/02/angular-ionic-capacitor/</url>
    <content><![CDATA[<p>什麼是 Capacitor ? Capacitor 是 Ionic 團隊所開發出來的新開發框架，再次證明他們的野心</p>
<blockquote>
<p>Capacitor is a cross-platform app runtime that makes it easy to build web apps that run natively on iOS, Android, Electron, <em>and</em> the web. We call these apps 「Native Progressive Web Apps」 and they represent the next evolution beyond Hybrid apps.</p>
</blockquote>
<p>但是否如他們所說的那麼強大呢? 一定要動手玩看看才知道</p>
<span id="more"></span>
<h1 id="測試步驟"><a class="header-anchor" href="#測試步驟"> </a>測試步驟</h1>
<ol>
<li>
<p>透過 Angular CLI 建立一個標準的 Angular 專案</p>
<p><code> ng new appCapacitor</code></p>
</li>
<li>
<p>在 Angular 專案資料夾下，安裝 <code>@capacitor/core</code> 和 <code>@capacitor/cli</code></p>
<p><code>npm install --save @capacitor/core @capacitor/cli</code></p>
</li>
<li>
<p>執行 <code>Capacitor</code> 初始化，這動作會建立一個 json 的設定檔</p>
<p><code>npx cap init</code></p>
<ol>
<li>如果不知道 <code>npx</code> 是什麼的，請參閱這篇<a href="https://robin-front.github.io/2017/07/14/introducing-npx-an-npm-package-runner/">文章</a></li>
<li>輸入一些基本資料後，即完成設定動作，完成後的畫面如下</li>
</ol>
<p><img src="https://i.imgur.com/2apRkeu.png" alt=""></p>
</li>
<li>
<p>配合 Angular CLI 的建置輸出路徑修改 <code>capacitor.config.json</code> 檔案</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cky.demo.app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;App&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bundledWebRuntime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;webDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>開始第一次 <code>build —prod</code></p>
</li>
<li>
<p>因為第一次想用 PWA 的方式呈現，可透過 <code>npx cap serve</code> 來啟動 web server</p>
<ol>
<li>如果想要跑成 iOS 的格式，指令為 <code>npx cap open ios</code> (需要有 xcode 才可以跑)</li>
<li>如果想要跑成 Android 的格式，指令為 <code>npx cap open android</code></li>
</ol>
</li>
<li>
<p>跑起來的畫面就跟預設的畫面是一樣的，只是網址變成 <code>http://localhost:3333</code></p>
<p><img src="https://i.imgur.com/ExGjmJY.png" alt=""></p>
</li>
</ol>
<h1 id="使用套件-Plugin"><a class="header-anchor" href="#使用套件-Plugin"> </a>使用套件(Plugin)</h1>
<p>來試試看現成的 Geolocation API (內建的) 能不能正常使用，在程式碼上會不會很難處理</p>
<p>因為已經有裝 <code>@capacitor/core</code>，所以可以透過 <code>import &#123; Plugin &#125; from '@capacitor/core'</code> 來取得現有內建的 <a href="https://capacitor.ionicframework.com/docs/apis/">API</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Plugins</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@capacitor/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/observable/bindCallback&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Geolocation</span>, <span class="title class_">Modals</span>, <span class="title class_">App</span> &#125; = <span class="title class_">Plugins</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">	&lt;button (click)=&quot;currentLocation()&quot;&gt;顯示目前位置&lt;/button&gt;</span></span><br><span class="line"><span class="string">	`</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="attr">coords</span>: <span class="title class_">Coordinates</span>;</span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="title class_">App</span>.<span class="title function_">addListener</span>(<span class="string">&#x27;backButton&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Plugins</span>.<span class="property">App</span>.<span class="title function_">exitApp</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">      </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">watchPosition</span>().<span class="title function_">subscribe</span>(<span class="function"><span class="params">coords</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">coords</span> = coords;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">watchPosition</span>(): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> watch = <span class="title function_">bindCallback</span>(<span class="title class_">Geolocation</span>.<span class="property">watchPosition</span>)(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> watch.<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">pos</span> =&gt;</span> pos.<span class="property">coords</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">currentLocation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="keyword">await</span> <span class="title class_">Geolocation</span>.<span class="title function_">getCurrentPosition</span>();</span><br><span class="line">    <span class="title class_">Modals</span>.<span class="title function_">alert</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;目前位置&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">`lat: <span class="subst">$&#123;position.coords.latitude&#125;</span>, long: <span class="subst">$&#123;position.coords.longitude&#125;</span>`</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>利用 <code>bindCallback</code> 的方法將 api 轉換成 <code>Observable</code> 型別</li>
<li>Chrome 在版本 50 以後就不允許 http 跑 Geolocation 了，所以如果要測試這段，這部分可能就要自己摸索了</li>
</ul>
<h1 id="部屬到-Android-設備上"><a class="header-anchor" href="#部屬到-Android-設備上"> </a>部屬到 Android 設備上</h1>
<p>假設 Android 開發環境已經準備好了 ( 使用 Android Studio )，Capacitor 只需要透過幾個指令，就可以將 Android 部屬目標加上去，以下是相關的指令及對應的功能</p>
<ol>
<li>
<p><code>npx cap add android</code> 將 <code>Android platform</code>  加入到目前的專案下</p>
<p><img src="https://i.imgur.com/e8QpqT9.png" alt=""></p>
</li>
<li>
<p><code>npx cap sync</code> 同步 <code>dependency</code> 和 <code>web</code> 內容</p>
</li>
<li>
<p><code>npx cap copy</code> 複製 <code>web</code> 內容</p>
</li>
<li>
<p><code>npx cap open android</code> 開啟 <code>Android Studio</code> 並執行建置動作</p>
</li>
</ol>
<ul>
<li>
<p>如果 <code>Android Studio</code> 不是安裝在預設路徑下時，可以在 <code>capacitor.config.json</code> 內設定實際的安裝位置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> ...</span><br><span class="line">  <span class="attr">&quot;windowsAndroidStudioPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Program Files\\Android\\Android Studio\\bin\\studio64.exe&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="實際測試-部屬到-Android"><a class="header-anchor" href="#實際測試-部屬到-Android"> </a>實際測試/部屬到 Android</h2>
<p>因為我們需要將網頁建置後的結果複製到 Android 的專案下，所以在執行 <code>npx cap sync</code> 之前，記得要做 <code>ng build --prod</code> 的動作</p>
<p>基本流程如下</p>
<ol>
<li><code>ng build --prod</code>  建置 web 專案</li>
<li><code>npca cap sync</code> 同步 web 專案及 dependency 元建至 Android 專案下</li>
<li><code>npx cap open android</code> 開啟 Android Studio 進行後續的測試部屬，如果 Android Studio 已經開啟時，就不需要執行這行指令</li>
</ol>
<h2 id="執行結果"><a class="header-anchor" href="#執行結果"> </a>執行結果</h2>
<div class="video-container"><iframe src="https://www.youtube.com/embed/WsJ90xN28ww" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p>目前看起來 Ionic 的新架構 <code>Capacitor</code> 的確可以擺脫以前的 ionic 的開發方式，讓使用者用自己熟悉的 JavaScript framework 做開發，而不用侷限使用  Angular，個人還蠻期待後續的發展的</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://capacitor.ionicframework.com/docs/"> Capacitor Documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Tree-shakable providers</title>
    <url>/2018/04/10/angular-new-injectable-feature/</url>
    <content><![CDATA[<p>Angular 6 將 tree-shaking 觸手擴大到 provider 了，提供了新的設定方法讓 service 也可以被 tree-shaking 掉了，這對於最後產生出來的 bundle 檔案大小，會有很大的幫助。</p>
<span id="more"></span>
<h1 id="緣由"><a class="header-anchor" href="#緣由"> </a>緣由</h1>
<p>根據官方文件的說法，註冊在 NgModule 下的 service 都無法被 tree-shaking 掉，主要是 Angular  無法判斷該 service 是否有在任何地方被使用著，任何地方都可能透過 <code>injector.get</code> 的方式取得 service，也是因為這個原因 Angular 必須把 service 包到 NgModule 裡。</p>
<p>目前的寫法 ( Angular 5.x ~ 2 版 )，就是 non-tree-shakable service</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">  <span class="title function_">doSomething</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">Service</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ServiceModule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>為了解決這個問題， service 本身必須包含如何建構實體的相關資訊，這樣才可以從 <code>moduleFactory</code> 脫離，也才讓 <code>ngc</code> 或是相關工具決定是否要包含 service 的程式碼</p>
<h1 id="建立-tree-shakable-providers"><a class="header-anchor" href="#建立-tree-shakable-providers"> </a>建立 tree-shakable providers</h1>
<p>Angular 團隊為了這件事情，他們修改了 <code>@Injectable</code> 的介面，多了兩個項目可以設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123; </span><br><span class="line">  providedIn?: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt; | <span class="string">&#x27;root&#x27;</span> | <span class="literal">null</span></span><br><span class="line">  <span class="attr">factory</span>: <span class="function">() =&gt;</span> <span class="built_in">any</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Singleton-Service-設定方式"><a class="header-anchor" href="#Singleton-Service-設定方式"> </a><code>Singleton Service</code> 設定方式</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span> </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> dep: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>當 <code>providedIn</code> 設定為 <code>root</code> 時，這表示該 service 會被註冊為 <code>singleton service</code></li>
</ul>
<h2 id="註冊在-root-以外的地方"><a class="header-anchor" href="#註冊在-root-以外的地方"> </a>註冊在 root 以外的地方</h2>
<p>另外一種情境是 service 是註冊在某一個 <code>NgModules</code> 下且不一定要是 <code>singleton</code> ，這時候的設定方式是</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="title class_">HeroModule</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> dep: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣子設定後，在每一次有引用到 <code>HeroModule</code> 時，都會建立一個 Service 實體</p>
<h2 id="Factory-模式"><a class="header-anchor" href="#Factory-模式"> </a>Factory 模式</h2>
<p><code>@Injectable</code> 另外一個 <code>useFactory</code>  (這裡我還不確定最後的寫法是怎樣，原始碼內有點混亂，但基本概念是一樣的)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">useFactory</span>: <span class="function">(<span class="params">logger: Logger, userService: UserService</span>) =&gt;</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">HeroService</span>(logger, userService.<span class="property">user</span>.<span class="property">isAuthorized</span>),</span><br><span class="line">  <span class="attr">deps</span>: [<span class="title class_">Logger</span>, <span class="title class_">UserService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HeroService</span> &#123;</span><br><span class="line">  <span class="comment">// #docregion internals</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> logger: Logger,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> isAuthorized: <span class="built_in">boolean</span></span>) &#123; &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>根據目前 Angular CLI 走的方向，這種設定方式將會是預設的模式，除非有其他 DI 的特需需求，不然 NgModules 的 providers 應該會是空空的。某種程度上是好事，只是要花點時間習慣</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 如何從 RxJS 5.x 升級至 RxJS 6?</title>
    <url>/2018/04/21/angular-update-rxjs-to-6/</url>
    <content><![CDATA[<p>RxJS 6 提供了更便利的 import 方式，而且套件檔案變小，也可以被 tree-shaking. 但是要如何快速地將 RxJS 5.x 版升級到 RxJS 6 版 ? 以下是升級步驟</p>
<span id="more"></span>
<h1 id="方法一"><a class="header-anchor" href="#方法一"> </a>方法一</h1>
<ol>
<li>
<p>升級 RxJS 至 5.5.1 (最新版)</p>
</li>
<li>
<p>更新至 RxJS 6</p>
<ol>
<li>RxJS 6
<ol>
<li><code>npm install rxjs</code></li>
<li><code>npm install rxjs-compat </code></li>
</ol>
</li>
<li>使用 Angular CLI 6 1
<ol>
<li><code>ng update rxjs</code></li>
</ol>
</li>
</ol>
</li>
<li>
<p><code>npm install rxjs-tslint</code></p>
</li>
<li>
<p>建立 <code>migrate.tslint.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rulesDirectory&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules/rxjs-tslint&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;update-rxjs-imports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;migrate-to-pipeable-operators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;collapse-rxjs-imports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>執行 tslint-fix (可能需要多跑幾次)</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./node_modules/.bin/tslint -c migrate.tslint.json --project src/tsconfig.app.json --fix`</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修正 <code>tslint.json</code>，將 <code>rxjs</code> 從 <code>&quot;import-blacklist&quot;</code> 中移除</p>
</li>
<li>
<p>建置整個專案確定升級成功</p>
</li>
<li>
<p>完成整個升級 RxJS</p>
</li>
</ol>
<h1 id="方法二-快速版"><a class="header-anchor" href="#方法二-快速版"> </a>方法二 (快速版)</h1>
<ol>
<li>
<p>全域安裝 <code>rxjs-tslint</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g rxjs-tslint</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>升級 RxJS 至 5.5.1 (最新版)</p>
</li>
<li>
<p>更新至 RxJS 6</p>
<ol>
<li>RxJS 6
<ol>
<li><code>npm install rxjs</code></li>
<li><code>npm install rxjs-compat </code></li>
</ol>
</li>
<li>使用 Angular CLI 6 1
<ol>
<li><code>ng update rxjs</code></li>
</ol>
</li>
</ol>
</li>
<li>
<p>執行下列指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rxjs-5-to-6-migrate -p tsconfig.json</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建置整個專案確定升級成功</p>
</li>
<li>
<p>完成整個升級 RxJS</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 與 Firebase 共舞</title>
    <url>/2018/04/30/angular-firebase/</url>
    <content><![CDATA[<p>Firebase 存在於這世上已經有幾年的時間了，後來有併入到 Google 的旗下。而這一年來 Firebase 的功能與服務，不論是威力或是廣度都遠比剛出道時，來的強大許多。</p>
<p>這一次透過寫一個 side project 來重新探索 Firebase 的威力</p>
<span id="more"></span>
<h1 id="環境準備"><a class="header-anchor" href="#環境準備"> </a>環境準備</h1>
<p>※ 這裡預先假設你已經有一個 Angular 的專案，如果沒有的話，可以透過 Angular CLI 產生</p>
<p>※ 於 Firebase 的後臺管理建立一個新的專案</p>
<p>Angular 有一個套件 <code>Angularfire2</code> ，將 Firebase 會用到的功能包起來，能讓我們簡單的使用. 安裝使用方式如下</p>
<ol>
<li>
<p>安裝 <a href="https://github.com/angular/angularfire2">Angularfire2</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install firebase angularfire2 --save</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>取得 Firebase 專案的設定檔</p>
<p><img src="https://i.imgur.com/wVEtABl.png" alt=""></p>
<p><img src="https://i.imgur.com/7QzHpJc.png" alt=""></p>
<p><img src="https://i.imgur.com/X32u83T.png" alt=""></p>
<p>複製紅色框起來的設定檔的部分</p>
</li>
<li>
<p>將 <code>AngularFireModule</code> 加到 <code>app.module.ts</code> 裡</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">authDomain</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">databaseURL</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">projectId</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">storageBucket</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">messagingSenderId</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,    </span><br><span class="line">    <span class="title class_">AngularFireModule</span>.<span class="title function_">initializeApp</span>(config),    </span><br><span class="line">  ],  </span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>也可以將 <code>config</code> 的部分放到 <code>environement</code> 檔案內做管理</li>
</ul>
</li>
<li>
<p>完成基本設定</p>
</li>
</ol>
<h1 id="Firebase-常用功能"><a class="header-anchor" href="#Firebase-常用功能"> </a>Firebase 常用功能</h1>
<p>Firebase 除了提供 Realtime 資料庫外，也多了 <code>Authentication</code> 、<code>Cloud Firestore</code>、<code>Hosting</code>、<code>Stroage</code> 與 <code>Functions</code> 的服務，這裡就先介紹  <code>Authentication</code> 、<code>Cloud Firestore</code>、<code>Hosting</code> 與 <code>Functions</code></p>
<p>在開始之前，要先安裝 <a href="https://github.com/firebase/firebase-tools">firebase-tools</a>，這工具可以協助我們開發及部屬 Firebase 的功能</p>
<h2 id="安裝-Firebase-Tools"><a class="header-anchor" href="#安裝-Firebase-Tools"> </a>安裝 Firebase Tools</h2>
<ol>
<li>
<p>安裝 Firebase-tools (如果之前有裝過，這個步驟可以跳過)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g firebase-tools</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>到 Angular 專案下，執行 <code>firebase init</code> 進行第一次環境初始化設定，跟著畫面上的步驟依序執行，完成後就會產生一個 <code>.firebase.json</code> 與 <code>.firebaserc</code> 的檔案，分別記載相關的環境參數供後續的部屬使用</p>
</li>
</ol>
<h2 id="Authentication"><a class="header-anchor" href="#Authentication"> </a>Authentication</h2>
<p>使用者登入授權是一件很麻煩的事情，尤其是要使用各種方式登入，例如使用 Google、GitHub、Facebook 等帳號登入，光是串聯這一些就會有想放棄的念頭，好加在 Firebase 的 authentication 幫我們處理這一塊的事情，我們只需要將環境參數設定完，就可以直接使用</p>
<p><img src="https://i.imgur.com/e1rwBHb.png" alt=""></p>
<p>於 Authentication 的區塊有四個選項</p>
<ol>
<li>
<p>使用者：目前有登入註冊到 Firebase 專案下的使用者有哪些</p>
</li>
<li>
<p>登入方式：設定要連接的授權服務</p>
<p><img src="https://i.imgur.com/eyCv6Xs.png" alt=""></p>
<ul>
<li>設定要使用的登入授權方式</li>
</ul>
<p><img src="https://i.imgur.com/om58TH0.png" alt=""></p>
<ul>
<li>紀錄允許使用 Authentication 的網域名稱</li>
</ul>
</li>
<li>
<p>範本：寄信通知的內容範本</p>
<p><img src="https://i.imgur.com/LBXp8Nx.png" alt=""></p>
</li>
<li>
<p>用量：統計<code>電話驗證實例</code> 的使用量</p>
<p><img src="https://i.imgur.com/JGSzPa3.png" alt=""></p>
</li>
</ol>
<p>所以後台的畫面就這些，而要如何開啟個服務的登入授權呢，基本上裡面的設定步驟都寫得很詳細，跟著做就不會錯</p>
<p>回到 Angular 程式內，我們要怎麼寫才能使用這些服務呢? 基本寫法如下</p>
<ol>
<li>
<p>注入 <code>AngularFireAuthModule</code> 到 <code>AppModule</code> 內</p>
</li>
<li>
<p>建立一個 service 或是直接在 component 寫都可以</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AngularFireAuth</span>, <span class="title class_">AngularFireAuthProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angularfire2/auth&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> firebase <span class="keyword">from</span> <span class="string">&#x27;firebase/app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@firebase/auth-types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">  authState = <span class="variable language_">this</span>.<span class="property">afAuth</span>.<span class="property">authState</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> afAuth: AngularFireAuth, <span class="keyword">private</span> router: Router</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用匿名登入</span></span><br><span class="line">  <span class="title function_">signInAnonymously</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">afAuth</span>.<span class="property">auth</span>.<span class="title function_">signInAnonymously</span>()</span><br><span class="line">        .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="title function_">redirectToPopup</span>());</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 使用 Google 登入</span></span><br><span class="line">  <span class="title function_">signInWithGoogle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">afAuth</span>.<span class="property">auth</span>.<span class="title function_">signInWithPopup</span>(<span class="keyword">new</span> firebase.<span class="property">auth</span>.<span class="title class_">GoogleAuthProvider</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="title function_">redirectToPopup</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 GitHub 登入</span></span><br><span class="line">  <span class="title function_">signInWithGithub</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">afAuth</span>.<span class="property">auth</span>.<span class="title function_">signInWithPopup</span>(<span class="keyword">new</span> firebase.<span class="property">auth</span>.<span class="title class_">GithubAuthProvider</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="variable language_">this</span>.<span class="title function_">redirectToPopup</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 登出</span></span><br><span class="line">  <span class="title function_">signOut</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">afAuth</span>.<span class="property">auth</span>.<span class="title function_">signOut</span>();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">redirectToPopup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;/popup&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>基本上各服務商的登入寫法都差不多，詳細的設定可以參考<a href="https://firebase.google.com/docs/reference/js/firebase.auth.Auth">這裡</a></li>
</ul>
</li>
<li>
<p>那要怎麼判斷使用者有沒有登入呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">authService</span>.<span class="property">authState</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// user 登入資訊物件      </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果使用者有登入的話，<code>user</code> 就會包含相關的登入資訊，如果沒有就會收到 <code>null</code> 值</p>
</li>
</ol>
<p>以上就是基本的 Authentication 的用法</p>
<h2 id="Database"><a class="header-anchor" href="#Database"> </a>Database</h2>
<p>Firebase 有兩種資料庫類型，但皆屬於 NoSQL 類型的資料庫，可是兩者的應用情境是不相同的</p>
<ol>
<li>Realtime Database：為所有連結的用戶端即時存儲及同步處理資料</li>
<li>Cloud Firestore：新一代即時資料庫擁有更強大的查詢撼動調整資源配置功能</li>
</ol>
<p>兩者的比較表可參考<a href="https://firebase.google.com/docs/firestore/rtdb-vs-firestore?authuser=0">說明文件</a></p>
<p>這裡只會介紹 <code>Firestore</code> 資料庫</p>
<h3 id="Firestore"><a class="header-anchor" href="#Firestore"> </a>Firestore</h3>
<p>Firestore 主要分為兩種類型的資料，<code>document</code> 與 <code>collection</code>，顧名思義 <code>document</code> 就是單一筆紀錄，而 <code>collection</code> 是包含許多 <code>documents</code></p>
<p><code>collection</code> 對於每一個 <code>document</code> 都會有一個 id 的鍵值，用來讀取之用，這一個 ID 可以是自己建立，或是由 firebase 產生給你，須為唯一值</p>
<p><code>document</code> 除了 <code>field</code> 外，裡面還可以建立 <code>collection</code> ，每一個 document 的檔案大小是有限制的，請參閱<a href="https://firebase.google.com/docs/firestore/quotas#collections_documents_and_fields">說明文件</a></p>
<p>欄位型別有這些</p>
<p><img src="https://i.imgur.com/ekzCNiv.png" alt=""></p>
<p>資料預設的排序順序為</p>
<ol>
<li>Null values</li>
<li>Boolean values</li>
<li>Integer and floating-point values, sorted in numerical order</li>
<li>Date values</li>
<li>Text string values</li>
<li>Byte values</li>
<li>Cloud Firestore references</li>
<li>Geographical point values</li>
<li>Array values</li>
<li>Map values</li>
</ol>
<p>關於資料庫的設計規劃方式，可能要留在以後的文章做討論了</p>
<h3 id="Angular-程式"><a class="header-anchor" href="#Angular-程式"> </a>Angular 程式</h3>
<p>Angular 內要如何操作 collection 和 document 呢? 首先要先 import <code>AngularFirestoreModule</code> 到 <code>AppModule</code> 裡</p>
<h4 id="基本操作"><a class="header-anchor" href="#基本操作"> </a>基本操作</h4>
<ol>
<li>Collection</li>
</ol>
<ul>
<li>基本撈資料的方式</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AngularFirestore</span>, <span class="title class_">AngularFirestoreCollection</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angularfire2/firestore&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Item</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li *ngFor=&quot;let item of items | async&quot;&gt;</span></span><br><span class="line"><span class="string">        &#123;&#123; item.name &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">itemsCollection</span>: <span class="title class_">AngularFirestoreCollection</span>&lt;<span class="title class_">Item</span>&gt;;</span><br><span class="line">  <span class="attr">items</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Item</span>[]&gt;;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> afs: AngularFirestore</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemsCollection</span> = afs.<span class="property">collection</span>&lt;<span class="title class_">Item</span>&gt;(<span class="string">&#x27;items&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = <span class="variable language_">this</span>.<span class="property">itemsCollection</span>.<span class="title function_">valueChanges</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addItem</span>(<span class="params">item: Item</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemsCollection</span>.<span class="title function_">add</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>新增 document 至  collection 中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addItem</span>(<span class="params">item: Item</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">itemsCollection</span>.<span class="title function_">add</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果要更新 document 裡面的某一筆紀錄時，則需要針對 document 做操作，這部分會在下面做說明</li>
</ul>
</li>
</ul>
<ol start="2">
<li>Document 的操作</li>
</ol>
<ul>
<li>
<p>讀取特定的 document</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; (item | async)?.name &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">itemDoc</span>: <span class="title class_">AngularFirestoreDocument</span>&lt;<span class="title class_">Item</span>&gt;;</span><br><span class="line">  <span class="attr">item</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">Item</span>&gt;;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> afs: AngularFirestore</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemDoc</span> = afs.<span class="property">doc</span>&lt;<span class="title class_">Item</span>&gt;(<span class="string">&#x27;items/1&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span> = <span class="variable language_">this</span>.<span class="property">itemDoc</span>.<span class="title function_">valueChanges</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">create</span>(<span class="params">item: Item</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">itemDoc</span> = afs.<span class="property">doc</span>&lt;<span class="title class_">Item</span>&gt;(<span class="string">&#x27;items/1&#x27;</span>).<span class="title function_">set</span>(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="params">item: Item</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemDoc</span>.<span class="title function_">update</span>(item);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>刪除</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">delete</span>(<span class="params">item: Item</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">itemDoc</span>.<span class="title function_">delete</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增或修改</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createOrUpdate</span>(<span class="params">item: Item</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">itemDoc</span> = afs.<span class="property">doc</span>&lt;<span class="title class_">Item</span>&gt;(<span class="string">&#x27;items/1&#x27;</span>).<span class="title function_">set</span>(item,&#123; <span class="attr">merge</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>valueChanges</code> V.S. <code>snapshotChanges</code></p>
<p>一般正常使用時，使用 <code>valueChanges</code> 已經足夠了，但如果我們需要獲取到更多資訊，例如 document 的 ID 時，這時候就得透過 <code>snapshotChanges</code> 才可以取得，以下示範如何取得 document ID</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AngularFirestore</span>, <span class="title class_">AngularFirestoreCollection</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;angularfire2/firestore&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;rxjs/add/operator/map&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Shirt</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">price</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ShirtId</span> <span class="keyword">extends</span> <span class="title class_">Shirt</span> &#123; <span class="attr">id</span>: <span class="built_in">string</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li *ngFor=&quot;let shirt of shirts | async&quot;&gt;</span></span><br><span class="line"><span class="string">        &#123;&#123; shirt.name &#125;&#125; is &#123;&#123; shirt.price &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">shirtCollection</span>: <span class="title class_">AngularFirestoreCollection</span>&lt;<span class="title class_">Shirt</span>&gt;;</span><br><span class="line">  <span class="attr">shirts</span>: <span class="title class_">Observable</span>&lt;<span class="title class_">ShirtId</span>[]&gt;;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> afs: AngularFirestore</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">shirtCollection</span> = afs.<span class="property">collection</span>&lt;<span class="title class_">Shirt</span>&gt;(<span class="string">&#x27;shirts&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">shirts</span> = <span class="variable language_">this</span>.<span class="property">shirtCollection</span>.<span class="title function_">snapshotChanges</span>()</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function">(<span class="params">actions:DocumentSnapshot[]</span>) =&gt;</span> &#123;</span><br><span class="line">      		<span class="keyword">return</span> actions.<span class="title function_">map</span>(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> data = a.<span class="property">payload</span>.<span class="property">doc</span>.<span class="title function_">data</span>() <span class="keyword">as</span> <span class="title class_">Shirt</span>;</span><br><span class="line">                <span class="keyword">const</span> id = a.<span class="property">payload</span>.<span class="property">doc</span>.<span class="property">id</span>;</span><br><span class="line">                <span class="keyword">return</span> &#123; id, ...data &#125;;</span><br><span class="line">              &#125;);        </span><br><span class="line">    		&#125;)</span><br><span class="line">       );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回傳型別介面</p>
<ul>
<li>
<p>valueChanges：回傳所定義的 document 型別</p>
</li>
<li>
<p>snapshotChanges</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">DocumentSnapshot</span> &#123;</span><br><span class="line">  <span class="attr">exists</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">ref</span>: <span class="title class_">DocumentReference</span>;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">metadata</span>: <span class="title class_">SnapshotMetadata</span>;</span><br><span class="line">  <span class="title function_">data</span>(): <span class="title class_">DocumentData</span>;</span><br><span class="line">  <span class="title function_">get</span>(<span class="attr">fieldPath</span>: <span class="built_in">string</span>): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>stateChanges、auditTrail</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">DocumentChangeAction</span> &#123;</span><br><span class="line">  <span class="comment">//&#x27;added&#x27; | &#x27;modified&#x27; | &#x27;removed&#x27;;</span></span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">DocumentChangeType</span>;</span><br><span class="line">  <span class="attr">payload</span>: <span class="title class_">DocumentChange</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DocumentChange</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">DocumentChangeType</span>;</span><br><span class="line">  <span class="attr">doc</span>: <span class="title class_">DocumentSnapshot</span>;</span><br><span class="line">  <span class="attr">oldIndex</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">newIndex</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>更多的資訊可參閱此<a href="https://github.com/angular/angularfire2/blob/master/docs/firestore/collections.md">文件</a></p>
<h4 id="進階查詢"><a class="header-anchor" href="#進階查詢"> </a>進階查詢</h4>
<p>在查詢資料時，當然可以使用 Firebase 所提供的查詢方式，配合使用。當然操作並不能像 SQL 一樣的有彈性，所以在規劃如何存放資料時，同時也要思考要如才能查詢到自己想要的資料</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">afs.<span class="title function_">collection</span>(<span class="string">&#x27;items&#x27;</span>, <span class="function"><span class="params">ref</span> =&gt;</span> ref.<span class="title function_">where</span>(<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;==&#x27;</span>, <span class="string">&#x27;large&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>查詢的條件就放在 collection 的第二個參數的地方。</p>
<p>如果要組合多種的查詢條件時，可以這樣子寫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">afs.<span class="title function_">collection</span>(<span class="string">&#x27;items&#x27;</span>, <span class="function"><span class="params">ref</span> =&gt;</span> ref.<span class="title function_">where</span>(<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;==&#x27;</span>, <span class="string">&#x27;large&#x27;</span>)</span><br><span class="line">              					 .<span class="title function_">where</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;==&#x27;</span>, <span class="string">&#x27;red&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>但還是有很多限制，詳細的說明，可參閱<a href="https://firebase.google.com/docs/firestore/query-data/queries">官網文件</a>，務必要詳讀，官網文件內提出很多不能使用得查詢組合</p>
<p>以下是可使用的查詢方法</p>
<table>
<thead>
<tr>
<th>method</th>
<th>purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>where</code></td>
<td>Create a new query. <em>Can be chained to form complex queries.</em></td>
</tr>
<tr>
<td><code>orderBy</code></td>
<td>Sort by the specified field, in descending or ascending order.</td>
</tr>
<tr>
<td><code>limit</code></td>
<td>Sets the maximum number of items to return.</td>
</tr>
<tr>
<td><code>startAt</code></td>
<td>Results start at the provided document (inclusive).</td>
</tr>
<tr>
<td><code>startAfter</code></td>
<td>Results start after the provided document (exclusive).</td>
</tr>
<tr>
<td><code>endAt</code></td>
<td>Results end at the provided document (inclusive).</td>
</tr>
<tr>
<td><code>endBefore</code></td>
<td>Results end before the provided document (exclusive).</td>
</tr>
</tbody>
</table>
<h2 id="Hosting"><a class="header-anchor" href="#Hosting"> </a>Hosting</h2>
<p>透過 firebase tools 建立專案環境時，就會填入一些相關的資訊，例如，要上傳的網站檔案的資料夾位置，是否為 SPA 網站等資訊，當這些都設定完成後，可以透過一行指令即可完成網站部屬動作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firebase deploy --only hosting</span><br></pre></td></tr></table></figure>
<p>管理後台也會有相關的部屬/用量紀錄，當然也可以綁定自己的網域名稱</p>
<p><img src="https://i.imgur.com/tT7HsTY.png" alt=""></p>
<h2 id="Functions"><a class="header-anchor" href="#Functions"> </a>Functions</h2>
<p>什麼是 Functions ? Firebase 的 Functions 可以針對 Firebase 服務行為而被觸發的小程序，例如我希望當 Cloud Firestore 有新增資料時，幫我將某些資料整理到另外一個 collection 裡面，這時候，就可以透過 <code>functions</code> 來幫忙處理，這裡就簡單地提供個範例做參考</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> functions <span class="keyword">from</span> <span class="string">&#x27;firebase-functions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> admin <span class="keyword">from</span> <span class="string">&#x27;firebase-admin&#x27;</span>;</span><br><span class="line">admin.<span class="title function_">initializeApp</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">autoLikes</span> = functions.<span class="property">firestore</span></span><br><span class="line">  .<span class="title function_">document</span>(<span class="string">&#x27;videoDetails/&#123;videoId&#125;/shareBy/&#123;shareId&#125;&#x27;</span>)</span><br><span class="line">  .<span class="title function_">onCreate</span>(<span class="function">(<span class="params">snapshot, context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> videoId = context.<span class="property">params</span>.<span class="property">videoId</span>;</span><br><span class="line">    <span class="keyword">const</span> videoRef = admin</span><br><span class="line">      .<span class="title function_">firestore</span>()</span><br><span class="line">      .<span class="title function_">collection</span>(<span class="string">&#x27;videos&#x27;</span>)</span><br><span class="line">      .<span class="title function_">doc</span>(videoId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> videoRef</span><br><span class="line">      .<span class="title function_">get</span>()</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">doc</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> likes = doc.<span class="title function_">get</span>(<span class="string">&#x27;likes&#x27;</span>) || <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> data = &#123;</span><br><span class="line">          <span class="attr">likes</span>: likes + <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> videoRef.<span class="title function_">update</span>(data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>程式碼說明</p>
<ul>
<li>
<p>exports.&lt;<function name>&gt; 這個會顯示在後台的 functions 列表中</p>
<p><img src="https://i.imgur.com/9oKSj7B.png" alt=""></p>
</li>
<li>
<p><code>functions.firestore.document('videoDetails/&#123;videoId&#125;/shareBy/&#123;shareId&#125;').onCreate</code>：當某一個 document 或是 collection 發生 <code>create</code>, <code>update</code>, <code>delete</code>, and <code>write</code> 事件時 (這裡可以指定觸發事件)</p>
</li>
<li>
<p>取得網址變數</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">可透過 &#123; params &#125; 的方式設定變數名稱</span><br><span class="line"><span class="keyword">const</span> videoId = context.<span class="property">params</span>.<span class="property">videoId</span>;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
<li>
<p>在之後的程式碼就寫要執行的動作</p>
</li>
<li>
<p>admin，可以不受權限控制存取 firebase 服務</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> admin <span class="keyword">from</span> <span class="string">&#x27;firebase-admin&#x27;</span>;</span><br><span class="line">admin.<span class="title function_">initializeApp</span>();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"> admin.<span class="title function_">firestore</span>()</span><br><span class="line">      .<span class="title function_">collection</span>(<span class="string">&#x27;videos&#x27;</span>)</span><br><span class="line">      .<span class="title function_">doc</span>(videoId);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p>Firebase 的功能很多也很強大，這裡沒有辦法全部都介紹到，例如權限的控制、檔案上傳的部分</p>
<p>如果想要快速建立出產品的試水溫，又不想要搞一堆後端的基礎建設，Firebase 是一個不錯的選擇</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://github.com/angular/angularfire2">AngularFire2</a></li>
<li><a href="https://github.com/firebase/firebase-tools">Firebase Tools</a></li>
<li><a href="https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA">Angular Firebase Youtube頻道</a></li>
<li><a href="https://firebase.google.com/docs/web/setup?authuser=0">Firebase 官方文件</a></li>
<li><a href="https://firebase.google.com/docs/firestore/quotas#collections_documents_and_fields">Collections, documents, and fields Limitation</a></li>
<li><a href="https://firebase.google.com/docs/firestore/query-data/queries">Perform Simple and Compound Queries in Cloud Firestore</a></li>
<li><a href="https://firebase.google.com/docs/functions/firestore-events?authuser=0">Cloud Firestore Trigger Functions</a></li>
<li><a href="https://firebase.google.com/docs/functions">Firebase Functions</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>如何將 OBS 的畫面送到 ZOOM.US 軟體中?</title>
    <url>/2018/05/01/obs-streaming-zoom/</url>
    <content><![CDATA[<p>ZOOM 是一套很好用的線上開會工具，透過月租的服務，可享用一場 100 人可以同時間線上開會，這也是我每周三主持 Angular 線上讀書會的主要工具</p>
<p>有人問我說，能不能將 OBS 的直播畫面輸出給 ZOOM 使用，因為他想要利用 OBS 的畫面編排功能及背景去背，讓自己的視訊畫面能和桌面融為一體，所以才有這篇文章的產生</p>
<span id="more"></span>
<h1 id="作法更新"><a class="header-anchor" href="#作法更新"> </a>作法更新</h1>
<p>(2020/03/09 更新) 跟下面的概念是一樣的，OBS  本身有提供 <code>Fullscreen Projector(preview)</code> 的功能，當然這做法需要多顆螢幕，但延遲會相對的少很多，僅供參考。怎麼使用 <code>Fullscreen Projector</code> 呢，在預覽視窗上按滑鼠右鍵叫出選單，即可看到此選項，這時候就選擇要投影的螢幕是哪一個。而 Zoom 的部分就分享桌面即可</p>
<p><img src="image-20200309125227847.png" alt="image-20200309125227847"></p>
<p><img src="image-20200309125243350.png" alt="image-20200309125243350"></p>
<h1 id="前言"><a class="header-anchor" href="#前言"> </a>前言</h1>
<p>在這之前，要先介紹 NewTek 這間公司所提出的新技術 NDI，這一門黑科技讓直播能做的事情到達另外一個不可思議的境界，以往在攝影機與主控台間需要透過拉 SDI 的線來傳遞訊號，而 SDI 的線材又很貴。這還不含器材的部分，總之做一場直播是很貴的</p>
<ul>
<li>不使用 HDMI 的原因是 HDMI 的線材在一定長度後，訊後會衰減，並不適合大場地使用</li>
</ul>
<p>NDI 這技術可以讓我們使用網路線來做到 SDI 的效果，且延遲是非常低的。NewTek 也好心地將這個技術免費釋出，讓其他硬體/軟體廠商可以將這個協定實作在自家的產品上，這裡有幾個比較有名的</p>
<ol>
<li><a href="https://www.vmix.com/">vMix</a></li>
<li><a href="https://www.xsplit.com/zh_tw/">xSplit</a></li>
<li><a href="https://obsproject.com/">OBS</a> (需安裝套件 <a href="https://obsproject.com/forum/resources/obs-ndi-newtek-ndi%E2%84%A2-integration-into-obs-studio.528/">obs-ndi</a>)</li>
<li><a href="https://ptzoptics.com/">PTZOptics</a></li>
<li><a href="https://www.newtek.com/connect/spark/">NewTek Connect Spark</a></li>
</ol>
<p>這裡我們就用免費的 OBS 來做示範</p>
<h1 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h1>
<ol>
<li>安裝 OBS</li>
<li>安裝 OBS-NDI
<ol>
<li>會要求安裝 <a href="http://new.tk/NDIRedistV3"> NDI 3.0 Runtime</a></li>
</ol>
</li>
<li>安裝 <a href="https://www.newtek.com/ndi/tools/">NewTek Tools</a> ，只需要安裝 portable 版本即可，我們只需要 NDI Studio Monitor</li>
</ol>
<p>當安裝完以上的東西後，應該會被要求重啟電腦。電腦重新啟動後，就可以打開 OBS 的程式</p>
<ol>
<li>在 Tools 的地方，點選 NDI Output settings</li>
</ol>
<p><img src="https://i.imgur.com/cjOOe7P.png" alt=""></p>
<ol start="2">
<li>勾選 【Enable NDI Output】</li>
</ol>
<p><img src="https://i.imgur.com/07VTll2.png" alt=""></p>
<ol start="3">
<li>
<p>這樣 OBS 就會將你的訊號，用 NDI 的模式發送出去，只要在你的<strong>區域網域</strong>內，支援 NDI Input 的軟體或導播機，都可以搜尋的到</p>
</li>
<li>
<p>開啟【NewTek NDI Studio Montiro】</p>
<p><img src="https://i.imgur.com/EocvMNA.png" alt=""></p>
</li>
<li>
<p>選擇訊號來源</p>
</li>
</ol>
<p><img src="https://i.imgur.com/QLTueoJ.png" alt=""></p>
<ol start="6">
<li>
<p>檢視 OBS NDI 訊號輸出結果</p>
<p><img src="https://i.imgur.com/PvcqWiC.png" alt=""></p>
</li>
<li>
<p>由於我們要將這一個視窗透過 ZOOM 分享的方式，顯示給其他與會者看。所以還有兩個地方要做調整</p>
<ol>
<li>
<p>視窗的 border 要隱藏</p>
<p><img src="https://i.imgur.com/uZsxSas.png" alt=""></p>
</li>
<li>
<p>聲音音量的顯示，要將 VU Meter 關掉</p>
<p><img src="https://i.imgur.com/8PASrQp.png" alt=""></p>
</li>
</ol>
</li>
<li>
<p>完成設定，剩下的就是用 Zoom 分享這一個視窗應用程式</p>
</li>
</ol>
<p>這裡要注意一點，當你點選 Hide Window 時，該視窗就無法再移動了，所以如果有第二顆螢幕或是第二台電腦時，這一個分享的動作，可以在另外一個地方進行。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] TestBed 之 override 系列</title>
    <url>/2018/05/03/angular-testbed/</url>
    <content><![CDATA[<p>Angular TestBed 是 Angular 團隊提供用來設定測試環境的方法，TestBed 可以讓我們用最簡單的方式設定好一個測試用的 NgModule，除了常見的幾個方法外，還提供一系列的 override 的方法，但是卻沒有相關的文件說明，所以這篇文章就是來解釋如何使用 override 方法</p>
<span id="more"></span>
<h1 id="介紹-TestBed-Override-系列"><a class="header-anchor" href="#介紹-TestBed-Override-系列"> </a>介紹 TestBed Override 系列</h1>
<p>根據官方文件, TestBed 提供的 override 方法有</p>
<ol>
<li><code>overrideModule</code></li>
<li><code>overrideComponent</code></li>
<li><code>overrideDirective</code></li>
<li><code>overridePipe</code></li>
<li><code>overrideTemplate</code></li>
<li><code>overrideTemplateUsingTestingModule</code></li>
<li><code>overrideProvider</code></li>
</ol>
<p>以下就先以 <code>overrideModule</code> 與 <code>overrideProvider</code> 作範例，其他會在後面在說明</p>
<h2 id="OverrideModule"><a class="header-anchor" href="#OverrideModule"> </a>OverrideModule</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">DemoComponent</span>],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="title class_">ActivatedRoute</span>,</span><br><span class="line">      <span class="attr">useValue</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: <span class="title function_">of</span>(&#123; <span class="attr">actionType</span>: <span class="string">&#x27;abc&#x27;</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeModule</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;DemoComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">DemoComponent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">DemoComponent</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123; <span class="attr">imports</span>: [<span class="title class_">SomeModule</span>] &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;原始 module 測試&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">DemoComponent</span>);</span><br><span class="line">      component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">      fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;actionType should equal abc&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(component.<span class="property">actionType</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;override 後 module 測試&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">TestBed</span>.<span class="title function_">overrideModule</span>(<span class="title class_">SomeModule</span>, &#123;</span><br><span class="line">        <span class="attr">set</span>: &#123;</span><br><span class="line">          <span class="attr">providers</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">provide</span>: <span class="title class_">ActivatedRoute</span>,</span><br><span class="line">              <span class="attr">useValue</span>: &#123;</span><br><span class="line">                <span class="attr">data</span>: <span class="title function_">of</span>(&#123; <span class="attr">actionType</span>: <span class="string">&#x27;123&#x27;</span> &#125;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">     <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">DemoComponent</span>);</span><br><span class="line">      component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">      fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;actionType should equal 123&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(component.<span class="property">actionType</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>以 <code>overrideModule</code>的字面上來解釋，就是可以複寫第一次所設定的 <code>TestingModule</code> 的內容，由於 <code>overrideModule</code> 需要指定要複寫的 module 名稱，所以先建立一個初始  <code>NgModule</code> 後，在 <code>TestingModule</code> 時將其 import 進來。執行的結果會是一樣的</p>
<p>這裡需要留意的是 <code>TestBed.createComponent</code> 的時間點，一旦 component 被建立後，就無法被複寫了，這裡要注意</p>
<h2 id="overrideProvider"><a class="header-anchor" href="#overrideProvider"> </a>overrideProvider</h2>
<p>但我們只想更換 <code>provider</code> 的部分，真的有需要寫的那麼複雜嗎? <code>TestBed</code> 有提供 <code>overrideProvider</code> 的方法可以使用，寫法如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;DemoComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">DemoComponent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">DemoComponent</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">DemoComponent</span>],</span><br><span class="line">      <span class="attr">providers</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">provide</span>: <span class="title class_">ActivatedRoute</span>,</span><br><span class="line">          <span class="attr">useValue</span>: &#123;</span><br><span class="line">            <span class="attr">data</span>: <span class="title function_">of</span>(&#123; <span class="attr">actionType</span>: <span class="string">&#x27;abc&#x27;</span> &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;原使 module 測試&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">DemoComponent</span>);</span><br><span class="line">      component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">      fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;actionType should equal abc&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(component.<span class="property">actionType</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">describe</span>(<span class="string">&#x27;修正後的 provider 測試&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">TestBed</span>.<span class="title function_">overrideProvider</span>(<span class="title class_">ActivatedRoute</span>, &#123;</span><br><span class="line">        <span class="attr">useValue</span>: &#123;</span><br><span class="line">          <span class="attr">data</span>: <span class="title function_">of</span>(&#123; <span class="attr">actionType</span>: <span class="string">&#x27;def&#x27;</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">DemoComponent</span>);</span><br><span class="line">      component = fixture.<span class="property">componentInstance</span>;</span><br><span class="line">      fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;actionType should equal def&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(component.<span class="property">actionType</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;def&#x27;</span>);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="overrideComponent"><a class="header-anchor" href="#overrideComponent"> </a>overrideComponent</h2>
<p><code>overrideComponent</code> 也是另外一個很常見的測試技巧，尤其是在測試 <code>directive</code>的時候，這技巧就非常實用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-host-comp&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostComponent</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;HighlightDirective&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">HostComponent</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(</span><br><span class="line">    <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">        <span class="attr">declarations</span>: [<span class="title class_">HostComponent</span>, <span class="title class_">HighlightDirective</span>]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">HostComponent</span>);</span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should highlight with cyan&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">overrideComponent</span>(<span class="title class_">HostComponent</span>, &#123;</span><br><span class="line">      <span class="attr">set</span>: &#123; <span class="attr">template</span>: <span class="string">`&lt;p highlight=&quot;cyan&quot;&gt;empty&lt;/p&gt;`</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">createComponent</span>();</span><br><span class="line">    <span class="keyword">const</span> de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;p&#x27;</span>));</span><br><span class="line">    <span class="title function_">expect</span>(de.<span class="property">nativeElement</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;cyan&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should highlight with yellow&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">overrideComponent</span>(<span class="title class_">HostComponent</span>, &#123;</span><br><span class="line">      <span class="attr">set</span>: &#123; <span class="attr">template</span>: <span class="string">`&lt;p highlight&gt;empty&lt;/p&gt;`</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">createComponent</span>();</span><br><span class="line">    <span class="keyword">const</span> de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;p&#x27;</span>));</span><br><span class="line">    <span class="title function_">expect</span>(de.<span class="property">nativeElement</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="overrideTemplate"><a class="header-anchor" href="#overrideTemplate"> </a>overrideTemplate</h2>
<p>如果只是想要替換 template 的部分，有更簡便的寫法，可使用 <code>TestBed.OverrideTemplate(&lt;Component&gt;, &lt;template string&gt;)</code> 來達成一樣的效果</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TestBed</span>, <span class="keyword">async</span>, <span class="title class_">ComponentFixture</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DemoComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./demo.component&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-host-comp&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostComponent</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;DemoComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">HostComponent</span>&gt;;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">app</span>: <span class="title class_">HostComponent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">HostComponent</span>);</span><br><span class="line">    app = fixture.<span class="property">debugElement</span>.<span class="property">componentInstance</span>;</span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">HostComponent</span>, <span class="title class_">DemoComponent</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">`testing overrideTemplate`</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">overrideTemplate</span>(<span class="title class_">HostComponent</span>, <span class="string">`&lt;app-demo title=&quot;app2&quot;&gt;&lt;/app-demo&gt;`</span>);</span><br><span class="line">    <span class="title function_">createComponent</span>();</span><br><span class="line">    <span class="title function_">expect</span>(fixture.<span class="property">nativeElement</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;app2&#x27;</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>TestBed 是一個很方便的工具，除了使用 spyObject 的方式，這一種方式也不錯，分享給大家</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://angular.io/api/core/testing/TestBed">TestBed</a></li>
<li><a href="https://angular.io/guide/testing#attribute-directive-testing">Directive Testing</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 如何測試含有 delay 的 observable?</title>
    <url>/2018/05/18/angualr-testing-delay/</url>
    <content><![CDATA[<p>Angular 內要測試 Observable 的方式有很多種，但有一種東西很難測，就是當遇到控制時間相關的 operators 出現時，測試就變得很有趣了。這篇文章整理一下如何測試這一類的 observable</p>
<span id="more"></span>
<h1 id="前題"><a class="header-anchor" href="#前題"> </a>前題</h1>
<p>這裡有一個需要被測試的動作，這裡我需要測試在 n 秒後，我一開始 push 到陣列裡面的資料，是否會被移出陣列，當 <code>this.message$.next(...)</code> 的時候，就會同時間觸發一個 <code>remover$</code> (定時器，用來移除資料用)。所以問題是，我要如何測試這段程式碼邏輯呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">message$ = <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">message$</span>;</span><br><span class="line"><span class="attr">messages</span>: <span class="title class_">CommandModel</span>[] = [];</span><br><span class="line">tasks$ = <span class="keyword">new</span> <span class="title class_">Subject</span>&lt;<span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt;&gt;();</span><br><span class="line">remover$ = <span class="title function_">of</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">delay</span>(environment.<span class="property">delayTime</span>),</span><br><span class="line">    <span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">messages</span>.<span class="title function_">shift</span>())</span><br><span class="line">);</span><br><span class="line">...</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">tasks$</span>.<span class="title function_">pipe</span>(<span class="title function_">mergeMap</span>(<span class="function"><span class="params">task</span> =&gt;</span> task)).<span class="title function_">subscribe</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message$</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">tap</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">messages</span>.<span class="title function_">push</span>(&#123; ...value &#125;)))</span><br><span class="line">    .<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks$</span>.<span class="title function_">next</span>(<span class="variable language_">this</span>.<span class="property">remover$</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>RxJS 6 版以後，提供了一個 <code>TestScheduler </code> 可以讓我們來做 Observable 的測試，這裡整理出如何測試 <code>delay</code> 這一個東西，(<s>花了我一個下午，看了 n 篇文章後，整理出來的結果</s>)</p>
<h1 id="TestScheduler"><a class="header-anchor" href="#TestScheduler"> </a>TestScheduler</h1>
<p>在講實際測試程式碼前，有幾個東西需要介紹一下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testScheduler = <span class="keyword">new</span> <span class="title class_">TestScheduler</span>(<span class="function">(<span class="params">actual, expected</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 這裡寫 jasmine 的 expect 的比較程式碼</span></span><br><span class="line">   <span class="comment">// expect(component.messages.length).toBe(0);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當建立完 <code>TestScheduler</code> 後會回傳一個物件，再來就可以透過這一個物件來跑我們要測試的 observable</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">testScheduler.<span class="title function_">run</span>(<span class="function">(<span class="params">&#123; cold, expectObservable &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// marble testing 的程式碼寫在這邊</span></span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當執行 <code>.run((...)=&gt;&#123;&#125;)</code> 的 callback functions 會有一個系列的參數可以使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">testScheduler.<span class="title function_">run</span>(<span class="function"><span class="params">helpers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; cold, hot, expectObservable, expectSubscriptions, flush &#125; = helpers;</span><br><span class="line">  <span class="comment">// use them</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="API"><a class="header-anchor" href="#API"> </a>API</h2>
<ul>
<li><code>hot(marbleDiagram: string, values?: object, error?: any)</code> - 建立一個 <code>Hot observable </code> (像 Subject)，當測試開始時，預設行為是一個已經啟動的 observable， 與 cold 的差異是 hot 可以使用 <code>^</code> 這個符號<code>^</code> 是用來標示 <code>Zero frame</code> 的位置，這一個位置是 observable 真正開始的位置.</li>
<li><code>cold(marbleDiagram: string, values?: object, error?: any)</code> - 建立一個 <code>Cold Observable</code> ，測試開始時，observable 才會被啟動.</li>
<li><code>expectObservable(actual: Observable&lt;T&gt;).toBe(marbleDiagram: string, values?: object, error?: any)</code> - 排程一個 assertion 給 <code>TestScheduler.flushes</code> 執行.</li>
<li><code>expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]).toBe(subscriptionMarbles: string)</code> - 類似 <code>expectObservable</code> ，<code>cold()</code> 和 <code>hot()</code> 都會回傳一個含有型別為 <code>SubscriptionLog[]</code> 的<code>subscriptions</code> 的 observable，將該  <code>subscriptions</code> 傳給 <code>expectSubscriptions</code>  去比較是否有符合 <code>subscriptionsMarbles</code> marble diagram 所給予的期待值.</li>
<li><code>flush()</code> - 立即執行虛擬時間，但因為 <code>run()</code> 當 callback 回傳時就會自動更新，所以比較少使用，但在某些特殊情況下，還是會手動觸發 flush 的動作</li>
</ul>
<h2 id="驗證測試程式碼"><a class="header-anchor" href="#驗證測試程式碼"> </a>驗證測試程式碼</h2>
<p>以下是我用來測試 <code>delay</code> 的程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TestScheduler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/testing&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should clear out meesages array after 3 sec&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> testScheduler = <span class="keyword">new</span> <span class="title class_">TestScheduler</span>(<span class="function">(<span class="params">actual, expected</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">expect</span>(component.<span class="property">messages</span>.<span class="property">length</span>).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    testScheduler.<span class="title function_">run</span>(<span class="function">(<span class="params">&#123; cold, expectObservable &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> input = <span class="title function_">cold</span>(<span class="string">&#x27;-a--|&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> output = input.<span class="title function_">pipe</span>(<span class="title function_">tap</span>(<span class="function"><span class="params">v</span> =&gt;</span> component.<span class="property">message$</span>.<span class="title function_">next</span>(&#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span>)));</span><br><span class="line">      <span class="keyword">const</span> expected = <span class="string">&#x27;-- 2999ms a ---|&#x27;</span>;</span><br><span class="line">      <span class="title function_">expectObservable</span>(component.<span class="property">remover$</span>).<span class="title function_">toBe</span>(expected);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="彈珠圖符號說明"><a class="header-anchor" href="#彈珠圖符號說明"> </a>彈珠圖符號說明</h2>
<p>有看到在 <code>cold</code> 裡面的文字，那個既是所謂的彈珠圖表示法，以下是符號的說明</p>
<ul>
<li>
<p><code>' '</code> 空白: 水平空白會被忽略，可用來與其他的彈珠圖對齊使用</p>
</li>
<li>
<p><code>'-'</code> frame: 1 個frame 代表一個單位的虛擬時間的流逝，可設定每一個 frame 的時間長度.</p>
</li>
<li>
<p><code>[0-9]+[ms|s|m]</code> 時間進行: 可利用數字搭配時間單位來表示一個長時間的虛擬時間的進行，時間單位有 <code>ms</code> (milliseconds), <code>s</code> (seconds), or <code>m</code> (minutes) ，數字與單位中間沒有任何空白 e.g. <code>a 10ms b</code></p>
</li>
<li>
<p><code>'|'</code> 完成(complete): 表示一個成功完成的事件，會觸發 <code>complete() </code> 事件.</p>
</li>
<li>
<p><code>'#'</code> 錯誤(error): 表示發生錯誤發生，會觸發 <code>error()</code> 事件.</p>
</li>
<li>
<p><code>[a-z0-9]</code> e.g. <code>'a'</code>  任何英文數字符號，代表 next() 時會送出的值.</p>
</li>
<li>
<p><code>'()'</code> 同步群組(sync groupings): 在同一個時間點需要呈現多個事件時，可利用 <code>()</code> 的方式包起來，在小括弧內的事件，都是發生在同一個時間點的，這裡要留意的是使用 <code>()</code> 的 frame 計算方式，即便 <code>()</code> 內的資料是發生在同一個 frame，但問題下一次的資料 frame 卻不是如現實世界的計算方式，而是需要將 <code>(...)</code> 的文字總長度計算進去，例如: <code>(abc).lenght == 5</code> ，而下一個 emit framer 就是 n+5 開始</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">testScheduler.<span class="title function_">run</span>(<span class="function">(<span class="params">&#123; hot, cold, expectObservable &#125;</span>) =&gt;</span> &#123;    </span><br><span class="line">    <span class="keyword">const</span> expectedMarble = <span class="string">&quot;(abc)(d)e&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> before$ = <span class="title function_">concat</span>(<span class="title function_">of</span>(<span class="string">&quot;a&quot;</span>), <span class="title function_">of</span>(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">    <span class="keyword">const</span> fetch$ = <span class="title function_">cold</span>(<span class="string">&quot;-----d--e&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> exp = <span class="title function_">hot</span>(<span class="string">&quot;a&quot;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> <span class="title function_">concat</span>(before$, <span class="title function_">of</span>(<span class="string">&quot;c&quot;</span>), fetch$))</span><br><span class="line">    );</span><br><span class="line">    <span class="title function_">expectObservable</span>(exp).<span class="title function_">toBe</span>(expectedMarble);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>'^'</code> subscription point: (hot 限定)</p>
</li>
</ul>
<p>其他更細節的說明，可以參考下面的參考文件了</p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://github.com/ReactiveX/rxjs/blob/master/docs_app/content/guide/testing/marble-testing.md">marble-testing</a></li>
<li><a href="https://angular.io/guide/testing#component-marble-tests">angular.io - testing</a></li>
<li><a href="https://codesandbox.io/embed/jest-test-g9p9z">demo - index.test.js</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET Core] Identity - Part 1 使用 Google 登入</title>
    <url>/2018/05/31/aspnet-core-identity/</url>
    <content><![CDATA[<p><a href="http://ASP.NET">ASP.NET</a> Core 有提供身分<s>認證</s> 管理的功能，叫做 <code>Identity</code>，此外也有提供多種的驗證方式，但許多時候因為建立專案時就已經有包含進去了，通常很容易忽略如何從無到有的新增步驟，此篇文章特意整理相關的資訊</p>
<span id="more"></span>
<p>這篇會分兩部分，一是建立 Identity 的環境，二是如何使用 Google OAuth 的方式登入</p>
<h1 id="前置環境設定"><a class="header-anchor" href="#前置環境設定"> </a>前置環境設定</h1>
<p>要新增 <code>Identity</code> 的功能到 <a href="http://asp.net">asp.net</a> core 的程式裡，需要在 <code>Startup.cs</code> 先做以下的設定</p>
<ol>
<li>
<p>預設前置條件，設定 Entity Framework，因為 Identity 預設需要  EF 的支援</p>
<p>a. EF Core 預設已經包含在 <code>Microsoft.AspNetCore.All </code> 的套件包內，所以不需要另外安裝</p>
<p>b. 設定連線字串，儲存參數的方式有很多種，這裡先用最簡單(但不推薦)的方式處理，細節請參閱。建立一個 <code>appsettings.json</code> 檔案，並將資料庫連線字串存放在此</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;DefaultConnection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Data Source=&lt;DB_IPAddress&gt;;DataBase=&lt;DBName&gt;;Persist Security Info=True;User ID=&lt;UserName&gt;;Password=&lt;UserPassword&gt;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>c. service 加入 EF 服務</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="comment">// Add framework services.</span></span><br><span class="line">      services.AddDbContext&lt;StreamDbContext&gt;(options =&gt;</span><br><span class="line">          options.UseSqlServer(Configuration.GetConnectionString(<span class="string">&quot;DefaultConnection&quot;</span>)));</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>d. 建立 <code>StreamDbContext</code> ，並繼承 <code>IdentityDbContext&lt;TUser&gt;</code></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Identity.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> stream_tools.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">stream_tools</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StreamDbContext</span> : <span class="title">IdentityDbContext</span>&lt;<span class="title">ApplicationUser</span>&gt;</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StreamDbContext</span>(<span class="params">DbContextOptions&lt;StreamDbContext&gt; options</span>) : <span class="title">base</span>(<span class="params">options</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>e. 使用 EF migration 更新資料表結構</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 建立 Identity Store 所需要的資料表</span><br><span class="line">dotnet ef migrations add &lt;migration-name&gt;</span><br><span class="line">// 更新至資料庫</span><br><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure>
<p>f. 更新完成後，會多出以下的資料表</p>
<p><img src="https://i.imgur.com/J5m4r9Y.png" alt=""></p>
</li>
<li>
<p>在 <code>ConfigureServices</code> 的地方加入 <code>Identity</code> 的服務</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Identity;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 可取得設定檔內容</span></span><br><span class="line">    <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">     &#123;</span><br><span class="line">         ...</span><br><span class="line">         services.AddIdentity&lt;ApplicationUser, IdentityRole&gt;()</span><br><span class="line">            .AddEntityFrameworkStores&lt;StreamDbContext&gt;()</span><br><span class="line">            .AddDefaultTokenProviders();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立 <code>ApplicationUser</code> Class</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Identity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">stream_tools.Models</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationUser</span> : <span class="title">IdentityUser</span></span><br><span class="line">  &#123;</span><br><span class="line">	<span class="comment">// 資訊擴充使用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 Configure 的地方啟動服務</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">      ...</span><br><span class="line">      app.UseAuthentication();</span><br><span class="line">	  ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>因為需要 MVC 來提供頁面，所以也順便加入 MVC 的功能</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     ...</span><br><span class="line">     services.AddMvc();</span><br><span class="line">&#125;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">      ...</span><br><span class="line">      app.UseMvc();</span><br><span class="line">	  ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="設定-Google-API"><a class="header-anchor" href="#設定-Google-API"> </a>設定 Google API</h1>
<ol>
<li>
<p>首先前往 <a href="https://console.developers.google.com/projectselector/apis/library">https://console.developers.google.com/projectselector/apis/library</a> ，開立新專案或選取舊專案</p>
<p><img src="https://i.imgur.com/3d6hj5L.png" alt=""></p>
</li>
<li>
<p>開啟 <code>Google+ API</code> 供登入使用</p>
<p><img src="https://i.imgur.com/iMtIhKO.png" alt=""></p>
</li>
<li>
<p>點選憑證，並新增 OAuth</p>
<p><img src="https://i.imgur.com/QbelfRd.png" alt=""></p>
</li>
<li>
<p>選擇 <strong>網路應用程式</strong>，並填入以下資訊</p>
<p><img src="https://i.imgur.com/TopW4ty.png" alt=""></p>
</li>
<li>
<p>這裡須留意的是 已授權的重新導向 URI，Identity 預設的路由是 <code>signin-google</code> ，所以只需要替換前面的 port 號碼即可</p>
</li>
<li>
<p>確定後會取得一份 client_id 和 secret 的資訊，我們需要將這資訊儲存到上面所建立的 <code>appsetting.json</code> 檔案內</p>
<p><img src="https://i.imgur.com/JEuLonQ.png" alt=""></p>
</li>
</ol>
<h1 id="設定-Google-登入"><a class="header-anchor" href="#設定-Google-登入"> </a>設定 Google 登入</h1>
<ol>
<li>
<p>在官網的文件中，文件將 <strong>用戶端 ID</strong> 與 <strong>用戶端密碼</strong>，分別使用 <code>Authentication:Google:ClientId</code> 與 <code>Authentication:Google:ClientSecret</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;Authentication:Google:ClientId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用戶端 ID&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Authentication:Google:ClientSecret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用戶端密碼&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>加入新的 Authentication 方式</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;      </span><br><span class="line">    services.AddAuthentication().AddGoogle(googleOptions =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        googleOptions.ClientId = Configuration[<span class="string">&quot;Authentication:Google:ClientId&quot;</span>];</span><br><span class="line">        googleOptions.ClientSecret = Configuration[<span class="string">&quot;Authentication:Google:ClientSecret&quot;</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure>
<p>當然除了 google 之外，還有其他的服務可以使用，其他資訊補充在下面的參考資料內</p>
</li>
</ol>
<p>到這邊為止，基礎設定已經完成了。現在是在頁面上要怎麼使用，Controller 的動作又是如何呢?</p>
<h1 id="Controller-View"><a class="header-anchor" href="#Controller-View"> </a>Controller - View</h1>
<h2 id="View"><a class="header-anchor" href="#View"> </a>View</h2>
<p>如果是使用 Razor 的方式要產生第三方登入選項的方式，其實很簡單，只要透過 <code>SignInManager.GetExternalAuthenticationSchemesAsync()</code> 的方式就可以取得有開啟的選項</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@using stream_tools.Models</span><br><span class="line">@inject SignInManager&lt;ApplicationUser&gt; SignInManager</span><br><span class="line">&lt;form asp-action=<span class="string">&quot;ExternalLogin&quot;</span> asp-route-returnurl=<span class="string">&quot;@ViewData[&quot;</span>ReturnUrl<span class="string">&quot;]&quot;</span> method=<span class="string">&quot;post&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      @&#123;</span><br><span class="line">        <span class="keyword">var</span> loginProviders = (<span class="keyword">await</span> SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      @foreach (<span class="keyword">var</span> provider <span class="keyword">in</span> loginProviders)</span><br><span class="line">      &#123;</span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-default&quot;</span> name=<span class="string">&quot;provider&quot;</span> <span class="keyword">value</span>=<span class="string">&quot;@provider.Name&quot;</span> title=<span class="string">&quot;Log in using your @provider.DisplayName account&quot;</span>&gt;@provider.Name&lt;/button&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>loginProviders</code> 清單內的 provider ，內容如下</p>
<p><img src="https://i.imgur.com/yhPJD5V.png" alt=""></p>
</li>
<li>
<p>所以當按下按鈕時，就會做 Form Post 的動作到 <code>Account/ExternalLogin</code> 的 Action</p>
</li>
</ul>
<h2 id="Controller-重點"><a class="header-anchor" href="#Controller-重點"> </a>Controller (重點)</h2>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">ExternalLogin</span>(<span class="params"><span class="built_in">string</span> provider, <span class="built_in">string</span> returnUrl = <span class="literal">null</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Request a redirect to the external login provider.</span></span><br><span class="line">  <span class="keyword">var</span> redirectUrl = Url.Action(<span class="keyword">nameof</span>(ExternalLoginCallback), <span class="string">&quot;Account&quot;</span>, <span class="keyword">new</span> &#123; returnUrl &#125;);</span><br><span class="line">  <span class="keyword">var</span> properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);</span><br><span class="line">  <span class="keyword">return</span> Challenge(properties, provider);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>當此 Action 接受到前面頁面 Post 動作時，就會先將登入成功後要轉址的位址轉成 Url 的方式，這裡就會回到 <code>Account/ExternalLoginCallback</code> 的地方</li>
<li><code>signInManager.ConfigureExternalAuthenticationProperties</code> 再將額外的資訊包成一個 property 後再送給 <code>Challenge method</code> 最後續的行為</li>
<li><code>signInManager</code> 是一個用來控制使用者登入的 API，文件連結已列在下面的參考文件中</li>
<li><code>Challenge</code> 是 ControllerBase 裡的方法之一，會建立出一個 <code>ChallengeResult</code> ，ChellengerResult is an <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.actionresult?view=aspnetcore-2.1">ActionResult</a> that on execution invokes AuthenticationManager.ChallengeAsync.</li>
<li><code>provider</code> 的值，就如上圖所顯示的，只是將 name 的值傳進來，而這裡是帶入 <code>Google</code></li>
<li>當執行後就會跑到Google 登入帳號的畫面，當完成 Google 帳號登入後，就會回到 <code>Account/ExternalLoginCallback</code> 的地方</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">ExternalLoginCallback</span>(<span class="params"><span class="built_in">string</span> returnUrl = <span class="literal">null</span>, <span class="built_in">string</span> remoteError = <span class="literal">null</span></span>)</span></span><br><span class="line">   &#123;      </span><br><span class="line">     <span class="keyword">if</span> (remoteError != <span class="literal">null</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       ErrorMessage = <span class="string">$&quot;Error from external provider: <span class="subst">&#123;remoteError&#125;</span>&quot;</span>;</span><br><span class="line">       <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(Login));</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">var</span> info = <span class="keyword">await</span> _signInManager.GetExternalLoginInfoAsync();</span><br><span class="line">     <span class="keyword">if</span> (info == <span class="literal">null</span>)</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(Login));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Sign in the user with this external login provider if the user already has a login.</span></span><br><span class="line">     <span class="keyword">var</span> result = <span class="keyword">await</span> _signInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: <span class="literal">false</span>, bypassTwoFactor: <span class="literal">true</span>);</span><br><span class="line">     <span class="keyword">if</span> (result.Succeeded)</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">// 使用者帳號已存在，可以直接前往目的地</span></span><br><span class="line">       <span class="keyword">return</span> RedirectToLocal(returnUrl);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (result.IsLockedOut)</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">// 使用者帳號被鎖定</span></span><br><span class="line">       <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(Lockout));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">// If the user does not have an account, then ask the user to create an account.</span></span><br><span class="line">       ViewData[<span class="string">&quot;ReturnUrl&quot;</span>] = returnUrl;</span><br><span class="line">       ViewData[<span class="string">&quot;LoginProvider&quot;</span>] = info.LoginProvider;</span><br><span class="line">       <span class="keyword">var</span> email = info.Principal.FindFirstValue(ClaimTypes.Email);</span><br><span class="line">       <span class="keyword">return</span> View(<span class="string">&quot;ExternalLogin&quot;</span>, <span class="keyword">new</span> ExternalLoginViewModel &#123; Email = email &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>當登入動作完成後回到 <code>ExternalLoginCallback</code> Action 時會收到兩個資訊，一個是遠端授權的錯誤訊息，一個是登入成功後要轉址的位置</li>
<li>取得第三方授權請求的附加資訊，可透過 <code> var info = await _signInManager.GetExternalLoginInfoAsync();</code> 的方式取得更多的資訊
<ul>
<li>舉例，如果要取得 email，取得方法是 <code>info.Principal.FindFirstValue(ClaimTypes.Email);</code></li>
<li><code>ClaimTypes</code> 的 Enum 還有更多其他的項目可以使用</li>
</ul>
</li>
<li><code>var result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: false, bypassTwoFactor: true);</code>
<ul>
<li><code>ExternalLoginSignInAsync</code> 的方法是當透過外部驗證方式成功後，回到系統內時，執行內部的登入動作，而回傳的結果，可用來判斷該使用者的狀況是否能繼續往下走</li>
</ul>
</li>
</ul>
<h1 id="參數設定"><a class="header-anchor" href="#參數設定"> </a>參數設定</h1>
<ul>
<li>
<p>CallbackPath: 這個參數的值是設定 Google API 在 <strong>重新導向 URI</strong> 的內容，預設是 <code>/signin-google</code>，如果想要改變時，可以修改這個設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddAuthentication().AddGoogle(googleOptions =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">            	googleOptions.CallbackPath = <span class="keyword">new</span> PathString(<span class="string">&quot;/someurl-you-want&quot;</span>);</span><br><span class="line">                ...</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Scope: 在登入 Google 帳號時，我們可以透過 Scope 設定要向登入者取得額外的資訊，設定方式是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">services.AddAuthentication().AddGoogle(googleOptions =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">            	googleOptions.Scope.Add(&#x27;..&#x27;);</span><br><span class="line">                ...</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>到這邊可以算是一個完整的第三方驗證的流程，我認為這裡的流程即使改成使用 web api 的方式，應該也是可以做到一樣的效果，這部分等我實作出來後，在分享出來</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://blog.kevinyang.net/2017/05/15/core-web-mvc-001/">[.NET Core] Web MVC 001 - program.cs</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/app-secrets?view=aspnetcore-2.1&amp;tabs=windows">安全存放裝置的開發工作中 ASP.NET Core 應用程式密碼</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/ef/core/miscellaneous/cli/dotnet">EF Core .NET Command-line Tools</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/authentication/identity?view=aspnetcore-2.1&amp;tabs=visual-studio%2Caspnetcore2x">Introduction to Identity on ASP.NET Core</a></li>
<li><a href="https://markjohnson.io/articles/asp-net-core-identity-without-entity-framework/">identity-without-entity-framework</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/authentication/social/?view=aspnetcore-2.1">ASP.NET Core 中的 Facebook、Google 及外部提供者驗證</a></li>
<li>API DOC
<ul>
<li><a href="https://github.com/aspnet/Security/tree/dev/src/Microsoft.AspNetCore.Authentication.Google">Source Code</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.signinmanager-1?view=aspnetcore-2.1">SignInManager API Doc</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.challengeresult?view=aspnetcore-2.1">ChallengeResult</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET Core] Identity - Part 2 整合 firebase 的登入驗證服務</title>
    <url>/2018/06/03/aspnet-core-authentication-with-firebaesToken/</url>
    <content><![CDATA[<p>上一篇文章介紹了 Google 登入的行為，但是如果遇到前後端分離的狀況，似乎就有點不適合了，聽說 firebase 這登入的功能與前端整合的不錯，是否能透過 firebase 來完成呢?</p>
<span id="more"></span>
<p>答案是<strong>可以</strong>的，透過 JWT Token 的驗證模式就可以達到我們所需的功能，相關的運作流程可參考此圖</p>
<p><img src="https://i.imgur.com/SG1wqqd.png" alt=""></p>
<p>(圖片來自 <a href="https://blog.markvincze.com/secure-an-asp-net-core-api-with-firebase/">https://blog.markvincze.com/secure-an-asp-net-core-api-with-firebase/</a>)</p>
<h1 id="前端設定"><a class="header-anchor" href="#前端設定"> </a>前端設定</h1>
<p>當透過 firebase 登入成功後，我們可以取得 <code>idToken</code>，(注意，不是 accessToken)。如果是透過 <code>AngularFireAuth</code> 套件登入時，可以透過以下的方式取得</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">afAuth</span>.<span class="property">idToken</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">token</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">idToken</span> = token;      </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當然也需要將這一個 token 隨著每一次的 http request 送出到 api 端供驗證使用，可以建立一個 <code>HttpInterceptor</code> 來處理這一件事情</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HttpInterceptor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> authService: AuthService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">intercept</span>(</span><br><span class="line">    <span class="attr">request</span>: <span class="title class_">HttpRequest</span>&lt;<span class="built_in">any</span>&gt;, <span class="attr">next</span>: <span class="title class_">HttpHandler</span>): <span class="title class_">Observable</span>&lt;<span class="title class_">HttpEvent</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    request = request.<span class="title function_">clone</span>(&#123;</span><br><span class="line">      <span class="attr">setHeaders</span>: &#123;</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.authService.idToken&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> next.<span class="title function_">handle</span>(request);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也需要將 <code>HttpInterceptor</code> 註冊到 <code>AppModule</code> 下，這裡需要注意的是，<code>HttpClientModule</code> 只能在 Root Module 註冊一次，不然 <code>Httpinterceptor</code> 會失效</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">   ...</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">HTTP_INTERCEPTORS</span>,</span><br><span class="line">      <span class="attr">useClass</span>: <span class="title class_">TokenInterceptor</span>,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="後端設定"><a class="header-anchor" href="#後端設定"> </a>後端設定</h1>
<p>後端的設定其實還蠻容易的，因為有人已經將要設定的部分包裝成一個 Extension 套件，只要安裝並在 <code>Startup.cs</code> 內設定就可以完成了，操作步驟如下</p>
<ul>
<li>
<p>安裝 套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Install-Package AspNetCore.Firebase.Authentication</span><br><span class="line">// 或是</span><br><span class="line">dotnet add package AspNetCore.Firebase.Authentication</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 <code>Startup.cs</code> 內新增</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">var</span> FirebaseAuthentication_Issuer = <span class="string">&quot;https://securetoken.google.com/&lt;firebase project id&gt;&quot;</span>;    </span><br><span class="line">  <span class="keyword">var</span> FirebaseAuthentication_Audience = <span class="string">&quot;&lt;firebase project id&gt;&quot;</span>;</span><br><span class="line">  services.AddFirebaseAuthentication(FirebaseAuthentication_Issuer,</span><br><span class="line">                                     FirebaseAuthentication_Audience);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     ...</span><br><span class="line">      app.UseAuthentication();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>注意:   <code>app.UseAuthentication()</code> 必須在 <code>app.UseMvc()</code> 之前</p>
</li>
</ul>
<p>到這邊就已經完成了整個的驗證設定了，在 <code>Web API</code> 的部分，與一般的設定是相同的，在需要控管的 API 前面加上 <code>[Authorize] </code> 就可以了</p>
<h2 id="取得Token資料"><a class="header-anchor" href="#取得Token資料"> </a>取得Token資料</h2>
<p>如何從 Token 內取得資訊呢，以下提供幾個取得資料的範例</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tokenInfo = HttpContext.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uid = tokenInfo.FindFirst(<span class="string">&quot;user_id&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> name = tokenInfo.FindFirst(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> email = tokenInfo.FindFirst(ClaimTypes.Email);</span><br></pre></td></tr></table></figure>
<p>可以透過 debug 的模式去看 <code>HttpContext.User.Claims</code> 內所包含的資訊，這些資訊應該會與前端傳來的 token 資訊差不多，那這時就可以透過 <code>findFirst</code> 的方法取得資料，取出來的只是一個資料物件，真正的值需要在用 <code>.Value</code> 來取得，例如 <code>email.Value</code></p>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p>透過第三方與各大平台進行第三方的登入驗證，真的很簡單又快速。如果想要再跟 Identity 做整合的話，也是可以快速結合。提供此方法給大家參考看看</p>
<p>下列的參考資料的第一篇文章的做法，不知道哪裡設定上有問題，一直會取得 401 的錯誤，而單純的使用套件就過了。但文章內的其他概念說明是可以閱讀的</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://blog.markvincze.com/secure-an-asp-net-core-api-with-firebase/">Secure an ASP.NET Core api with Firebase</a></li>
<li><a href="https://bitbucket.org/RAPHAEL_BICKEL/aspnetcore.firebase.authentication">AspNetCore.Firebase.Authentication</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] dotnet cli 命令到底是怎麼運行的?</title>
    <url>/2018/06/12/dotnet-cli-under-secret/</url>
    <content><![CDATA[<p>如果長期有在追 dotnet cli 的人，就知道在某一個時間點，微軟將 dotnet cli 的設定檔從 project.json 轉回 project.csproj 的格式，主要是要讓建置的動作轉回使用 MSBuild 引擎</p>
<span id="more"></span>
<p>根據 <a href="https://docs.microsoft.com/zh-tw/dotnet/core/tools/cli-msbuild-architecture">文件</a> 有提到，雖然下的指令是 <code>dotnet publish -o pub -c Release</code> 但事實上是執行 <code>dotnet msbuild /t:Publish /p:OutputPath=pub /p:Configuration=Release </code>，這樣就引起我的好奇，其他的指令是否也是做同樣的事情。</p>
<p>幸好現在 dotnet core 相關的程式都有放到 GitHub 上，我們可以很容易地了解整體的運作方式</p>
<h1 id="執行"><a class="header-anchor" href="#執行"> </a>執行</h1>
<p>此篇就用 <code>dotnet build </code> 為例</p>
<ul>
<li>
<p>dotnet build 指令的程式碼，可以在<a href="https://github.com/dotnet/cli/tree/master/src/dotnet/commands/dotnet-build">這裡</a>看到</p>
<ul>
<li>
<p><a href="https://github.com/dotnet/cli/blob/master/src/dotnet/commands/dotnet-build/BuildCommandParser.cs">BuildCommandParser.cs</a> 將 <code>build</code> 指另註冊在 dotnet 命令清單的起始點</p>
</li>
<li>
<p><a href="https://github.com/dotnet/cli/blob/master/src/dotnet/commands/dotnet-build/BuildCommand.cs">BuildCommand.cs</a> 是將在命令視窗裡所下的指令做參數的解析並轉換成 msbuild 的建置參數</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> appliedBuildOptions = result[<span class="string">&quot;dotnet&quot;</span>][<span class="string">&quot;build&quot;</span>];</span><br><span class="line"></span><br><span class="line">msbuildArgs.Add(<span class="string">$&quot;-consoleloggerparameters:Summary&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (appliedBuildOptions.HasOption(<span class="string">&quot;--no-incremental&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    msbuildArgs.Add(<span class="string">&quot;-target:Rebuild&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    msbuildArgs.Add(<span class="string">&quot;-target:Build&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msbuildArgs.AddRange(appliedBuildOptions.OptionValuesToBeForwarded());</span><br><span class="line"></span><br><span class="line">msbuildArgs.AddRange(appliedBuildOptions.Arguments);</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> noRestore = appliedBuildOptions.HasOption(<span class="string">&quot;--no-restore&quot;</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>由於 <code>build</code> 命令所使用的 <code>BuildCommand</code> 是繼承 <code>RestoringCommand </code> <a href="https://github.com/dotnet/cli/blob/4883d9643bfb604fef52ae7e53d6a5ee11557fe0/src/dotnet/commands/RestoringCommand.cs">source code</a> 來的，所以預設有 <code>restore</code> 的動作，這也是為什麼在文件上說，在建置前不需要執行 <code>dotnet restore</code> 的原因了。</p>
</li>
<li>
<p>最後當執行 <code>cmd.Execute()</code> 時，會執行 <a href="https://github.com/dotnet/cli/blob/4883d9643bfb604fef52ae7e53d6a5ee11557fe0/src/dotnet/commands/dotnet-msbuild/MSBuildForwardingApp.cs">MSBuildForwardingApp.cs</a> 裡的  Execute 方法，在之後的細節就是根據當下的執行環境找到對的執行檔執行命令，有興趣的可以在從這邊繼續追</p>
</li>
</ul>
<p>以上就是簡單描述當 dotnet cli 命令執行時，到底做哪些事情的筆記</p>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tools/cli-msbuild-architecture">.NET Core 工具中變更的高階概觀</a></li>
<li><a href="https://github.com/dotnet/cli">dotnet cli repo</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tools/csproj">適用於 .NET Core 之 csproj 格式的新增項目</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 如何寫出一個可以被 ng add 使用的 schematics?</title>
    <url>/2018/06/15/angular-schematics-ng-add/</url>
    <content><![CDATA[<p>Angular CLI 6 新增了一個指令 <code>ng add &lt;library&gt;</code> ，我們可以透過這個指令來安裝各式各樣的 schematics 套件，進而擴充 Angular CLI 的功能。如果想要寫一個自己的 schematics 又可以透過 <code>ng add</code> 來安裝。這一篇文章的內容或許是一個開始</p>
<span id="more"></span>
<h1 id="Angular-CLI"><a class="header-anchor" href="#Angular-CLI"> </a>Angular CLI</h1>
<p><code>schematics</code> 可以視為一個指令產生範本的任務集合，所以 Angular CLI 也是透過指令的方式去執行某一個 schematics 裡面的某一個動作。所以在開始寫之前，須了解 Angular CLI 的 ng add 到底做了哪些動作</p>
<p>預設 CLI 所使用的命令清單中，有一個 <code>add.ts</code> ，這個命令就是這次的主角，他的執行步驟有</p>
<ol>
<li>
<p>檢查 ng add 後面使否有輸入引述，需要提供要安裝的套件名稱</p>
</li>
<li>
<p>npm install 套件</p>
</li>
<li>
<p>解析是否有相關設定引數是要給 schematics 命令使用的</p>
</li>
<li>
<p>建立執行命令設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> runOptions = &#123;</span><br><span class="line">   <span class="attr">schematicOptions</span>: options, </span><br><span class="line">   <span class="attr">workingDir</span>: <span class="variable language_">this</span>.<span class="property">project</span>.<span class="property">root</span>,</span><br><span class="line">   collectionName, <span class="comment">// 集合名稱</span></span><br><span class="line">   <span class="attr">schematicName</span>: <span class="string">&#x27;ng-add&#x27;</span>, <span class="comment">// 執行命令</span></span><br><span class="line">   <span class="attr">allowPrivate</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">dryRun</span>: <span class="literal">false</span>, <span class="comment">// 實際產生檔案</span></span><br><span class="line">   <span class="attr">force</span>: <span class="literal">false</span>,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>執行 schematics 命令</p>
</li>
</ol>
<h1 id="自訂-Schematics"><a class="header-anchor" href="#自訂-Schematics"> </a>自訂 Schematics</h1>
<p>根據上面的執行命令，可以得知 CLI 的 ng add 是會執行 <code>ng-add</code> 的指令，所以只要在自己的 schematics collection 內新增 ng-add 就可以了，但在哪之前，先建立一個全新空的 schematics 吧</p>
<ol>
<li>
<p>如果沒有安裝 schematics CLI 的，可以透過這指令安裝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @angular-devkit/schematics</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安裝完成後，可以執行 <code>schematics --help</code> 看看有沒有安裝成功</p>
<p><img src="https://i.imgur.com/88xzjTx.png" alt=""></p>
</li>
<li>
<p>建立空的 schematics</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schematics blank &lt;yourSchematicsName&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/FD8AtPV.png" alt=""></p>
</li>
<li>
<p>進入剛剛建立好的資料夾內，eg <code>/postDemo</code></p>
</li>
<li>
<p>打開熟悉的編輯器，並修改以下內容</p>
<ol>
<li>
<p><code>collection.json</code>，將原本的指令興改成 <code>ng-add</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../node_modules/@angular-devkit/schematics/collection-schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;schematics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;post-demo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A blank schematic.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;factory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./post-demo/index#postDemo&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 修改成</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../node_modules/@angular-devkit/schematics/collection-schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;schematics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ng-add&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A blank schematic.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;factory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./ng-add/index#ngAdd&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>factory 後面內容的 <code>#ngAdd</code> 是指要執行的 function</li>
</ul>
</li>
<li>
<p>將原本的 <code>post-demo</code> 資料夾名稱修改成 <code>ng-add</code></p>
</li>
<li>
<p>將 <code>ng-add/index.ts</code> 檔案裡的 function 名稱修改成 <code>ngAdd</code></p>
</li>
</ol>
<p>到這裡已經完成 CLI 執行 ng-add 的基本型，再來就是可以把想要在 <code>ng add</code> 時要做的工作寫在這邊就可以了</p>
</li>
</ol>
<h1 id="加碼補充"><a class="header-anchor" href="#加碼補充"> </a>加碼補充</h1>
<p>Angular CLI 的另外一個指令 <code>ng update</code> ，做法類似，詳細的設計可以參考 Angular Material 2 的 schematics update，<a href="https://github.com/angular/material2/blob/master/src/lib/schematics/update/update.ts">source code</a></p>
<p><img src="https://i.imgur.com/e0hmtRV.png" alt=""></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/chgc/ngcli-wallaby">ngcli-wallaby</a></li>
<li><a href="https://github.com/angular/material2/blob/master/src/lib/schematics/update/update.ts">Angular Material 2</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/master/packages/schematics/schematics/blank/project-files/README.md">schematics README</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Custom Google Form - Angular Version</title>
    <url>/2018/06/18/angular-google-form/</url>
    <content><![CDATA[<p>網路上有許多文章介紹如何自訂表單並與Google Form 串接，很有趣的做法，但 Angular 該怎麼做呢? 這篇文章來整理一下做法</p>
<span id="more"></span>
<p>Google Form 是一個方便又快速的表單服務，但因為樣式很陽春，相信許多網頁設計師是無法接受的，所以才會有自訂 Google Form 表單樣式的教學出來。而 Angular 也可以做到類似的功能，但有幾個小地方要注意。</p>
<h1 id="建立-Google-表單"><a class="header-anchor" href="#建立-Google-表單"> </a>建立 Google 表單</h1>
<ol>
<li>
<p>前往 <a href="https://www.google.com.tw">Google 表單</a>，建立一個新表單</p>
</li>
<li>
<p>設計表單</p>
</li>
<li>
<p>開啟回覆中的 Excel 資料表</p>
<p><img src="https://i.imgur.com/7FZCa21.png" alt=""></p>
</li>
<li>
<p>這個 Excel 資料表會存放所有的表單結果</p>
</li>
</ol>
<h1 id="Angular-自訂表單"><a class="header-anchor" href="#Angular-自訂表單"> </a>Angular 自訂表單</h1>
<p>使用 Angular 的表單功能設計一個我們想要的表單，當設計好之後，就需要將 Google 表單的欄位定應到自訂的欄位了，在 Google 表單欄位的名稱，都是以 <code>entry.xxxx</code> 命名的，所以我們只要將 Google 表單的 HTML 拿來分析，並將欄位名稱對應上，送到 <code>&lt;form&gt;</code> 的網址，就可以了</p>
<p><img src="https://i.imgur.com/Rdi3Pss.png" alt=""></p>
<p>要送出的網址如上圖</p>
<p><img src="https://i.imgur.com/zKO52gh.png" alt=""></p>
<p>對應的欄位名稱如上圖</p>
<p>其他注意事項</p>
<ol>
<li>要使用 <code>http.post</code> 送出</li>
<li>要將表單資料使用 <code>HttpParams</code> 包裝起來</li>
<li>post header 的 <code>Content-Type</code> 要改成 <code>application/x-www-form-urlencoded </code></li>
<li>如果是多選的 <code>checkbox</code>，送出的欄位名稱是一樣的</li>
<li>要使用 <code>HttpParams.append</code></li>
<li><code>radio</code> 或是 <code>checkbox</code> 資料即顯示名稱</li>
</ol>
<p>剩下的可以參考 <a href="https://stackblitz.com/edit/google-form?file=src%2Fapp%2Fapp.component.html">Sample Code</a></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://stackblitz.com/edit/google-form?file=src%2Fapp%2Fapp.component.html">Sample Code</a></li>
<li><a href="https://blog.webjeda.com/google-form-customize/">Google Form Customization</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] CLI 進度顯示遇上字型的雷 (windows 限定)</title>
    <url>/2018/06/19/angular-cli-progress-font/</url>
    <content><![CDATA[<p>不確定從哪一版 CLI 開始，當執行 <code>ng serve</code> 時，命令視窗的進度表，就會出現很混亂的數字後，才會正常的顯示編譯結果，想說一開始就算了，GitHub 上也找不到相關的 Issue，就這樣子擺著。今天實在受不了，就開始追到底是什麼原因造成這神奇的現象</p>
<span id="more"></span>
<p>這神奇的現象，用簡單的影片表示一下 (使用字型: 細明體)</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/z_a13DhNcMI" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h1 id="開始追蹤"><a class="header-anchor" href="#開始追蹤"> </a>開始追蹤</h1>
<p>當然一開始是從 Angular CLI 下手，但很不幸的，Angular CLI 所使用的進度顯示是透過 Webpack 的 <code>ProgressPlugin</code> 來完成的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ProgressPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack/lib/ProgressPlugin&#x27;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (buildOptions.<span class="property">progress</span>) &#123;</span><br><span class="line">    extraPlugins.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">ProgressPlugin</span>(&#123; <span class="attr">profile</span>: buildOptions.<span class="property">verbose</span>, <span class="attr">colors</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只好前往 <code>ProgressPlugin</code> 探索了，還好 <code>ProgressPlugin</code>  只是單純一隻 js 檔案，應該很容易找 (才怪)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">defaultHandler</span> = (<span class="params">percentage, msg, ...args</span>) =&gt; &#123;</span><br><span class="line">		<span class="keyword">let</span> state = msg;</span><br><span class="line">		<span class="keyword">const</span> details = args;</span><br><span class="line">		<span class="keyword">if</span> (percentage &lt; <span class="number">1</span>) &#123;</span><br><span class="line">			percentage = <span class="title class_">Math</span>.<span class="title function_">floor</span>(percentage * <span class="number">100</span>);</span><br><span class="line">			msg = <span class="string">`<span class="subst">$&#123;percentage&#125;</span>% <span class="subst">$&#123;msg&#125;</span>`</span>;</span><br><span class="line">			<span class="keyword">if</span> (percentage &lt; <span class="number">100</span>) &#123;</span><br><span class="line">				msg = <span class="string">` <span class="subst">$&#123;msg&#125;</span>`</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (percentage &lt; <span class="number">10</span>) &#123;</span><br><span class="line">				msg = <span class="string">` <span class="subst">$&#123;msg&#125;</span>`</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">let</span> detail <span class="keyword">of</span> details) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!detail) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span> (detail.<span class="property">length</span> &gt; <span class="number">40</span>) &#123;</span><br><span class="line">          detail = <span class="string">`…<span class="subst">$&#123;detail.substr(detail.length - <span class="number">39</span>)&#125;</span>`</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				msg += <span class="string">` <span class="subst">$&#123;detail&#125;</span>`</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (profile) &#123;</span><br><span class="line">			state = state.<span class="title function_">replace</span>(<span class="regexp">/^\d+\/\d+\s+/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (percentage === <span class="number">0</span>) &#123;</span><br><span class="line">				lastState = <span class="literal">null</span>;</span><br><span class="line">				lastStateTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (state !== lastState || percentage === <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">				<span class="keyword">if</span> (lastState) &#123;</span><br><span class="line">					<span class="keyword">const</span> stateMsg = <span class="string">`<span class="subst">$&#123;now - lastStateTime&#125;</span>ms <span class="subst">$&#123;lastState&#125;</span>`</span>;</span><br><span class="line">					<span class="title function_">goToLineStart</span>(stateMsg);</span><br><span class="line">					process.<span class="property">stderr</span>.<span class="title function_">write</span>(stateMsg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">					lineCaretPosition = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				lastState = state;</span><br><span class="line">				lastStateTime = now;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="title function_">goToLineStart</span>(msg);</span><br><span class="line">		process.<span class="property">stderr</span>.<span class="title function_">write</span>(msg);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">goToLineStart</span> = nextMessage =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (; lineCaretPosition &gt; nextMessage.<span class="property">length</span>; lineCaretPosition--) &#123;</span><br><span class="line">			str += <span class="string">&quot;\b \b&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lineCaretPosition; i++) &#123;</span><br><span class="line">			str += <span class="string">&quot;\b&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">    lineCaretPosition = nextMessage.<span class="property">length</span>;</span><br><span class="line">		<span class="keyword">if</span> (str) process.<span class="property">stderr</span>.<span class="title function_">write</span>(str);</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> defaultHandler;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>這是很接近尾巴的搜尋結果，我知道畫面顯示出亂子，一定是這裡面的某一行有問題。經過 1 個小時的驗證，上述的程式碼並沒有錯，但是有抓到一個關鍵點，當我把 <code>…</code> 換成其他符號時，執行結果就會很漂亮的顯示進度表，</p>
<p>這樣應該既是這個符號在作怪，但到底是哪裡出錯了。最後與保哥研究的結果，竟然是字型的關係</p>
<h1 id="觀察結果"><a class="header-anchor" href="#觀察結果"> </a>觀察結果</h1>
<p>我電腦 windows 下命令視窗所使用的字型是預設字型，<strong>細明體</strong>，就我自己的了解，細明體應該是等寬字型，所謂的等寬字型是指，英文數字在畫面上所顯示的寬度是一樣的，而中文字因為是兩個字元，所以是兩個英文字的寬度</p>
<p><img src="https://i.imgur.com/ifbXijB.png" alt=""></p>
<p>同樣的文字換成新細明體就會視不同的顯示方式</p>
<p><img src="https://i.imgur.com/cnPiOzT.png" alt=""></p>
<p><code>Fira Code</code> 字型</p>
<p><img src="https://i.imgur.com/cDR8duI.png" alt=""></p>
<p>到這裡，我們知道字型的不同，對於每一個字寬度的認定是不同的，而 webpack 的 <code>ProgressPlugin</code> 是使用字串長度做一些黑魔法的事情，(刪除原本的顯示文字，並在原本位置上顯示新的文字)</p>
<p>而 <code>…</code> 在不同字體上的顯示方式又是如何呢?</p>
<ul>
<li>
<p>新細明體</p>
<p><img src="https://i.imgur.com/X4FzpxW.png" alt=""></p>
</li>
<li>
<p>細明體</p>
<p><img src="https://i.imgur.com/s7ZdpwO.png" alt=""></p>
</li>
<li>
<p>Fira Code</p>
<p><img src="https://i.imgur.com/RUB96ij.png" alt=""></p>
</li>
</ul>
<p>沒錯，細明體的 <code>…</code> 竟然被判斷成全型字(兩個字元)，難怪在計算要刪除文字長度跟顯示時會出亂子，兇手就是你</p>
<p>驗證一下，將命令視窗的字型改成【點陣字體】後再跑一次，看看會不會正常</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/eGH8dKdlB1I" frameborder="0" loading="lazy" allowfullscreen></iframe></div>
<h1 id="解決方案"><a class="header-anchor" href="#解決方案"> </a>解決方案</h1>
<ol>
<li>無視他，既然知道是字型的問題而非程式問題，可以選擇無視他</li>
<li>修正命令視窗的預設字體，設定方式可以參考保哥這篇 <a href="https://blog.miniasp.com/post/2017/12/06/Microsoft-YaHei-Mono-Chinese-Font-for-Command-Prompt-and-WSL.aspx">讓你的命令提示字元或 WSL 擁有一個美麗等寬的字型設定</a></li>
</ol>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="http://funidea.shu.edu.tw/media/show/id/722">「細明體」和「新細明體」差在哪裡？</a></li>
<li><a href="https://blog.miniasp.com/post/2017/12/06/Microsoft-YaHei-Mono-Chinese-Font-for-Command-Prompt-and-WSL.aspx">讓你的命令提示字元或 WSL 擁有一個美麗等寬的字型設定</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] NgModule</title>
    <url>/2018/06/26/angular-ngmodule/</url>
    <content><![CDATA[<p>Angular 的 NgModule 是架構中的核心元件，為什麼這麼說呢? 因為 NgModule 不論是要執行 AOT 或是 LazyLoading 或是製作Library ，都是以 NgModule 為單位，至於 NgModule 到底有哪些事情是我們需要知道的呢?</p>
<span id="more"></span>
<h1 id="什麼是-NgModule"><a class="header-anchor" href="#什麼是-NgModule"> </a>什麼是 NgModule</h1>
<p><code>NgModule</code> 是 Angular 內管理元件的工具，他負責管理元件間、服務相依性的關係，也控制其他 NgModule 對自己的存取權限。<code>NgModule</code> 是透過 metadata (decorator) 來描述所管理的 <code>component</code> 、<code>directive</code>、<code>pipe</code>、<code>NgModules</code> 等</p>
<p>以下是一個簡單 NgModule 的範例程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span>,</span><br><span class="line">    <span class="title class_">ContactModule</span>,</span><br><span class="line">    <span class="title class_">CoreModule</span>.<span class="title function_">forRoot</span>(&#123;<span class="attr">userName</span>: <span class="string">&#x27;Miss Marple&#x27;</span>&#125;),</span><br><span class="line">    <span class="title class_">AppRoutingModule</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">AppComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>至於 NgModule 與 application dependency injectors  間的關係，會在下面做說明。簡單的來說，於 NgModules provider 內註冊的服務，都會被註冊到 Application 層級</p>
<p><strong>補充資訊</strong></p>
<p>Angular 內的物件層級由上而下為，而在相關位置都可以取到以下物件的參考物件，例如 <code>ApplicationRef</code></p>
<ol>
<li>Platform</li>
<li>Application</li>
<li>NgModule</li>
<li>Directive / Component</li>
</ol>
<h1 id="NgModule-VS-ES2015-Modules"><a class="header-anchor" href="#NgModule-VS-ES2015-Modules"> </a>NgModule VS ES2015 Modules</h1>
<p>Angular 有使用到 NgModule 與 ES2015 Modules。 NgModule 與 ES2015 Module 是一樣的嗎?</p>
<p>答案是，他們是不一樣的東西</p>
<p>ES2016 Module 是以實體檔案為單位來管理程式碼，並透過 <code>export</code> 關鍵字來控制要對外公開的功能</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>在其他檔案要使用到 <code>AppComponent</code> 時，必須透過 <code>import</code> 來載入</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>NgModule 是以 Class 搭配 <code>@NgModule</code> 修飾器來管理元件，並透過 <code>export</code> 來管理要對外公開的元件</p>
<h1 id="NgModule-與-Dependency-Injection-的關係"><a class="header-anchor" href="#NgModule-與-Dependency-Injection-的關係"> </a>NgModule 與 Dependency Injection 的關係</h1>
<p>Angular 的 DI 系統的偉大已經不是一兩句話可以描述的，但 Angular DI 還是有很多細節要留意，不然會有鬼打牆的現象出現。先從基本的註冊服務的行為開始說起，Angular 在 Application 層級，有一個 <code>Injector</code> 中樞服務，這一個服務是用來管理所有註冊的 service，當在 class 中有使用到有註冊的 service，就會從 Injector 中將該實體注入到該 class 中，預設的註冊模式是 <code>singleton</code></p>
<p>Injector 在 Application 層級，那要怎麼註冊服務呢? Application 又沒有開可以註冊服務的窗口出來。這時候就是 <code>NgModules</code> 要上場了. 記得 <code>NgModules</code> 有一個 <code>providers</code> 的區塊可以做註冊 service 至 Injector 吧，這裡的運作流程是</p>
<ol>
<li>當 <code>platformBrowserDynamic()</code> 啟動後，就會跟著啟動所指定的 <code>NgModule</code> (也是所謂的 Root Module)。</li>
<li>將 Root Module 內所設定的 provider 驗證並加入到 Injector Tree 中</li>
<li>將 Root Module 內所 import 的 NgModule 的 provider 驗證加入到 Injector Tree 中</li>
</ol>
<p>每一次的 NgModule 的 import 都會產生一份新的 providers 清單，這也是為什麼在官方文件提到，如果想要 service 維持 <code>singleton</code> ，就必須將 service 註冊在 <code>Core Module</code> 且只會在 Root Module import。( <code>providedIn</code> 不在此範圍內)</p>
<h1 id="啟動-NgModule-的模式"><a class="header-anchor" href="#啟動-NgModule-的模式"> </a>啟動 NgModule 的模式</h1>
<h2 id="JIT-Just-In-Time-compilation"><a class="header-anchor" href="#JIT-Just-In-Time-compilation"> </a>JIT (Just In Time compilation)</h2>
<p>Dynamic bootstrapping 是指 Angular 程式碼是在瀏覽器端才進行編譯工作。瀏覽器動態啟動是件成本很高的動作，所以不建議使用在正式環境上，會影響第一次頁面打開的執行速度，建議發佈上線時，要採用 AOT 模式</p>
<h2 id="AOT-Ahead-Of-Time-compilation"><a class="header-anchor" href="#AOT-Ahead-Of-Time-compilation"> </a>AOT (Ahead Of Time compilation)</h2>
<p>何謂 AOT 模式，簡單的說，就是將編譯的動作挪至建置時間完成。AOT 有哪些好處</p>
<ol>
<li>Faster rendering，因為程式已經先編譯過了，所以到瀏覽器端就只剩下執行了，執行速度會變快</li>
<li>Fewer asynchronous requests，將 HTML 與 CSS 編譯至 JavaScript 中了，不須要在從主機端下載 HTML 與 CSS 檔案</li>
<li>Smaller Angular framework download size，因為不需要將 Angular Compiler 的程式包到瀏覽器端，但並表示總的檔案大小是比較小的，因為 HTML Template 的部分也被編譯成 JavaScript 了</li>
<li>Detect template errors earlier，由於會先將 Template 編譯，可以先檢查出 Template 與 Component Class 間的錯誤，例如 template 裡有使用到未定義的方法或是變數</li>
<li>Better security，因為第二點的理由，可以避免一些 Injection 攻擊</li>
</ol>
<h3 id="比較-JIT-與-AOT-產生的檔案內容"><a class="header-anchor" href="#比較-JIT-與-AOT-產生的檔案內容"> </a>比較 JIT 與 AOT 產生的檔案內容</h3>
<p>JIT 版本的 <code>app.component.ts</code></p>
<p><img src="https://i.imgur.com/Otu37dB.png" alt=""></p>
<p>AOT 版本的 <code>app.component.ts</code></p>
<p><img src="https://i.imgur.com/yWZ0m9D.png" alt=""></p>
<p>發現 AOT 版本的 template 等資訊都不見了，這一部分的資訊被編譯成 <code>ngfactory</code> 的內容</p>
<p><img src="https://i.imgur.com/wpZtzxz.png" alt=""></p>
<p>AOT 會將 Template 的部份解析並轉換成程式的一部分，而非用原本的型態呈現</p>
<p>另外一點 AOT 與 JIT 模式的差異是在於<strong>啟動方式</strong></p>
<p>JIT 的啟動方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>);</span><br></pre></td></tr></table></figure>
<p>AOT 的啟動方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">platformBrowser</span>().<span class="title function_">bootstrapModuleFactory</span>(<span class="title class_">AppModuleNgFactory</span>);</span><br></pre></td></tr></table></figure>
<p>由於現在很多工作都被 Angular CLI 做掉了，但還是得了解一下這兩者在啟動的方法還是有所不同的</p>
<h3 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h3>
<p>而完整的運作流程可以在 <a href="https://angular.io/guide/aot-compiler#how-aot-works">官方文件</a> 裡找到，在文件中也點出哪一些寫法是不被 AOT 支援的，要多留意</p>
<h1 id="Lazy-Loading"><a class="header-anchor" href="#Lazy-Loading"> </a>Lazy Loading</h1>
<p>何謂 Lazy Loading? 是將程式碼切割成不同的實體檔案，然後在需要時才將該檔案下載到瀏覽器中執行。這樣的做法，可以減少第一次載入的檔案大小，是效能調教的技巧之一</p>
<p>那怎麼才能做到 lazy loading 的效果呢? 可透過路由設定檔來控制</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;customers&#x27;</span>,</span><br><span class="line">    <span class="attr">loadChildren</span>: <span class="string">&#x27;app/customers/customers.module#CustomersModule&#x27;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">redirectTo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>利用 <code>loadChildren</code> 的方式指定要載入的 <code>NgModules</code> 的位置，建置工具就可以知道這一個 NgModules 是需要被單獨產生的</p>
<p>另外一種比較進階的技巧，可參閱這篇文章，<a href="https://blog.kevinyang.net/2017/11/08/manual-lazy-loading/">[Angular] 手動創造出 Lazy Loading 的效果</a>，如果要搭配動態顯示 Component 時，需要留意所要建立的 Component 是隸屬在哪一個 NgModules 裡，不然會出現錯誤訊息，抱怨說找不到該 Component，(參考 <a href="https://forum.angular.tw/t/topic/978/8">Issue</a>)</p>
<h1 id="結語"><a class="header-anchor" href="#結語"> </a>結語</h1>
<p>關於 NgModules 的資訊真的好多好多，無法單純的用一篇文章就可以涵蓋，官方文件就有單獨的一個單元來解釋 NgModules 的大小事，真心推薦一定要閱讀，NgModules 用得好不好，對系統的架構是有很大的影響的</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/guide/ngmodules">NgModules</a></li>
<li><a href="https://hacks.mozilla.org/2015/08/es6-in-depth-modules/">ES6 In Depth: Modules</a></li>
<li><a href="https://blog.kevinyang.net/2018/01/19/angular-viewproviders-providers/">viewProviders vs provider</a></li>
<li><a href="https://angular.io/guide/aot-compiler">AOT</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core]GraphQL 超新手篇</title>
    <url>/2018/07/08/dotnetcore-graphql/</url>
    <content><![CDATA[<p>又再一次向 GraphQL 挑戰，什麼是 GraphQL，可以快速閱讀一下這篇文章 <a href="https://medium.com/@evenchange4/2018-graphql-%E6%BC%B8%E9%80%B2%E5%BC%8F%E5%B0%8E%E5%85%A5%E7%9A%84%E6%9E%B6%E6%A7%8B-aeb2603f2223">2018 GraphQL 漸進式導入的架構</a>，<a href="http://ASP.NET">ASP.NET</a> Core 又該如何設定呢? 這裡先簡單的記錄一下，關於更細節的設定，就待以後再來研究了</p>
<span id="more"></span>
<h1 id="測試環境"><a class="header-anchor" href="#測試環境"> </a>測試環境</h1>
<ul>
<li><a href="http://ASP.NET">ASP.NET</a> Core 2.x 版</li>
<li>套件 <code>GraphQL</code></li>
<li>前端使用 Angular 來呼叫 <code>GraphQL</code></li>
</ul>
<h1 id="後端"><a class="header-anchor" href="#後端"> </a>後端</h1>
<h2 id="套件安裝"><a class="header-anchor" href="#套件安裝"> </a>套件安裝</h2>
<ul>
<li>
<p>安裝 <code>GraphQL for .NET</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet add package GraphQL</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="基本設定"><a class="header-anchor" href="#基本設定"> </a>基本設定</h2>
<ol>
<li>建立 <code>Schema</code>：GraphQL 解析的進入點，定義 <code>Query</code> 與 <code>Mutation</code></li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CaptionSchema</span>: <span class="title">Schema</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CaptionSchema</span>(<span class="params">Func&lt;Type, GraphType&gt; resolveType</span>) : <span class="title">base</span>(<span class="params">resolveType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">      Query = (CaptionQuery)resolveType(<span class="keyword">typeof</span>(CaptionQuery));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>建立 <code>ObjectGraphType</code>，設定可以查詢的欄位及資料撈取的方式</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CaptionQuery</span> : <span class="title">ObjectGraphType</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CaptionQuery</span>(<span class="params">ICaptionRepository captionRepository</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 資料回傳型別</span></span><br><span class="line">            Field&lt;ListGraphType&lt;CaptionType&gt;&gt;(</span><br><span class="line">              <span class="string">&quot;captions&quot;</span>, <span class="comment">// 查詢命令的名稱</span></span><br><span class="line">     		 arguments: <span class="keyword">new</span> QueryArguments(</span><br><span class="line">                    <span class="keyword">new</span> QueryArgument&lt;NonNullGraphType&lt;IntGraphType&gt;&gt; &#123;Name = <span class="string">&quot;id&quot;</span>, Description = <span class="string">&quot;Category id&quot;</span>&#125;</span><br><span class="line">               ),<span class="comment">// 查詢參數</span></span><br><span class="line">              resolve: context =&gt;&#123; ... &#125; <span class="comment">// 準備回傳資料</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>定義 <code>CaptionType</code> ，回傳的資料型別</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CaptionType</span>: <span class="title">ObjectGraphType</span>&lt;<span class="title">Caption</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CaptionType</span>(<span class="params">StreamDbContext dbContext</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">      Field(x =&gt; x.Id).Description(<span class="string">&quot;Caption Id&quot;</span>);</span><br><span class="line">      Field(x =&gt; x.Uid).Description(<span class="string">&quot;User Unique ID&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 可以使用 Query 裡面的定義方式建立其他關連欄位</span></span><br><span class="line">      Field&lt;ListGraphType&lt;ProductType&gt;&gt;(</span><br><span class="line">                <span class="string">&quot;products&quot;</span>, </span><br><span class="line">                resolve: context =&gt; productRepository.GetProductsWithByCategoryIdAsync(context.Source.Id).Result.ToList()</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>註冊到 <code>Startup.cs</code></li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">      ...</span><br><span class="line">      services.AddMvc();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Register GraphQL QueryModel/Schema</span></span><br><span class="line">      services.AddScoped&lt;CaptionQuery&gt;();</span><br><span class="line">      services.AddTransient&lt;CaptionType&gt;();  </span><br><span class="line">      services.AddTransient&lt;ICaptionRepository, CaptionRepository&gt;();         </span><br><span class="line">      services.AddScoped&lt;IDocumentExecuter, DocumentExecuter&gt;();</span><br><span class="line">      <span class="keyword">var</span> sp = services.BuildServiceProvider();</span><br><span class="line">      services.AddScoped&lt;ISchema&gt;(_ =&gt; <span class="keyword">new</span> CaptionSchema(type =&gt; (GraphType)sp.GetService(type)) &#123; Query = sp.GetService&lt;CaptionQuery&gt;() &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>為 GraphQL 建立 API EndPoint</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Route(<span class="string">&quot;graphql&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GraphQLController</span> : <span class="title">ControllerBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IDocumentExecuter _documentExecuter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISchema _schema;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GraphQLController</span>(<span class="params">IDocumentExecuter documentExecuter, ISchema schema</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _documentExecuter = documentExecuter;</span><br><span class="line">        _schema = schema;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Post</span>(<span class="params">[FromBody]GraphQLQuery query</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (query == <span class="literal">null</span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(query)); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> executionOptions = <span class="keyword">new</span> ExecutionOptions &#123; Schema = _schema, Query = query.Query, UserContext = HttpContext.User &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="keyword">var</span> result = <span class="keyword">await</span> _documentExecuter.ExecuteAsync(executionOptions).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (result.Errors?.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> BadRequest(result);</span><br><span class="line">            &#125;</span><br><span class="line">      	  	<span class="keyword">return</span> Ok(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="keyword">return</span> BadRequest(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>建立 <code>GraphQLQuery.cs</code></li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json.Linq;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GraphQLQuery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> OperationName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> NamedQuery &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Query &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> JObject Variables &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​	*　有些文章的 <code>Variables</code> 會用 string 型別，但這個在使用 Angular 呼叫時，會出現問題，必須改成 <code>JObject</code> 才不會有問題</p>
<p>到這邊為止，可以算大致上完成 GraphQL 在 <a href="http://asp.net">asp.net</a> core 後端的設定，以上的範例在 <code>resolve</code> 裡的程式碼實作，可以直接使用 EF 來讀取，或是透過 Repository 的方式來存取都可以</p>
<h1 id="前端"><a class="header-anchor" href="#前端"> </a>前端</h1>
<h2 id="套件安裝-v2"><a class="header-anchor" href="#套件安裝-v2"> </a>套件安裝</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install apollo-angular apollo-angular-link-http apollo-link apollo-client apollo-cache-inmemory graphql-tag graphql --save</span><br></pre></td></tr></table></figure>
<p>或是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add apollo-angular apollo-angular-link-http apollo-link apollo-client apollo-cache-inmemory graphql-tag graphql</span><br></pre></td></tr></table></figure>
<h2 id="Angular-設定"><a class="header-anchor" href="#Angular-設定"> </a>Angular 設定</h2>
<p>在 <code>app.modules.ts</code> 新增以下設定</p>
<ol>
<li>
<p>import <code> ApolloModule</code> 和 <code>HttpLinkModule</code></p>
</li>
<li>
<p>在 <code>constructor</code> 的地方設定 <code>apollo</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ApolloModule</span>, <span class="title class_">Apollo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-angular&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HttpLinkModule</span>, <span class="title class_">HttpLink</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-angular-link-http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InMemoryCache</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-cache-inmemory&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">apollo: Apollo, httpLink: HttpLink</span>) &#123;</span><br><span class="line">    apollo.<span class="title function_">create</span>(&#123;</span><br><span class="line">      <span class="attr">link</span>: httpLink.<span class="title function_">create</span>(&#123; <span class="attr">uri</span>: <span class="string">&#x27;[URL]&#x27;</span> &#125;),</span><br><span class="line">      <span class="attr">cache</span>: <span class="keyword">new</span> <span class="title class_">InMemoryCache</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Angular-發出第一次-query"><a class="header-anchor" href="#Angular-發出第一次-query"> </a>Angular 發出第一次 query</h2>
<p>先在 component 寫第一次的 GraphQL query</p>
<ol>
<li>
<p><code>constructor</code> 注入 <code>apollo</code> 服務</p>
</li>
<li>
<p>建立查詢語法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">apollo</span></span><br><span class="line">     .<span class="property">query</span>&lt;<span class="built_in">any</span>[]&gt;(&#123;</span><br><span class="line">       <span class="attr">query</span>: gql<span class="string">`</span></span><br><span class="line"><span class="string">         query &#123;</span></span><br><span class="line"><span class="string">           captions &#123;</span></span><br><span class="line"><span class="string">             id</span></span><br><span class="line"><span class="string">             label</span></span><br><span class="line"><span class="string">             colorClass</span></span><br><span class="line"><span class="string">           &#125;</span></span><br><span class="line"><span class="string">         &#125;</span></span><br><span class="line"><span class="string">       `</span></span><br><span class="line">     &#125;)</span><br><span class="line">     .<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>
<p>由於 <code>apollo</code> 建立出來的 query 指令是 Observable 型別, 後續的做法就跟 HttpClient 的 get 等相同了</p>
</li>
<li>
<p>當執行這一段理論上就可以從後端撈取所設定的資料集了</p>
</li>
</ol>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>剛開始在碰 GraphQL 時，最麻煩的是摸索設定的階段，一旦設定完成後，後續模組的設定，難度上就還好了。只是還是得規劃一下，希望用怎樣的資料結構讓前端做查詢，畢竟後端沒有設定的欄位，前端是沒有辦法做查詢的，如果前端查詢到後端沒有設定到的欄位時，就會出現錯誤訊息</p>
<p>當然就目前這階段，我並沒有辦法說 GraphQL 的好壞或是適用情境，但至少先完成環境的設置。之後要進一步的研究就比較容易了</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/GokGokalp/ASP.NET-Core-2.0-GraphQL-Sample">GraphQL sample project in ASP.NET Core 2.0 </a></li>
<li><a href="http://www.gokhan-gokalp.com/en/introduction-to-graphql-and-designing-simple-query-api-with-aspnet-core-2-0/">Introduction to GraphQL and Designing Simple Query API with ASP.NET Core 2.0</a></li>
<li><a href="https://github.com/graphql-dotnet/graphql-dotnet">graphql-dotnet</a></li>
<li><a href="https://github.com/apollographql/apollo-angular">apollo-angular</a></li>
<li><a href="https://medium.com/@evenchange4/2018-graphql-%E6%BC%B8%E9%80%B2%E5%BC%8F%E5%B0%8E%E5%85%A5%E7%9A%84%E6%9E%B6%E6%A7%8B-aeb2603f2223">2018 GraphQL 漸進式導入的架構</a></li>
<li><a href="https://www.robinwieruch.de/why-graphql-advantages-disadvantages-alternatives/">Why GraphQL: Advantages, Disadvantages &amp; Alternatives</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] App-Shell</title>
    <url>/2018/07/19/angular-app-shell/</url>
    <content><![CDATA[<p>Angular CLI 在後期的版本，提供了建立 <code>app shell</code> 的功能，何謂 <code>app shell</code> ，基本上就是透過 universal 的功能，先將首頁的畫面，產生靜態的 DOM 內容並新增到 <code>index.html</code> 的頁面中，並透過 <code>app-shell component</code> (只是單純的 component) 顯示等待訊息。</p>
<p>為什麼要這樣子做，主要理由是讓使用者可以在第一時間得知他所開啟的網站，是有在執行的</p>
<span id="more"></span>
<p>那 Angular CLI 如何透過指令的方式，來完成建置 app shell 的效果呢?</p>
<h1 id="操作步驟"><a class="header-anchor" href="#操作步驟"> </a>操作步驟</h1>
<p>為了方便展示，這裡我們重新建立一個全新的專案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng new shell-demo --routing</span><br></pre></td></tr></table></figure>
<p>當建立完成時，在執行以下的指令來新增 app-shell 的功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng g app-shell --client-project &lt;project name&gt; --universal-project server-app</span><br></pre></td></tr></table></figure>
<ul>
<li><project name> 需要換成自己要的專案名稱，已這裡的範例是 shell-demo</li>
</ul>
<h2 id="檢視變更檔案"><a class="header-anchor" href="#檢視變更檔案"> </a>檢視變更檔案</h2>
<ul>
<li>
<p><code>angular.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:server&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;outputPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/shell-demo-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main.server.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/tsconfig.server.json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;app-shell&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:app-shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;browserTarget&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell-demo:build&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;serverTarget&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell-demo:server&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;route&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在所指定的 client-project 下新增這兩個指令，而在之後的建置指令，會執行 <code>app-shell</code> 這個指令</p>
<p>在 app-shell 指令內，分別設定了 <code>browserTarget</code> 和 <code>serverTarget</code> 要執行的指令是什麼</p>
<ul>
<li>指定執行命令的方式 <code>&lt;projectName&gt;:&lt;architect 內的 指令名稱&gt;:&lt;command 內的 configuration&gt;</code> 例如 <code>shell-demo:build</code></li>
</ul>
</li>
<li>
<p><code>main.ts</code> 修改 <code>bootstrap</code> 的時機點，會等 index.html 頁面內容讀取完成後再啟動 Angular App</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>app.module.ts</code> 新增 universal 相關的 NgModule 設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">imports</span>: [</span><br><span class="line">   <span class="title class_">BrowserModule</span>.<span class="title function_">withServerTransition</span>(&#123; <span class="attr">appId</span>: <span class="string">&#x27;serverApp&#x27;</span> &#125;),</span><br><span class="line">   <span class="title class_">AppRoutingModule</span>,</span><br><span class="line">   <span class="title class_">RouterModule</span></span><br><span class="line"> ],</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>比較重要的檔案變更就是上述的這幾的檔案</p>
<h2 id="建置-app-shell-的方式"><a class="header-anchor" href="#建置-app-shell-的方式"> </a>建置 app-shell 的方式</h2>
<p>由於內建的 cli 指令並沒有針對建置 app-shell，所以必須透過 <code>ng run</code> 的方式來執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng run shell-demo:app-shell</span><br></pre></td></tr></table></figure>
<ul>
<li>ng run 後面所接的指令，如我上面所描述的指令格式，例如 <code>ng build</code>，對等同於 <code>ng run shell-demo:build</code></li>
</ul>
<p>當執行完成後，在 <code>dist</code> 的資料夾可以看到兩個資料夾，一個是原本就會產生的網站資料夾，另外一個是 universal 用的資料夾</p>
<p><img src="https://i.imgur.com/zmlf9JU.png" alt=""></p>
<p>在輸出的 <code>index.html</code> 的內容，就會看到首頁的靜態 DOM 內容，這裡所產生的內容是從 <code>app.module</code> 所定義的 <code>bootstrap</code> component 來的</p>
<p><img src="https://i.imgur.com/ID85bhx.png" alt=""></p>
<p>當執行起來時，使用者就可以很快速地看到網站內容，然後再等 Angular 的應用程式被啟動起來。就對使用者來說，使用體驗就會變好了</p>
<h2 id="執行結果"><a class="header-anchor" href="#執行結果"> </a>執行結果</h2>
<p><img src="https://i.imgur.com/ABjKM7S.gif" alt=""></p>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>透過 App-shell 對於使用者體驗，是有某種程度上的幫助，畢竟一開始就可以看到一些網站內容，而不是一個 loading 的畫面。</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Ionic 4 第一次接觸</title>
    <url>/2018/07/28/ionic-first-look/</url>
    <content><![CDATA[<p>在前幾天， Ionic 團隊發布 Ionic 4 的 beta 版，這一版可以說是整個打掉重寫的產品。原本的元件程式碼，都從頭來過。那 Ionic 4 又有帶來什麼驚喜呢，為什麼團隊願意整個打掉重來呢?</p>
<span id="more"></span>
<p>在正式分享自己第一次玩弄 ionic 4 的心得之前，先從官方文件內擷取一些重點出來，在一次的重點更新有</p>
<ol>
<li><strong>web component</strong> : 所有的 component 都重新改寫成 web component，但是團隊並不是自己刻 web component，而是透過 Stencil  這工具完成的，(<a href="https://github.com/ionic-team/stencil">相關訊息在此</a>)。</li>
<li><strong>Framework Integration&amp; Compatibility:</strong> 因為基於 web component ，沒有相依於任何的 framework ，當然就可以拿到任何的 framework 下使用。</li>
<li><strong>Angular CLI &amp; Router</strong>  : 當然 ionic cli 提供建立 Angular 專案類型的指令，在 ionic 3 的路由設定與 Angular 的路由設定是完全不一樣的，而 ionic 4 的路由就跟 Angular 一樣，所以會寫 Angular 就會寫 ionic app.</li>
</ol>
<h1 id="建立第一個-ionic-4-專案"><a class="header-anchor" href="#建立第一個-ionic-4-專案"> </a>建立第一個 ionic 4 專案</h1>
<p>首先，要先安裝或更新 ionic cli</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g ionic</span><br></pre></td></tr></table></figure>
<p>安裝完成後，建立第一個專案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ionic start myApp tabs --type=angular</span><br></pre></td></tr></table></figure>
<ul>
<li>–type=angular 是需要多加的參數，或許以後就可以有 --type=Vue 或是其他的 framework 的選擇</li>
</ul>
<p>第一次建立時，其實會問蠻多問題的</p>
<p><img src="https://i.imgur.com/3lkQWd5.png" alt=""></p>
<p><img src="https://i.imgur.com/DbN4x2R.png" alt=""></p>
<p><img src="https://i.imgur.com/HWi3tlX.png" alt=""></p>
<p>當創建專案跑完後，用 VSCode 打開，就可以看到熟悉的 Angular 的專案架構</p>
<h2 id="路由設定檔"><a class="header-anchor" href="#路由設定檔"> </a>路由設定檔</h2>
<p>因為建立的是 Tab 類型的專案，所以就來看一下 <code>tabs.router.module.ts</code> 內的設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TabsPage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./tabs.page&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomePage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../home/home.page&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AboutPage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../about/about.page&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ContactPage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../contact/contact.page&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;tabs&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">TabsPage</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        <span class="attr">outlet</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">HomePage</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">        <span class="attr">outlet</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">AboutPage</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;contact&#x27;</span>,</span><br><span class="line">        <span class="attr">outlet</span>: <span class="string">&#x27;contact&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">ContactPage</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">redirectTo</span>: <span class="string">&#x27;/tabs/(home:home)&#x27;</span>,</span><br><span class="line">    <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forChild</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TabsPageRoutingModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在上一層的路有檔為</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">loadChildren</span>: <span class="string">&#x27;./tabs/tabs.module#TabsPageModule&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>是不是很熟悉。路由設定的部分都與常寫的 Angular 專案一模一樣</p>
<h2 id="建立頁面"><a class="header-anchor" href="#建立頁面"> </a>建立頁面</h2>
<p>ionic cli 其實也有提供 generate 的功能，來看一下有哪些東西可以產生</p>
<p><img src="https://i.imgur.com/1GFCjNi.png" alt=""></p>
<p><img src="https://i.imgur.com/StXQA5a.png" alt=""></p>
<p><img src="https://i.imgur.com/vbCqArQ.png" alt=""></p>
<p>新增後的路由異動內容為</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  ...</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>, <span class="attr">loadChildren</span>: <span class="string">&#x27;./pages/profile/profile.module#ProfilePageModule&#x27;</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>很好心的，把 <strong>lazyLoading</strong> 的功能設為預設行為，並且將每一個 page 頁面都以 NgModule 包起來.，其他的內容就與一般的 component 是一樣的</p>
<h1 id="檢視-ionic-4-component-內容"><a class="header-anchor" href="#檢視-ionic-4-component-內容"> </a>檢視 ionic 4 component 內容</h1>
<p>ionic component 的用法其實沒有太大的改變，已經熟悉的人，稍微再調整一下，應該很快就可以上手了，但總要來驗證一下是否如 ionic 團隊所說，元件都重新改寫，來一個簡單的 alert 元件看一下程式碼</p>
<p><img src="https://i.imgur.com/RrS52eP.png" alt=""></p>
<p><a href="https://github.com/ionic-team/ionic/blob/master/core/src/components/alert/alert.tsx">程式碼的部分</a></p>
<p><img src="https://i.imgur.com/hv7lc7j.png" alt=""></p>
<p>基本上，整個寫法就完全與框架脫鉤，只利用 stencil 建置工具的方法而已了。有興趣的人可以自行再去研究</p>
<h1 id="手機服務"><a class="header-anchor" href="#手機服務"> </a>手機服務</h1>
<h2 id="Ionic-Native"><a class="header-anchor" href="#Ionic-Native"> </a>Ionic Native</h2>
<p>透過 Ionic Native 就可以取得手機上的服務，這裡就簡單地舉一個範例程式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ionic cordova plugin add cordova-plugin-camera</span><br><span class="line">$ npm install --save @ionic-native/camera</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Camera</span>, <span class="title class_">CameraOptions</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ionic-native/camera&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> camera: Camera</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">options</span>: <span class="title class_">CameraOptions</span> = &#123;</span><br><span class="line">  <span class="attr">quality</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">destinationType</span>: <span class="variable language_">this</span>.<span class="property">camera</span>.<span class="property">DestinationType</span>.<span class="property">FILE_URI</span>,</span><br><span class="line">  <span class="attr">encodingType</span>: <span class="variable language_">this</span>.<span class="property">camera</span>.<span class="property">EncodingType</span>.<span class="property">JPEG</span>,</span><br><span class="line">  <span class="attr">mediaType</span>: <span class="variable language_">this</span>.<span class="property">camera</span>.<span class="property">MediaType</span>.<span class="property">PICTURE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">camera</span>.<span class="title function_">getPicture</span>(options).<span class="title function_">then</span>(<span class="function">(<span class="params">imageData</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// imageData is either a base64 encoded string or a file URI</span></span><br><span class="line"> <span class="comment">// If it&#x27;s base64 (DATA_URL):</span></span><br><span class="line"> <span class="keyword">let</span> base64Image = <span class="string">&#x27;data:image/jpeg;base64,&#x27;</span> + imageData;</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// Handle error</span></span><br><span class="line">&#125;);	</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://beta.ionicframework.com/docs/native/camera">範例API</a></li>
</ul>
<h2 id="Capacitor-Plugin"><a class="header-anchor" href="#Capacitor-Plugin"> </a>Capacitor Plugin</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Plugins</span>, <span class="title class_">CameraResultType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@capacitor/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Camera</span> &#125; = <span class="title class_">Plugins</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">takePicture</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> image = <span class="keyword">await</span> <span class="title class_">Camera</span>.<span class="title function_">getPhoto</span>(&#123;</span><br><span class="line">    <span class="attr">quality</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="attr">allowEditing</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">resultType</span>: <span class="title class_">CameraResultType</span>.<span class="property">Uri</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// image.webPath will contain a path that can be set as an image src. You can access</span></span><br><span class="line">  <span class="comment">// the original file using image.path, which can be passed to the Filesystem API to</span></span><br><span class="line">  <span class="comment">// read the raw data of the image, if desired (or pass resultType: CameraResultType.Base64 to getPhoto)</span></span><br><span class="line">  <span class="keyword">var</span> imageUrl = image.<span class="property">webPath</span>;</span><br><span class="line">  <span class="comment">// can be set to the src of an image now</span></span><br><span class="line">  imageElement.<span class="property">src</span> = imageUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://capacitor.ionicframework.com/docs/plugins/">範例 API</a></li>
</ul>
<p>因為 Capacitor 是新的工具，所以在於手機服務存取的 API 數量並沒有 Cordova 來的多，但是就程式碼風格來比較，個人是比較偏愛 Capacitor 的寫法</p>
<h1 id="建置發布"><a class="header-anchor" href="#建置發布"> </a>建置發布</h1>
<p>建置與發佈的方式，有分兩種，一是使用 Cordova ，另外一種是使用 Capacitor。再根據分別的建置與發佈的方式處理 iOS 或 Android 平台即可。這邊的做法基本上是一樣的</p>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>Ionic 4 的程式碼架構，我個人是比較喜歡，至少我可以用熟悉的 Angular 開發方式就可以寫了。不太會出現看起來很像又不一樣的 Angular 程式風格，但這也是我個人的偏好而已。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://beta.ionicframework.com/docs/native">Ionic Native</a></li>
<li><a href="https://github.com/ionic-team/stencil">stencil</a></li>
<li><a href="https://capacitor.ionicframework.com/">Capacitor</a></li>
<li><a href="https://beta.ionicframework.com/docs">Ionic 4 Doc</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Ionic</tag>
      </tags>
  </entry>
  <entry>
    <title>[EF6] Oracle with Code First 設定</title>
    <url>/2018/08/01/ef-oracle-code-first/</url>
    <content><![CDATA[<p>近期有一個案子有可能會用到 Oracle， 所以在還沒有正式開跑之前，先來研究一下如何與 Entity Framework 搭配使用。但由於 EF Core 對 Oracle 的支援必須要等到下半年度才可能會有 Oracle 官方釋出的 drive，所以這邊還是先乖乖地使用 EF6 了。</p>
<p>至於如何架設自己的 Oracle 11g Express 資料庫，就要先從網路上面查詢怎麼架設了。這文章我之後再補</p>
<span id="more"></span>
<h1 id="事前準備"><a class="header-anchor" href="#事前準備"> </a>事前準備</h1>
<p>在開始之前，先假設 Oracle 的環境是非常乾淨的，就只能用 system 帳號做連線，我們可以先用 <code>Oracle SQL Developer</code> 工具來測試連線，使用 system 的帳號登入後，我們要先新增使用者</p>
<h2 id="建立-TableSpace"><a class="header-anchor" href="#建立-TableSpace"> </a>建立 TableSpace</h2>
<p>由於 Oracle 只能有一個資料庫 (Database)，當想要做到多資料庫的格式，就得透過 Tablespace 的方式來完成。Tablespace 可以想程式一個資料表的集合，而使用者也可以指定使用特定的 Tablespace，這表示一個使用者帳號就可以代表是一個資料庫</p>
<p>建立 tablespace 的方法，如果是使用 <code>Oracle SQL Developer</code> 者，就需要透過指令的方式來建立，建立後，似乎沒有辦法再改名稱了。所以要小心</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  TABLESPACE &quot;NewTableSpace&quot; </span><br><span class="line">DATAFILE <span class="string">&#x27;C:\ORACLEXE\APP\ORACLE\ORADATA\XE\Northwind&#x27;</span> SIZE <span class="number">100</span> M <span class="comment">-- 存放位置與預設初始檔案大小</span></span><br><span class="line">AUTOEXTEND <span class="keyword">ON</span> NEXT <span class="number">10</span> M <span class="comment">-- 當資料大小已經增加到原先設定容量時，是否會自動依據設定增加容量</span></span><br><span class="line">MAXSIZE UNLIMITED ; <span class="comment">-- 檔案無大小上限</span></span><br></pre></td></tr></table></figure>
<h2 id="建立使用者"><a class="header-anchor" href="#建立使用者"> </a>建立使用者</h2>
<p>來新增一個使用者，等一下做 EF 時可以用，新增步驟如下</p>
<p>(使用 Oracle SQL Developer Tool)</p>
<ol>
<li>
<p>連線至 Oracle DB</p>
</li>
<li>
<p>其他使用者，滑鼠右鍵開啟選單，選擇建立使用者</p>
<p><img src="https://i.imgur.com/r6k6eiy.png" alt=""></p>
</li>
<li>
<p>輸入想要新增的使用者名稱與密碼</p>
<p><img src="https://i.imgur.com/2CXF9Il.png" alt=""></p>
</li>
<li>
<p>選擇剛剛所新增的 TableSpace</p>
<p><img src="https://i.imgur.com/YVfbsqK.png" alt=""></p>
</li>
<li>
<p>授權角色設定: (依自己的需要設定)</p>
<p><img src="https://i.imgur.com/dWXidrD.png" alt=""></p>
<ol>
<li>CONNECT：授與使用者可以連線資料庫並執行基本的資料庫操作</li>
<li>RESOURCE：可以讓使用者去建立資料庫的物件，如TABLE. TRIGGER, PROCEDURE</li>
<li>DBA：可以讓使用者存取所有其他使用者的資料庫物件與管理資料庫</li>
</ol>
</li>
<li>
<p>系統權限設定: 我這邊基本上先全部開放，(一樣依自己的需求做設定)</p>
<p><img src="https://i.imgur.com/X0psghQ.png" alt=""></p>
</li>
<li>
<p>完成設定後就按下【套用】執行，完成使用者建立</p>
</li>
</ol>
<h1 id="建立-NET-專案"><a class="header-anchor" href="#建立-NET-專案"> </a>建立 .NET 專案</h1>
<ol>
<li>
<p>先建立一個 Console 專案</p>
<p><img src="https://i.imgur.com/KECe5OQ.png" alt=""></p>
</li>
</ol>
<h2 id="安裝-Oracle-EntityFramework-套件"><a class="header-anchor" href="#安裝-Oracle-EntityFramework-套件"> </a>安裝 Oracle EntityFramework 套件</h2>
<ol>
<li>
<p>打開 Nuget 管理工具</p>
<p><img src="https://i.imgur.com/rzZNSEF.png" alt=""></p>
</li>
<li>
<p>搜尋 <code>Oracle.ManagedDataAccess.EntityFramework</code></p>
<p><img src="https://i.imgur.com/H2oycF1.png" alt=""></p>
</li>
<li>
<p>安裝 <code>Oracle.ManagedDataAccess.EntityFramework</code>，檢查 Reference 是否有安裝成功</p>
<p><img src="https://i.imgur.com/rcdePlT.png" alt=""></p>
</li>
</ol>
<p>※ 在 readme.txt 的內容要稍微看一下</p>
<blockquote>
<p>Note: The 32-bit 「Oracle Developer Tools for Visual Studio」 download from <a href="http://otn.oracle.com/dotnet">http://otn.oracle.com/dotnet</a> is
required for Entity Framework design-time features. This NuGet download does not enable design-time tools; it
only provides run-time support. This version of <a href="http://ODP.NET">ODP.NET</a> for Entity Framework supports Oracle Database version
10.2 and higher.</p>
</blockquote>
<h2 id="設定連線"><a class="header-anchor" href="#設定連線"> </a>設定連線</h2>
<ol>
<li>
<p>打開 app.config，在最後面可以看 oracle 連線的相關資訊</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;oracle.manageddataaccess.client&gt;</span><br><span class="line">  &lt;version number=&quot;*&quot;&gt;</span><br><span class="line">    &lt;dataSources&gt;</span><br><span class="line">      &lt;dataSource alias=&quot;SampleDataSource&quot; descriptor=&quot;(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=ORCL))) &quot;/&gt;</span><br><span class="line">    &lt;/dataSources&gt;</span><br><span class="line">  &lt;/version&gt;</span><br><span class="line">&lt;/oracle.manageddataaccess.client&gt;</span><br><span class="line">&lt;connectionStrings&gt;</span><br><span class="line">  &lt;add name=&quot;OracleDbContext&quot; providerName=&quot;Oracle.ManagedDataAccess.Client&quot;</span><br><span class="line">connectionString=&quot;User Id=oracle_user;Password=oracle_user_password;Data Source=oracle&quot;/&gt;</span><br><span class="line">&lt;/connectionStrings&gt;</span><br></pre></td></tr></table></figure>
<p>請依自己的環境做設定調整，例如 HOST 位置、SERVICE_NAME、User ID 、password 等</p>
</li>
<li>
<p>在 <code>connectionString</code> 內提到的 <code>Data Source</code> 是指上方的 <code>&lt;dataSource&gt;</code> 名稱</p>
<p><img src="https://i.imgur.com/6qI3wMa.png" alt=""></p>
</li>
</ol>
<h2 id="建立-DbContext"><a class="header-anchor" href="#建立-DbContext"> </a>建立 DbContext</h2>
<p>這裡的動作與一般操作 Entity Framework 是一樣的</p>
<ul>
<li>
<p><code>OracleDbContext.cs</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BlogDemo</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OracleDbContext</span> : <span class="title">DbContext</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Employee&gt; Employees &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">DbModelBuilder modelBuilder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 資料表隸屬位置，Oracle 內是以使用者帳號作為 table schema 的開頭      </span></span><br><span class="line">      <span class="comment">// 例如: BLOG_DEMO.Employees</span></span><br><span class="line">      <span class="comment">// Schema名稱一定要大寫</span></span><br><span class="line">      modelBuilder.HasDefaultSchema(<span class="string">&quot;BLOG_DEMO&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立 <code>Employee.cs</code> 檔案</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">BlogDemo</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>設定 <code>program.cs</code> ，啟動 EF 並塞入一筆資料</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Data.Entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BlogDemo</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">      Database.SetInitializer(<span class="keyword">new</span> DropCreateDatabaseAlways&lt;OracleDbContext&gt;());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">using</span> (OracleDbContext ctx = <span class="keyword">new</span> OracleDbContext())</span><br><span class="line">      &#123;</span><br><span class="line">        Employee emp = <span class="keyword">new</span> Employee()</span><br><span class="line">        &#123;</span><br><span class="line">          Name = <span class="string">&quot;Kevin&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ctx.Employees.Add(emp);</span><br><span class="line">        ctx.SaveChanges();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>第一次執行，因為 <code>DropCreateDatabaseAlways</code> 的關係，所以會建立資料表，<strong>這模式不適合以在開發的系統</strong>，請留意!!</p>
<p><img src="https://i.imgur.com/OFkgEE4.png" alt=""></p>
<ul>
<li>
<p>其他相關設定</p>
<p><strong>1. CreateDatabaseIfNotExists</strong> :    預設規則，DB不存在時才建立，若Model與目前存在DB不相符會拋出例外錯誤</p>
<p><strong>2. DropCreateDatabaseIfModelChanges</strong> :  DB不存在時建立，若Model與目前存在DB不相符時會自動移除現有DB後再建立新DB</p>
<p><strong>3. DropCreateDatabaseAlways</strong> :  無論如何，總是移除現有DB(如果存在的話)，再建立新DB</p>
</li>
</ul>
</li>
</ul>
<h2 id="啟動-migration"><a class="header-anchor" href="#啟動-migration"> </a>啟動 migration</h2>
<ol>
<li>
<p>開啟 package Manager Console</p>
<p><img src="https://i.imgur.com/qYRkDD9.png" alt=""></p>
<ol start="2">
<li>
<p>輸入 <code>Enable-Migrations</code>，這會啟動 <code>code first</code> 模式</p>
<p><img src="https://i.imgur.com/L7CJlJW.png" alt=""></p>
</li>
<li>
<p>修改 <code>Employee</code> 資料表內容，新增 <code>address</code> 欄位</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增 <code>migrations</code> 檔案，<code>add-migration &lt;filename&gt;</code></p>
<p><img src="https://i.imgur.com/6rjlh5z.png" alt=""></p>
<ul>
<li>
<p><code>201808010850326_table_employee_add_address_field.cs</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">table_employee_add_address_field</span> : <span class="title">DbMigration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        AddColumn(<span class="string">&quot;BLOG_DEMO.Employees&quot;</span>, <span class="string">&quot;Address&quot;</span>, c =&gt; c.String());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Down</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        DropColumn(<span class="string">&quot;BLOG_DEMO.Employees&quot;</span>, <span class="string">&quot;Address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>執行 <code>Update-Database</code> ，將異動部分更新到資料庫</p>
<p><img src="https://i.imgur.com/Wjyvyjm.png" alt=""></p>
<p><img src="https://i.imgur.com/OBShcGB.png" alt=""></p>
</li>
<li>
<p>完成第一次遷移(migration)更新</p>
</li>
</ol>
</li>
</ol>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>關於 EF 相關的操作方式，請參閱 Entity Framework 的相關文件，這邊只針對 Oracle Entity Framework 要怎麼連線及相關設定的說明。畢竟有些細節的部分與 MSSQL 的連線是不一樣的。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/db/dotnet/CodeFirst/index.html#overview">Entity Framework Code First and Code First Migrations for Oracle Database</a></li>
<li><a href="http://kevintsengtw.blogspot.com/2011/11/aspnet-mvc-oracle-11g-xe-entity_13.html">ASP.NET MVC + Oracle 11g XE + Entity Framework. Part 2</a></li>
<li><a href="https://dotblogs.com.tw/vitochiang/2016/01/19/oracle-manageddataaccess-entityframework">【EF-Oracle-01】使用 Entity Framework 連結 Oracle 資料庫</a></li>
</ul>
<p>​</p>
]]></content>
      <categories>
        <category>Entity Framework</category>
      </categories>
      <tags>
        <tag>Entity Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Schematics 內檔案系統基本操作 </title>
    <url>/2018/08/16/angular-schematics-filesystem/</url>
    <content><![CDATA[<p>Schematics 跟檔案操作的元素有三種，分別是 <code>Tree</code>、<code>Rule</code>、<code>Source</code> ，但這三個元素到底是什麼? 又各自有哪些方法可以使用呢?</p>
<span id="more"></span>
<h1 id="基本簡介"><a class="header-anchor" href="#基本簡介"> </a>基本簡介</h1>
<p>檔案系統的操作可以算是 Schematics 內核心的功能之一，也是大部分我們希望 schematics 幫我們處理的事情。所以熟悉 schematics 的檔案操作方式，在寫自己的 schematics 會輕鬆很多。</p>
<h1 id="檔案系統操作"><a class="header-anchor" href="#檔案系統操作"> </a>檔案系統操作</h1>
<h2 id="型別"><a class="header-anchor" href="#型別"> </a>型別</h2>
<ul>
<li>Tree： 是檔案系統的結構描述，包含檔案的狀態與改變檔案的規則 (<code>Rule</code>)</li>
<li>Source： 是一個建立空的新 <code>Tree</code>，常見的方法有 <code>Url(path)</code></li>
<li>Rule： 是描述要如何改變 <code>Tree</code>，所以 <code>Rule</code> 會回傳一個包含改變規則的 <code>Tree</code></li>
</ul>
<h2 id="方法"><a class="header-anchor" href="#方法"> </a>方法</h2>
<h3 id="Tree"><a class="header-anchor" href="#Tree"> </a>Tree</h3>
<p>當第一次建立空的 schematics 時，會看到這一段程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">blogdemo</span>(<span class="params">options: <span class="built_in">any</span></span>): <span class="title class_">Rule</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">tree: Tree, _context: SchematicContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡取得的 <code>Tree</code> 會是當下的檔案系統，所以會包含目前目錄下的所有檔案與資料夾，當然也可以針對那些檔案去做操作，可使用的方法有</p>
<ul>
<li><code>branch(): Tree</code> ：複製一份目前 <code>Tree</code> 狀態的 Tree 物件</li>
<li><code>merge(other: Tree, strategy?: MergeStrategy): void</code> ：合併兩個 <code>Tree</code> 物件，可決定合併衝突時的解決方式
<ul>
<li><code>MergeStrategy</code> 有以下選項
<ul>
<li><code>AllowOverwriteConflict</code></li>
<li><code>AllowCreationConflict </code></li>
<li><code>AllowDeleteConflict</code></li>
<li><code>Default</code></li>
<li><code>Error</code>：如果2個檔案存在於相同的位置就會丟出錯誤訊息</li>
<li><code>ContentOnly</code>：只有內容衝突時才可以被覆寫</li>
<li><code>Overwrite</code>：包含 <code>AllowOverwriteConflict</code>、<code>AllowCreationConflict</code>、<code>AllowDeleteConflict</code>，根據最後的異動做覆蓋</li>
</ul>
</li>
</ul>
</li>
<li><code>root: DirEntry</code> (唯讀)：取得目前的資料夾資訊 (<code>FileSystemDirEntry</code> 型別)</li>
<li><code>read(path: string): Buffer | null</code>：讀取檔案並用 binary  的方式呈現</li>
<li><code>exists(path: string): boolean</code>：檢查檔案是否存在</li>
<li><code>get(path: string): FileEntry | null</code>：取得檔案 ( <code>FileEntry</code> 型別)</li>
<li><code>getDir(path: string): DirEntry</code> ：取得某資料夾的資訊 (<code>FileSystemDirEntry</code> 型別)</li>
<li><code>visit(visitor: FileVisitor): void</code>：拜訪目前 Tree 下的所有檔案 (list through folders)</li>
<li><code>overwrite(path: string, content: Buffer | string): void</code>：複寫特定位置的檔案內容</li>
<li><code>beginUpdate(path: string): UpdateRecorder</code>：開始修改某個檔案</li>
<li><code>commitUpdate(record: UpdateRecorder): void</code>：確認修改內容，需與 <code>beginUpate</code> 配合使用</li>
<li><code>create(path: string, content: Buffer | string): void</code>：建立檔案並給予檔案內容</li>
<li><code>delete(path: string): void</code>：刪除檔案</li>
<li><code>rename(from: string, to: string): void</code>：重新命名檔案</li>
<li><code>apply(action: Action, strategy?: MergeStrategy): void</code>：套用規則，但無法在 <code>HostTree</code> 使用</li>
<li><code>actions: Action[] (readonly)</code>：列出該 <code>Tree</code> 目前所有的 actions，每一個 action 會有以下資訊
<ul>
<li><code>kind</code>：動作種類
<ul>
<li><code>c</code>：建立</li>
<li><code>d</code>：刪除</li>
<li><code>o</code>：複寫</li>
<li><code>r</code>：重新命名</li>
</ul>
</li>
<li><code>path</code> ：路徑(from)</li>
<li><code>to</code>：路徑 (to)</li>
<li><code>content</code>：異動內容</li>
</ul>
</li>
</ul>
<p>基本上，屬於 <code>Tree</code> 型別的資料，都有上述的方法可以使用。在操作檔案系統時，<code>Tree</code> 是一個很重要的觀念，可以想像程他跟 Git 的 commit history 有雷同的運作方式。而所有的異動與規則，最終都得回到 Tree 上</p>
<h3 id="Source"><a class="header-anchor" href="#Source"> </a>Source</h3>
<p>Source 如上頭所介紹的，是用來建立一個全新空的檔案系統，有以下的方法可以產生 Source</p>
<ul>
<li>
<p><code>url(path: String)</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/blogdemo/index.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">blogdemo</span>(<span class="params">_options: <span class="built_in">any</span></span>): <span class="title class_">Rule</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">tree: Tree, context: SchematicContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 根據 index.ts 的位置為出發點</span></span><br><span class="line">    <span class="keyword">const</span> files = <span class="title function_">url</span>(<span class="string">&#x27;./&#x27;</span>)(context) <span class="keyword">as</span> <span class="title class_">Tree</span>;</span><br><span class="line">    <span class="comment">// 列出該 Tree 下的所有檔案    </span></span><br><span class="line">    files.<span class="title function_">visit</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v));</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://i.imgur.com/RJOiBYL.png" alt=""></p>
</li>
<li>
<p><code>apply(source: Source, rules: Rule[])</code>：套用規則到 <code>Source</code> 上，並回傳經處理後的 <code>Source</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">blogdemo</span>(<span class="params">_options: <span class="built_in">any</span></span>): <span class="title class_">Rule</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">tree: Tree, context: SchematicContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filterRule = <span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">endsWith</span>(<span class="string">&#x27;ts&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> files = <span class="title function_">apply</span>(<span class="title function_">url</span>(<span class="string">&#x27;./&#x27;</span>), [filterRule])(context) <span class="keyword">as</span> <span class="title class_">Observable</span>&lt;<span class="title class_">Tree</span>&gt;;</span><br><span class="line">    files.<span class="title function_">subscribe</span>(<span class="function"><span class="params">tree</span> =&gt;</span> &#123;</span><br><span class="line">      tree.<span class="title function_">visit</span>(<span class="function"><span class="params">f</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(f));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/dYhIUIM.png" alt=""></p>
</li>
<li>
<p><code>source(tree: Tree)</code>：將 <code>Tree</code> 轉換成 <code>Source</code> 型別</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">blogdemo</span>(<span class="params">_options: <span class="built_in">any</span></span>): <span class="title class_">Rule</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">tree: Tree, context: SchematicContext</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filterRule = <span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="title function_">endsWith</span>(<span class="string">&#x27;ts&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> files = <span class="title function_">apply</span>(<span class="title function_">source</span>(tree), [filterRule])(context) <span class="keyword">as</span> <span class="title class_">Observable</span>&lt;</span><br><span class="line">      <span class="title class_">Tree</span></span><br><span class="line">    &gt;;</span><br><span class="line">    files.<span class="title function_">subscribe</span>(<span class="function"><span class="params">tree</span> =&gt;</span> &#123;</span><br><span class="line">      tree.<span class="title function_">visit</span>(<span class="function"><span class="params">f</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(f));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>empty()</code>： 回傳一個空的 <code>Tree</code></p>
</li>
<li>
<p><code>asSource (rule: Rule)</code> 將規則轉換成 <code>source</code></p>
</li>
</ul>
<p>這邊會發現我在 <code>source</code> 物件後面加上 <code>(context)</code> ，這個動作是將 <code>source</code> 型別進行處理並會回傳 <code>Tree | Observable&lt;Tree&gt;</code> 型別的資料，之後的操作就跟操作 <code>Tree</code> 是一模一樣的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Source</span> = <span class="function">(<span class="params">context: SchematicContext</span>) =&gt;</span> <span class="title class_">Tree</span> | <span class="title class_">Observable</span>&lt;<span class="title class_">Tree</span>&gt;;</span><br></pre></td></tr></table></figure>
<h3 id="Rule"><a class="header-anchor" href="#Rule"> </a>Rule</h3>
<ul>
<li><code>chain(rules: Rule[]): Rule</code> ： 將 Rule 串接在一起</li>
<li><code>mergeWith(source: Source, strategy: MergeStrategy = MergeStrategy.Default): Rule </code> 將 <code>source</code> 與 <code>Tree</code> 做合併 (直接修改)</li>
<li><code>noop() : Rule</code>：回傳沒有任何動作的 <code>Rule</code></li>
<li><code>filter(predicate: FilePredicate&lt;boolean&gt;): Rule </code>：過濾規則</li>
<li><code>branchAndMerge(rule: Rule, strategy = MergeStrategy.Default): Rule </code>：與目前的 Tree (複製) 合併並回傳一份新的 Tree</li>
<li><code>partitionApplyMerge(predicate: FilePredicate&lt;boolean&gt;, ruleYes: Rule , ruleNo?: Rule): Rule</code>：根據條件執行對應的 <code>Rule</code></li>
<li><code>forEach(operator: FileOperator): Rule </code>：批次直型傳進的 <code>FileOperator </code></li>
<li><code>move(from: string, to?: string): Rule </code>：移動檔案至資料夾</li>
<li><code>rename(match: FilePredicate&lt;boolean&gt;, to: FilePredicate&lt;string&gt;): Rule </code>：將符合條件的檔案更換名稱</li>
<li><code>externalSchematic&lt;OptionT extends object&gt;(collectionName: string, schematicName: string, options: OptionT): Rule </code>：執行第三方 schematics 的命令</li>
<li><code>schematic&lt;OptionT extends object&gt;(schematicName: string, options: OptionT): Rule </code>：執行其他的 schematics 命令</li>
<li><code>template&lt;T&gt;(options: T): Rule </code>：樣板套用，包含檔案內容與檔名路徑的部分轉換</li>
<li><code>pathTemplate&lt;T extends PathTemplateData&gt;(options: T): Rule </code>：轉換檔名路徑至對應的內容</li>
<li><code>contentTemplate&lt;T&gt;(options: T): Rule </code>：轉換檔名內容的變數至對應的內容</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Rule</span> = <span class="function">(<span class="params">tree: Tree, context: SchematicContext</span>) =&gt;</span> <span class="title class_">Tree</span> | <span class="title class_">Observable</span>&lt;<span class="title class_">Tree</span>&gt; | <span class="title class_">Rule</span> | <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p><code>Tree</code>、<code>source</code> 與 <code>Rule</code> 間的關係其實很密切，將這三者的控制弄熟之後，就可以寫出功能很強大的 schematics，而不是單純的從別人的 schematics 複製貼上，卻不懂每一個動作的意義。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/angular/angular-cli/blob/master/packages/angular_devkit/schematics/README.md">Schematics</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[TypeScript] Compiler API 第一次接觸</title>
    <url>/2018/08/17/typescript-compiler/</url>
    <content><![CDATA[<p>TypeScript 提供了編譯 (compiler) 的 API 出來，可以讓我們用程式的方式建立或是編輯 ts 檔案。但為什麼要了解 TypeScript 的 Compiler API 呢? 主要原因是當在寫 Angular Schematics 時，加減都會碰到編輯 TypeScript 檔案的時候，這時候透過 TS Compiler API 來操作會比較保險一點，但這主題有點大，這一篇文章就稍微了解一下如何入門就好</p>
<span id="more"></span>
<h1 id="環境準備"><a class="header-anchor" href="#環境準備"> </a>環境準備</h1>
<p>環境的準備很簡單，基本上安裝 TypeScript 1.6 版本以上的都可以，目前的版本是 3.0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>
<h1 id="起手式"><a class="header-anchor" href="#起手式"> </a>起手式</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ts <span class="keyword">from</span> <span class="string">&#x27;typescript&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">printer</span>: ts.<span class="property">Printer</span> = ts.<span class="title function_">createPrinter</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="attr">sourceFile</span>: ts.<span class="property">SourceFile</span> = ts.<span class="title function_">createSourceFile</span>(</span><br><span class="line">  <span class="string">&#x27;test.ts&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;const x  :  number = 42&#x27;</span>,</span><br><span class="line">  ts.<span class="property">ScriptTarget</span>.<span class="property">ES2015</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  ts.<span class="property">ScriptKind</span>.<span class="property">TS</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sourceFile);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(printer.<span class="title function_">printFile</span>(sourceFile));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>執行結果</strong></p>
<p>第一個 console.log 結果</p>
<p><img src="https://i.imgur.com/ow99byk.png" alt=""></p>
<p>第二個 console.log 結果</p>
<p><img src="https://i.imgur.com/FZztdwD.png" alt=""></p>
<p><strong>程式碼說明</strong></p>
<ul>
<li>
<p>line 1：從 typescript 載入所有並指定別名</p>
</li>
<li>
<p>line 2：建立 Printer，用來列印內容用</p>
</li>
<li>
<p>line 3：<code>createSourceFile</code> 建立 <code>SourceFile</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createSourceFile</span>(<span class="params">fileName: <span class="built_in">string</span>, sourceText: <span class="built_in">string</span>, languageVersion: ScriptTarget, setParentNodes?: <span class="built_in">boolean</span>, scriptKind?: ScriptKind</span>): <span class="title class_">SourceFile</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>sourceFile</code> 的檔名</li>
<li><code>sourceText</code> 檔案內容</li>
<li><code>languageVersion</code> TypeScript 版本</li>
</ul>
</li>
</ul>
<h1 id="Node-factories"><a class="header-anchor" href="#Node-factories"> </a>Node factories</h1>
<p>TypeScript Compiler API 內件很多建立的方法，</p>
<p><img src="https://i.imgur.com/FSC8x4V.png" alt=""></p>
<p>以下舉出幾個 method 的用法集效果</p>
<ul>
<li>
<p><code>createAdd</code> ：將兩個 <code>ts.Expression</code> 用 <code>+</code> 串接在一起</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = ts.<span class="title function_">createAdd</span>(ts.<span class="title function_">createLiteral</span>(<span class="number">42</span>), ts.<span class="title function_">createLiteral</span>(<span class="number">50</span>));</span><br><span class="line"><span class="keyword">const</span> result = printer.<span class="title function_">printNode</span>(ts.<span class="property">EmitHint</span>.<span class="property">Unspecified</span>, add, sourceFile);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/Gg1sqGE.png" alt=""></p>
</li>
<li>
<p><code>createArrayLiteral</code> ：建立 array</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> display = ts.<span class="title function_">createArrayLiteral</span>(</span><br><span class="line"> <span class="comment">/* elements?: ReadonlyArray&lt;Expression&gt; */</span> [ts.<span class="title function_">createLiteral</span>(<span class="string">&#x27;a&#x27;</span>), ts.<span class="title function_">createLiteral</span>(<span class="string">&#x27;b&#x27;</span>)],</span><br><span class="line"> <span class="comment">/* multiLine?: boolean */</span> <span class="literal">true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/x9TIckN.png" alt=""></p>
</li>
<li>
<p><code>createArrowFunction </code>： 建立 arrow function</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrowFunction = ts.<span class="title function_">createArrowFunction</span>(</span><br><span class="line">  <span class="comment">/*  modifiers */</span> [],</span><br><span class="line">  <span class="comment">/*  typeParameters */</span> [],</span><br><span class="line">  <span class="comment">/*  parameters */</span> [</span><br><span class="line">    ts.<span class="title function_">createParameter</span>(</span><br><span class="line">      [],</span><br><span class="line">      [],</span><br><span class="line">      <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">      <span class="literal">undefined</span>,</span><br><span class="line">      ts.<span class="title function_">createTypeReferenceNode</span>(<span class="string">&#x27;number&#x27;</span>, [])</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">/* type  */</span> ts.<span class="title function_">createKeywordTypeNode</span>(ts.<span class="property">SyntaxKind</span>.<span class="property">StringKeyword</span>),</span><br><span class="line">  <span class="comment">/* equalsGreaterThanToken  */</span> <span class="literal">undefined</span>,</span><br><span class="line">  <span class="comment">/* body  */</span> ts.<span class="title function_">createLiteral</span>(<span class="number">42</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/pcHrhT6.png" alt=""></p>
</li>
<li>
<p><code>createArrayTypeNode </code>：建立某型別陣列型別</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">ts.<span class="title function_">createArrayTypeNode</span>(</span><br><span class="line">  ts.<span class="title function_">createKeywordTypeNode</span>(ts.<span class="property">SyntaxKind</span>.<span class="property">StringKeyword</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/hol9kgm.png" alt=""></p>
</li>
<li>
<p><code>createAsExpression </code>：建立 <code>as 型別</code> 的程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> display = ts.<span class="title function_">createAsExpression</span>(</span><br><span class="line">  ts.<span class="title function_">createObjectLiteral</span>([</span><br><span class="line">    ts.<span class="title function_">createPropertyAssignment</span>(<span class="string">&#x27;name&#x27;</span>, ts.<span class="title function_">createLiteral</span>(<span class="string">&#x27;Kevin&#x27;</span>))</span><br><span class="line">  ]),</span><br><span class="line">  ts.<span class="title function_">createTypeReferenceNode</span>(<span class="string">&#x27;Person&#x27;</span>, <span class="literal">undefined</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/v3DN9fH.png" alt=""></p>
</li>
<li>
<p><code>createAssignment</code>： 建立指定程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">ts.<span class="title function_">createAssignment</span>(</span><br><span class="line">  ts.<span class="title function_">createIdentifier</span>(<span class="string">&#x27;firstName&#x27;</span>),</span><br><span class="line">  ts.<span class="title function_">createLiteral</span>(<span class="string">&#x27;Kevin&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/yCLcpd4.png" alt=""></p>
</li>
<li>
<p><code>createVariableDeclarationList </code> ：建立變數</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">ts.<span class="title function_">createVariableDeclarationList</span>(</span><br><span class="line">  [ts.<span class="title function_">createVariableDeclaration</span>(<span class="string">&#x27;name&#x27;</span>, <span class="literal">undefined</span>, ts.<span class="title function_">createLiteral</span>(<span class="string">&#x27;yooo&#x27;</span>))],</span><br><span class="line">  ts.<span class="property">NodeFlags</span>.<span class="property">Const</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/FNVgKP4.png" alt=""></p>
</li>
</ul>
<p>在 TypeScript  Compiler 裡面有超級多方法可以用來建立 typescript 的程式碼，但因為在網路上並沒有看到完整的 API 文件，這個就要慢慢花時間一個一個得看了</p>
<h1 id="AST"><a class="header-anchor" href="#AST"> </a>AST</h1>
<p>AST 是 Abstract Syntax Tree  的縮寫，基本上就是將 TypeScript 檔案的內容轉換成樹狀結構的資料格式，可以透過分析 AST 的結構，進而做一些有趣的變化，但這邊就先針對結構做些了解，結構如下圖</p>
<p><img src="https://i.imgur.com/ZPU0fLP.png" alt=""></p>
<p><code>sourceFile</code> (例如透過 <code>ts.createSourceFile</code> 建立) 內的所有訊息都會被轉換成 node 資訊 (同時也是一份 <code>sourceFile</code>)，每一個 node 資訊都會包含一個 <code>kind</code>  的類別，而這個類別與 <code>ts.SyntaxKind</code> 是對應上的，當然 TypeScript 內也有一些內建的方法來判斷目前的 node  是屬於哪種性質的，例如，使用 <code>ts.isVariableDeclarationList</code> 就可以判斷這一個 node 是否為宣告變數的程式，或是透過 <code>node.kind === ts.SyntaxKind.xxxx</code> 來判斷</p>
<p><img src="https://i.imgur.com/keAMfzF.png" alt=""></p>
<p>TypeScript 編譯的步驟(如上圖)大致上是這樣子，我們可以在中間加上轉換外掛的功能，然後將輸出的結果變成我們想要的，可以在 <code>tsconfig</code> 內做設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ts <span class="keyword">from</span> <span class="string">&#x27;typescript&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">printer</span>: ts.<span class="property">Printer</span> = ts.<span class="title function_">createPrinter</span>(&#123;</span><br><span class="line">  <span class="attr">newLine</span>: ts.<span class="property">NewLineKind</span>.<span class="property">LineFeed</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">sourceFile</span>: ts.<span class="property">SourceFile</span> = ts.<span class="title function_">createSourceFile</span>(</span><br><span class="line">  <span class="string">&#x27;test.ts&#x27;</span>,</span><br><span class="line">  <span class="string">`import * as ts from &#x27;typescript&#x27;&#x27;;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  ts.<span class="property">ScriptTarget</span>.<span class="property">Latest</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  ts.<span class="property">ScriptKind</span>.<span class="property">TS</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">visit</span>(sourceFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">visit</span>(<span class="params">node: ts.Node</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">kind</span> === ts.<span class="property">SyntaxKind</span>.<span class="property">ImportDeclaration</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;變數定義&#x27;</span>, node.<span class="property">kind</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  node.<span class="title function_">forEachChild</span>(visit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這裡提供一個簡單的程式碼做個開始，在搭配上一小結的建立方法，就可以改變最終的輸出結果了</p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API">Using the Compiler API</a></li>
<li><a href="https://astexplorer.net/">AST Explorer </a></li>
<li><a href="https://dev.doctorevidence.com/how-to-write-a-typescript-transform-plugin-fc5308fdd943">How to Write a TypeScript Transform </a></li>
<li><a href="https://github.com/angular/angular-cli/blob/master/packages/schematics/angular/utility/ast-utils.ts">Angular Schematics ast-utils</a></li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular CLI - angular.json 檔說明</title>
    <url>/2018/08/23/angular-json-guide/</url>
    <content><![CDATA[<p>Angular CLI 6 版以後的設定檔大改版，現在終於有時間可以仔細看一下與了解內部是如何運行的。所以就讓我們來看一下 <code>angular.json</code> 檔案吧</p>
<span id="more"></span>
<h1 id="angular-json-設定檔"><a class="header-anchor" href="#angular-json-設定檔"> </a>angular.json  設定檔</h1>
<h2 id="基本設定"><a class="header-anchor" href="#基本設定"> </a>基本設定</h2>
<ul>
<li>
<p><code>$schema</code> ：<code>angular.json</code> 定義檔的位置</p>
</li>
<li>
<p><code>version</code> ：<code>版本設定</code></p>
</li>
<li>
<p><code>newProjectRoot</code>： 設定新專案產生的路徑位置</p>
</li>
<li>
<p><code>defaultProject</code>： CLI 指令預設執行的 project 名稱</p>
</li>
<li>
<p><code>projects</code>：各專案的設定檔設定位置，會在下面章節詳細說明</p>
</li>
<li>
<p><code>cli</code>：一些關於 CLI 設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;cli&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;defaultCollection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@ionic/schematics-angular&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;warnings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;versionMismatch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;typescriptMismatch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>defaultCollection</code> ：指定預設使用的 <code>schematics</code> 範本</li>
<li><code>packageManager</code> ：安裝 package 時要使用的套件管理工具，有 <code>npm</code>、<code>cnpm</code> 和 <code>yarn</code> 三種可以設定</li>
<li><code>warnings</code> ：可設定是否要提示版本不符合的警示訊息
<ul>
<li><code>versionMismatch</code> 全域 Angular CLI 版本與本地的版本不同時，是否要顯示提示訊息</li>
<li><code>typescriptMismatch</code> TypeScript 版本不符合時，是否要顯示提示訊息</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>schematics</code>：<code>schematics</code> 範本命令預設參數設定位置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;schematics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@schematics/angular:component&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;changeDetection&quot;</span><span class="punctuation">:</span> &#x27;OnPush&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span>    </span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>schematics-package:schematics-name</code> : 可設定該命令可設定的預設值，以下是 <code>@schematics/angular</code> 常用可設定的命令</p>
</li>
<li>
<p><code>@schematics/angular:component</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;inlineStyle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if the style will be in the ts file.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;inlineTemplate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if the template will be in the ts file.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;t&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;viewEncapsulation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies the view encapsulation strategy.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Emulated&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Native&quot;</span><span class="punctuation">,</span> <span class="string">&quot;None&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;changeDetection&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies the change detection strategy.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Default&quot;</span><span class="punctuation">,</span> <span class="string">&quot;OnPush&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html-selector&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The prefix to apply to generated selectors.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;styleext&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The file extension to be used for style files.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;css&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if a spec file is generated.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flag to indicate if a dir is created.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipImport&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flag to skip the module import.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html-selector&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The selector to use for the component.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allows specification of the declaring module.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;m&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;export&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if declaring module exports the component.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>@schematics/angular:directive</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html-selector&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The prefix to apply to generated selectors.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if a spec file is generated.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipImport&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flag to skip the module import.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selector&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html-selector&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The selector to use for the directive.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flag to indicate if a dir is created.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allows specification of the declaring module.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;m&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;export&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if declaring module exports the directive.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>@schematics/angular:module</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Generates a routing module.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;routingScope&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Child&quot;</span><span class="punctuation">,</span> <span class="string">&quot;Root&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The scope for the generated routing.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Child&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if a spec file is generated.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flag to indicate if a dir is created.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commonModule&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flag to control whether the CommonModule is imported.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;visible&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allows specification of the declaring module.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;m&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>@schematics/angular:service</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;flat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flag to indicate if a dir is created.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if a spec file is generated.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>@schematics/angular:pipe</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;flat&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Flag to indicate if a dir is created.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if a spec file is generated.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipImport&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allows for skipping the module import.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Allows specification of the declaring module.&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;m&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;export&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if declaring module exports the pipe.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>@schematics/angular:class</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;spec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies if a spec file is generated.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="專案設定"><a class="header-anchor" href="#專案設定"> </a>專案設定</h2>
<p>Angular CLI 6.x 針對多專案的設定方式，有很大的改變，但彈性也相對的自由。以下為設定說明</p>
<ul>
<li><code>root</code>：專案根目錄</li>
<li><code>sourceRoot</code>：專案檔案的位置，如靜態檔案， <code>index.html</code> 等</li>
<li><code>projectType</code>：專案類型，有 <code>application</code> 與 <code>library</code> 兩種</li>
<li><code>prefix</code>：selector 的 prefix 設定，預設 <code>app</code></li>
<li><code>schematics</code>：<code>schematics</code> 範本命令預設參數設定位置，設定方式如最上層的 schematics 設定</li>
<li><code>architect</code>：建置、測試等執行指令設定
<ul>
<li><code>targetName</code> 命令名稱
<ul>
<li><code>builder</code>  命令會使用的 builder 名稱，<code>package-name:builder-name</code></li>
<li><code>options</code> builder 所需要的執行參數設定</li>
<li><code>configurations</code> 延伸 builder 參數設定
<ul>
<li><code>configurationName</code> 參數設定</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="CLI-指令執行流程"><a class="header-anchor" href="#CLI-指令執行流程"> </a>CLI 指令執行流程</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:browser&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;progress&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;outputPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;www&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main-user.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/polyfills.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/tsconfig.app.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;browserTarget&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app:build&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;browserTarget&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app:build:production&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>當我們下 <code>ng serve</code> 的指令時，Angular CLI 實際執行命令的流程如下</p>
<ol>
<li>因為沒有指定 <code>project</code> 名稱，所以會使用 <code>defaultProject</code>  (預設為：<code>app</code>)</li>
<li>執行 <code>ng run app:serve</code> 指令 。
<ul>
<li><code>ng run projectName:architect-targetName:configuration-configurationName</code></li>
</ul>
</li>
<li>因為 server  內的 options 的 <code>browserTarget</code> 設定使用 <code>app:build</code> 指令，還要看 <code>build</code> 指令所設定的內容</li>
<li>完成指令動作</li>
</ol>
<h3 id="內建-builder"><a class="header-anchor" href="#內建-builder"> </a>內建  builder</h3>
<ul>
<li><a href="https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L489-L520">@angular-devkit/build-angular:app-shell</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L521-L906">@angular-devkit/build-angular:browser</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L907-L1028">@angular-devkit/build-angular:dev-server</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L1029-L1064">@angular-devkit/build-angular:extract-i18n</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L1065-L1267">@angular-devkit/build-angular:karma</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L1268-L1323">@angular-devkit/build-angular:protractor</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L1324-L1518">@angular-devkit/build-angular:server</a></li>
<li><a href="https://github.com/angular/angular-cli/blob/v6.0.0-rc.8/packages/%40angular/cli/lib/config/schema.json#L1519-L1594">@angular-devkit/build-angular:tslint</a></li>
</ul>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>Angular CLI 新版的設定檔的架構，可以讓我們很容易的建立要執行的指令與工作流程，當然也可以自訂 <code>builder</code>，花點時間了解一下，在開發上會更順暢</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 自訂 RxJS Operator</title>
    <url>/2018/08/28/rxjs-custom-operator/</url>
    <content><![CDATA[<p>RxJS 6.x 使用 <code>pipe</code> 之後，建立 operators 的方法就又更簡單了。不論是重構將部分的動作成一個自訂 operator ，或是整合其他 library 成為另外一個新的 operator，都遠比之前版本簡單，以下提供一些方法及方向供參考</p>
<span id="more"></span>
<h1 id="重構抽離"><a class="header-anchor" href="#重構抽離"> </a>重構抽離</h1>
<p>以常見的 autocomplete 的功能來說，以下是範例程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">clients</span> = <span class="variable language_">this</span>.<span class="property">searchTerms</span></span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">    	<span class="title function_">debounceTime</span>(<span class="number">300</span>),</span><br><span class="line">      <span class="title function_">distinctUntilChanged</span>(),</span><br><span class="line">      <span class="title function_">switchMap</span>(<span class="function"><span class="params">term</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">clientSearchService</span>.<span class="title function_">search</span>(term)),</span><br><span class="line">      <span class="title function_">catchError</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">of</span>([]))</span><br><span class="line">    );  </span><br></pre></td></tr></table></figure>
<p>有時候我們可以將幾個動作先抽離成一個單獨的 functions 然後再串接到 pipe 裡面，主要是方便程式碼的閱讀，畢竟太細節的操作步驟並不是我們真的後續維護要看的重點，重構後的程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">avoidTriggerTooFast</span> = (<span class="params">timeWindow</span>) =&gt; </span><br><span class="line">	<span class="function"><span class="params">obs</span> =&gt;</span> obs.<span class="title function_">pipe</span>(</span><br><span class="line">	    <span class="title function_">debounceTime</span>(timeWindow),</span><br><span class="line">        <span class="title function_">distinctUntilChanged</span>(),</span><br><span class="line">     );</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">clients</span> = <span class="variable language_">this</span>.<span class="property">searchTerms</span></span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">avoidTriggerTooFast</span>(<span class="number">300</span>),</span><br><span class="line">        <span class="title function_">switchMap</span>(<span class="function"><span class="params">term</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">clientSearchService</span>.<span class="title function_">search</span>(term)),</span><br><span class="line">        <span class="title function_">catchError</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">of</span>([]))</span><br><span class="line">      );</span><br></pre></td></tr></table></figure>
<p>重構步驟</p>
<ol>
<li>建立一個接受一個 Observable 回傳一個 Observable 的 function</li>
<li>將想要抽離的 operators 搬到新方法下</li>
<li>將原本位置替換成新的 function</li>
</ol>
<h1 id="自訂-Operators"><a class="header-anchor" href="#自訂-Operators"> </a>自訂 Operators</h1>
<p>既然重構的起手式是 <strong>建立一個接受一個 Observable 回傳一個 Observable 的 function</strong> ，那創造出一個新的 operators 也可以跟隨相同的規則</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>, <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">multiplyBy</span>) =&gt; <span class="function">(<span class="params">source: Observable&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params">n</span>) &#123; observer.<span class="title function_">next</span>(n * multiplyBy); &#125;,</span><br><span class="line">    <span class="title function_">error</span>(<span class="params">err</span>) &#123; &#125;,</span><br><span class="line">    <span class="title function_">complete</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">multiply</span>(<span class="number">2</span>)).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>建立步驟</p>
<ol>
<li>從 <code>rxjs</code> 取得 <code>Observable</code></li>
<li>建立一個接受一個 Observable 回傳一個新的 <code>Observable</code> 物件</li>
<li>在 subscribe 處理，<code>next</code>、<code>error</code> 和 <code>complete</code>，將相關的動作對應到上層 (<code>new Observable()</code>) 的 observer</li>
</ol>
<p>上面是最原始的作法，但我們能發現很多自訂 operators 的動作都是在進行資料轉型，所以我們可以直接透過 <code>map</code> 的 operators 來完成相同的動作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>, <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">multiplyBy</span>) =&gt; <span class="title function_">map</span>(<span class="function">(<span class="params">n: <span class="built_in">number</span></span>) =&gt;</span> n * multiplyBy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">multiply</span>(<span class="number">2</span>)).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這樣的寫法，是否乾淨許多。當然其他內建的 RxJS operators 也可以拿來使用</p>
<h1 id="整合-Library"><a class="header-anchor" href="#整合-Library"> </a>整合 Library</h1>
<p>在往進階一點看，如果整合其他的 JS Library 或是自己寫的 helper function 呢? 類似 <code>lodash</code> ， 其實做法都一樣，以下給個範例，應該很快就能掌握住方向，</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> _isNumber <span class="keyword">from</span> <span class="string">&#x27;lodash/isNumber&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isNumber</span> = (<span class="params"></span>) =&gt; <span class="title function_">filter</span>(_isNumber);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">isNumber</span>()</span><br><span class="line">).<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>其實 RxJS 寫到後面，會使用到一些 FP 的開發技巧，趁著這機會，了解一下 FP 的開發模式，對於寫 RxJS 會有很大的幫助。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://youtu.be/JWjXBWINlzU">Custom RxJS Operators by Example</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] Scheduler</title>
    <url>/2018/08/31/rxjs-scheduler/</url>
    <content><![CDATA[<p>來探討 RxJS 的 Scheduler 吧</p>
<span id="more"></span>
<h1 id="前言"><a class="header-anchor" href="#前言"> </a>前言</h1>
<p>在開始探討 RxJS 的 scheduler 機制之前，要先談談 JavaScript 本身的三個機制 <code>Event Loop</code> 、<code>Micro Task</code> 和 <code>Macro Task</code>。</p>
<p>我們知道 JavaScript 處理 <code>function </code> 的方式是將要執行的 <code>function </code> 放到 stack 中，如果遇到非同步動作時，JavaScript 會將其非同步執行結束後的 <code>callback function</code> 放到 <code>Queue</code> 中，等待 stack 的動作全部完成後(即清空)，再來執行 queue 裡的工作，而將 queue 裡的工作轉到 stack 的人就是 <code>event loop</code>。所以我們可以說 <code>event loop</code> 的工作是監控 <code>stack</code> 與 <code>queue</code> ，並決定什麼時候要將 queue 的工作拉到 stack 內處理。</p>
<p>更多關於 Event loop 運行方式，可以看這個影片</p>
<div class="video-container"><iframe src="https://www.youtube.com/embed/8aGhZQkoFbQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div> 
<p>實際上 <code>Event loop</code> 內在分細一點，針對不同的非同步行為，有著執行的優先順序。這裡要介紹 <code>Micro Task</code> 與 <code>Macro Task</code> ，簡單的說，就是將上述的 Queue 在分成兩種 Queue，一個是記載著 <code>Micro Task</code> 的 (這裡我們先稱為 <code>Micro Task Queue</code>)，另外一個是記載著 <code>Macro Task</code> (這裡我們先稱為 <code>Macro Task Queue</code>)。 在每一個事件循環，會先處理記載 <code>Micro Task</code> 的 Queue，然後當 <code>Micro Task Queue</code> 清空後，才會處理 <code>Macro Task Queue</code> 。</p>
<p>那些動作是 <code>Micro Task</code>，哪些又是 <code>Macro Task</code> 呢?</p>
<ul>
<li><code>Micro Task</code>
<ul>
<li><code>process.nextTick()</code></li>
<li><code>promise</code></li>
<li><code>Object.observe</code></li>
<li><code>MutaionObserver</code></li>
</ul>
</li>
<li><code>Macro Task</code>
<ul>
<li><code>setImmediate</code></li>
<li><code>setTimeout</code></li>
<li><code>setInterval</code></li>
</ul>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://i.imgur.com/ydKKr52.png" alt=""></p>
<h1 id="RxJS-Scheduler"><a class="header-anchor" href="#RxJS-Scheduler"> </a>RxJS Scheduler</h1>
<p>RxJS 裡面的 Scheduler 有幾種，而我們可以透過改變 scheduler 來改變執行順序。RxJS Scheduler 有以下幾種，還記得我們上面提到的 Micro 和 Macro Task 嗎? 每一個 Scheduler 也有相對應的類別</p>
<ul>
<li><code>queueScheduler</code>：<code>Sync queue</code>，將任務放到 <code>queue</code> 中，如果有設定 delay，行為跟 <code>async</code> 一樣</li>
<li><code>asapScheduler</code>： <code>Micro Task</code></li>
<li><code>asyncScheduler</code>：<code>Macro Task</code>，與 <code>setTimeout</code> 的相同。</li>
<li><code>animationFrameScheduler</code>：<code>paint event</code> ，根據每一個 frame 做觸發</li>
</ul>
<p>讓我們直接來看 code</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span>, range, interval, asapScheduler, asyncScheduler, animationFrameScheduler, queueScheduler &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observeOn, subscribeOn &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// observeOn 可以被使用多次，控制 emission</span></span><br><span class="line"><span class="title function_">range</span>(<span class="number">0</span>, <span class="number">42</span>).<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(queueScheduler));</span><br><span class="line"></span><br><span class="line"><span class="comment">// subscribeOn 只會被使用一次，控制 subscription</span></span><br><span class="line"><span class="title function_">of</span>(<span class="number">42</span>).<span class="title function_">pipe</span>(<span class="title function_">subscribeOn</span>(asapScheduler));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可用引數的方式設定 scheduler，很容易改變</span></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>, asyncScheduler)</span><br><span class="line"><span class="title function_">interval</span>(<span class="number">0</span>, animationFrameScheduler)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>scheduler 的執行順序</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span>, merge, asapScheduler, asyncScheduler, queueScheduler, animationFrameScheduler &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter, startWith, observeOn &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delay = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> async$ = <span class="title function_">of</span>(<span class="string">&#x27;async&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(asyncScheduler, delay));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asap$ = <span class="title function_">of</span>(<span class="string">&#x27;asap&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(asapScheduler, delay));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue$ = <span class="title function_">of</span>(<span class="string">&#x27;queue&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(queueScheduler, delay));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animate$ = <span class="title function_">of</span>(<span class="string">&#x27;animate&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(animationFrameScheduler, delay));</span><br><span class="line"></span><br><span class="line"><span class="title function_">merge</span>(async$, asap$, queue$, animate$)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !!x))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after subscription&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://i.imgur.com/MF9RTd7.png" alt=""></p>
<p>這次，我們將 scheduler 加上 delay 的設定，在看一次跑出來的結果</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span>, merge, asapScheduler, asyncScheduler, queueScheduler, animationFrameScheduler &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter, startWith, observeOn &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> delay = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> async$ = <span class="title function_">of</span>(<span class="string">&#x27;async&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(asyncScheduler, delay));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asap$ = <span class="title function_">of</span>(<span class="string">&#x27;asap&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(asapScheduler, delay));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue$ = <span class="title function_">of</span>(<span class="string">&#x27;queue&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(queueScheduler, delay));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animate$ = <span class="title function_">of</span>(<span class="string">&#x27;animate&#x27;</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(animationFrameScheduler, delay));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">merge</span>(async$, asap$, queue$, animate$)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !!x))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after subscription&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="https://i.imgur.com/mPk6oXs.png" alt=""></p>
<p>整個執行順序大改變，十分有趣的結果。根據結果可以推測，當加上 delay 時，全部的 scheduler 都會轉變成 <code>asyncScheduler</code>的行為模式。</p>
<p>其實從原始碼的地方可以看到，<code>AsapScheduler</code> 與 <code>QueueScheduler</code> 都是繼承 <code>AsyncScheduler</code> 來的，<code>AsapScheduler</code> 與 <code>AsyncScheduler</code> 的差異點在於 <code>flush</code> 的實作內容而已</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AsapScheduler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AsyncScheduler</span> &#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">QueueScheduler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AsyncScheduler</span> &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AsyncScheduler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Scheduler</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>而真正觸發的動作都是一樣，在下面的小結會更進一步的探討 scheduler 的執行步驟。</p>
<h1 id="Dive-In"><a class="header-anchor" href="#Dive-In"> </a>Dive In</h1>
<p>底層 scheduler 到底是怎麼運作的，scheduler 會包含 4 個元素</p>
<ul>
<li>scheduler：建立並執行 <code>action</code></li>
<li>work：一段可以被執行的程式</li>
<li>action：執行 <code>work</code>，回傳  <code>subscription</code></li>
<li>subscription：用來取消 observable</li>
</ul>
<h2 id="Work"><a class="header-anchor" href="#Work"> </a>Work</h2>
<p>一段可以被執行的程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">(state)=&gt; &#123; </span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;state:&#x27;</span>, state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Action"><a class="header-anchor" href="#Action"> </a>Action</h2>
<p>建立 Action 可透過 <code>scheduler.schedule(work, delay, state)</code> 的方式，且會根據 delay 決定執行時間，並回傳 <code>subscription</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">asyncScheduler.<span class="title function_">schedule</span>(<span class="function">(<span class="params">state</span>)=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(state), <span class="number">0</span>, <span class="number">42</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Subscription"><a class="header-anchor" href="#Subscription"> </a>Subscription</h2>
<p>Subscription 是用來取消 Observable 的物件，本身也可以加入其他的 subscription，當本身執行 <code>unsubscription</code> 時，加到本體的其他 subscription 也會執行 <code>unsubscription</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sub = <span class="keyword">new</span> <span class="title class_">Subscription</span>();</span><br><span class="line"><span class="keyword">const</span> sub1 = queueScheduler.<span class="title function_">schedule</span>(<span class="function">(<span class="params">state</span>)=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(state), <span class="number">0</span>, <span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> sub2 = queueScheduler.<span class="title function_">schedule</span>(<span class="function">(<span class="params">state</span>)=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(state), <span class="number">0</span>, <span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sub.<span class="title function_">add</span>(sub1);</span><br><span class="line">sub.<span class="title function_">add</span>(sub2);</span><br><span class="line">sub.<span class="title function_">unsubscribe</span>();</span><br></pre></td></tr></table></figure>
<h1 id="Reacp"><a class="header-anchor" href="#Reacp"> </a>Reacp</h1>
<p>為什麼要了解 scheduler，透過 scheduler 我們可以寫出很多有趣的東西。使用 work 搭配 scheduler，可以更有彈性的非同步與同步的工作整合在一起，表示並一定要使用 operators，也可以享受 RxJS 的好處</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://rxjs-dev.firebaseapp.com/api/operators/observeOn">observeOn</a></li>
<li><a href="https://rxjs-dev.firebaseapp.com/api/operators/subscribeOn">subscribeOn</a></li>
<li><a href="https://github.com/ReactiveX/rxjs/blob/6.2.2/src/internal/scheduler/AsyncScheduler.ts">AsyncScheduler.ts</a></li>
<li><a href="https://github.com/ReactiveX/rxjs/blob/6.2.2/src/internal/scheduler/AsapScheduler.ts">AsapScheduler.ts</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Service Worker Update</title>
    <url>/2018/09/07/angular-sw-update/</url>
    <content><![CDATA[<p>Angular 所提供的 <code>@angualr/pwa</code> 套件，可以讓我們快速地完成加入 service worker 並建立起 PWA 網站。但由於 service worker 會將內容暫存住，要用怎樣的方法才能讓 service worker 更新暫存內容呢?</p>
<span id="more"></span>
<p>Angular 很好心的有想到這一部份，提供了內建 API 可以使用。相關的使用方法請繼續閱讀下去</p>
<h1 id="SwUpdate"><a class="header-anchor" href="#SwUpdate"> </a>SwUpdate</h1>
<p>Angular 提供了 <code>SwUpdate</code> 的 service 可以讓我們透過程式碼的方式來更新 service 內容， <code>SwUpdate</code> 包含了四個動作</p>
<ul>
<li>
<p><code>available</code>：唯讀屬性，<code>Observable&lt;UpdateAvailableEvent&gt;</code> 型別，如果有新版本可以被更新，會發出事件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">updates: SwUpdate</span>) &#123;</span><br><span class="line">    updates.<span class="property">available</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;current version is&#x27;</span>, event.<span class="property">current</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;available version is&#x27;</span>, event.<span class="property">available</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>activated</code>：唯讀屬性，<code>Observable&lt;UpdateActivatedEvent&gt;</code> 型別，當有新版本被更新時，會發出事件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">updates: SwUpdate</span>) &#123;  </span><br><span class="line">    updates.<span class="property">activated</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;old version was&#x27;</span>, event.<span class="property">previous</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new version is&#x27;</span>, event.<span class="property">current</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>isEnabled</code>：判斷 service worker 是否有啟動</p>
</li>
<li>
<p><code>checkForUpdate()</code>：要求 service worker 檢查是否有新版本可以更新</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">updates: SwUpdate</span>) &#123;</span><br><span class="line">   <span class="title function_">interval</span>(<span class="number">6</span> * <span class="number">60</span> * <span class="number">60</span>).<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> updates.<span class="title function_">checkForUpdate</span>());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>activateUpdate()</code>：要求 service worker 進行新版本更新動作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">updates.<span class="property">available</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">promptUser</span>(event)) &#123;</span><br><span class="line">      updates.<span class="title function_">activateUpdate</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">document</span>.<span class="property">location</span>.<span class="title function_">reload</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>在文件中，有提到這一個動作可能會讓 <code>lazy-loading</code>  的模組壞掉。</p>
<blockquote>
<p>Doing this could break lazy-loading into currently running apps, especially if the lazy-loaded chunks use filenames with hashes, which change every version.</p>
</blockquote>
</li>
</ul>
<h1 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h1>
<p>此段程式碼是 <strong>Angular Taiwan 2018 活動網站</strong> 使用的程式碼，就當作此篇文章的範例程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">swUpdate</span>.<span class="property">isEnabled</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">swUpdate</span>.<span class="property">available</span>.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> snackBarRef = <span class="variable language_">this</span>.<span class="property">snackBar</span>.<span class="title function_">open</span>(</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">translate</span>.<span class="title function_">instant</span>(<span class="string">&#x27;needUpdate&#x27;</span>),</span><br><span class="line">         <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">duration</span>: <span class="number">1500</span>,</span><br><span class="line">           <span class="attr">horizontalPosition</span>: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">           <span class="attr">verticalPosition</span>: <span class="string">&#x27;top&#x27;</span></span><br><span class="line">         &#125;</span><br><span class="line">       );</span><br><span class="line">       snackBarRef.<span class="title function_">afterDismissed</span>().<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>在 <a href="https://angular.io/guide/service-worker-intro">angular.io</a> 關於 Service Workers 的內容寫得很詳細，建議大家花點時間閱讀，會對 Service Worker 有更進一步的了解</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/guide/service-worker-communications">Service worker communication</a></li>
<li><a href="https://angular.io/api/service-worker/SwUpdate">API</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Material Table API 筆記</title>
    <url>/2018/09/19/angular-material-table-hidden-api/</url>
    <content><![CDATA[<p>Angular Material Table 很好用，但是文件資訊不足是痛點。整理一些會用的到的 API 。之後可以少一點痛苦</p>
<span id="more"></span>
<p>Angular Material Table 可以操作的 selector 大概有以下這些</p>
<h1 id="matTable"><a class="header-anchor" href="#matTable"> </a>matTable</h1>
<p>預設 <code>ChangeDetection</code> 策略為 <code>onPush</code></p>
<ul>
<li>
<p>trackBy：用法與 <code>*ngFor</code> 的 trackBy 是相同的</p>
</li>
<li>
<p>dataSource：餵資料給 table，可以餵食的資料格式有三種</p>
<ul>
<li>Simple data array (each object represents one table row)
<ul>
<li>如果資料異動，可透過 <code>renderRows()</code> 的方法來處發化面更新</li>
<li>如果是 data array 的參考改變 (assign new array)，則 table 會自動更新。</li>
</ul>
</li>
<li>Stream that emits a data array each time the array changes</li>
<li><code>DataSource</code> object that implements the connect/disconnect interface.</li>
</ul>
</li>
<li>
<p><code>multiTemplateDataRows</code>：設定允許多行呈現。預設值為 <code>false</code></p>
<ul>
<li>
<p>如果設定為 false ，顯示資料的地方只能一行，但可配合 <code>matRowDef</code> 的 <code>when</code> 來決定要顯示哪一個 row 設定</p>
</li>
<li>
<p>設定為 <code>true</code> 時，可以多行顯示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">mat-table</span> [<span class="attr">dataSource</span>]=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mat-elevation-z8&quot;</span> <span class="attr">multiTemplateDataRows</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Position Column --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ng-container</span> <span class="attr">matColumnDef</span>=<span class="string">&quot;position&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">mat-header-cell</span> *<span class="attr">matHeaderCellDef</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span> No. <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">mat-cell</span> *<span class="attr">matCellDef</span>=<span class="string">&quot;let element&quot;</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span> &#123;&#123;element.position&#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Name Column --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ng-container</span> <span class="attr">matColumnDef</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">mat-header-cell</span> *<span class="attr">matHeaderCellDef</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span> Name <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">mat-cell</span> *<span class="attr">matCellDef</span>=<span class="string">&quot;let element&quot;</span>  <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span> &#123;&#123;element.name&#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Weight Column --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ng-container</span> <span class="attr">matColumnDef</span>=<span class="string">&quot;weight&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">mat-header-cell</span> *<span class="attr">matHeaderCellDef</span>&gt;</span> Weight <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">mat-cell</span> *<span class="attr">matCellDef</span>=<span class="string">&quot;let element&quot;</span>&gt;</span> &#123;&#123;element.weight&#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Symbol Column --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ng-container</span> <span class="attr">matColumnDef</span>=<span class="string">&quot;symbol&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">mat-header-cell</span> *<span class="attr">matHeaderCellDef</span>&gt;</span> Symbol <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">mat-cell</span> *<span class="attr">matCellDef</span>=<span class="string">&quot;let element&quot;</span>&gt;</span> &#123;&#123;element.symbol&#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Symbol Column --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ng-container</span> <span class="attr">matColumnDef</span>=<span class="string">&quot;tt&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">th</span> <span class="attr">mat-header-cell</span> *<span class="attr">matHeaderCellDef</span>&gt;</span> Symbol <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">td</span> <span class="attr">mat-cell</span> *<span class="attr">matCellDef</span>=<span class="string">&quot;let element&quot;</span>&gt;</span> &#123;&#123;element.symbol&#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">mat-header-row</span> *<span class="attr">matHeaderRowDef</span>=<span class="string">&quot;[&#x27;position&#x27;, &#x27;name&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">mat-header-row</span> *<span class="attr">matHeaderRowDef</span>=<span class="string">&quot;[&#x27;weight&#x27;, &#x27;symbol&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">mat-row</span> *<span class="attr">matRowDef</span>=<span class="string">&quot;let row; columns: [&#x27;position&#x27;, &#x27;name&#x27;];&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span> <span class="attr">mat-row</span> *<span class="attr">matRowDef</span>=<span class="string">&quot;let row; columns: [&#x27;weight&#x27;, &#x27;symbol&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/B5QPZyE.png" alt=""></p>
</li>
</ul>
</li>
</ul>
<h1 id="matHeaderCellDef"><a class="header-anchor" href="#matHeaderCellDef"> </a>matHeaderCellDef</h1>
<ul>
<li>
<p>繼承 <code>cdkHeaderCellDef</code></p>
</li>
<li>
<p><code>*cdkHeaderCellDef</code> 指定目前所在 element 為要顯示在  header 區塊的內容</p>
</li>
</ul>
<h1 id="matCellDef"><a class="header-anchor" href="#matCellDef"> </a>matCellDef</h1>
<ul>
<li>
<p>會根據 <code>multiTemplateDataRows</code> 決定回傳的內容</p>
<ul>
<li>
<p><code>true</code>: 回傳 <code>CdkCellOutletMultiRowContext</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">CdkCellOutletMultiRowContext</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">/** Data for the row that this cell is located within. */</span></span><br><span class="line">  $implicit?: T;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Index of the data object in the provided data array. */</span></span><br><span class="line">  dataIndex?: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Index location of the rendered row that this cell is located within. */</span></span><br><span class="line">  renderIndex?: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Length of the number of total rows. */</span></span><br><span class="line">  count?: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** True if this cell is contained in the first row. */</span></span><br><span class="line">  first?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** True if this cell is contained in the last row. */</span></span><br><span class="line">  last?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** True if this cell is contained in a row with an even-numbered index. */</span></span><br><span class="line">  even?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** True if this cell is contained in a row with an odd-numbered index. */</span></span><br><span class="line">  odd?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>false</code>:  回傳 <code>CdkCellOutletRowContext</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">CdkCellOutletRowContext</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">/** Data for the row that this cell is located within. */</span></span><br><span class="line">  $implicit?: T;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Index of the data object in the provided data array. */</span></span><br><span class="line">  index?: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Length of the number of total rows. */</span></span><br><span class="line">  count?: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** True if this cell is contained in the first row. */</span></span><br><span class="line">  first?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** True if this cell is contained in the last row. */</span></span><br><span class="line">  last?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** True if this cell is contained in a row with an even-numbered index. */</span></span><br><span class="line">  even?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** True if this cell is contained in a row with an odd-numbered index. */</span></span><br><span class="line">  odd?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="matHeaderRowDef"><a class="header-anchor" href="#matHeaderRowDef"> </a>matHeaderRowDef</h1>
<ul>
<li>繼承 <code>CdkHeaderRowDef</code></li>
<li>columns：要顯示的欄位名稱</li>
<li><code>sticky</code>:  是否要固定表頭</li>
</ul>
<h1 id="matRowDef"><a class="header-anchor" href="#matRowDef"> </a>matRowDef</h1>
<ul>
<li>
<p>繼承 <code>CdkRowDef</code></p>
</li>
<li>
<p>columns：要顯示的欄位名稱</p>
</li>
<li>
<p><code>when</code> : 設定要顯示 row 的條件</p>
<ul>
<li>
<p>如果 <code>multiTemplateDataRows</code> 為 false, <code>matRowDef</code> 只能有一個沒有設定 <code>when</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">when</span>: <span class="function">(<span class="params">index: <span class="built_in">number</span>, rowData: T</span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="matColumnDef"><a class="header-anchor" href="#matColumnDef"> </a>matColumnDef</h1>
<ul>
<li>繼承 <code>CdkColumnDef</code></li>
<li><code>name</code> : 設定欄位名稱</li>
<li><code>sticky</code> 、<code>stickyEnd</code> 可以使用，固定 column</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/angular/material2/tree/master/src/cdk/table">Angular Material CDK Table Source Code</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>Angular Material</tag>
      </tags>
  </entry>
  <entry>
    <title>[C#] Collection</title>
    <url>/2018/10/04/csharp-collection/</url>
    <content><![CDATA[<p>C# 的集合種類有很多種，每一種集合都有不同的特性，趁著在看 <code>ImmutableList</code> 將這個區塊的資訊整理一下。C# 跟及何有關的命名空間，都會放在 <code>System.Collections</code> 下</p>
<span id="more"></span>
<h1 id="集合的種類"><a class="header-anchor" href="#集合的種類"> </a>集合的種類</h1>
<h2 id="System-Collections"><a class="header-anchor" href="#System-Collections"> </a>System.Collections</h2>
<p>因為不指定型別，所以都會以 <code>Object</code> 的類型儲存，常用的類別有</p>
<table>
<thead>
<tr>
<th>類別</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ArrayList</td>
<td>會視需要動態增加大小的物件陣列。(對應 List)</td>
</tr>
<tr>
<td>Hashtable</td>
<td>根據索引鍵的雜湊程式碼，所整理的索引鍵/值組集合 (對應 Dictionary)</td>
</tr>
<tr>
<td>Queue</td>
<td>具有先進先出(FIFO)特性的清單</td>
</tr>
<tr>
<td>Stack</td>
<td>具有先進後出(LIFO)特性的清單</td>
</tr>
</tbody>
</table>
<h2 id="System-Collections-Generic"><a class="header-anchor" href="#System-Collections-Generic"> </a>System.Collections.Generic</h2>
<p>在這一個命名空間下的集合都屬泛型集合，常見的有</p>
<table>
<thead>
<tr>
<th>類別</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Dictionary&lt;TKey, TValue&gt;</code></td>
<td>KeyValue Pair 集合</td>
</tr>
<tr>
<td><code>List&lt;T&gt;</code></td>
<td>依照索引存取的物件清單，可搜尋、排序、修改</td>
</tr>
<tr>
<td><code>Queue&lt;T&gt;</code></td>
<td>具有先進先出(FIFO)特性的清單</td>
</tr>
<tr>
<td><code>SortedList&lt;TKey, TValue&gt;</code></td>
<td>根據 Key 值排序的 KeyValue 集合</td>
</tr>
<tr>
<td><code>Stack&lt;T&gt;</code></td>
<td>具有先進後出(LIFO)特性的清單</td>
</tr>
</tbody>
</table>
<h2 id="System-Collections-Concurrent"><a class="header-anchor" href="#System-Collections-Concurrent"> </a>System.Collections.Concurrent</h2>
<p>針對多執行緒情境所設計的集合，包含 <code>BlockingCollection&lt;T&gt;</code> 、<code>ConcurrentDictionary&lt;TKey, TValue&gt;</code> 、<code>ConcurrentQueue&lt;T&gt;</code> 和 <code>ConcurrentStack&lt;T&gt;</code></p>
<h2 id="System-Collections-Immutable"><a class="header-anchor" href="#System-Collections-Immutable"> </a>System.Collections.Immutable</h2>
<blockquote>
<p>涉及多個執行緒時，要控制好可變狀態會是個挑戰。 一般作法是利用可在不同執行緒之間自由傳遞的不可變狀態。 不可變的集合不同於唯讀集合，因為集合的提供者或消費者無法變更不可變的集合，這點和唯讀集合並不相同。 例如，如果您要列舉唯讀集合，該集合有可能會在其他執行緒上變更，而導致資料損毀。 如果您是使用不可變的集合，就不會發生這種情形。</p>
</blockquote>
<p>根據 MSDN 的說明，使用不可變的集合有以下的優點</p>
<ul>
<li>安心共用集合，消費者可以確保集合永遠不會變更。</li>
<li>在多執行緒應用程式中提供隱含的執行緒安全性 (不需要鎖定，即可存取集合)。</li>
<li>依照函式程式設計作法進行。</li>
<li>在列舉期間修改集合，並可確保原始集合不會變更。</li>
</ul>
<p>一樣有上述的 <code>List</code>、<code>Dictionary</code>、<code>HashSet</code> 等集合，只是變成 <code>ImmutableList&lt;T&gt;</code>、<code>ImmutableDictionary&lt;TKey, TValue&gt;</code>、<code>ImmutableHashSet&lt;T&gt;</code>。</p>
<h1 id="各集合的詳細說明"><a class="header-anchor" href="#各集合的詳細說明"> </a>各集合的詳細說明</h1>
<h2 id="ArrayList"><a class="header-anchor" href="#ArrayList"> </a>ArrayList</h2>
<p>透過新增、移除，可以動態改變陣列大小。實作 <code>IList</code> 界面</p>
<p>範例程式碼</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// Creates and initializes a new ArrayList.</span></span><br><span class="line">ArrayList myAL = <span class="keyword">new</span> ArrayList();</span><br><span class="line">myAL.Add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">myAL.Add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">myAL.Add(<span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>關於 <code>ArrayList</code>，有些事情是需要知道的</p>
<ul>
<li>
<p>設計用來保存物件的異質集合，不保證最佳效能，官方建議使用 <code>List&lt;Object&gt;</code></p>
<ul>
<li>效能討論，可參閱 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.list-1?view=netframework-4.7.2">List<T></a> 主題</li>
</ul>
</li>
<li>
<p>不保證排序，需透過 <code>Sort</code> 的方式來進行排序，如果要確保順序，使用 <code>SortedSet&lt;T&gt;</code> 類別</p>
</li>
<li>
<p>由於是動態產生，所以每一次增加 <code>ArrayList</code> 數量都會重新配置(指增不減)，為了減少使用空間，使用 <code>TrimToSize</code> 或是明確指定陣列大小，可以解決空間浪費的問題</p>
</li>
<li>
<p>可透過整數索引取值，從 <code>0</code> 開始</p>
</li>
<li>
<p>接受 <code>null</code> 並可以重複</p>
</li>
<li>
<p>不支援多維</p>
</li>
<li>
<p>需透過 <code>Cast&lt;T&gt;</code> 才可以使用 Linq</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myAL.Cast&lt;string&gt;().FirstOrDefault(x =&gt; x == &quot;!&quot;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Hashtable"><a class="header-anchor" href="#Hashtable"> </a>Hashtable</h2>
<p>根據索引鍵的雜湊程式碼，所整理的索引鍵/值組集合</p>
<p>範例程式</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Hashtable openWith = <span class="keyword">new</span> Hashtable();</span><br><span class="line">openWith.Add(<span class="string">&quot;txt&quot;</span>, <span class="string">&quot;notepad.exe&quot;</span>);</span><br><span class="line">openWith.Add(<span class="string">&quot;bmp&quot;</span>, <span class="string">&quot;paint.exe&quot;</span>);</span><br><span class="line">openWith.Add(<span class="string">&quot;dib&quot;</span>, <span class="string">&quot;paint.exe&quot;</span>);</span><br><span class="line">openWith.Add(<span class="string">&quot;rtf&quot;</span>, <span class="string">&quot;wordpad.exe&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>關於 <code>Hashtbale</code>，有些事情是需要知道的</p>
<ul>
<li>
<p>Key 不能是 <code>null</code></p>
</li>
<li>
<p>Key 值物件必須是不可變的</p>
</li>
<li>
<p><code>foreach</code> 取的值是 <code>DictionaryEntry</code> 型別，只允許讀取 (read only)</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(DictionaryEntry de <span class="keyword">in</span> myHashtable)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Queue"><a class="header-anchor" href="#Queue"> </a>Queue</h2>
<p>先進先出 (FIFO) 集合</p>
<p>範例程式</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Queue myQ = <span class="keyword">new</span> Queue();</span><br><span class="line">myQ.Enqueue(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">myQ.Enqueue(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">myQ.Enqueue(<span class="string">&quot;!&quot;</span>);</span><br><span class="line"></span><br><span class="line">WriteLine(myQ.Peek()); <span class="comment">// Hello</span></span><br><span class="line">myQ.Dequeue(); <span class="comment">// 移除 Hello</span></span><br><span class="line">WriteLine(myQ.Peek()); <span class="comment">// World</span></span><br><span class="line">myQ.Dequeue(); <span class="comment">// 移除 World</span></span><br><span class="line">WriteLine(myQ.Peek()); <span class="comment">// !</span></span><br><span class="line">myQ.Dequeue(); <span class="comment">// 移除 !</span></span><br><span class="line">WriteLine(myQ.Peek()); <span class="comment">// 出現錯誤，因為 Queue 已經是 Empty 了</span></span><br></pre></td></tr></table></figure>
<p>關於 <code>Queue</code>，有些事情是需要知道的</p>
<ul>
<li>三個主要作業
<ul>
<li><code>Enqueue</code> : 新增至結尾</li>
<li><code>Dequeue</code>: 移除最舊的項目</li>
<li><code>Peek</code>: 傳回最舊的項目</li>
</ul>
</li>
<li>可透過 <code>TrimToSize</code> 來節省沒在使用的配置空間</li>
<li>允許 <code>null</code> 並允許重複項目</li>
</ul>
<h2 id="Stack"><a class="header-anchor" href="#Stack"> </a>Stack</h2>
<p>後進先出 (LIFO) 非泛型集合</p>
<p>範例程式</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Creates and initializes a new Stack.</span></span><br><span class="line">Stack myStack = <span class="keyword">new</span> Stack();</span><br><span class="line">myStack.Push(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">myStack.Push(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">myStack.Push(<span class="string">&quot;!&quot;</span>);</span><br><span class="line"></span><br><span class="line">WriteLine(myStack.Count); <span class="comment">// 3</span></span><br><span class="line">WriteLine(myStack.Pop()); <span class="comment">// !</span></span><br><span class="line">WriteLine(myStack.Count); <span class="comment">// 2</span></span><br><span class="line">WriteLine(myStack.Peek());<span class="comment">// World</span></span><br><span class="line">WriteLine(myStack.Count); <span class="comment">// 2</span></span><br><span class="line">WriteLine(myStack.Pop()); <span class="comment">// World</span></span><br><span class="line">WriteLine(myStack.Count); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>關於 <code>Stack</code>，有些事情是需要知道的</p>
<ul>
<li>三個主要作業
<ul>
<li><code>Push</code> : 將物件插入 <code>Stack</code> 的頂端。</li>
<li><code>Pop</code>: 移除並傳回在  <code>Stack</code>  頂端的物件</li>
<li><code>Peek</code>: 傳回  <code>Stack</code>  頂端的物件而不需移除它</li>
</ul>
</li>
</ul>
<h1 id="List-T-的延伸"><a class="header-anchor" href="#List-T-的延伸"> </a>List&lt;<code>T</code>&gt;的延伸</h1>
<p>List<T> 可以透過方法來轉換成不同的集合類型，而其中的 <code>ReadOnlyCollection</code> 與 <code>ImmutableList</code> 我比較想拿出來比較</p>
<p>這兩著在本質上還是有差異的，範例程式</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> readonlyList = list.AsReadOnly();</span><br><span class="line"><span class="keyword">var</span> immutableList = list.ToImmutableList();</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">&quot;List Count: &quot;</span> + list.Count); <span class="comment">// 2</span></span><br><span class="line">WriteLine(<span class="string">&quot;ReadonlyList Count: &quot;</span> + readonlyList.Count); <span class="comment">// 2</span></span><br><span class="line">WriteLine(<span class="string">&quot;ImmutableList Count: &quot;</span> + immutableList.Count); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">list.Add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">&quot;List Count: &quot;</span> + list.Count); <span class="comment">// 3</span></span><br><span class="line">WriteLine(<span class="string">&quot;ReadonlyList Count: &quot;</span> + readonlyList.Count); <span class="comment">// 3</span></span><br><span class="line">WriteLine(<span class="string">&quot;ImmutableList Count: &quot;</span> + immutableList.Count); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">immutableList = immutableList.Add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">WriteLine(<span class="string">&quot;List Count: &quot;</span> + list.Count); <span class="comment">// 3</span></span><br><span class="line">WriteLine(<span class="string">&quot;ReadonlyList Count: &quot;</span> + readonlyList.Count); <span class="comment">// 3</span></span><br><span class="line">WriteLine(<span class="string">&quot;ImmutableList Count: &quot;</span> + immutableList.Count); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>根據上面的執行結果，我們可以得知，一但轉換成 <code>ImmutableList</code> 時，就與原本的 List 是脫離關係的，不論原本的集合做怎樣的變更，<code>ImmutableList</code> 都不會改變。但 <code>ReadonlyCollection</code> 卻不是這樣，<code>ReadonlyCollection</code> 會跟 <code>List</code> 一起連動。只是他不能被修改而已。</p>
<p>那什麼時候要用 <code>ReadonlyCollection</code> 什麼時候要用 <code>ImmutableList</code> ? 其實可以看 <code>ImmutableList</code> 的是用情境，就大概知道哪些狀況下要使用 <code>ImmutableList</code>了</p>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>C# 內的集合類別很多種，也有針對不同的情境設計實作集合類別，有空的時候，是可以花點時間讀一下官方文件，並熟悉 LINQ 的操作，LINQ 對於集合的操作能力可是很厲害的，可以用少少的程式碼完成很多工作，而且閱讀性也不會太差。</p>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Akita 第一次接觸</title>
    <url>/2018/10/14/angular-akita-first-impression/</url>
    <content><![CDATA[<p>沒錯，又是另外一套 Angular 狀態管理的工具，這一套 Akita 根據介紹，是融合 Flux + Redux + RxJS 以 OOP 的方式呈現。有別於其他 Redux 風格的狀態管理，是以 FP 的方式完成，就來嘗鮮看看，多一種選擇也不錯</p>
<span id="more"></span>
<h1 id="介紹"><a class="header-anchor" href="#介紹"> </a>介紹</h1>
<p>什麼是 Akita，Akita 是結合多家的精神，以物件導向的方格完成的狀態管理工具，減少產稱不必要的程式碼，讓習慣物件導向開發模式的人，也可以享受 Flux 風格的狀態管理方式</p>
<p><img src="https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LDIcOEJiLYk8yWho34E%2F-LEFMbbD5BNkHxecdUde%2F-LEFMe1nMjDF-0kBdGY5%2Fakita-arc.jpg?alt=media&amp;token=4f72cec7-063d-46f2-b231-48d475235744" alt=""></p>
<h1 id="安裝-Akita"><a class="header-anchor" href="#安裝-Akita"> </a>安裝 Akita</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @datorama/akita</span><br><span class="line"></span><br><span class="line">或是</span><br><span class="line"></span><br><span class="line">npm install @datorama/akita</span><br></pre></td></tr></table></figure>
<h1 id="基本元素"><a class="header-anchor" href="#基本元素"> </a>基本元素</h1>
<p>(以下範例皆來自官方文件)</p>
<h2 id="Model"><a class="header-anchor" href="#Model"> </a>Model</h2>
<p>Model 是用來描述 Store 內資料存放的結構。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">ID</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@datorama/akita&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Session</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="variable constant_">ID</span>;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">lastName</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">token</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createSession</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  id = <span class="literal">null</span>, firstName = <span class="string">&#x27;&#x27;</span>, lastName = <span class="string">&#x27;&#x27;</span>, token = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="params">&#125;: Partial&lt;Session&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    id,</span><br><span class="line">    firstName,</span><br><span class="line">    lastName,</span><br><span class="line">    token</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>官方建議新增 <code>type</code> 和 <code>factory function</code> ，讓其負責 store 初始值的建立</p>
<h2 id="Store"><a class="header-anchor" href="#Store"> </a>Store</h2>
<p><code>Store</code> 是一個用來記載狀態的一個物件，建立一個 <code>store</code> 物件繼承 <code>Akita Sotre</code> 並傳入型別(Model) 被給予初始值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Store</span>, <span class="title class_">StoreConfig</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@datorama/akita&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Session</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./session.model&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SessionState</span> &#123;</span><br><span class="line">   <span class="attr">token</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createInitialState</span>(<span class="params"></span>): <span class="title class_">SessionState</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@StoreConfig</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;session&#x27;</span> &#125;) <span class="comment">// 在 store 要存放的名字</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SessionStore</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Store</span>&lt;<span class="title class_">SessionState</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="title function_">createInitialState</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當建立 <code>store</code> 後，當在 <code>service</code> 使用時，可以透過 <code>setState</code> 的方式來更新 store 內的狀態</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setState</span>(<span class="attr">newStateFn</span>: <span class="function">(<span class="params">state: Readonly&lt;S&gt;</span>) =&gt;</span> S)</span><br></pre></td></tr></table></figure>
<p>使用範例:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SessionStore</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./session.store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SessionDataService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./session-data.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SessionService</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> sessionStore: SessionStore, </span></span><br><span class="line"><span class="params">              <span class="keyword">private</span> sessionDataService: SessionDataService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">login</span>(<span class="params">creds</span>) &#123;</span><br><span class="line">    	<span class="variable language_">this</span>.<span class="property">sessionDataService</span>.<span class="title function_">login</span>(creds).<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      	<span class="variable language_">this</span>.<span class="property">sessionStore</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">	        <span class="keyword">return</span> &#123;</span><br><span class="line">    	       ...state,</span><br><span class="line">        	   ...<span class="title function_">createSession</span>(user)</span><br><span class="line">        	&#125;</span><br><span class="line">      	&#125;);</span><br><span class="line">    	&#125;);</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>setState</code> 的做法比較像是 redux 風格的 reducer，而 Akita 有提供另外一種方法可以快速地更新 Store 的值，</p>
<p>可透過 <code>update</code> 的方法來完成，<code>update(newState: Partial&lt;S&gt;)</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SessionStore</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./session.store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SessionDataService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./session-data.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SessionService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> sessionStore: SessionStore, </span></span><br><span class="line"><span class="params">              <span class="keyword">private</span> sessionDataService: SessionDataService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">login</span>(<span class="params">creds</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sessionDataService</span>.<span class="title function_">login</span>(creds).<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sessionStore</span>.<span class="title function_">update</span>(<span class="title function_">createSession</span>(user));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>update</code> 也可以接受 callback 方法。(詳情請閱讀官方文件)</p>
<p>也有其他的方法可以使用</p>
<ul>
<li><code>setLoading(isLoading: boolean)</code> : 設定 store 的讀取狀態</li>
<li><code>setError(error: any)</code> 設定 store 的錯誤狀態</li>
</ul>
<h2 id="Service"><a class="header-anchor" href="#Service"> </a>Service</h2>
<p>Service 內的使用與一般在寫 Service 是一樣的，只是要將 store class 注入到 service 內使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SessionStore</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./session.store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SessionDataService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./session-data.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SessionService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> sessionStore: SessionStore</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">login</span>(<span class="params">creds</span>) &#123;</span><br><span class="line">    http.<span class="title function_">login</span>(creds).<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sessionStore</span>.<span class="title function_">update</span>(<span class="title function_">createSession</span>(user));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Query"><a class="header-anchor" href="#Query"> </a>Query</h2>
<p>Akita 的 Query 的地位，等同於 <code>ngrx</code> 的 selector，是用來撈取 Store 使用，回傳的型別為 <code>Observable</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Query</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@datorama/akita&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SessionQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Query</span>&lt;<span class="title class_">Session</span>&gt; &#123;</span><br><span class="line">  isLoggedIn$ = <span class="variable language_">this</span>.<span class="title function_">select</span>(<span class="function"><span class="params">session</span> =&gt;</span> !!session.<span class="property">token</span>);</span><br><span class="line">   </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">protected</span> store: SessionStore</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(store);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當繼承 <code>Query&lt;T&gt;</code> 時，會擁有 <code>select&lt;R&gt;(project?: (store: S) =&gt; R): Observable&lt;R&gt;</code> 的方法可以使用，雖然在 component 可透過 <code>select</code> 的方式讀取 <code>store</code> 的狀態，但一般建議是寫在 Query Class 內部，以方便重複使用</p>
<ul>
<li>
<p><code>select()</code> 方法回傳的 Observable 是會執行 <code>distinctUntilChanged()</code> 的，這表示該 <code>select</code> 只會當有資料異動時才會被觸發</p>
</li>
<li>
<p><code>selectOnce()</code> 行為類似於 <code>select()</code> ，但只會被觸發一次</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">query</span>.<span class="title function_">selectOnce</span>(<span class="function"><span class="params">state</span>=&gt;</span> state.<span class="property">key</span>);	</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>getSnapshot()</code> 回傳 store 的 <em>raw</em> value</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">query</span>.<span class="title function_">getSnapshot</span>();</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>selectLoading()</code> : 取得 store 的 loading 狀態</p>
</li>
<li>
<p><code>selectError()</code> 取得 store 的錯誤狀態</p>
</li>
</ul>
<h1 id="感想"><a class="header-anchor" href="#感想"> </a>感想</h1>
<p>雖然少了許多不必要的程式碼跟流程，但操作的複雜度似乎需要多花點時間研究，主要是 API 部分需要熟悉，這動作能不能自己刻，這當然是可以的，但透過學習其他的狀態管理工具並了解其背後的設計原理，也是有很大的幫助的。</p>
<p>單純就基本結構元素來看，Akita 所提供的 <code>store</code> 是比較關鍵的功能，其他的操作應該是大同小異。初步看來，真正的應用應該會是在 <code>Entity</code> 的地方，如何上用 <code>Entity</code> 來管理複雜的狀態會是需要思考的部分。</p>
<p>至於實際上怎麼使用，可以先參考<a href="https://engineering.datorama.com/building-a-shopping-cart-in-angular-using-akita-c41f6a6f7255">這篇文章</a>，先抓個感覺</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://netbasal.gitbook.io/akita/">官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Component Host Style</title>
    <url>/2018/10/14/angular-host-style/</url>
    <content><![CDATA[<p>Angular 內有提供針對 Component 本體樣式描述的特別語法，分別是 <code>:host</code> 與 <code>:host-context</code> 這兩者使用，可以讓 Component 的樣式更模組化。而這篇文章就針對這兩者的用法做說明</p>
<span id="more"></span>
<h1 id="host"><a class="header-anchor" href="#host"> </a>:host</h1>
<p><code>:host</code> 可用來描述本體 component 的樣式呈現方式，例如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:host</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣就可以針對 <code>Component</code> 本身做樣式設定</p>
<p><img src="https://i.imgur.com/5AWX7Fv.png" alt=""></p>
<p>如果想要透過外部做額外的樣式複寫，這時候可以搭配 <code>:host(selector)</code> 的方式做設定</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:host</span>(<span class="selector-class">.active</span>)&#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>外部 html 的部分，當加上 <code>class=&quot;active&quot;</code> 時，就會套用此樣式規則</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-counter</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-counter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/OzWjUMT.png" alt=""></p>
<h1 id="host-context"><a class="header-anchor" href="#host-context"> </a>:host-context</h1>
<p>進一步來看，如果想要依更外層的 <code>class</code> 來做判斷呢? 這時候可以使用 <code>:host-context(selector)</code> 的方式做設定</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:host</span>-context(<span class="selector-class">.theme-light</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;theme-light&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">app-counter</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/Du1T9Ah.png" alt=""></p>
<h1 id="套用順序"><a class="header-anchor" href="#套用順序"> </a>套用順序</h1>
<p><code>:host</code> 與 <code>:host-context</code> 的樣式會依 css 優先權規則套用。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://stackblitz.com/edit/angular-host-style?file=src%2Fapp%2Fcounter%2Fcounter.component.css">範例程式</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 與 O365 跳舞系列 - 登入</title>
    <url>/2018/10/20/angular-with-o365-1/</url>
    <content><![CDATA[<p>身為微軟 MVP，沒將 Angular 與 O365 做整合，好像說不過去。Microsoft O365 系列，其生態系其實算是很完整了，也提供了相當不錯的 API 供開發者做延伸應用。基於這個理由，我也決定要來玩看看 O365 了。但在開始之前，要先搞定登入 MS 帳號並取得通行 Token。所以這篇筆記就是記錄如何登入並取得 Token.</p>
<span id="more"></span>
<h1 id="環境準備"><a class="header-anchor" href="#環境準備"> </a>環境準備</h1>
<p>在開發之前，需要先到微軟的 <a href="https://apps.dev.microsoft.com/">Application Registration Portal</a> 新增應用程式並取得應用程式識別碼。操作步驟如下</p>
<p>(2019/7/26) 目前註冊應用程式的方法</p>
<ol>
<li>
<p>登入 Azure portal</p>
</li>
<li>
<p>前往 Azure Active Directory</p>
<p><img src="SNAGHTML4f488482.PNG" alt="img"></p>
<ol start="3">
<li>
<p>點選【應用程式註冊】</p>
<p><img src="1564108231023.png" alt="1564108231023"></p>
</li>
<li>
<p>依自己的需求選擇註冊位置</p>
<p><img src="1564108300903.png" alt="1564108300903"></p>
</li>
<li>
<p>註冊要新增的內容與舊有的註冊流程類似，可以參閱下面的填寫內容</p>
</li>
</ol>
</li>
</ol>
<p>(以下步驟失效)</p>
<ol>
<li>
<p>登入 MS 帳號</p>
<p><img src="https://i.imgur.com/sw5KaeL.png" alt=""></p>
</li>
<li>
<p>按 【新增應用程式】</p>
<p><img src="https://i.imgur.com/U9SE5dj.png" alt=""></p>
</li>
<li>
<p>輸入應用程式名稱</p>
<p><img src="https://i.imgur.com/wC6LQvY.png" alt=""></p>
<ol start="4">
<li>
<p>新增【平台】</p>
<p><img src="https://i.imgur.com/YnaO3DX.png" alt=""></p>
<ol start="5">
<li>
<p>選擇 <strong>Web</strong></p>
<p><img src="https://i.imgur.com/JtsayFx.png" alt=""></p>
</li>
<li>
<p>設定【重新導向 URL】，這裡必須設定正確，不然會出現無法操作的錯誤畫面。因為我們會使用 Angular 做開發，預設的網址是 <code>http://localhost:4200</code> 。</p>
<p><img src="https://i.imgur.com/K7dKP1E.png" alt=""></p>
</li>
<li>
<p>將應用程式識別碼先記錄起來，待會會用到</p>
<p><img src="https://i.imgur.com/tTs1Gp1.png" alt=""></p>
</li>
<li>
<p>最後，按下【儲存】即完成第一步的設定</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="Angular-部分"><a class="header-anchor" href="#Angular-部分"> </a>Angular 部分</h1>
<p>完成了新增應用程式並取得應用程式識別碼後，就可以開始來寫 Angular 的部分了。這次會使用到 <code>msal</code> 這個套件 (<a href="https://www.npmjs.com/package/msal">npm套件位置</a>)</p>
<blockquote>
<p>The MSAL library preview for JavaScript is the core library which enables JavaScript web applications to authenticate enterprise users using Microsoft Azure Active Directory (AAD), Microsoft account users (MSA), users using social identity providers like Facebook, Google, LinkedIn etc. and get access to <a href="https://cloud.microsoft.com/">Microsoft Cloud</a> OR <a href="https://graph.microsoft.io/">Microsoft Graph</a>.</p>
</blockquote>
<h2 id="基本環境設定"><a class="header-anchor" href="#基本環境設定"> </a>基本環境設定</h2>
<ol>
<li>
<p>建立 Angular 專案</p>
<p><code>ng new &lt;project name&gt;</code></p>
</li>
<li>
<p>安裝 <code>msal</code> 套件</p>
<p><code>npm install msal</code></p>
</li>
<li>
<p>新增一個 <code>service</code> ，等一下會將登入的相關邏輯寫在這個 service 內，名稱自取</p>
</li>
<li>
<p>在 <code>environment.ts</code> 內新增一個 <code>APPLICATION_CONFIG</code> ，內放要給 msal 使用的設定檔</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">APPLICATION_CONFIG</span>: &#123;</span><br><span class="line">   <span class="attr">clientID</span>: <span class="string">&#x27;放剛剛記下來的應用程式識別碼&#x27;</span>,</span><br><span class="line">   <span class="attr">redirectUri</span>: <span class="string">&#x27;http://localhost:4200/&#x27;</span>,</span><br><span class="line">   <span class="attr">interactionMode</span>: <span class="string">&#x27;popUp&#x27;</span>,</span><br><span class="line">   <span class="attr">graphEndpoint</span>: <span class="string">&#x27;https://graph.microsoft.com/v1.0/me&#x27;</span>,</span><br><span class="line">   <span class="attr">graphScopes</span>: [<span class="string">&#x27;user.read&#x27;</span>]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>clientID: 應用程式識別碼</li>
<li>graphScopes: 設定此應用程式需要與使用者請求的授權範圍</li>
</ul>
</li>
</ol>
<h2 id="使用者登入"><a class="header-anchor" href="#使用者登入"> </a>使用者登入</h2>
<h3 id="service"><a class="header-anchor" href="#service"> </a>service</h3>
<ol>
<li>
<p>建立 <code>Msal.UserAgentApplication</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;../environments/environment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Msal</span> <span class="keyword">from</span> <span class="string">&#x27;msal&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">GraphHelperService</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="variable constant_">APPLICATION_CONFIG</span> = environment.<span class="property">APPLICATION_CONFIG</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">clientApplication</span>: <span class="title class_">Msal</span>.<span class="property">UserAgentApplication</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> http: HttpClient</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clientApplication</span> = <span class="variable language_">this</span>.<span class="title function_">createApplication</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clientApplication</span>.<span class="title function_">handleRedirectCallback</span>(<span class="function">(<span class="params">error, response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// handle redirect response or error</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">createApplication</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> msalConfig = &#123;</span><br><span class="line">      <span class="attr">auth</span>: &#123;</span><br><span class="line">        <span class="attr">clientId</span>: <span class="variable language_">this</span>.<span class="property">APPLICATION_CONFIG</span>.<span class="property">clientID</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Msal</span>.<span class="title class_">UserAgentApplication</span>(msalConfig);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立 <code>login()</code> 方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">acquireTokenSilent</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">      <span class="title function_">from</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">clientApplication</span>.<span class="title function_">acquireTokenSilent</span>(&#123;</span><br><span class="line">            <span class="attr">scopes</span>: <span class="variable language_">this</span>.<span class="property">APPLICATION_CONFIG</span>.<span class="property">graphScopes</span></span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">acquireTokenPopup</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">      <span class="title function_">from</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">clientApplication</span>.<span class="title function_">acquireTokenPopup</span>(&#123;</span><br><span class="line">            <span class="attr">scopes</span>: <span class="variable language_">this</span>.<span class="property">APPLICATION_CONFIG</span>.<span class="property">graphScopes</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ).<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">catchError</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;Error acquiring the popup:\n&#x27;</span> + error);</span><br><span class="line">          <span class="keyword">return</span> <span class="variable constant_">EMPTY</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="title function_">from</span>(<span class="variable language_">this</span>.<span class="property">clientApplication</span>.<span class="title function_">loginPopup</span>(&#123;<span class="attr">scopes</span>:<span class="variable language_">this</span>.<span class="property">APPLICATION_CONFIG</span>.<span class="property">graphScopes</span>&#125;))</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">mergeMap</span>(<span class="function"><span class="params">token</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">acquireTokenSilent</span>().<span class="title function_">pipe</span>(</span><br><span class="line">            <span class="title function_">catchError</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">acquireTokenPopup</span>())</span><br><span class="line">          );</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">subscribe</span>(</span><br><span class="line">        <span class="function"><span class="params">accessToken</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">localStorage</span>.<span class="property">token</span> = accessToken;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;Error during login:\n&#x27;</span> + error);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>loginPopup</code> 會開啟一個邀情登入微軟帳號的畫面，輸入完帳號密碼時，會進入下一個步驟</li>
<li><code>acquireTokenSilent</code> : 取得 <code>accessToken</code></li>
<li>再將取到的 <code>accessToken</code> 存入到 <code>localStorage</code> 內</li>
<li>將整個畫面重整 (<strong>這個動作可以替換成更合適的行為</strong>)</li>
</ul>
</li>
<li>
<p>建立 <code>logout()</code> 方法，這個比較簡單</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">clientApplication</span>.<span class="title function_">logout</span>();</span><br><span class="line">  <span class="keyword">delete</span> <span class="variable language_">localStorage</span>.<span class="property">token</span>;</span><br><span class="line">  <span class="keyword">delete</span> <span class="variable language_">localStorage</span>.<span class="property">user</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>直接呼叫 logout() 方法</li>
<li>刪除儲存在 <code>localStorage</code> 內的相關資訊</li>
</ul>
</li>
</ol>
<h3 id="component"><a class="header-anchor" href="#component"> </a>component</h3>
<p>當 Service 建立完成後，我們就可以在 Component 的地方使用該 service 做使用者登入的動作了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> graphHelper: GraphHelperService</span>) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">graphHelper</span>.<span class="title function_">login</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">graphHelper</span>.<span class="title function_">logout</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="取得使用者資訊"><a class="header-anchor" href="#取得使用者資訊"> </a>取得使用者資訊</h2>
<p>當成功登入後，我們就可以利用取得的 <code>accessToken</code> 來使用 MS Graph，什麼是 MS Graph ？MS Graph 是一個可以使用 Microsoft 365 服務的 API，透過這個 API 可以存取使用 O365 的服務內容，例如信件、行事曆、OneDrive 等。</p>
<p>這篇筆記，先來做個基本資料的取得，如帳號的顯示名稱跟 Email</p>
<h3 id="service-v2"><a class="header-anchor" href="#service-v2"> </a>service</h3>
<p>可以透過呼叫 <code>https://graph.microsoft.com/v1.0/me</code> 來取得登入帳號的基本資訊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">me</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> header = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">append</span>(</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>,</span><br><span class="line">      <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">localStorage</span>.token&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;https://graph.microsoft.com/v1.0/me&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">headers</span>: header</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="component-v2"><a class="header-anchor" href="#component-v2"> </a>component</h3>
<p>呼叫 service 的 <code>me()</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">graphHelper</span>.<span class="title function_">me</span>().<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;user&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">displayName</span> = user.<span class="property">displayName</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emailAddress</span> = user.<span class="property">mail</span> || user.<span class="property">userPrincipalName</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果想要進一步知道取回來使用者資料有哪些項目，可以使用 <code>console.log</code> 的方法觀看</p>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p>當正常登入後，就可以使用 Graph REST API 了。O365 的服務種類很多，可以透過延伸服務創造出另外一種的應用程式。但相關的開發文件又不多，所以在多次撞牆後，還是覺得將過程記錄起來，方便其他有興趣的人可以少走一些路。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://www.npmjs.com/package/msal">npm-msal</a></li>
<li><a href="https://developer.microsoft.com/en-us/graph/docs/concepts/v1-overview">Graph REST API v1.0 reference</a></li>
<li><a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/users">Users API</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
        <category>O365</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>O365</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 與 O365 跳舞系列 - MAIL</title>
    <url>/2018/10/20/angular-with-o365-2/</url>
    <content><![CDATA[<p>一旦登入成功後，接下來的工作就比較簡單了，因為查詢的 endpoint 都是一樣的，所以只需要在意後面所傳項目的變化即可，而這篇筆記包含了取得信件資料夾，信件清單，寄信等動作</p>
<span id="more"></span>
<h1 id="取得郵件資料夾"><a class="header-anchor" href="#取得郵件資料夾"> </a>取得郵件資料夾</h1>
<p><strong>權限需求</strong>：需要 <code>Mail.Read</code></p>
<p><strong>呼叫URL</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /me/mailFolders</span><br><span class="line">GET /users/&#123;&#123;id | userPrincipalName&#125;&#125;/mailFolders</span><br></pre></td></tr></table></figure>
<p><strong>回傳資料結構</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;displayName-value&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentFolderId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parentFolderId-value&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;childFolderCount&quot;</span><span class="punctuation">:</span> <span class="number">99</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;unreadItemCount&quot;</span><span class="punctuation">:</span> <span class="number">99</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;totalItemCount&quot;</span><span class="punctuation">:</span> <span class="number">99</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id-value&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>id 是查詢該資料夾下信件時所需要的資訊</li>
</ul>
<h1 id="取得郵件列表"><a class="header-anchor" href="#取得郵件列表"> </a>取得郵件列表</h1>
<p><strong>權限需求</strong>：需要 <code>Mail.Read</code></p>
<p><strong>呼叫URL</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /me/mailFolders/&#123;id&#125;/messages</span><br><span class="line">GET /users/&#123;userId | userPrincipalName&#125;/mailFolders/&#123;id&#125;/messages</span><br></pre></td></tr></table></figure>
<ul>
<li>id 為資料夾 ID</li>
</ul>
<p><strong>回傳資料結構</strong></p>
<p>回傳為 <a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/message">Message</a> 的資料集</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;bccRecipients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.recipient&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.itemBody&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bodyPreview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;string&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ccRecipients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.recipient&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;changeKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;conversationId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;createdDateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String (timestamp)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.followupFlag&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.recipient&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;hasAttachments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string (identifier)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;importance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;inferenceClassification&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;internetMessageHeaders&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.internetMessageHeader&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;internetMessageId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isDeliveryReceiptRequested&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isDraft&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isRead&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isReadReceiptRequested&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lastModifiedDateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String (timestamp)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parentFolderId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;receivedDateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String (timestamp)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;replyTo&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.recipient&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.recipient&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sentDateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String (timestamp)&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;subject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;toRecipients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.recipient&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;uniqueBody&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.itemBody&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;webLink&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">&quot;attachments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.attachment&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.extension&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;multiValueExtendedProperties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.multiValueLegacyExtendedProperty&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singleValueExtendedProperties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;@odata.type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;microsoft.graph.singleValueLegacyExtendedProperty&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="上下頁"><a class="header-anchor" href="#上下頁"> </a>上下頁</h2>
<p>由於每次取回來的資料只有 10 筆(預設值)，所以必須透過 <code>skip</code> 的方式來取得之後頁數的信件清單</p>
<p><strong>呼叫URL</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /me/mailFolders/&#123;id&#125;/messages?$skip=&lt;number&gt;</span><br><span class="line">GET /users/&#123;userId | userPrincipalName&#125;/mailFolders/&#123;id&#125;/messages?$skip=&lt;number&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>id 為資料夾 ID</li>
<li>number：以 10 為單位</li>
</ul>
<p>這是我寫的範例程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">mailQuery$ = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>&lt;&#123; <span class="attr">mailFolderId</span>: <span class="built_in">string</span>; <span class="attr">skip</span>: <span class="built_in">number</span> &#125;&gt;(&#123;</span><br><span class="line">    <span class="attr">mailFolderId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">skip</span>: <span class="number">0</span></span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">mails$ = <span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">filter</span>(<span class="function">(<span class="params">&#123; mailFolderId, skip &#125;</span>) =&gt;</span> !!mailFolderId),</span><br><span class="line">    <span class="title function_">switchMap</span>(<span class="function">(<span class="params">&#123; mailFolderId, skip &#125;</span>) =&gt;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">graphHelper</span>.<span class="title function_">query</span>(</span><br><span class="line">        <span class="string">`mailfolders/<span class="subst">$&#123;mailFolderId&#125;</span>/messages?$skip=<span class="subst">$&#123;skip&#125;</span>`</span></span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">    <span class="title function_">map</span>(<span class="function">(<span class="params">data: <span class="built_in">any</span></span>) =&gt;</span> data.<span class="property">value</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">getMail</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="title function_">next</span>(&#123;</span><br><span class="line">        ...<span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">mailFolderId</span>: id,</span><br><span class="line">        <span class="attr">skip</span>: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">nextPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="title function_">next</span>(&#123;</span><br><span class="line">        ...<span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">skip</span>: <span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="property">value</span>.<span class="property">skip</span> + <span class="number">10</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">prevPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="property">value</span>.<span class="property">skip</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="title function_">next</span>(&#123;</span><br><span class="line">            ...<span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="property">value</span>,</span><br><span class="line">            <span class="attr">skip</span>: <span class="variable language_">this</span>.<span class="property">mailQuery$</span>.<span class="property">value</span>.<span class="property">skip</span> - <span class="number">10</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OData"><a class="header-anchor" href="#OData"> </a>OData</h2>
<p>在上下頁功能時，我們看到有 <code>$skip</code> 的參數出現，在細看文件後，發現 Graph API 其實也有支援 OData 的查詢語法，這表示我們可以透過 OData 的查詢語法來改變 API 的回傳結果。</p>
<p>例如，我想要一次取回 25 封信件內容，因為預設是一次取 10 筆，這時就需要搭配 <code>$top</code> 的設定來改變。或是說取回來資料欄位太多，我只需要特定的幾個欄位就可以，就可以使用 <code>$select</code> 的方式來做設定，更多的資訊可以看文件 (列在參考文件中)</p>
<h1 id="寄信"><a class="header-anchor" href="#寄信"> </a>寄信</h1>
<p><strong>權限需求</strong>：需要 <code>Mail.Send</code></p>
<p><strong>呼叫URL</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /me/sendMail</span><br><span class="line">POST /users/&#123;id | userPrincipalName&#125;/sendMail</span><br></pre></td></tr></table></figure>
<p><strong>送出資料結構</strong>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;subject&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Meet for lunch?&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;contentType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> <span class="comment">// &#x27;Text&#x27; | &#x27;HTML&#x27;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The new cafeteria is open.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;toRecipients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;emailAddress&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fannyd@contoso.onmicrosoft.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ccRecipients&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;emailAddress&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;danas@contoso.onmicrosoft.com&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;saveToSentItems&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>message</code> 為 <code>Message</code> 型別</li>
<li><code>saveToSentItems</code> 設定是否要存儲至<strong>寄件備份</strong>中</li>
</ul>
<p><strong>回傳結果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 202 Accepted</span><br></pre></td></tr></table></figure>
<h1 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h1>
<p>至於其他的相關操作，基本上與上述的大同小異，大家可以自己試試看</p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/message">官方文件</a></li>
<li><a href="https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/resources/message">Message Type</a></li>
<li><a href="https://developer.microsoft.com/en-us/graph/docs/concepts/query_parameters">Use query parameters to customize responses</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
        <category>O365</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>O365</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Secondary routes</title>
    <url>/2018/10/24/angular-secondary-routes/</url>
    <content><![CDATA[<p>一般的情況下，<code>&lt;router-outlet&gt;</code> 一組就已足夠，但當畫面的複雜度提高，使用一個 <code>&lt;router-outlet&gt;</code> 可能會讓程式碼的可維護性降低，如果能在多幾組 <code>&lt;router-outlet&gt;</code> 該有多好。而 Angular 的 <code>&lt;router-outlet&gt;</code> 確實支援此功能。</p>
<span id="more"></span>
<h1 id="基本"><a class="header-anchor" href="#基本"> </a>基本</h1>
<p>將 <code>&lt;router-outlet&gt;</code> 賦予 <code>name</code> 的值，就可以創造出第二組或是多組的 routes。但有幾下幾點要注意</p>
<ol>
<li>每一組 routes 是獨立的。</li>
<li>可以結合其他路由使用</li>
<li>會顯示在指定的 names outlet 裡</li>
</ol>
<h2 id="設定-Routes"><a class="header-anchor" href="#設定-Routes"> </a>設定 Routes</h2>
<p>但要怎麼設定使用呢? 首先針對路由設定的部分</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;compose&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">ComposeMessageComponent</span>,</span><br><span class="line">  <span class="attr">outlet</span>: <span class="string">&#x27;popup&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li><code>outlet</code>:  設定所歸屬的 names outlet，可以多組</li>
</ul>
<h2 id="連結寫法"><a class="header-anchor" href="#連結寫法"> </a>連結寫法</h2>
<p>網頁上連結的寫法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#123; outlets: &#123; popup: [&#x27;compose&#x27;] &#125; &#125;]&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>網址列的樣子會是這樣子呈現的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.../details(popup: compose)</span><br></pre></td></tr></table></figure>
<p>在更複雜一點，假設有多個 names routes 時，又需要怎麼寫，即網址會怎麼呈現呢?</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#123; outlets: &#123; popup: [&#x27;compose&#x27;], detail: [&#x27;detail&#x27;] &#125; &#125;]&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.../details(popup:compose//detail:detail)</span><br></pre></td></tr></table></figure>
<h2 id="清空-secondary-routes"><a class="header-anchor" href="#清空-secondary-routes"> </a>清空 secondary routes</h2>
<p>要如何清除呢? 單純的將 outlets 裡的 names 指定的路徑清空即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#123; outlets: &#123; popup: null &#125; &#125;]&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">closePopup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Providing a `null` value to the named outlet</span></span><br><span class="line">  <span class="comment">// clears the contents of the named outlet</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([&#123; <span class="attr">outlets</span>: &#123; <span class="attr">popup</span>: <span class="literal">null</span> &#125;&#125;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多的細節，可以參考我準備稍微複雜的範例程式碼，<a href="https://stackblitz.com/edit/multi-router-outlet">連結在此</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] RouterModule Options 篇</title>
    <url>/2018/10/29/angular-router-config/</url>
    <content><![CDATA[<p>Angular 的路由功能很強大，內建也提供很多路由上會用到的功能，但是你知道 <code>RouterModule</code> 有哪些選項可以設定嗎?</p>
<span id="more"></span>
<h1 id="RouterModule-選項"><a class="header-anchor" href="#RouterModule-選項"> </a>RouterModule 選項</h1>
<h2 id="enableTracing"><a class="header-anchor" href="#enableTracing"> </a>enableTracing</h2>
<p><code>enabledTracing</code> 可以開啟路由變更時的所有事件，並 console.log 出來，設定方式是</p>
<p><code>enabledTracking: true</code></p>
<h2 id="useHash"><a class="header-anchor" href="#useHash"> </a>useHash</h2>
<p>有時候主機環境不允許我們設定 rewrite URL 規則時，就必須使用 hash 的方式來呈現網址的變化，設定方式是</p>
<p><code>useHash: true</code></p>
<h2 id="initialNavigation"><a class="header-anchor" href="#initialNavigation"> </a>initialNavigation</h2>
<p>設定初始路由瀏覽是否要開啟，設定方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">initialNavigation:  true | false | &#x27;enabled&#x27; | &#x27;disabled&#x27; | &#x27;legacy_enabled&#x27; | &#x27;legacy_disabled&#x27;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>true</code>、<code>false</code> 、<code>legacy_enabled</code> 、<code>legacy_disabled</code> 在 Angular v4 時就被標示為 <code>deprecated</code></li>
<li><code>enabled</code>: 在 root component 建立前，會先開始初始瀏覽事件，在初始瀏覽事件未完成前，整個啟動流程會被 block 住</li>
<li><code>disabled</code>: initial navigation 不會被執行，但是監聽 location 會在 root component 建立前設定好</li>
</ul>
<h2 id="errorHandler"><a class="header-anchor" href="#errorHandler"> </a>errorHandler</h2>
<p>可以指定路由發生錯誤時，應該要如何處理的，設定自己的錯誤處理程序</p>
<p><code>errorHandler: ErrorHandler</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">treatCertainErrorsAsCancelations</span>(<span class="params">error</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (error isntanceof <span class="title class_">CancelException</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//cancelation </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">throw</span> error; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(<span class="variable constant_">ROUTES</span>, &#123;</span><br><span class="line">      <span class="attr">errorHandler</span>: treatCertainErrorsAsCancelations</span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MailModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="preloadingStrategy"><a class="header-anchor" href="#preloadingStrategy"> </a>preloadingStrategy</h2>
<p>設定 preloading 策略，針對延遲載入模組的相關處理動做，詳細細節可以參閱 <a href="https://angular.io/api/router/PreloadingStrategy">PreloadingStrategy</a></p>
<h2 id="onSameUrlNavigation"><a class="header-anchor" href="#onSameUrlNavigation"> </a>onSameUrlNavigation</h2>
<p>當瀏覽到相同網址時的處理行為，設定方式</p>
<p><code>onSameUrlNavigation: 'reload' | 'ignore'</code></p>
<p>預設的行為是當遇到相同網址時，並不會重新觸發重整動作，當有需要重整動作時，可以設定為 <code>reload</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page2Component</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> router: Router</span>) &#123;    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span>.<span class="property">events</span>.<span class="title function_">subscribe</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (event <span class="keyword">instanceof</span> <span class="title class_">NavigationEnd</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">        <span class="comment">// when onSameUrlNavigation: &#x27;reload&#x27;，會重新觸發 router event</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;page2 init&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;page2 destroy&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>這部分需要留意的是，只有 router 事件會被重新執行一次，而非整個 Component 被 destroy 掉在重新建立</li>
</ul>
<h2 id="scrollPositionRestoration"><a class="header-anchor" href="#scrollPositionRestoration"> </a>scrollPositionRestoration</h2>
<p><code> scrollPositionRestoration?: 'disabled'|'enabled'|'top';</code></p>
<p>當開啟時，在操作瀏覽器上下頁時，會保留之前瀏覽畫面的位置</p>
<h2 id="anchorScrolling"><a class="header-anchor" href="#anchorScrolling"> </a>anchorScrolling</h2>
<p><code>anchorScrolling: 'disabled': 'enabled'</code></p>
<p>目前預設值為 <code>disabled</code>，當開啟時，會有 anchor 的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">&quot;/page2&quot;</span> [<span class="attr">fragment</span>]=<span class="string">&quot;&#x27;a&#x27;&quot;</span>&gt;</span>Page 2 with anchor A<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>這樣的連結會跳到 page2 頁 <code>id='2'</code> 的地方</p>
<h2 id="scrollOffset"><a class="header-anchor" href="#scrollOffset"> </a>scrollOffset</h2>
<p>設定 scroll offset 的值，可以給予數字，或是 function</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">scrollOffset?: [<span class="built_in">number</span>, <span class="built_in">number</span>]|(<span class="function">() =&gt;</span> [<span class="built_in">number</span>, <span class="built_in">number</span>]);</span><br></pre></td></tr></table></figure>
<ul>
<li>[number, number] =&gt; [left, top]</li>
</ul>
<p>這背後其實是去執行 <a href="https://angular.io/api/common/ViewportScroller">ViewportScroller</a> 的 <code>setOffset</code> 的方法，當進行 <code>scrollToElement</code> 時，會將設定的 offset 值帶入進算</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">scrollToElement</span>(<span class="attr">el</span>: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rect = el.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">  <span class="keyword">const</span> left = rect.<span class="property">left</span> + <span class="variable language_">this</span>.<span class="property">window</span>.<span class="property">pageXOffset</span>;</span><br><span class="line">  <span class="keyword">const</span> top = rect.<span class="property">top</span> + <span class="variable language_">this</span>.<span class="property">window</span>.<span class="property">pageYOffset</span>;</span><br><span class="line">  <span class="keyword">const</span> offset = <span class="variable language_">this</span>.<span class="title function_">offset</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">window</span>.<span class="title function_">scrollTo</span>(left - offset[<span class="number">0</span>], top - offset[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="paramsInheritanceStrategy"><a class="header-anchor" href="#paramsInheritanceStrategy"> </a>paramsInheritanceStrategy</h2>
<p><code>paramsInheritanceStrategy?: 'emptyOnly'|'always';</code></p>
<p>設定路由 params 、data、resolve data 的合併方式</p>
<ul>
<li>
<p><code>emptyOnly</code> 預設值，只會繼承沒有 path 或是 component 設定的路由</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;page3/:id&#x27;</span>, <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Page3Component</span> &#125; <span class="comment">// 取得到 id</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;page3/:id&#x27;</span>, </span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">EmptyComponent</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Page3Component</span> &#125; <span class="comment">// 取不到 id</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>always</code> 一律繼承</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;page3/:id&#x27;</span>, </span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">EmptyComponent</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Page3Component</span> &#125; <span class="comment">// 取得到 id</span></span><br><span class="line">      ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="urlUpdateStrategy"><a class="header-anchor" href="#urlUpdateStrategy"> </a>urlUpdateStrategy</h2>
<p>何時更新瀏覽器 URL</p>
<p><code>  urlUpdateStrategy?: 'deferred'|'eager';</code></p>
<ul>
<li>deferred 預設值，當路由事件跑完後才會更新瀏覽器網址</li>
<li><code>eager</code> 在事前開始前更新瀏覽器網址</li>
</ul>
<h2 id="malformedUriErrorHandler"><a class="header-anchor" href="#malformedUriErrorHandler"> </a>malformedUriErrorHandler</h2>
<p>當網址瀏覽發生錯誤時，可以自訂 redirect 網址</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">malformedUriErrorHandler</span>:</span><br><span class="line">     <span class="comment">// redirects the user to `/invalid-uri`</span></span><br><span class="line">     <span class="function">(<span class="params">error: <span class="built_in">URIError</span>, urlSerializer: UrlSerializer, url: <span class="built_in">string</span></span>) =&gt;</span> urlSerializer.<span class="title function_">parse</span>(<span class="string">&#x27;/invalid-uri&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="亮點設定"><a class="header-anchor" href="#亮點設定"> </a>亮點設定</h1>
<ol>
<li>onSameUrlNavigation</li>
<li>scrollPositionRestoration</li>
<li>anchorScrolling</li>
<li>paramsInheritanceStrategy</li>
</ol>
<p>這些選項設定是我認為在開發時，有可能會用的到的選項。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li>
<p><a href="https://stackblitz.com/edit/angular-router-option">範例程式碼</a></p>
</li>
<li>
<p><a href="https://github.com/angular/angular/blob/master/packages/router/src/router_module.ts">Angular Source Code</a></p>
</li>
<li>
<p><a href="https://blog.ninja-squad.com/2018/07/26/what-is-new-angular-6.1/">What’s new in Angular 6.1?</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[O365] Excel 新功能 - Dynamic Array Functions</title>
    <url>/2018/10/30/excel-dynamic-array-unique/</url>
    <content><![CDATA[<p>使用 O365 的好處是，所使用的 Excel 等相關應用程式， 都是處於最新的功能狀態。如果心臟夠大顆，也可以加入 Insider 計畫取得更新的功能，例如這篇文章要介紹的 Dynamic Array Function。</p>
<span id="more"></span>
<p>介紹幾個跟 Dynamic Array 相關的新函數 ，這些新函數能在篩選資料上可以簡化以往要用很複雜的公式才能完成的功能</p>
<h1 id="UNIQUE"><a class="header-anchor" href="#UNIQUE"> </a>UNIQUE</h1>
<p>顧名思義，根據清單排除重複出現的資料，留下沒有重複的清單</p>
<p>函示的使用方法</p>
<p><code>=UNIQUE(array,[by_col],[occurs_once])</code></p>
<ul>
<li>array 指定套用的清單範圍</li>
<li>by_col: 設定比較條件，根據 row 時為 FALSE，根據 col 時為 TRUE</li>
<li>occurs_once: 設定 True 時，只會顯示出現一次的項目，設定 False 時，顯示不重複清單</li>
</ul>
<p><img src="https://i.imgur.com/uTpOG9B.png" alt=""></p>
<p>如果在篩選後的清單中，誤輸入不存在的項目時，會出現 <code>#SPILL!</code> 的錯誤訊息</p>
<p><img src="https://i.imgur.com/5FuoosW.png" alt=""></p>
<p>排除的方法是將顯示的文字刪除後即可恢復正常</p>
<h1 id="SORT"><a class="header-anchor" href="#SORT"> </a>SORT</h1>
<p><code>=SORT(array, [sort_index], [sort_order],[by_col])</code></p>
<ul>
<li>array: 設定要排序的清單</li>
<li>[sort_order]: 排序欄位的 index (起於 index 1)</li>
<li>[sort_order]: 排序方法，1 : 遞增; -1: 遞減</li>
<li>[by-col]: 設定比較條件，根據 row 時為 FALSE，根據 col 時為 TRUE</li>
</ul>
<p>如果 Array 是動態產生出來的，可以搭配 <code># </code> 使用 (Dynamic Array Reference)，這樣子當動態清單長度改變時，函示所使用的清單範圍也會跟著改變</p>
<p><img src="https://i.imgur.com/pkXYNfE.png" alt=""></p>
<h1 id="FILTER"><a class="header-anchor" href="#FILTER"> </a>FILTER</h1>
<p>FILTER 提供動態過濾資料來源的功能，過濾的清單的欄位會跟資料來源一樣，而且是動態的列出清單。</p>
<p><code>=FILTER(資料來源，資料來源內要比較的欄位)</code></p>
<p><img src="https://i.imgur.com/KCzXifB.png" alt=""></p>
<h1 id="RANDARRAY"><a class="header-anchor" href="#RANDARRAY"> </a>RANDARRAY</h1>
<p><code>=RANDARRAY([row],[col])</code></p>
<p>回傳設定介於 0 和 1 之間的亂數陣列清單</p>
<p><img src="https://i.imgur.com/mNms3ZU.png" alt=""></p>
<h1 id="SEQUENCE"><a class="header-anchor" href="#SEQUENCE"> </a>SEQUENCE</h1>
<p><code>=SEQUENCE(row,[col],[start],[step])</code></p>
<p>根據設定產生數字序列表</p>
<ul>
<li>row: 列數</li>
<li>col: 行數</li>
<li>start: 起始數字</li>
<li>step: 間隔數字</li>
</ul>
<p><img src="https://i.imgur.com/uxPbrqn.png" alt=""></p>
<p>還有另外兩個 <code>SINGLE</code> 與 <code>SORTBY</code> 有興趣的也可以參閱官方文件，</p>
<p>要請留意的是，本篇文章所介紹的功能，在這個時間點(2018/10/30) 都還是屬於 insider 的範圍內，尚未正式釋出到正式版中</p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://support.office.com/zh-tw/article/sortby-%E5%87%BD%E6%95%B8-cd2d7a62-1b93-435c-b561-d6a35134f28f?NS=EXCEL&amp;Version=90&amp;SysLcid=1028&amp;UiLcid=1028&amp;AppVer=ZXL900&amp;HelpId=xlmain11.chm60678&amp;ui=zh-TW&amp;rs=zh-TW&amp;ad=TW">SORTBY</a></li>
<li><a href="https://support.office.com/zh-tw/article/%E5%96%AE%E4%B8%80%E5%87%BD%E6%95%B8-7ca229ca-13ae-420b-928e-2ef52a3805ff?NS=EXCEL&amp;Version=90&amp;SysLcid=1028&amp;UiLcid=1028&amp;AppVer=ZXL900&amp;HelpId=xlmain11.chm60657&amp;ui=zh-TW&amp;rs=zh-TW&amp;ad=TW">SINGLE</a></li>
</ul>
]]></content>
      <categories>
        <category>O365</category>
      </categories>
      <tags>
        <tag>O365</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] Subscription</title>
    <url>/2018/11/05/rxjs-subscription/</url>
    <content><![CDATA[<p>在 RxJS  裡在建立 Observable 時，都會回傳一個 subscription 物件，而這一個物件允許我們手動取消 Observable 的動作，其實 Subscription 裡還有其他細節的。這一篇文章就來探討 Subscription。</p>
<span id="more"></span>
<h1 id="介面"><a class="header-anchor" href="#介面"> </a>介面</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">SubscriptionLike</span> <span class="keyword">extends</span> <span class="title class_">Unsubscribable</span> &#123;</span><br><span class="line">  <span class="title function_">unsubscribe</span>(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">closed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這一個介面定義是 RxJS 6.x 版，也是我們常見的使用方法，但事實上在 Subscription 內還有兩個 method 是沒有定義，而這一個問題在 RxJS 7 版有被修正</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RxJS 7 版的 Subscription 介面</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Subscription</span> &#123;</span><br><span class="line">  <span class="title function_">unsubscribe</span>(): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">add</span>(...<span class="attr">teardowns</span>: <span class="title class_">TeardownLogic</span>[]): <span class="built_in">void</span>;</span><br><span class="line">  <span class="title function_">remove</span>(...<span class="attr">teardowns</span>: <span class="title class_">TeardownLogic</span>[]): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">closed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="基本功能"><a class="header-anchor" href="#基本功能"> </a>基本功能</h1>
<h2 id="unsubscribe"><a class="header-anchor" href="#unsubscribe"> </a>unsubscribe</h2>
<p><code>unsubscribe</code> 應該不需要多解釋了，就是將 Observable 給取消訂閱，當 Observable 被取消訂閱時就會停止運作了。這裡有一個觀念要知道，一個 Observable 被 unsubscribe 時，是不會進到 <code>complete</code> 階段的，如果有什麼動作是希望在 Observable 完成時或是被取消時執行的話，就必須使用 <code>finalize</code> 這一個 operator，<code>finalize</code> 會在 complete 之後執行</p>
<h2 id="closed"><a class="header-anchor" href="#closed"> </a>closed</h2>
<p>當 subscription 被 unsubscribe 時，closed 這一個屬性就會被標示成 <code>true</code>，可以利用這個來判斷 subscription 的狀態</p>
<h1 id="進階功能"><a class="header-anchor" href="#進階功能"> </a>進階功能</h1>
<p>管理 Observable 的 subscription 是一件大工程，常見的管理方式，就是利用 <code>takeUntil</code> 來做管理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">someMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">    obs.<span class="title function_">pipe</span>(<span class="title function_">takeUntil</span>(<span class="variable language_">this</span>.<span class="property">destroy$</span>)).<span class="title function_">subscribe</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ngOnDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">destroy$</span>.<span class="title function_">next</span>();    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡介紹另外一種管理方式，我們也可以透過 Subscription 來做管理，使用方式是先建立一個空的 Subscription，然後透過 <code>add</code> 和 <code>remove</code> 的方式來管理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subscription</span>, interval &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="comment">// 建立空的 Subscription 物件</span></span><br><span class="line"><span class="keyword">const</span> sub = <span class="keyword">new</span> <span class="title class_">Subscription</span>();</span><br></pre></td></tr></table></figure>
<h2 id="add"><a class="header-anchor" href="#add"> </a>add</h2>
<p>將 Observable 的 subscription 加入至 Subscription 物件裡，使用方法如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obsSub = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">subscribe</span>();</span><br><span class="line">sub.<span class="title function_">add</span>(obsSub);</span><br></pre></td></tr></table></figure>
<h2 id="remove"><a class="header-anchor" href="#remove"> </a>remove</h2>
<p>將 Observable 的 subscription 從 Subscription 物件裡移除，使用方法如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">sub.<span class="title function_">remove</span>(obsSub);</span><br></pre></td></tr></table></figure>
<h2 id="unsubscribe-v2"><a class="header-anchor" href="#unsubscribe-v2"> </a>unsubscribe</h2>
<p>當要取消所有 Observable 的動作時，這時候只需要將 Subscription 物件做 unsubscribe，任何註冊在此 Subscription 物件裡的 subscription 也同時會執行 unsubscribe 的動作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sub = <span class="keyword">new</span> <span class="title class_">Subscription</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">someMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sub</span>.<span class="title function_">add</span>(obs.<span class="title function_">subscribe</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ngOnDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sub</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="秘密篇"><a class="header-anchor" href="#秘密篇"> </a>秘密篇</h1>
<p>在深入研究 RxJS Subscription 的程式碼，發現 <code>add</code> 這一個方法是接受 <code>TeardownLogic</code> 型別的物件，而 <code>TeardownLogic</code> 的介面是</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">TeardownLogic</span> = <span class="title class_">Unsubscribable</span> | <span class="title class_">Function</span> | <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>
<p>沒錯，我們也可以 add <code>Function</code>  至 Subscription 內，而這執行的時機點就是在 Subscription  unsubscribe 時，執行順序會依 <code>add</code> 的順序，這一個祕密將為我們打開另外一道門，將 RxJS 的寫法提供更彈性的寫法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sub = <span class="keyword">new</span> <span class="title class_">Subscription</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">someMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sub</span>.<span class="title function_">add</span>(obs.<span class="title function_">subscribe</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sub</span>.<span class="title function_">add</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do something after unsubscribe&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ngOnDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sub</span>.<span class="title function_">unsubscribe</span>();</span><br><span class="line">    <span class="comment">// 會將 observable unsubscribe </span></span><br><span class="line">    <span class="comment">// 並 console.log &#x27;do something after unsubscribe&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="FYI"><a class="header-anchor" href="#FYI"> </a>FYI</h1>
<p>目前 RxJS 6 的 Subscription 種類只有一種，但在 RxJS 7 有推出另外一種 Subscription，可以說是原本 Subscription 的延伸版本，但在 RxJS 7 定版前，先不介紹這一個 Subscription ，等有進一步消息時，在另外寫文章介紹</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 該如何使用設定 RouteReuseStrategy</title>
    <url>/2018/11/06/ng-RouteReuseStrategy/</url>
    <content><![CDATA[<p>Angular 路由機制中，有一個選項是 <code>routeReuseStrategy</code>，這一個設定可以讓我們設定路由轉換的過程中，是否要保留 component 並重複使用，而相關的使用方式如下</p>
<span id="more"></span>
<h1 id="設定"><a class="header-anchor" href="#設定"> </a>設定</h1>
<p>首先，先建立一個 Class 並實作 <code>RouteReuseStrategy</code> 介面，<code>RouteReuseStrategy</code> 介面包含了五個方法需要被實作</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RouteReuseStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">shouldDetach</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>): <span class="built_in">boolean</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">store</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>, <span class="attr">handle</span>: <span class="title class_">DetachedRouteHandle</span>): <span class="built_in">void</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">shouldAttach</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>): <span class="built_in">boolean</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">retrieve</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>): <span class="title class_">DetachedRouteHandle</span> | <span class="literal">null</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">shouldReuseRoute</span>(<span class="attr">future</span>: <span class="title class_">ActivatedRouteSnapshot</span>, <span class="attr">curr</span>: <span class="title class_">ActivatedRouteSnapshot</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>shouldDetach : 判斷路由是否能重複使用</li>
<li>store : 將脫離的路由內容暫存起來</li>
<li>shouldAttach : 當路由進入時，可判斷是否還原路由暫存內容</li>
<li>retrieve : 從 Cache 中取得對應的暫存內容</li>
<li>shouldReuseRoute : 判斷是否同一路由</li>
</ul>
<p>基本範例程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">RouteReuseStrategy</span>,</span><br><span class="line">  <span class="title class_">DefaultUrlSerializer</span>,</span><br><span class="line">  <span class="title class_">ActivatedRouteSnapshot</span>,</span><br><span class="line">  <span class="title class_">DetachedRouteHandle</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingCache</span> <span class="keyword">implements</span> <span class="title class_">RouteReuseStrategy</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="attr">handlers</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="title class_">DetachedRouteHandle</span> &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷路由是否能重複使用</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">shouldDetach</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="comment">// 默認所有的路由設定都可以重複使用</span></span><br><span class="line">    <span class="comment">// 可透過 route.data 的方式來設定重複使用的規則</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 當路由離開時，會觸發此方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">store</span>(</span><br><span class="line">    <span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>,</span><br><span class="line">    <span class="attr">handle</span>: <span class="title class_">DetachedRouteHandle</span></span><br><span class="line">  ): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 將目前路由內容暫存起來</span></span><br><span class="line">    <span class="title class_">AppRoutingCache</span>.<span class="property">handlers</span>[route.<span class="property">routeConfig</span>.<span class="property">path</span>] = handle;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 當路由進入時，可判斷是否還原路由的暫存內容</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">shouldAttach</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      !!route.<span class="property">routeConfig</span> &amp;&amp; !!<span class="title class_">AppRoutingCache</span>.<span class="property">handlers</span>[route.<span class="property">routeConfig</span>.<span class="property">path</span>]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 從 Cache 中取得對應的暫存內容</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">retrieve</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>): <span class="title class_">DetachedRouteHandle</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!route.<span class="property">routeConfig</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">AppRoutingCache</span>.<span class="property">handlers</span>[route.<span class="property">routeConfig</span>.<span class="property">path</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判斷是否同一路由</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">shouldReuseRoute</span>(</span><br><span class="line">    <span class="attr">future</span>: <span class="title class_">ActivatedRouteSnapshot</span>,</span><br><span class="line">    <span class="attr">current</span>: <span class="title class_">ActivatedRouteSnapshot</span></span><br><span class="line">  ): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> future.<span class="property">routeConfig</span> === current.<span class="property">routeConfig</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="註冊"><a class="header-anchor" href="#註冊"> </a>註冊</h1>
<p>將寫好的 class 註冊在 <code>RootModule</code> 的 <code>proivders</code> 的區塊中即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">providers</span>: [&#123; <span class="attr">provide</span>: <span class="title class_">RouteReuseStrategy</span>, <span class="attr">useClass</span>: <span class="title class_">AppRoutingCache</span> &#125;],</span><br></pre></td></tr></table></figure>
<p>當這樣子設定完成後，Angular 路由機制就會依照我們實作的 <code>RouteReuseStrategy</code> 來管理路由的相關資訊，內包含 <code>ComponentRef</code> ，效果會是當我們重新返回該路由時，原本輸入的資料還會存在。因為是使用當時離開時的 Component 而不是重新建立一個新的。</p>
<p>實際的操作效果可以參考 <a href="https://stackblitz.com/edit/ng-routereusestrategy">範例程式</a></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/api/router/RouteReuseStrategy">API</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Tree Shaking 真的有作用嗎?</title>
    <url>/2018/11/20/ng-treeshaking/</url>
    <content><![CDATA[<p>Angular 在建置輸出時，如果加上 <code>--prod</code> 時，會將所有的 bundle 做最小化還有 Tree-Shaking  的行為，將沒有使用的程式碼從 bundle 檔案中移除，但是，實際上輸出結果是否如官方所說，還有什麼細節是需要知道的嗎?</p>
<span id="more"></span>
<p>為了驗證這一個功能，將進行以下的測試，首先先準備測試環境，測試環境如下</p>
<ol>
<li>一個 lazy-loading Module，包含一個 DashComponent</li>
<li>一個 sharedModule 包含一個 TitleComponent</li>
<li>一個 service</li>
</ol>
<h1 id="測試項目集"><a class="header-anchor" href="#測試項目集"> </a>測試項目集</h1>
<h2 id="測試項目一"><a class="header-anchor" href="#測試項目一"> </a>測試項目一</h2>
<p>這一個測試項目來測試 lazy-loading module 但是 lazy-loading 沒有設定任何的路由設定檔</p>
<ul>
<li>page1.module.ts  檔案</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DashComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dash/dash.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SharedModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../shared/shared.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">DashComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>, <span class="title class_">SharedModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page1Module</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>shared.module.ts 檔案內容</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TitleComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./title/title.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">TitleComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">TitleComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SharedModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>app.module.ts 檔案內容</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppRoutingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-routing.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SharedModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./shared/shared.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DataService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./data.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">AppRoutingModule</span>, <span class="title class_">SharedModule</span>],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>app-routing.module.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Routes</span>, <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;page1&#x27;</span>, <span class="attr">loadChildren</span>: <span class="string">&#x27;./page1/page1.module#Page1Module&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>為了方便辨識 Component 是否有被移出 bundle 檔案，所以在 Component 內都新增一個 name 屬性並給予 Component 名稱的文字值，經過 <code>ng build --prod</code> 後，產生了一下的檔案，並檢查了 <code>4.f4517b1f3405740b1d81.js</code> 檔案內容 (此為 lazy-loading module)</p>
<p><img src="1542694311076.png" alt="1542694311076"></p>
<p><code>4.f4517b1f3405740b1d81.js</code> 檔案內並沒有包含 <code>DashComponent</code> 的文字</p>
<p><img src="1542694407358.png" alt="1542694407358"></p>
<p>這裡沒有看到 <code>DashComponent</code> 的原因是因為在 <code>Page1Module</code> 裡並沒有使用到 <code>DashComponent</code> 所以即使在 declarations 有宣告，程式碼仍不會被包含到 bundle 檔案內</p>
<h2 id="測試項目二"><a class="header-anchor" href="#測試項目二"> </a>測試項目二</h2>
<p>延續上述的情境，如果直接在 <code>DashComponent</code> 內使用 <code>TitleComponent</code>，<code>TitleComponent</code> 是否會被包含至檔案內呢?</p>
<ul>
<li>
<p>dash.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>dash works!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-title</span>&gt;</span><span class="tag">&lt;/<span class="name">app-title</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>再次執行 <code>ng build --prod</code>，並檢視輸出內容</p>
<p><img src="1542694738517.png" alt="1542694738517"></p>
<p>如預期般的沒有被包含進來，因為連 <code>DashComponent</code> 都沒有，怎麼可能會有 <code>TitleComponent</code></p>
<h2 id="測試項目三"><a class="header-anchor" href="#測試項目三"> </a>測試項目三</h2>
<p>延續上面的環境，將 <code>Page1Module</code> 設定路由，並檢查建置後的結果</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DashComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dash/dash.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SharedModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../shared/shared.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">DashComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">CommonModule</span>,</span><br><span class="line">    <span class="title class_">SharedModule</span>,</span><br><span class="line">    <span class="title class_">RouterModule</span>.<span class="title function_">forChild</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">DashComponent</span></span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page1Module</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>檢視 <code> 4.461b274d80afee68498a.js</code> 內容</p>
<p><img src="1542694930339.png" alt="1542694930339"></p>
<p><img src="1542694976256.png" alt="1542694976256"></p>
<p>我們可以看到 <code>TitleComponent</code> 與 <code>DashComponent</code> 都被包含到輸出檔案內，也十分合理。這也表示如果我們將 <code>&lt;app-title&gt;</code> 從 <code>dash.component.html</code> 中移除，在輸出檔案裡會看不見 <code>TitleComponent</code> 地存在的</p>
<p><img src="1542695151003.png" alt="1542695151003"></p>
<p><img src="1542695171463.png" alt="1542695171463"></p>
<p>或許有人會很好奇，為什麼只要透過路由設定檔所定義的 Component，即使沒有在任何 template 使用，仍會被輸出到檔案中，這是因為路由設定的 component (routed entry component) 是另外一種定義成 entryComponent  的方法。(<a href="https://angular.io/guide/entry-components#a-routed-entry-component">官方文件</a>)</p>
<h2 id="測試項目四"><a class="header-anchor" href="#測試項目四"> </a>測試項目四</h2>
<p>在這個測試項目中，我們將路由設定檔拿掉，但將 <code>DashComponent</code> 註冊在 <code>entryComponent</code> 的地方，來觀察一下結果</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DashComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dash/dash.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SharedModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../shared/shared.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">DashComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>, <span class="title class_">SharedModule</span>],</span><br><span class="line">  <span class="attr">entryComponents</span>: [<span class="title class_">DashComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Page1Module</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1542695327617.png" alt="1542695327617"></p>
<p>檢視輸出內容時，發現當 Component 註冊到 entryComponents 時，即使沒有任何人使用到該 Component，仍會被輸出</p>
<p><img src="1542695408610.png" alt="1542695408610"></p>
<p>綜合測試項目一的結果與本項目的測試結果，我們可以發現 Component 註冊在 declarations 與 entryComponents 的差異，也可以驗證<a href="https://angular.io/guide/entry-components#entrycomponents-and-the-compiler">官方文件</a>的描述</p>
<h2 id="測試項目五"><a class="header-anchor" href="#測試項目五"> </a>測試項目五</h2>
<p>當 <code>SharedModule</code> 內的 Component 在不同的 Module 中都被使用到，該 component 程式碼會輸出成幾份? 答案: 一份</p>
<p>在這個測試裡，我將 <code>&lt;app-title&gt;</code> 同時在 <code>app.component.html</code> 與 <code>dash.component.html</code>  都有引用，根據輸出檔案的內容，只能在 <code>main.4a9a348ca69cdb67065f.js</code> 檔案內找到 <code>TitleComponent</code></p>
<p><img src="1542695635457.png" alt="1542695635457"></p>
<p><img src="1542695691873.png" alt="1542695691873"></p>
<p><img src="1542695715510.png" alt="1542695715510"></p>
<p>(2018/11/21 Updated) 有朋友在留言提到，如果是在兩個 lazy-loading module 裡使用 sharedModule 的 component 時 (沒有在 app.component.html 內使用到)，會被輸出至 common 的 bundle 檔案中，當然有圖有真相</p>
<p><img src="1542761970966.png" alt="1542761970966"></p>
<p><img src="1542762028166.png" alt="1542762028166"></p>
<h2 id="測試項目六"><a class="header-anchor" href="#測試項目六"> </a>測試項目六</h2>
<p>Service 新的註冊方式 <code>provideIn</code> 是否真的能被 tree-shake 掉呢?</p>
<ul>
<li>data.service.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DataService</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;DataService&#x27;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先不在任何的 component 內注入 DataService，觀察輸出後的結果</p>
<p><img src="1542696035595.png" alt="1542696035595"></p>
<p><img src="1542696068072.png" alt="1542696068072"></p>
<p><img src="1542696095017.png" alt="1542696095017"></p>
<p>在這兩個檔案內都找不到 <code>DataService</code> 的影子，看起來真的被排除了。</p>
<h2 id="測試項目七"><a class="header-anchor" href="#測試項目七"> </a>測試項目七</h2>
<p>這帶來另外一下一個問題，如果將 <code>DataSerivce</code> 在 <code>Page1Module</code> 時，<code>DataService</code> 會在哪裡出現呢?</p>
<ul>
<li>dash.component.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DataService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;src/app/data.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-dash&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./dash.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./dash.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DashComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;DashComponent&#x27;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> dataService: DataService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1542696529718.png" alt="1542696529718"></p>
<p><img src="1542696555362.png" alt="1542696555362"></p>
<p><img src="1542696573709.png" alt="1542696573709"></p>
<p><code>DataService</code> 會被註冊在 Lazy-loading Module 裡。</p>
<p>但當 <code>app.component.ts</code> 裡也有注入 <code>DataService</code> 時，程式碼出現的地方也會不一樣，將會出現在 <code>main</code> 的檔案中</p>
<h2 id="測試項目八"><a class="header-anchor" href="#測試項目八"> </a>測試項目八</h2>
<p>如果在兩個不同的 lazy-loading 內都有使用到 <code>DataService</code> 時， DataService 會出現在哪裡呢? 答案是會出現在 <code>common</code> 裡</p>
<p><img src="1542697090255.png" alt="1542697090255"></p>
<p><img src="1542697114967.png" alt="1542697114967"></p>
<p>可是當在 <code>app.component.ts</code> 注入 <code>DataService</code> 時，<code>DataService</code> 又會回到 <code>main</code> 的檔案中</p>
<p><img src="1542697301193.png" alt="1542697301193"></p>
<p><img src="1542697327260.png" alt="1542697327260"></p>
<h2 id="測試項目九"><a class="header-anchor" href="#測試項目九"> </a>測試項目九</h2>
<p>將 <code>DataService</code> 註冊在 <code>AppModule</code> 的 <code>providers</code> 裡，且不在任何的 component 內使用，再來看輸出結果</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppRoutingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app-routing.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SharedModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./shared/shared.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DataService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./data.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">AppRoutingModule</span>, <span class="title class_">SharedModule</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">DataService</span>],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>data.service.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DataService</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;DataService&#x27;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建置輸出結果可以看出，不論是否有被使用，都會被輸出</p>
<p><img src="1542697487067.png" alt="1542697487067"></p>
<p><img src="1542697517027.png" alt="1542697517027"></p>
<h2 id="測試項目十"><a class="header-anchor" href="#測試項目十"> </a>測試項目十</h2>
<p>在 Angular 外部寫 function 後，在 Angular component 內使用，會出現什麼事情?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DataService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./data.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TreeShakingTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;TreeShakingTest Function&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;return from TreeShakingTest Function&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;treeshakingtest&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">TreeShakingTest</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>建置後的結果為</p>
<p><img src="1542698639343.png" alt="1542698639343"></p>
<p><img src="1542698676495.png" alt="1542698676495"></p>
<p>最終的輸出結果十分有趣，直接將 function 轉換到 Angular 內部了</p>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>這一篇文章所整理的結果，在效能調整上十分重要，我們知道 main.js 檔案算是一開始要載入的檔案，為了減少 main.js 檔案的大小，service 的註冊與使用就很小心，因為一個不小心就會增加 main.js 的檔案大小，同樣的在 app.component.html 內使用其他 component 時，也會造成 main.js 檔案變大。</p>
<p>另外，我們也不用多擔心 sharedModule 過多的載入會造成檔案肥大，因為如果真的沒有使用到，是不會被輸出的，可以安心使用</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Playground</title>
    <url>/2018/12/22/ng-playground/</url>
    <content><![CDATA[<p>其實 Angular Playground 出來已經有好一段時間了，但是之前的環境設定會讓人懶得用。現在可以簡單的透過 <code>ng add  angular-playground</code> 的方式完成整體的環境設定，這麼方便不用就說不過去了。</p>
<span id="more"></span>
<h1 id="簡介"><a class="header-anchor" href="#簡介"> </a>簡介</h1>
<p>但什麼是 Angular Playground，如果你有聽過 React 的 Storybook ，那 Angular playground 也是要完成一樣的事情。簡單的說， Angular playground 提供一個乾淨的環境讓我們能就單一 Component 進行 UI 的測試。</p>
<p>有時候當 Angular 專案開發到很複雜時，某一個 Component 被藏在很多步驟後，但為了測試那個 Component 的畫面操作是否正常，就必須經過前面各種關卡的挑戰，那是否有更快更簡便的方式進行 Component UI 的測試呢? 其實 Angular playground 就可以做到這一點</p>
<h1 id="安裝篇"><a class="header-anchor" href="#安裝篇"> </a>安裝篇</h1>
<p>透過 Angular CLI 的幫助，我們可以利用一行指令就將 Angular playground 的環境設定完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng add angular-playground</span><br></pre></td></tr></table></figure>
<p>當執行這一行指令後，會產生及變更以下的檔案</p>
<p><img src="1545486266544.png" alt="1545486266544"></p>
<ul>
<li>
<p><code>angular-playground.json</code> 為 Angular playground 的設定檔案</p>
</li>
<li>
<p><code>src/main.playground.ts</code> 是 Angular playground 啟動時的進入檔，用來設定起使用的 NgModule</p>
</li>
<li>
<p>更新 <code>package.json</code> ，新增 script 指令，可以透過 <code>npm run playground</code> 的方式啟動</p>
</li>
<li>
<p>更新 <code>angular.json</code> ，新增新的 playground 建置指令到 <code>projects</code> 區塊</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;playground&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;sourceRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;projectType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;architect&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:browser&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;outputPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/playground&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/index.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/main.playground.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;polyfills&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/polyfills.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;tsConfig&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/tsconfig.app.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;assets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">             <span class="string">&quot;src/favicon.ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="string">&quot;src/assets&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;styles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">             <span class="string">&quot;src/styles.css&quot;</span></span><br><span class="line">           <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">         <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;fileReplacements&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">               <span class="punctuation">&#123;</span></span><br><span class="line">                 <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">                 <span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/environments/environment.prod.ts&quot;</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">             <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;optimization&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;outputHashing&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;extractCss&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;namedChunks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;aot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;extractLicenses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;vendorChunk&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">             <span class="attr">&quot;buildOptimizer&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">           <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@angular-devkit/build-angular:dev-server&quot;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">           <span class="attr">&quot;browserTarget&quot;</span><span class="punctuation">:</span> <span class="string">&quot;playground:build&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">4201</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>所以額外想加入的 assets / styles/ scripts 的部分，都可以設定在這個區塊內</p>
</li>
</ul>
<p>當這些都建立完成後，就可以第一次 playground 的啟動 <code>npm run playground</code> ，執行指令後，將會做 Angular 專案的建置並啟動一個 web server，且將 port 開在 4201，所以可以打開瀏覽器並輸入 <code>http://localhost:4201</code> 就可以看到 playground 的頁面了</p>
<p><img src="1545486631103.png" alt="1545486631103"></p>
<p>畫面上有寫了一些基本的操作指令</p>
<ul>
<li><code>ctrl+p</code> / <code>F2</code> 開啟命令視窗</li>
<li><code>esc</code> 取消命令視窗</li>
<li><code>↑</code>  /  <code>↓</code> 進行上下選擇場景</li>
<li><code>ctrl + ↑</code>  /  <code>ctrl + ↓</code> 切換場景</li>
</ul>
<h1 id="建立-sandbox"><a class="header-anchor" href="#建立-sandbox"> </a>建立 sandbox</h1>
<p>既然能使用 <code>ng add</code> 的指令，playground 當然也提供了 schematics 的指令來建立 sandbox 檔案</p>
<p><code> ng generate angular-playground:sandbox [path]/[component name]</code></p>
<p>輸入這行指令就會根據所指定的 component 建立相對應的 sandbox 檔案，什麼是 sandbox 檔案，這個檔案的性質跟 spec 測試檔案性質一樣，只差在這裡並不寫讓任何的測試程式碼，只有測試環境的設定而已</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sandboxOf &#125; <span class="keyword">from</span> <span class="string">&#x27;angular-playground&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HelloWorldComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../hello-world.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">sandboxOf</span>(<span class="title class_">HelloWorldComponent</span>)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;default&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;app-hello-world&gt;&lt;/app-hello-world&gt;`</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一個基本的 sandbox 檔案大致上是長這個樣子的，會包含這些元素</p>
<ol>
<li>
<p>你測試的 Component 是哪一個，使用 <code>sandboxOf(type: any, config?: SandboxOfConfig)</code> 的方式設定，這 <code>sandboxOf</code> 會回傳一個 <code>SandboxBuilder</code> 的 instance</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sandboxOf</span>(<span class="title class_">HelloWorldComponent</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>SandboxOfConfig</code> : 用來設定與這 Component 相關的 Dependency，如同設定一個 NgModule，比較常用的會是 imports 與 providers
<ul>
<li>imports?: any[];</li>
<li>declarations?: any[];</li>
<li>entryComponents?: any[];</li>
<li>providers?: any[];</li>
<li>schemas?: any[];</li>
<li>label?: string;</li>
<li>declareComponent?: boolean;</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>SandboxBuilder</code> Class 我們可以使用的方法只有一個，</p>
<p><code>add(description: string, config: ScenarioConfig): SandboxBuilder;</code></p>
<ul>
<li><code>ScenarioConfig</code> 可以設定項目有，這裡設定是針對 Component 執行的環境場景
<ul>
<li>template: string;</li>
<li>styles?: string[];</li>
<li>context?: any; - 如果想要傳變數到 component 內，就可以在這個區塊作變數設定</li>
<li>providers?: any[];</li>
</ul>
</li>
</ul>
</li>
</ol>
<h1 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h1>
<p>我先建立一個 <code>HelloWorldComponent</code> ，並建立相對應的 sandbox 檔案</p>
<ul>
<li>
<p><code>ng g c hello-world </code> : 建立 HelloWorldComponent</p>
</li>
<li>
<p><code>ng g angular-playground:sandbox hello-world</code> : 為 HelloWorld 建立 sandbox 檔案</p>
</li>
<li>
<p>執行 <code>npm run playground</code></p>
<p><img src="1545488873488.png" alt="1545488873488"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sandboxOf &#125; <span class="keyword">from</span> <span class="string">&#x27;angular-playground&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HelloWorldComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./hello-world.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">sandboxOf</span>(<span class="title class_">HelloWorldComponent</span>)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;default&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;app-hello-world&gt;&lt;/app-hello-world&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">add</span>(<span class="string">&#x27;with input&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;app-hello-world [data]=&quot;data&quot;&gt;&lt;/app-hello-world&gt;`</span>,</span><br><span class="line">    <span class="attr">context</span>: &#123;</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Kevin&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;Yang&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當設定兩組場景時，命令視窗的選擇就可以看到這兩個場景，之後就可以透過 <code>↑</code>  /  <code>↓</code>  來選擇</p>
<p><img src="1545491052080.png" alt="1545491052080"></p>
<h2 id="進階使用小技巧"><a class="header-anchor" href="#進階使用小技巧"> </a>進階使用小技巧</h2>
<p>Component  的開發當然不可能這麼單純，如果有注入 Api Service 時，總不可能每次都去打真的 API，這時候就可以透過 provide DI 設定的技巧，有很多手法跟寫 spec 測試時是一樣的，簡單範例程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">sandboxOf</span>(<span class="title class_">MyComponent</span>, &#123;</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">        &#123; <span class="attr">provide</span>: myService, <span class="attr">useValue</span>: &#123; <span class="attr">doStuff</span>: <span class="function">() =&gt;</span> &#123;&#125; &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="相關資源"><a class="header-anchor" href="#相關資源"> </a>相關資源</h1>
<ul>
<li><a href="http://www.angularplayground.it/">Angular Playground</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 如何 E2E 測試 PrimeNG Dropdown 元件</title>
    <url>/2018/12/23/ng-e2e-primeng-dropdown/</url>
    <content><![CDATA[<p>PrimeNG 元件很豐富沒錯，但是他所提供的原件在寫 E2E 測試時卻是一個讓人無法忍受的痛苦，主要原因是他為了畫面的呈現，使用各種非正統的方式呈現畫面，而 Dropdown 元件就是一個很標準的案例</p>
<span id="more"></span>
<h1 id="基本型"><a class="header-anchor" href="#基本型"> </a>基本型</h1>
<p>我們先來準備一下基本的測試環境</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p-dropdown</span>  </span></span><br><span class="line"><span class="tag">  [<span class="attr">options</span>]=<span class="string">&quot;cities1&quot;</span></span></span><br><span class="line"><span class="tag">  [(<span class="attr">ngModel</span>)]=<span class="string">&quot;selectedCity1&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">p-dropdown</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">City</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">    <span class="attr">selectedCity1</span>: <span class="title class_">City</span>;</span><br><span class="line">    <span class="attr">cities1</span>: <span class="title class_">SelectItem</span>[] = [</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;Select City&#x27;</span>, <span class="attr">value</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="attr">value</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;NY&#x27;</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;Rome&#x27;</span>, <span class="attr">value</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Rome&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;RM&#x27;</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;London&#x27;</span>, <span class="attr">value</span>: &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;London&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;LDN&#x27;</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;Istanbul&#x27;</span>, <span class="attr">value</span>: &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;Istanbul&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;IST&#x27;</span> &#125; &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">&#x27;Paris&#x27;</span>, <span class="attr">value</span>: &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&#x27;Paris&#x27;</span>, <span class="attr">code</span>: <span class="string">&#x27;PRS&#x27;</span> &#125; &#125;</span><br><span class="line">  ];</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上就是最基本 PrimeNG dropdown list 的用法，這時候如果要取得這一個 dropdown list 的方法，不外乎透過 id、name、CSS 的方式取得，其實我這裡介紹另外一種作法，<code>data-attribute</code> 的方式，寫法可以變成這樣</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p-dropdown</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-pp</span>=<span class="string">&quot;cities1&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">options</span>]=<span class="string">&quot;cities1&quot;</span></span></span><br><span class="line"><span class="tag">  [(<span class="attr">ngModel</span>)]=<span class="string">&quot;selectedCity1&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">p-dropdown</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>透過設定 <code>data-pp</code> (這裡可以自己取名字)，就可以賦予元件一個唯一值，但又不會占用 id/name 的情形，之後還可以透過 <code>directive</code> 的方式將這一個屬性取消掉</p>
<p>當設定完 data-attribute 後，E2E 要取得這元件就變得比較簡單了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;dropdown without editable&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   page.<span class="title function_">navigateTo</span>();</span><br><span class="line">   <span class="keyword">const</span> dropdown = <span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;[data-pp=cities1]&#x27;</span>));</span><br><span class="line">   dropdown.<span class="title function_">click</span>();</span><br><span class="line">   dropdown.<span class="title function_">all</span>(by.<span class="title function_">tagName</span>(<span class="string">&#x27;li&#x27;</span>)).<span class="title function_">then</span>(<span class="function">(<span class="params">options: ElementFinder[]</span>) =&gt;</span> &#123;</span><br><span class="line">     options[<span class="number">1</span>].<span class="title function_">click</span>();</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">const</span> dropdownSelected = dropdown.<span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;.ui-dropdown-label&#x27;</span>));</span><br><span class="line">   <span class="title function_">expect</span>(dropdownSelected.<span class="title function_">getText</span>()).<span class="title function_">toEqual</span>(<span class="string">&#x27;New York&#x27;</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<p>程式碼說明</p>
<ul>
<li><code>const dropdown = element(by.css('[data-pp=cities1]'));</code> : 取得 dropdown 元件</li>
<li><code>dropdown.click();</code> 點擊選單</li>
<li><code>dropdown.all(by.tagName('li'))</code> : 找到顯示出來的選項，(沒錯，PrimeNG  是用 ul &gt; li 的方式呈現)</li>
<li><code>.then((options: ElementFinder[]) =&gt; &#123;  options[1].click(); &#125;);</code> 由於 <code>dropdown.all()</code>回傳是 promise 物件，所以需要接 then 才能做下一步的動作
<ul>
<li><code>options</code> 會取回所有的選項，因為是陣列，可以使用 index 的方式選擇想要點選的項目</li>
</ul>
</li>
<li><code>const dropdownSelected = dropdown.element(by.css('.ui-dropdown-label'));</code> 取得 dropdown 元件顯示結果的 DOM，這裡是顯示在一個 <code>label</code> 上，而這一個 label 會有 <code>.ui-dropdown-label'</code>的 CSS Class</li>
<li><code> expect(dropdownSelected.getText()).toEqual('New York');</code> 既然可以取得顯示用的 <code>Label</code> ，當然可以透過 <code>getText()</code> 的方式做結果比對</li>
</ul>
<p>這就是標準 <code>不可編輯</code>  dropdown 的 E2E 基本的測試寫法</p>
<h1 id="延伸變化"><a class="header-anchor" href="#延伸變化"> </a>延伸變化</h1>
<p>由於 PrimeNG 的 dropdown 元件另外提供輸入的功能，可以透過 <code>[editable]=true</code> 的方式開啟</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p-dropdown</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-pp</span>=<span class="string">&quot;cities1&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">options</span>]=<span class="string">&quot;cities1&quot;</span></span></span><br><span class="line"><span class="tag">  [(<span class="attr">ngModel</span>)]=<span class="string">&quot;selectedCity1&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">editable</span>]=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">p-dropdown</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但這一個設定開啟時，上面所寫的 E2E 測試程式碼就會死掉，主要原因是呈現跟互動方式整個都不一樣了，要點出下拉選單，就無法直接點選 <code>&lt;p-dropdown&gt;</code> 本身，而需要點選旁邊的小圖示</p>
<p><img src="1545533633379.png" alt="1545533633379"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;dropdown with editable&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  page.<span class="title function_">navigateTo</span>();</span><br><span class="line">  <span class="keyword">const</span> dropdown = <span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;[data-pp=cities1]&#x27;</span>));</span><br><span class="line">  <span class="keyword">const</span> dropdownClicked = dropdown.<span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;.ui-dropdown-trigger&#x27;</span>));</span><br><span class="line">  dropdownClicked.<span class="title function_">click</span>();</span><br><span class="line">  dropdown.<span class="title function_">all</span>(by.<span class="title function_">tagName</span>(<span class="string">&#x27;li&#x27;</span>)).<span class="title function_">then</span>(<span class="function">(<span class="params">options: ElementFinder[]</span>) =&gt;</span> &#123;</span><br><span class="line">    options[<span class="number">1</span>].<span class="title function_">click</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> dropdownSelected = dropdown.<span class="title function_">element</span>(by.<span class="title function_">css</span>(<span class="string">&#x27;.ui-dropdown-label&#x27;</span>));</span><br><span class="line">  <span class="title function_">expect</span>(dropdownSelected.<span class="title function_">getAttribute</span>(<span class="string">&#x27;aria-label&#x27;</span>)).<span class="title function_">toEqual</span>(<span class="string">&#x27;New York&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>程式碼說明</p>
<ul>
<li>
<p>取得 dropdown 元件本體的作法是一樣的</p>
</li>
<li>
<p><code>const dropdownClicked = dropdown.element(by.css('.ui-dropdown-trigger'));</code> 取得可以點選的部分 (參閱上圖)</p>
</li>
<li>
<p><code>dropdownClicked.click();</code> 點擊打開選單</p>
</li>
<li>
<p>透過 index 設定要選取的選項</p>
</li>
<li>
<p><code>const dropdownSelected = dropdown.element(by.css('.ui-dropdown-label'));</code> 取得顯示結果的元件</p>
<ul>
<li>
<p>這裡要留意的是，因為是 <code>[editable]=true</code> 的關係，顯示結果的 Element 就在是 <code>Label</code> 了，而是 <code>Input</code></p>
<p><img src="SNAGHTML241a0c0c.PNG" alt="img"></p>
</li>
</ul>
</li>
<li>
<p><code> expect(dropdownSelected.getAttribute('aria-label')).toEqual('New York');</code> 比較結果</p>
</li>
</ul>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>以上就是 PrimeNG dropdown 元件兩種模式在 E2E 的基本寫法，當然這些動作應該要寫成一個 Page Object 模式的檔案，區隔出來好讓整個測試檔案看起來更乾淨。</p>
<h1 id="延伸議題"><a class="header-anchor" href="#延伸議題"> </a>延伸議題</h1>
<p>為了讓輸出到 production 時，HTML 畫面上能減少一些不必要的東西，例如 <code>data-pp</code>，那可以怎麼處理，這裡就介紹一種方式，寫自訂 directive 來自我移除</p>
<h2 id="Directive"><a class="header-anchor" href="#Directive"> </a>Directive</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./../environments/environment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">ElementRef</span>, <span class="title class_">Renderer2</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="comment">// tslint:disable-next-line:directive-selector</span></span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[data-pp]&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DataPpDirective</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> el: ElementRef, <span class="keyword">private</span> renderer: Renderer2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">      renderer.<span class="title function_">removeAttribute</span>(el.<span class="property">nativeElement</span>, <span class="string">&#x27;data-pp&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://medium.com/agilix/angular-and-cypress-data-cy-attributes-d698c01df062">Angular and Cypress: data-cy attributes</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>[Angular] Router in 7: 一些新功能</title>
    <url>/2018/12/24/ng-router-new-feature/</url>
    <content><![CDATA[<p>Angular 7 版以後 (7.1~7.2)，在 Router 的部份又新增了不少功能，一起來看看到底新增了那些功能吧</p>
<span id="more"></span>
<h1 id="Allow-guards-to-return-UrlTree"><a class="header-anchor" href="#Allow-guards-to-return-UrlTree"> </a>Allow guards to return UrlTree</h1>
<ul>
<li>
<p>適用版本: 7.1</p>
</li>
<li>
<p>功能: 允許在 Router Guards 內回傳 UrlTree 物件，來達到轉址功能，一但轉址就會取消既有的瀏覽行為</p>
</li>
<li>
<p>Interface</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>, <span class="attr">state</span>: <span class="title class_">RouterStateSnapshot</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span> | <span class="title class_">UrlTree</span>&gt; | <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span> | <span class="title class_">UrlTree</span>&gt; | <span class="built_in">boolean</span> | <span class="title class_">UrlTree</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>用法範例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CanActivateTeam</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> permissions: Permissions, <span class="keyword">private</span> currentUser: UserToken, </span></span><br><span class="line"><span class="params">              <span class="keyword">private</span> router: Router</span>) &#123;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="title function_">canActivate</span>(</span><br><span class="line">    <span class="attr">route</span>: <span class="title class_">ActivatedRouteSnapshot</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">RouterStateSnapshot</span></span><br><span class="line">  ): <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>|<span class="title class_">UrlTree</span>&gt;|<span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>|<span class="title class_">UrlTree</span>&gt;|<span class="built_in">boolean</span>|<span class="title class_">UrlTree</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">permissions</span>.<span class="title function_">canActivate</span>(<span class="variable language_">this</span>.<span class="property">currentUser</span>, route.<span class="property">params</span>.<span class="property">id</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">createUrlTree</span>([<span class="string">&#x27;/login&#x27;</span>]);   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="runGuardsAndResolvers"><a class="header-anchor" href="#runGuardsAndResolvers"> </a>runGuardsAndResolvers</h1>
<p>在設定 RouterConfig 時，可以設定何時要觸發 <code>Guards</code> 和 <code>Resolver</code> ，目前有的選項有</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RunGuardsAndResolvers</span> = <span class="string">&#x27;pathParamsChange&#x27;</span> | <span class="string">&#x27;paramsChange&#x27;</span> | <span class="string">&#x27;paramsOrQueryParamsChange&#x27;</span> | <span class="string">&#x27;always&#x27;</span> |  (<span class="function">(<span class="params"><span class="keyword">from</span>: ActivatedRouteSnapshot, to: ActivatedRouteSnapshot</span>) =&gt;</span> <span class="built_in">boolean</span>);</span><br></pre></td></tr></table></figure>
<p>設定方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AppComponent</span>, <span class="attr">runGuardsAndResolvers</span>: <span class="string">&#x27;always&#x27;</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<ul>
<li><code>runGuardsAndResolvers: 'always'</code> 可以與 RouterModule 的 <code> onSameUrlNavigation: 'reload'</code> 搭配使用，即可做到同一網址瀏覽可以重跑 <code>Guards</code> 與 <code>Resolvers</code> 的動作</li>
<li>版本 7.1 新增 <code>pathParamsChange</code> 模式</li>
<li>版本 7.2 新增 <code>pathParamsOrQueryParamsChange</code> 模式</li>
<li>版本 7.2 新增 <code>predicate function</code> 模式: 可以自訂觸發規則</li>
</ul>
<h1 id="Allow-passing-state-to-routerLink"><a class="header-anchor" href="#Allow-passing-state-to-routerLink"> </a>Allow passing state to routerLink</h1>
<ul>
<li>
<p>適用版本: 7.2</p>
</li>
<li>
<p>功能: 允許在 routerLink 上傳 data object as state</p>
</li>
<li>
<p>用法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">&quot;[&#x27;/user/bob&#x27;]&quot;</span> [<span class="attr">state</span>]=<span class="string">&quot;&#123;tracingId: 123&#125;&quot;</span>&gt;</span></span><br><span class="line">   link to user component</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">router.<span class="property">events</span>.<span class="title function_">pipe</span>(<span class="title function_">filter</span>(<span class="function"><span class="params">e</span> =&gt;</span> e <span class="keyword">instanceof</span> <span class="title class_">NavigationStart</span>)).<span class="title function_">subscribe</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> transition = router.<span class="title function_">getCurrentTransition</span>();</span><br><span class="line">    tracingService.<span class="title function_">trace</span>(&#123;<span class="attr">id</span>: transition.<span class="property">extras</span>.<span class="property">state</span>&#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/angular/angular/blob/master/CHANGELOG.md">Changelog</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 有些關於 NgModel 的事情</title>
    <url>/2018/12/25/ng-ngmodel-validator-ExpressionChangedAfterItHasBeenCheckedError/</url>
    <content><![CDATA[<p><code>NgModel</code> 如果沒寫好，很容易出現 <code>ExpressionChangedAfterItHasBeenCheckedError</code> 的錯誤訊息，但這一個錯誤訊息可能也不是 <code>NgModel</code> 直接造成的。只好又將 source code 翻出來看了</p>
<span id="more"></span>
<h1 id="緣由"><a class="header-anchor" href="#緣由"> </a>緣由</h1>
<p>有人在 FB 社群上詢問，問什麼以下的程式碼會出現 <code>ExpressionChangedAfterItHasBeenCheckedError</code> 的錯誤訊息</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">ViewChild</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgForm</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  <span class="attr">styles</span>: [<span class="string">`</span></span><br><span class="line"><span class="string">    .error &#123;</span></span><br><span class="line"><span class="string">      background-color: yellow</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;button type=&quot;button&quot; (click)=&quot;addOne()&quot;&gt;Add One Person&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;ng-container *ngFor=&quot;let x of people; let i=index;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;button type=&quot;button&quot; (click)=&quot;delete(i)&quot;&gt;Delete&lt;/button&gt;</span></span><br><span class="line"><span class="string">          Age: &lt;input name=&quot;age_&#123;&#123;i&#125;&#125;&quot; [(ngModel)]=&quot;x.age&quot; required #age=&quot;ngModel&quot; [ngClass]=&quot;&#123;&#x27;error&#x27;: age.errors&#125;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/ng-container&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span>  &#123;</span><br><span class="line"></span><br><span class="line">  people = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">people</span>.<span class="title function_">push</span>(&#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">i: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">people</span>.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1545717434680.png" alt="1545717434680"></p>
<p>當點下 <code>Add One Person</code> 後，就會出現以下的錯誤訊息，但到底為什麼呢?</p>
<p><img src="1545717378276.png" alt="1545717378276"></p>
<p>這個錯誤訊息的產生是因為 <code>[ngClass]</code> 造成的，先說解法。</p>
<ol>
<li>使用 Reactive Form 寫</li>
<li>使用 <code>[class.error]</code> 代替 <code>[ngClass]=&quot;&#123;'error': age.errors &#125;&quot;</code></li>
<li>自訂 <code>ng-invalid</code> 的 class 樣式</li>
</ol>
<h1 id="追追追"><a class="header-anchor" href="#追追追"> </a>追追追</h1>
<p>這一切都要從 Angular 是如何將 Component / Directive 產生出來說起，所有的 Component 和 Directive 的 constructor 都是在 <code>ApplicationRef.tick()</code> 事件前，所以我們就得來看 <code>NgModule</code> 這一個 Directive 到底做了哪些事情</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;[ngModel]:not([formControlName]):not([formControl])&#x27;</span>,</span><br><span class="line">  <span class="attr">providers</span>: [formControlBinding],</span><br><span class="line">  <span class="attr">exportAs</span>: <span class="string">&#x27;ngModel&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NgModel</span> <span class="keyword">extends</span> <span class="title class_ inherited__">NgControl</span> <span class="keyword">implements</span> <span class="title class_">OnChanges</span>,</span><br><span class="line">    <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="attr">control</span>: <span class="title class_">FormControl</span> = <span class="keyword">new</span> <span class="title class_">FormControl</span>();    </span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"><span class="meta">@Optional</span>() <span class="meta">@Host</span>() parent: ControlContainer,</span></span><br><span class="line"><span class="params">              <span class="meta">@Optional</span>() <span class="meta">@Self</span>() <span class="meta">@Inject</span>(NG_VALIDATORS) validators: <span class="built_in">Array</span>&lt;Validator|ValidatorFn&gt;,</span></span><br><span class="line"><span class="params">              <span class="meta">@Optional</span>() <span class="meta">@Self</span>() <span class="meta">@Inject</span>(NG_ASYNC_VALIDATORS) asyncValidators: <span class="built_in">Array</span>&lt;AsyncValidator|AsyncValidatorFn&gt;,</span></span><br><span class="line"><span class="params">              <span class="meta">@Optional</span>() <span class="meta">@Self</span>() <span class="meta">@Inject</span>(NG_VALUE_ACCESSOR)</span></span><br><span class="line"><span class="params">              valueAccessors: ControlValueAccessor[]</span>) &#123;</span><br><span class="line">                <span class="variable language_">super</span>();</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_parent</span> = parent;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_rawValidators</span> = validators || [];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_rawAsyncValidators</span> = asyncValidators || [];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">valueAccessor</span> = <span class="title function_">selectValueAccessor</span>(<span class="variable language_">this</span>, valueAccessors);</span><br><span class="line">              &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>任何 <code>NgModel</code> 都會建立一個 <code>FormControl</code>，這個時間點尚未進行任何 <code>FormControl</code>  的驗證與更新</li>
</ul>
<p>在第一次的 <code>tick()</code> 發生時，會做以下的事情</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">tick</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_runningTick</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;ApplicationRef.tick is called recursively&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> scope = <span class="title class_">ApplicationRef</span>.<span class="title function_">_tickScope</span>();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_runningTick</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_views</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">view</span>) =&gt;</span> view.<span class="title function_">detectChanges</span>());</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_enforceNoNewChanges</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_views</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">view</span>) =&gt;</span> view.<span class="title function_">checkNoChanges</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// Attention: Don&#x27;t rethrow as it could cancel subscriptions to Observables!</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_zone</span>.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">_exceptionHandler</span>.<span class="title function_">handleError</span>(e));</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_runningTick</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">wtfLeave</span>(scope);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>line 9: <code>detectChanges</code> 會執行 <code>checkAndUpdateView</code> 方法</p>
<ul>
<li>
<p><code>checkAndUpdateView</code> 內的 <code>execComponentViewsAction</code> 會觸發 <code>OnChanges</code> 事件</p>
</li>
<li>
<p>但 <code>Services.updateDirectives</code> 卻是在 <code>execComponentViewsAction</code>  之前，所以 <code>[ngClass]</code> 這時候接受到的值是 <code>null</code></p>
</li>
<li>
<p><code>NgModel</code> <code>OnChanges</code> 事件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">gOnChanges</span>(<span class="params">changes: SimpleChanges</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_checkForErrors</span>();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_registered</span>) <span class="variable language_">this</span>.<span class="title function_">_setUpControl</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;isDisabled&#x27;</span> <span class="keyword">in</span> changes) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_updateDisabled</span>(changes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPropertyUpdated</span>(changes, <span class="variable language_">this</span>.<span class="property">viewModel</span>)) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_updateValue</span>(<span class="variable language_">this</span>.<span class="property">model</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewModel</span> = <span class="variable language_">this</span>.<span class="property">model</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 3: 判斷是否為第一次執行，如果是，又會判斷是否是 <code>standalone</code>。如果是 <code>standalong </code> 或是沒有上層的 <code>ngForm</code>  的話，則會立刻執行 <code>formControl.updateValueAndValidity(&#123;emitEvent: false&#125;)</code>， 取得 <code>controls.errors</code></li>
<li>如果不是前一種情形，則會將此 <code>NgModel</code> 加入到 <code>ngForm.controls</code> 裡</li>
</ul>
</li>
</ul>
</li>
<li>
<p>line10: 是當處在 <code>devMode</code> 時，<code>_enforceNoNewChanges</code> 的值會是 <code>true</code> (主要錯誤發生點是在這一階段發生的)</p>
<ul>
<li>執行 <code>checkNoChangesView</code> 方法</li>
<li>執行到 <code>updateDirectives</code> 然後噴錯，因為 <code>[ngClass]</code>  這時候已經能正常地取得 controls.error 的值</li>
<li>因為上面的值在一次 <code>tick</code> 週期內被異動了，所以就噴出 <code>ExpressionChangedAfterItHasBeenCheckedError</code>  錯誤訊息了</li>
</ul>
</li>
</ul>
<h1 id="重新整理一次流程"><a class="header-anchor" href="#重新整理一次流程"> </a>重新整理一次流程</h1>
<ol>
<li>
<p><code>Component Constructor</code></p>
</li>
<li>
<p><code>NgModel Constructor</code></p>
</li>
<li>
<p><code>ApplicationRef.tick()</code></p>
</li>
<li>
<p><code>view.detectChanges()</code></p>
</li>
<li>
<p><code>checkAndUpdateView</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">checkAndUpdateView</span>(<span class="params">view: ViewData</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (view.<span class="property">state</span> &amp; <span class="title class_">ViewState</span>.<span class="property">BeforeFirstCheck</span>) &#123;</span><br><span class="line">    view.<span class="property">state</span> &amp;= ~<span class="title class_">ViewState</span>.<span class="property">BeforeFirstCheck</span>;</span><br><span class="line">    view.<span class="property">state</span> |= <span class="title class_">ViewState</span>.<span class="property">FirstCheck</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    view.<span class="property">state</span> &amp;= ~<span class="title class_">ViewState</span>.<span class="property">FirstCheck</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">shiftInitState</span>(view, <span class="title class_">ViewState</span>.<span class="property">InitState_BeforeInit</span>, <span class="title class_">ViewState</span>.<span class="property">InitState_CallingOnInit</span>);</span><br><span class="line">  <span class="title function_">markProjectedViewsForCheck</span>(view);</span><br><span class="line">  <span class="title class_">Services</span>.<span class="title function_">updateDirectives</span>(view, <span class="title class_">CheckType</span>.<span class="property">CheckAndUpdate</span>);</span><br><span class="line">  <span class="title function_">execEmbeddedViewsAction</span>(view, <span class="title class_">ViewAction</span>.<span class="property">CheckAndUpdate</span>);</span><br><span class="line">  <span class="title function_">execQueriesAction</span>(</span><br><span class="line">      view, <span class="title class_">NodeFlags</span>.<span class="property">TypeContentQuery</span>, <span class="title class_">NodeFlags</span>.<span class="property">DynamicQuery</span>, <span class="title class_">CheckType</span>.<span class="property">CheckAndUpdate</span>);</span><br><span class="line">  <span class="keyword">let</span> callInit = <span class="title function_">shiftInitState</span>(</span><br><span class="line">      view, <span class="title class_">ViewState</span>.<span class="property">InitState_CallingOnInit</span>, <span class="title class_">ViewState</span>.<span class="property">InitState_CallingAfterContentInit</span>);</span><br><span class="line">  <span class="title function_">callLifecycleHooksChildrenFirst</span>(</span><br><span class="line">      view, <span class="title class_">NodeFlags</span>.<span class="property">AfterContentChecked</span> | (callInit ? <span class="title class_">NodeFlags</span>.<span class="property">AfterContentInit</span> : <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Services</span>.<span class="title function_">updateRenderer</span>(view, <span class="title class_">CheckType</span>.<span class="property">CheckAndUpdate</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">execComponentViewsAction</span>(view, <span class="title class_">ViewAction</span>.<span class="property">CheckAndUpdate</span>);</span><br><span class="line">  <span class="title function_">execQueriesAction</span>(</span><br><span class="line">      view, <span class="title class_">NodeFlags</span>.<span class="property">TypeViewQuery</span>, <span class="title class_">NodeFlags</span>.<span class="property">DynamicQuery</span>, <span class="title class_">CheckType</span>.<span class="property">CheckAndUpdate</span>);</span><br><span class="line">  callInit = <span class="title function_">shiftInitState</span>(</span><br><span class="line">      view, <span class="title class_">ViewState</span>.<span class="property">InitState_CallingAfterContentInit</span>, <span class="title class_">ViewState</span>.<span class="property">InitState_CallingAfterViewInit</span>);</span><br><span class="line">  <span class="title function_">callLifecycleHooksChildrenFirst</span>(</span><br><span class="line">      view, <span class="title class_">NodeFlags</span>.<span class="property">AfterViewChecked</span> | (callInit ? <span class="title class_">NodeFlags</span>.<span class="property">AfterViewInit</span> : <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (view.<span class="property">def</span>.<span class="property">flags</span> &amp; <span class="title class_">ViewFlags</span>.<span class="property">OnPush</span>) &#123;</span><br><span class="line">    view.<span class="property">state</span> &amp;= ~<span class="title class_">ViewState</span>.<span class="property">ChecksEnabled</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  view.<span class="property">state</span> &amp;= ~(<span class="title class_">ViewState</span>.<span class="property">CheckProjectedViews</span> | <span class="title class_">ViewState</span>.<span class="property">CheckProjectedView</span>);</span><br><span class="line">  <span class="title function_">shiftInitState</span>(view, <span class="title class_">ViewState</span>.<span class="property">InitState_CallingAfterViewInit</span>, <span class="title class_">ViewState</span>.<span class="property">InitState_AfterInit</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 21: 觸發 <code>NgModel.ngOnChanges</code> 事件</li>
</ul>
</li>
<li>
<p>開發模式下: <code>view.checkNoChanges()</code></p>
</li>
<li>
<p><code>service.checkNoChangesView()</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">checkNoChangesView</span>(<span class="params">view: ViewData</span>) &#123;</span><br><span class="line">  <span class="title function_">markProjectedViewsForCheck</span>(view);</span><br><span class="line">  <span class="title class_">Services</span>.<span class="title function_">updateDirectives</span>(view, <span class="title class_">CheckType</span>.<span class="property">CheckNoChanges</span>);</span><br><span class="line">  <span class="title function_">execEmbeddedViewsAction</span>(view, <span class="title class_">ViewAction</span>.<span class="property">CheckNoChanges</span>);</span><br><span class="line">  <span class="title class_">Services</span>.<span class="title function_">updateRenderer</span>(view, <span class="title class_">CheckType</span>.<span class="property">CheckNoChanges</span>);</span><br><span class="line">  <span class="title function_">execComponentViewsAction</span>(view, <span class="title class_">ViewAction</span>.<span class="property">CheckNoChanges</span>);</span><br><span class="line">  view.<span class="property">state</span> &amp;= ~(<span class="title class_">ViewState</span>.<span class="property">CheckProjectedViews</span> | <span class="title class_">ViewState</span>.<span class="property">CheckProjectedView</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>上述就是一個 <code>tick()</code> 會做的事情，只要在一個 tick 循環內出現 <code>ViewModel</code> 不一致的情形，都會噴錯</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 測試含有 debounceTime 的程式碼</title>
    <url>/2019/01/01/angular-testing-debounceTime/</url>
    <content><![CDATA[<p>Angular 在測試非同步的程式碼，有提供 <code>fakeAsync</code> 與 <code>tick</code> 的方法，可以讓我們手動控制時間的快慢，進而做到程式碼的測試，可是，這個寫法遇到 RxJS 時間相關的 operators 就會出問題，那又該如何處理呢?</p>
<span id="more"></span>
<p>雖然在官方文件內寫了很多如何測試非同步的方法，但是我發現這一個方法比較不容易出錯，也可以在 wallaby.js 的測試環境下正常運作，在此筆記分享</p>
<p>假設我有一段程式碼要測試</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">searchBox</span>.<span class="property">valueChanges</span></span><br><span class="line">      .<span class="title function_">pipe</span>(                </span><br><span class="line">        <span class="title function_">debounceTime</span>(<span class="number">500</span>)        </span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchInput</span> = value;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
<p>這一個行為是在 <code>searchBox</code> 在停止動作後的 <code>500ms</code> 才會觸發 emit value 的事件，屬於時間類的 operators, 在 spec 內可以這樣子寫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;測試 Searchox&#x27;</span>, <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">FakeAsyncTestZoneSpec</span> = (<span class="title class_">Zone</span> <span class="keyword">as</span> <span class="built_in">any</span>)[<span class="string">&#x27;FakeAsyncTestZoneSpec&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> testZoneSpec = <span class="keyword">new</span> <span class="title class_">FakeAsyncTestZoneSpec</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> fakeAsyncTestZone = <span class="title class_">Zone</span>.<span class="property">current</span>.<span class="title function_">fork</span>(testZoneSpec);</span><br><span class="line"></span><br><span class="line">    fakeAsyncTestZone.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        component.<span class="property">searchBox</span>.<span class="title function_">setValue</span>(<span class="string">&#x27;something&#x27;</span>);</span><br><span class="line">        testZoneSpec.<span class="title function_">tick</span>(<span class="number">500</span>);</span><br><span class="line">        <span class="title function_">expect</span>(component.<span class="property">searchInput</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;something&#x27;</span>);</span><br><span class="line">        <span class="title function_">done</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>※上述寫法必須在 zone.js <code>0.8.26</code> 版本才能使用</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://angular.io/guide/testing#async-test-with-fakeasync">Angular Testing</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] ControlContainer 的應用</title>
    <url>/2019/01/04/angular-controlContainer/</url>
    <content><![CDATA[<p>來談談 <code>ControlContainer</code> 的用法，根據 API 文件解釋</p>
<blockquote>
<p>A base class for directives that contain multiple registered instances of <code>NgControl</code>. Only used by the forms module.</p>
</blockquote>
<p>而內建繼承使用的 class 有</p>
<ul>
<li><code>AbstractFormGroupDirective</code></li>
<li><code>NgModelGroup</code></li>
<li><code>FormGroupName</code></li>
<li><code>NgForm</code></li>
<li><code>FormGroupDirective</code></li>
<li><code>FormArrayName</code></li>
</ul>
<p>我們又可以如何利用 <code>ControlContainer</code> 呢</p>
<span id="more"></span>
<h1 id="場景"><a class="header-anchor" href="#場景"> </a>場景</h1>
<p>其實簡單的一句話，我們可以寫出可以重複使用的 <code>FormGroupControl</code>，但由於 Angular 表單有兩種模式，這兩種模式在使用 <code>ControlContainer</code> 的用法上有些微的差異，這裡會分別寫出</p>
<p>首先，我們先假設我們有一個表單的區塊，會重複出現在很多地方，那我們是否可以將該區塊抽成一個獨立的 component</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">myForm</span>=<span class="string">&quot;ngForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Firstname:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Lastname:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">ngModelGroup</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Zip:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Street:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;street&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>City:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;&#123; myForm.value | json &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假設我想將 <code>&lt;fieldset&gt;</code> 的部分抽成獨立的 component 時，該怎麼做呢?</p>
<h1 id="Template-Form"><a class="header-anchor" href="#Template-Form"> </a>Template Form</h1>
<p>很直覺的是直接建立一個新的 Component 然後把 html 搬進去</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">ngModelGroup</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Zip:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Street:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;street&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>City:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>address.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">myForm</span>=<span class="string">&quot;ngForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Firstname:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Lastname:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">ngModel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-address</span>&gt;</span><span class="tag">&lt;/<span class="name">app-address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;&#123; myForm.value | json &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>當我們這樣子搬完後，會看到一個錯誤訊息</p>
<p><img src="1546568595539.png" alt="1546568595539"></p>
<p>造成這個錯誤訊息的兇手是  <code>ngModelGroup</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">modelGroupProvider</span>: <span class="built_in">any</span> = &#123;</span><br><span class="line">  <span class="attr">provide</span>: <span class="title class_">ControlContainer</span>,</span><br><span class="line">  <span class="attr">useExisting</span>: <span class="title function_">forwardRef</span>(<span class="function">() =&gt;</span> <span class="title class_">NgModelGroup</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;<span class="attr">selector</span>: <span class="string">&#x27;[ngModelGroup]&#x27;</span>, <span class="attr">providers</span>: [modelGroupProvider], <span class="attr">exportAs</span>: <span class="string">&#x27;ngModelGroup&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">NgModelGroup</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractFormGroupDirective</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">OnDestroy</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">      <span class="meta">@Host</span>() <span class="meta">@SkipSelf</span>() parent: ControlContainer,</span></span><br><span class="line"><span class="params">      <span class="meta">@Optional</span>() <span class="meta">@Self</span>() <span class="meta">@Inject</span>(NG_VALIDATORS) validators: <span class="built_in">any</span>[],</span></span><br><span class="line"><span class="params">...</span></span><br></pre></td></tr></table></figure>
<p>根據原始碼，我們需要提供 <code>ControlContainer</code>，但這又要從那裡來呢? 當然是從上層 (Host) 的 <code>NgForm</code> 提供，所以需要在 <code>app-address.component.ts</code> 內加入這一行</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-address&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">`./app-address.component.html`</span>,</span><br><span class="line">  <span class="attr">viewProviders</span>:[&#123;</span><br><span class="line">    <span class="attr">provide</span>: <span class="title class_">ControlContainer</span>, <span class="attr">useExisting</span>: <span class="title class_">NgForm</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AddressComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>請留意：是註冊在 <code>viewProviders</code>，而不是 <code>providers</code>，其中的差異可以參閱 <a href="https://blog.kevinyang.net/2018/01/19/angular-viewproviders-providers/">[Angular] viewProviders V.S. providers</a></li>
</ul>
<p>當然成註冊後，剛錯誤就會消失，而畫面又回到正常的運作了，<a href="https://stackblitz.com/edit/angular-controlcontainer-template">範例程式碼</a></p>
<h1 id="Reactive-Form"><a class="header-anchor" href="#Reactive-Form"> </a>Reactive Form</h1>
<p>上面 <code>ControlContainer</code> 的用法就不適用於 Reactive Form 的開發方式了，而 Reactive Form 應該要這樣子寫</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;formData&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">address</span> <span class="attr">formGroupName</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;&#123; formData.value | json &#125;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>app.component.html</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ControlContainer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/forms&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;address&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;fieldset [formGroup]=&quot;controlContainer.control&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;label&gt;Zip:&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; name=&quot;zip&quot; formControlName=&quot;zip&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;label&gt;Street:&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; name=&quot;street&quot; formControlName=&quot;street&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;label&gt;City:&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;text&quot; name=&quot;city&quot; formControlName=&quot;city&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/fieldset&gt;</span></span><br><span class="line"><span class="string">  `</span>  </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AddressComponent</span> &#123; </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> controlContainer: ControlContainer</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>[formGroup]</code> 的來源是來自 <code>ControlContainer</code>，剩下的行為就一模一樣了</li>
</ul>
<p><code>Reacitve Form</code> 的開發方式看起來簡單多了，<a href="https://stackblitz.com/edit/angular-controlcontainer-reactive">範例程式碼</a></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/api/forms/ControlContainer">API - ControlContainer</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] NgZone 的應用</title>
    <url>/2019/02/14/ng-ngzone/</url>
    <content><![CDATA[<p>昨天在討論區上面有人問了一個問題，「Angular 要如何做到檢查使用是否有在活動，如果一定時間內都沒有任何動作時，要自動登出系統」，這一個需求最直覺的方式是定時去檢查最後一次使用者有動作的時間，但使用 <code>setInterval</code> 會讓 Angular 的效能變差，這時候要怎麼解呢?</p>
<span id="more"></span>
<p>首先要先說明為什麼使用 <code>setInterval</code> 會讓 Angular 損失效能，主要的原因是 Angular 預設有使用 <code>zone.js</code> 來監控所有的事件，<code>zone.js</code> 會監測以下的事件，如果有發生時，就會觸發 <code>ChangeDetection</code>，進而更新整個畫面</p>
<ol>
<li><code>Events</code> - 使用者的行為，像是 <code>click</code>、<code>change</code>、<code>input</code>、<code>submit</code> 等</li>
<li><code>XMLHttpRequests</code> - 像是呼叫 API</li>
<li><code>Timers</code> - <code>setTimeout()</code> 與 <code>setInterval()</code></li>
</ol>
<p>既然 <code>setInterval()</code> 會觸發 <code>ChangeDetection</code>，那就不要讓 Angular 知道有這件事情就好了。</p>
<h1 id="NgZone"><a class="header-anchor" href="#NgZone"> </a>NgZone</h1>
<p>Angular 有好心的幫我們包了一個 <code>NgZone</code> 的 class，我們可以透過這一個 class 來進行一些簡單的 zone.js 的操作</p>
<blockquote>
<p>An injectable service for executing work inside or outside of the Angular zone.</p>
</blockquote>
<p>這是官方描述 <code>NgZone</code> 的功能，而 <code>NgZone</code> 是長這樣的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NgZone</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isInAngularZone</span>(): <span class="built_in">boolean</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">assertInAngularZone</span>(): <span class="built_in">void</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">assertNotInAngularZone</span>(): <span class="built_in">void</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">__0</span>)</span><br><span class="line">  <span class="attr">hasPendingMicrotasks</span>: <span class="built_in">boolean</span></span><br><span class="line">  <span class="attr">hasPendingMacrotasks</span>: <span class="built_in">boolean</span></span><br><span class="line">  <span class="attr">isStable</span>: <span class="built_in">boolean</span></span><br><span class="line">  <span class="attr">onUnstable</span>: <span class="title class_">EventEmitter</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="attr">onMicrotaskEmpty</span>: <span class="title class_">EventEmitter</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="attr">onStable</span>: <span class="title class_">EventEmitter</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="attr">onError</span>: <span class="title class_">EventEmitter</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">  run&lt;T&gt;(<span class="attr">fn</span>: <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> T, applyThis?: <span class="built_in">any</span>, applyArgs?: <span class="built_in">any</span>[]): T</span><br><span class="line">  runTask&lt;T&gt;(<span class="attr">fn</span>: <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> T, applyThis?: <span class="built_in">any</span>, applyArgs?: <span class="built_in">any</span>[], name?: <span class="built_in">string</span>): T</span><br><span class="line">  runGuarded&lt;T&gt;(<span class="attr">fn</span>: <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> T, applyThis?: <span class="built_in">any</span>, applyArgs?: <span class="built_in">any</span>[]): T</span><br><span class="line">  runOutsideAngular&lt;T&gt;(<span class="attr">fn</span>: <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> T): T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而這一篇文章我們就先看 <code>run</code> 與 <code>runOutsideAngular</code> 這兩個方法就好，在實務上這兩個也是最常用的方法</p>
<h2 id="runOutsideAngular"><a class="header-anchor" href="#runOutsideAngular"> </a>runOutsideAngular</h2>
<p><code>runOutsideAngular</code> 內所執行的 <code>function</code> 是不會觸發任何 change detection 的，介面如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">runOutsideAngular&lt;T&gt;(<span class="attr">fn</span>: <span class="function">(<span class="params">...args: <span class="built_in">any</span>[]</span>) =&gt;</span> T): T</span><br></pre></td></tr></table></figure>
<p>使用範例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">NgZone</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;p&gt;</span></span><br><span class="line"><span class="string">  	&lt;label&gt;Count :&lt;/label&gt; &#123;&#123; num &#125;&#125;    </span></span><br><span class="line"><span class="string">  &lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> zone: NgZone</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> token = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = ++i;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">num</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(token);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的<a href="https://stackblitz.com/edit/post-zone-example1?file=src%2Fapp%2Fapp.component.ts">程式碼</a>會每秒更新 <code>num</code> 的變數值，但是真正執行時，會發現畫面並沒有跟著被更新，但實際上 <code>num</code> 的這個變數是有被更新的，如何證明呢? 我們來加一個按鈕來觸發 change detection (<a href="https://stackblitz.com/edit/post-zone-example2?file=src/app/app.component.ts">程式碼</a>)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">NgZone</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;p&gt;</span></span><br><span class="line"><span class="string">  &lt;label&gt;Count :&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123; num &#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;button (click)=&quot;c()&quot;&gt;click&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> zone: NgZone</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> token = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">num</span> = ++i;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">num</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(token);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">c</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>為什麼會這樣子，還記得在一開始的地方我提到 <code>zone.js </code> 所監控的事件如果發生事件的話，就會觸發 change detection，而 <code>click</code> 事件剛就是在 <code>zone.js</code> 的管轄範圍內，所以當然經過一輪的 change detection，畫面就會顯示出當下應顯示的內容了。</p>
<p>稍微小結一下，根據上面的範例程式，我們可以知道當程式碼寫在 <code>runOutsideAngular</code> 是不會觸發 Angular 的 change detection。接下來延伸的問題是，那我要怎麼手動觸發 change detection 呢?</p>
<h2 id="run"><a class="header-anchor" href="#run"> </a>run</h2>
<p>手動觸發 change detection 的方法有幾種，因為這裡我們的主題是 <code>NgZone</code>，所以當然要使用 <code>NgZone</code> 的方法。而 <code>run</code> 這一個方法，其目的就與 <code>runOutsideAngular</code> 是反過來的，這裡是任何方法只要是寫在 <code>run</code> 裡面，就會進入到 Angular zone 的管轄範圍，介面如下</p>
<blockquote>
<p>Executes the <code>fn</code> function synchronously within the Angular zone and returns value returned by the function.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run&lt;T&gt;(fn: (...args: any[]) =&gt; T, applyThis?: any, applyArgs?: any[]): T</span><br></pre></td></tr></table></figure>
<p>而這方法常見的使用情境是使用一些第三方套件，因為一開始就不在 zone.js 的管轄內，所以就必須手動將其包進 <code>run()</code> 內，才可以讓畫面正常的顯示。</p>
<p>而我們也可以透過這個方式將上一小節的問題給解決掉，<a href="https://stackblitz.com/edit/post-zone-example3?file=src/app/app.component.ts">程式碼</a>如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">NgZone</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;p&gt;</span></span><br><span class="line"><span class="string">  &lt;label&gt;Count :&lt;/label&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123; num &#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/p&gt;  </span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> zone: NgZone</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">const</span> token = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">num</span> = ++i;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">num</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(token);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>透過 <code>run</code> 的方式就可以簡單的回到 Angular zone 的管轄範圍了。</p>
<h1 id="進階討論"><a class="header-anchor" href="#進階討論"> </a>進階討論</h1>
<p>回到一開始提到的問題</p>
<blockquote>
<p>Angular 要如何做到檢查使用是否有在活動，如果一定時間內都沒有任何動作時，要自動登出系統</p>
</blockquote>
<p>最簡單的解法是在 <code>localStorage</code> 紀錄最後一次使用者動作的時間，然後寫一個 timer 每隔 <code>n</code> 秒檢查目前的時間與最後一次異動時間的間隔是否大於所設定的閒置時間，<a href="https://stackblitz.com/edit/post-zone-example4?file=src/app/app.component.ts">簡易版本</a>如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  notify$ = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">notify$</span>.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;timeout&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> zone: NgZone</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;expiredDate&#x27;</span>, <span class="title function_">addMinutes</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">1</span>).<span class="title function_">getTime</span>().<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> i = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> expiredDate = +<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;expiredDate&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - expiredDate);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - expiredDate &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">notify$</span>.<span class="title function_">next</span>();</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="built_in">clearInterval</span>(i);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而這樣子的程式碼就只會在符合設定條件時，通知 Angular 要處理之後的動作了。</p>
<p>另外一種解法，不透過 <code>run()</code> 的方式是利用回傳值，不論是 <code>run</code> 或是 <code>runOutsideAngular</code> 都會有回傳值，我們就可以透過回傳 <code>Promise</code> 的方式，來解一樣的問題 (<a href="https://stackblitz.com/edit/post-zone-example5?file=src/app/app.component.ts">程式碼</a>)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> zone: NgZone</span>) &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;expiredDate&#x27;</span>, <span class="title function_">addMinutes</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="number">0.1</span>).<span class="title function_">getTime</span>().<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="title function_">runOutsideAngular</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> i = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> expiredDate = +<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;expiredDate&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - expiredDate);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - expiredDate &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="literal">true</span>);</span><br><span class="line">          <span class="built_in">clearInterval</span>(i);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;timeout&#x27;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="補充內容"><a class="header-anchor" href="#補充內容"> </a>補充內容</h1>
<p><code>zone.js</code> 的維護者/高手在社群內提出以下說明(<a href="https://www.facebook.com/groups/augularjs.tw/permalink/2381900508486972/?comment_id=2382387108438312&amp;reply_comment_id=2382389171771439&amp;comment_tracking=%7B%22tn%22%3A%22R%22%7D">連結</a>)</p>
<blockquote>
<p>如果要更加提高性能可以使用<code>window[Zone.__symbom__('setInterval')]</code>, 這樣會強制使用Native 的Delegate, <code>ngZone.runOutsideAngular</code> 雖然不會觸發ChangeDetection,但是仍然會在默認的RootZone裡,會有一定的性能損耗</p>
</blockquote>
<p>解法如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> zone: NgZone</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> nativeSetInterval = <span class="variable language_">window</span>[<span class="title class_">Zone</span>.<span class="title function_">__symbol__</span>(<span class="string">&#x27;setInterval&#x27;</span>)]; <span class="comment">// 使用這個代替 setInterval</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">nativeSetInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">zone</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">num</span> = ++i;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">num</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;</span><br><span class="line">          <span class="built_in">clearInterval</span>(token);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://stackblitz.com/edit/post-zone-example6?file=src/app/app.component.ts">程式碼</a></p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>雖然 <code>NgZone</code> 是一個很冷門的主題，但是還是有使用到的機會，了解一下也不是件壞事</p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li><a href="https://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html">ZONES IN ANGULAR</a></li>
<li><a href="https://blog.thoughtram.io/angular/2017/02/21/using-zones-in-angular-for-better-performance.html">USING ZONES IN ANGULAR FOR BETTER PERFORMANCE</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] 應用練習 - sequenceEqual</title>
    <url>/2019/02/14/rxjs-sequence/</url>
    <content><![CDATA[<p>今天在 medium 上面看到一篇有趣的文章，他的主題是 <code>How to detect a sequence of keystrokes in JavaScript</code>，那讓我用 RxJS 來挑戰一下，順便回味一下以前打電動需要輸入一系列的指令才可以開啟密技的樂趣</p>
<span id="more"></span>
<h1 id="挑戰"><a class="header-anchor" href="#挑戰"> </a>挑戰</h1>
<blockquote>
<p>當使用者在畫面上輸入了 **上上下下左右左右 BA **，就跳出 <code>密技開啟</code> 的訊息</p>
</blockquote>
<ol>
<li>
<p>擷取 <code>keyup</code> 事件，這個簡單</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;keyup&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>我們先用 <code>code</code> 來作為判斷的規則</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;keyup&#x27;</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">e</span>=&gt;</span> e.<span class="property">code</span>));</span><br></pre></td></tr></table></figure>
<p><img src="1550108112073.png" alt="1550108112073"></p>
</li>
<li>
<p>準備開啟密技所需要的條件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> codes = [</span><br><span class="line">  <span class="string">&#x27;ArrowUp&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowUp&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowDown&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowDown&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowLeft&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowRight&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowLeft&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowRight&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;KeyB&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;KeyA&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>這裡先暫停一下，要解這一個題目，只要將步驟 2 所收集到的 code 與步驟 3 的條件做比對，如果相同就可以啟動密技了</p>
<ol start="4">
<li>
<p>收集 10 個 <code>keyup</code> 事件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keyCorrection = keys.<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">bufferCount</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>bufferCount</code> :</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">bufferCount&lt;T&gt;(<span class="attr">bufferSize</span>: <span class="built_in">number</span>, <span class="attr">startBufferEvery</span>: <span class="built_in">number</span> = <span class="literal">null</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>比較陣列的值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> matches = keyCorrection.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">result</span> =&gt;</span> codes.<span class="title function_">every</span>(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> item === result[idx]))</span><br><span class="line">);</span><br><span class="line">matches.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure>
<p>這樣子當次輸入 10 次項目時，就會做一次比對結果，這樣子結果是對的，但好像沒那麼漂亮</p>
</li>
</ol>
<h1 id="漂亮一點的解法"><a class="header-anchor" href="#漂亮一點的解法"> </a>漂亮一點的解法</h1>
<p>先來調整一下 <code>keyCorrection</code> 的寫法，讓在第一次收集完 <code>keyup</code> 事件後，之後每一次的<code>keyup</code> 事件都會送出值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> keyCorrection = keys.<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">bufferCount</span>(<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>再來修正比較的部份，這裡介紹一個 operator, <code>sequenceEqual</code>，這一個方法的功用是比較兩個 Observable 的值發生的順序是否一樣</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">sequenceEqual&lt;T&gt;(<span class="attr">compareTo</span>: <span class="title class_">Observable</span>&lt;T&gt;, comparator?: <span class="function">(<span class="params">a: T, b: T</span>) =&gt;</span> <span class="built_in">boolean</span>): <span class="title class_">OperatorFunction</span>&lt;T, <span class="built_in">boolean</span>&gt;</span><br></pre></td></tr></table></figure>
<p>將 matches 的部份調整一下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> matches = keyCorrection.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">mergeMap</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="title function_">from</span>(result).<span class="title function_">pipe</span>(<span class="title function_">sequenceEqual</span>(<span class="title function_">from</span>(codes))))</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>經過這樣子的修正後，一樣可以達到一樣的效果，最後在修飾一下，完整的程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEvent, <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map, bufferCount, tap, mergeMap, sequenceEqual &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> codes = <span class="title function_">from</span>([</span><br><span class="line">  <span class="string">&#x27;ArrowUp&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowUp&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowDown&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowDown&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowLeft&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowRight&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowLeft&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ArrowRight&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;KeyB&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;KeyA&#x27;</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = <span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;keyup&#x27;</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function">(<span class="params">e: KeyboardEvent</span>) =&gt;</span> e.<span class="property">code</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matches = keys.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">bufferCount</span>(<span class="number">10</span>, <span class="number">1</span>),</span><br><span class="line">  <span class="title function_">tap</span>(<span class="variable language_">console</span>.<span class="property">log</span>),</span><br><span class="line">  <span class="title function_">mergeMap</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="title function_">from</span>(result).<span class="title function_">pipe</span>(<span class="title function_">sequenceEqual</span>(codes)))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">matches.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br></pre></td></tr></table></figure>
<h1 id="參考資訊"><a class="header-anchor" href="#參考資訊"> </a>參考資訊</h1>
<ul>
<li><a href="https://stackblitz.com/edit/sequenceequal?file=index.ts">範例程式碼</a></li>
<li><a href="https://rxjs.dev/api/operators/sequenceEqual">RxJS API - sequenceEqual</a></li>
<li><a href="https://rxjs.dev/api/operators/bufferCount">RxJS API - bufferCount</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] using</title>
    <url>/2019/02/19/rxjs-using/</url>
    <content><![CDATA[<p>RxJS  裡面有許多 Operators 或是建立 Observable  的方法，而這篇文章就是要介紹 <code>using</code> 這一個建立 Observable 的方法</p>
<span id="more"></span>
<p>根據官方文件的說明，<code>Using</code> 是</p>
<blockquote>
<p>Creates an Observable that uses a resource which will be disposed at the same time as the Observable.</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">using&lt;T&gt;(<span class="attr">resourceFactory</span>: <span class="function">() =&gt;</span> <span class="title class_">Unsubscribable</span> | <span class="built_in">void</span>, <span class="attr">observableFactory</span>: <span class="function">(<span class="params">resource: Unsubscribable | <span class="built_in">void</span></span>) =&gt;</span> <span class="title class_">ObservableInput</span>&lt;T&gt; | <span class="built_in">void</span>): <span class="title class_">Observable</span>&lt;T&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Parameters</strong></p>
<table>
<thead>
<tr>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>resourceFactory</td>
<td>A function which creates any resource object that implements <code>unsubscribe</code> method</td>
</tr>
<tr>
<td>observableFactory</td>
<td>A function which creates an Observable, that can use injected resource object.</td>
</tr>
</tbody>
</table>
<p><strong>Returns</strong></p>
<p><code>Observable&lt;T&gt;</code>: An Observable that behaves the same as Observable returned by <code>observableFactory</code>, but which - when completed, errored or unsubscribed - will also call <code>unsubscribe</code> on created resource object.</p>
<p>看不懂沒關係，來看一個簡單的程式碼就了解了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; using, <span class="title class_">Subject</span>, merge, <span class="title class_">Subscription</span>, interval &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; map, refCount, tap, publish, take &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messages$ = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="keyword">const</span> rejected$ = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">using</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resourceFactory</span></span><br><span class="line">  <span class="keyword">const</span> subscription = <span class="keyword">new</span> <span class="title class_">Subscription</span>();</span><br><span class="line">  subscription.<span class="title function_">add</span>(</span><br><span class="line">    <span class="title function_">interval</span>(<span class="number">500</span>).<span class="title function_">pipe</span>(<span class="title function_">tap</span>(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (n === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 這行會造成透過 observableFactory 建立出的 observable 發生錯誤而中斷</span></span><br><span class="line">        rejected$.<span class="title function_">error</span>(<span class="string">&#x27;oops, something wrong&#x27;</span>); </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner obs: &#x27;</span> + n)</span><br><span class="line">    &#125;)).<span class="title function_">subscribe</span>()</span><br><span class="line">  );</span><br><span class="line">  subscription.<span class="title function_">add</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obs unsubscribe&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> subscription;</span><br><span class="line">&#125;, <span class="function">(<span class="params">subscription</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// observableFactory</span></span><br><span class="line"> <span class="keyword">return</span>  <span class="title function_">merge</span>(messages$, rejected$)</span><br><span class="line">&#125;).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">tap</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x)),</span><br><span class="line">  <span class="title function_">publish</span>(),</span><br><span class="line">  <span class="title function_">refCount</span>()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">tap</span>(<span class="function"><span class="params">n</span> =&gt;</span> messages$.<span class="title function_">next</span>(n))).<span class="title function_">subscribe</span>()</span><br><span class="line"><span class="keyword">const</span> sub = source.<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">5</span>)).<span class="title function_">subscribe</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>執行結果:</p>
<p><img src="1550820374107.png" alt="1550820374107"></p>
<p>當 observableFactory 結束時也會同時執行 resourceFactory 內所回傳的 subscription 物件的 unsubscribe 方法</p>
<h2 id="subscription"><a class="header-anchor" href="#subscription"> </a>subscription</h2>
<p><code>subscription.add</code> 裡面除了可以放入其他 subscription 外，也可以放入 function，當 <code>unsubscribe</code> 時，除了會將加到這一個 <code>subscription</code> 內的 <code>subscriptions</code> 給取消註冊外，也會執行所放入的 <code>function</code>，這個在特定情況下十分好用</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://stackblitz.com/edit/rxjs-using">範例程式碼</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 如何取得所處上層的 Component 元件 ?</title>
    <url>/2019/02/27/ng-get-parent-component/</url>
    <content><![CDATA[<p>我們知道 Angular 的系統是透過 Component 的方式堆疊起來的，而 Component 與 Component 的溝通方式有幾種，1. 透過 <code>@Input</code> 和 <code>@Output</code> ，2. 透過 <code>service</code> 的方式，或是 3. 直接將上層 <code>Component</code> 注入到目前的 <code>Component</code> 內使用。</p>
<p>但通常我是不建議使用第 3 種方式，可是，在某些情境下，還是得必須這樣子處理，而且還需要動態的取得上層的 <code>Component</code>，這篇文章就是分享如何取得上層 <code>Component</code></p>
<span id="more"></span>
<p>取得上層 <code>Component</code> 的方式，我們會透過 <code>Injector</code> 機制來完成，以下介紹兩種方式可以達到一樣的效果</p>
<h1 id="情境描述"><a class="header-anchor" href="#情境描述"> </a>情境描述</h1>
<blockquote>
<p>當 Input 離開時，需要觸發執行某些動作，但又不想要每一個 Component 都要處理這一類的工作，所以希望能用一個 general 的解法來完成這需求</p>
</blockquote>
<h1 id="正規解"><a class="header-anchor" href="#正規解"> </a>正規解</h1>
<p>根據情境，看起來又是一個可透過 RxJS 來完成的需求，但我要怎麼知道我目前的 Input 離開時，要讓那一個 <code>Component</code> 工作呢? 所以只要能取得目前觸發的 Input 是在哪一個 Component 內，就可以完成這需求了。</p>
<h2 id="初版"><a class="header-anchor" href="#初版"> </a>初版</h2>
<ul>
<li>directive</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">HostListener</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ControlService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./control.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;input&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">InputFocusDirective</span> &#123;  </span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;blur&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="title function_">inputBlur</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, value &#125; = event.<span class="property">target</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">inputEvent$</span>.<span class="title function_">next</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;blur&#x27;</span>,      </span><br><span class="line">      name, value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> service: ControlService</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>service</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ControlService</span> &#123;</span><br><span class="line">  inputEvent$ = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>app.component.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ControlService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./control.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ParentComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./parent-component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">   <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;hello title=&quot;&#123;&#123; name &#125;&#125;&quot;&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="string">    &lt;form name=&quot;test&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input name=&quot;firstName&quot; [(ngModel)]=&quot;firstName&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">      Start editing to see some magic happen :)</span></span><br><span class="line"><span class="string">    &lt;/p&gt;  </span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;AppComponent&#x27;</span>;</span><br><span class="line">  firstName;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> service: ControlService</span>) &#123;</span><br><span class="line">    service.<span class="property">inputEvent$</span>    </span><br><span class="line">    .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">x: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上述的寫法，只要在任何 <code>Component</code> 內的 <code>&lt;input&gt;</code> 離開時都會觸發並廣播訊息到所有註冊者</p>
<h2 id="第二版"><a class="header-anchor" href="#第二版"> </a>第二版</h2>
<p>接下來就是加入觸發者所處的 Component 資訊就可以做過濾判斷了，但在這之前，先建立一個通用的 <code>ParentComponent</code></p>
<ul>
<li>parent-component.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ParentComponent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>app.component.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, forwardRef &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ParentComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./parent-component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line"> ...</span><br><span class="line"> <span class="attr">providers</span>: [</span><br><span class="line">    &#123; <span class="attr">provide</span>: <span class="title class_">ParentComponent</span>, <span class="attr">useExisting</span>: <span class="title function_">forwardRef</span>(<span class="function">() =&gt;</span> <span class="title class_">AppComponent</span>) &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>說明</p>
<ul>
<li>利用 Injector 取 provider 的順序特性，我們就能利用該特性取得目前觸發 directive 事件元件的隸屬 component</li>
<li><code>forwardRef</code>: Allows to refer to references which are not yet defined.</li>
<li><code>useExisting</code>: 使用已經建立的 instance，這能確保取得的 instance 不是全新的</li>
</ul>
</li>
<li>
<p>directive</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">HostListener</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ControlService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./control.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;input&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">InputFocusDirective</span> &#123;  </span><br><span class="line"></span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;blur&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="title function_">inputBlur</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, value &#125; = event.<span class="property">target</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">inputEvent$</span>.<span class="title function_">next</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;blur&#x27;</span>,      </span><br><span class="line">      <span class="attr">comp</span>: <span class="variable language_">this</span>.<span class="property">parent</span>,</span><br><span class="line">      name, value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> service: ControlService, <span class="keyword">private</span> parent: ParentComponent</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>程式碼說明
<ul>
<li>將 <code>ParentComponent</code> 注入後，在事件觸發時將 <code>Component</code> 的資訊傳入</li>
</ul>
</li>
<li>app.component.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(...)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> service: ControlService</span>) &#123;</span><br><span class="line">    service.<span class="property">inputEvent$</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">filter</span>(<span class="function">(<span class="params">x:<span class="built_in">any</span></span>)=&gt;</span> x.<span class="property">comp</span> === <span class="variable language_">this</span>))</span><br><span class="line">    .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">x: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>程式碼說明
<ul>
<li>因為 <code>inputEvent$</code> 內傳回的資訊已經有包含 <code>Component</code> 的資訊，所以可以透過 <code>filter</code> 的 operators 來過濾廣播訊息</li>
</ul>
</li>
</ul>
<h2 id="完成需求"><a class="header-anchor" href="#完成需求"> </a>完成需求</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> service: ControlService</span>) &#123;</span><br><span class="line">    service.<span class="property">inputEvent$</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">filter</span>(<span class="function">(<span class="params">x:<span class="built_in">any</span></span>)=&gt;</span> x.<span class="property">comp</span> === <span class="variable language_">this</span>))</span><br><span class="line">    .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">x: <span class="built_in">any</span></span>) =&gt;</span> &#123;      </span><br><span class="line">      (x.<span class="property">comp</span> <span class="keyword">as</span> <span class="title class_">AppComponent</span>).<span class="title function_">show</span>(x.<span class="property">value</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">show</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://stackblitz.com/edit/angular-w71sa3?file=src%2Fapp%2Fapp.component.ts">範例程式碼</a></p>
<h1 id="暗黑解"><a class="header-anchor" href="#暗黑解"> </a>暗黑解</h1>
<p>※ <strong>注意</strong>: 此暗黑解法十分黑暗，心臟不夠強的千萬不要用，所以我不會做任何解釋</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Directive</span>, <span class="title class_">HostListener</span>, <span class="title class_">Injector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ControlService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./control.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;input&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">InputFocusDirective</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">&#x27;blur&#x27;</span>, [<span class="string">&#x27;$event&#x27;</span>])</span><br><span class="line">  <span class="title function_">inputBlur</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, value &#125; = event.<span class="property">target</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">inputEvent$</span>.<span class="title function_">next</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;blur&#x27;</span>,</span><br><span class="line">      <span class="attr">comp</span>: <span class="variable language_">this</span>.<span class="property">injector</span>[<span class="string">&#x27;view&#x27;</span>].<span class="property">component</span>,</span><br><span class="line">      name, value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> service: ControlService, <span class="keyword">private</span> injector: Injector</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://stackblitz.com/edit/angular-7owayq?file=src%2Fapp%2Finput-focus.directive.ts">範例程式碼</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] ngClass with JavaScript Set</title>
    <url>/2019/03/12/ng-ngclass/</url>
    <content><![CDATA[<p>Angular 的 <code>ngClass</code> 可以讓我們用 <code>Object</code> 的方式來動態設定 css class，其實我們還可以使用另外一種方式來控制 <code>ngClass</code></p>
<span id="more"></span>
<h1 id="Set"><a class="header-anchor" href="#Set"> </a>Set</h1>
<p>JavaScript 的 <code>set</code> 可以讓我們儲存任何資料，而且能確保該資料是唯一的，表示一個 set 裡面不會有重複的資料。基本用法如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">set1.<span class="title function_">has</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">set1.<span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// set1 還是只有一個 1</span></span><br><span class="line">set1.<span class="title function_">delete</span>(<span class="number">1</span>); <span class="comment">// 將 1 從 set1 中移除</span></span><br><span class="line">set1.<span class="title function_">has</span>(<span class="number">1</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h1 id="ngClass"><a class="header-anchor" href="#ngClass"> </a>ngClass</h1>
<p>在官方 API 文件中，提到 ngClass 可以接受 <code>string</code>、<code>Array</code>、<code>Object</code> 這三種格式的資料</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;some-element [ngClass]=<span class="string">&quot;&#x27;first second&#x27;&quot;</span>&gt;...&lt;/some-element&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">some-element</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;[&#x27;first&#x27;, &#x27;second&#x27;]&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">some-element</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">some-element</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;&#x27;first&#x27;: true, &#x27;second&#x27;: true, &#x27;third&#x27;: false&#125;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">some-element</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">some-element</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;stringExp|arrayExp|objExp&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">some-element</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">some-element</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;&#x27;class1 class2 class3&#x27; : true&#125;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">some-element</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>但其實，在程式碼內的型別定義卻多看到一個 <code>Set&lt;String&gt;</code> 的型別，這真的是一個好消息。因為我們就可以透過操作 <code>set</code> 的方式來控制顯示樣式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Input</span>()</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">ngClass</span>(<span class="params">value: <span class="built_in">string</span>|<span class="built_in">string</span>[]|<span class="built_in">Set</span>&lt;<span class="built_in">string</span>&gt;|&#123;[klass: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="DEMO"><a class="header-anchor" href="#DEMO"> </a>DEMO</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;showBlue()&quot;&gt;Show Blue Text&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;removeBlue()&quot;&gt;Remove Blue Color&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;p [ngClass]=&quot;setClasses&quot;&gt;</span></span><br><span class="line"><span class="string">      Start editing to see some magic happen :)</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: [</span><br><span class="line">      <span class="string">` .blue &#123;</span></span><br><span class="line"><span class="string">          color: blue;</span></span><br><span class="line"><span class="string">      &#125;`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  setClasses = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">showBlue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setClasses</span>.<span class="title function_">add</span>(<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeBlue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setClasses</span>.<span class="title function_">delete</span>(<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面的範例程式碼簡單的顯示出透過操作 <code>set</code> 的方式就能控制要顯示的樣式，會比直接操作陣列來的簡單太多了，提供給各位參考看看</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://stackblitz.com/edit/ng-class-with-set?file=src%2Fapp%2Fapp.module.ts">stackblitz 範例程式碼</a></li>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularDart] Angular Dart 版本起手式</title>
    <url>/2019/03/15/ng-dart-start/</url>
    <content><![CDATA[<p>Angular 除了常見的 TypeScript 版本，其實還又另外一個 Dart 語言的版本，雖然是不同的團隊維護，但是基本概念是一樣的，因為最近開始在碰 Flutter，當然也要來玩一下 Angular Dart 了。</p>
<span id="more"></span>
<h1 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h1>
<p>首先，要先將 Dart 語言的環境設定起來，雖然編輯器沒有限定，官方推薦使用 webstorm，而我本身是使用 VSCode 做開發。Anyway，先來安裝 Dart SDK</p>
<h2 id="安裝-Dart-SDK"><a class="header-anchor" href="#安裝-Dart-SDK"> </a>安裝 Dart SDK</h2>
<p>支援的作業系統有 Windows、Linux、Mac，因為我目前的環境是 Windows，所以我就先以 Windows 的環境為文章的設定環境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco install dart-sdk</span><br></pre></td></tr></table></figure>
<ul>
<li>choco 是一套 windows 上的套件管理工具，詳細資訊可以參閱<a href="https://chocolatey.org/">官網</a></li>
</ul>
<p>如果原本已經有安裝 Dart ，想要升級的話</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choco upgrade dart-sdk </span><br></pre></td></tr></table></figure>
<h3 id="Dart-SDK-內容"><a class="header-anchor" href="#Dart-SDK-內容"> </a>Dart SDK 內容</h3>
<p>安裝完 Dart SDK 後，在開發環境會擁有以下的工具</p>
<ul>
<li><strong>dart</strong>: The standalone VM</li>
<li><strong>dart2js</strong>: The Dart-to-JavaScript compiler (used only for web development)</li>
<li><strong>dartanalyzer</strong>: The static analyzer</li>
<li><strong>dartdevc</strong>: The Dart development compiler (used only for web development)</li>
<li><strong>dartdoc</strong>: The API documentation generator</li>
<li><strong>dartfmt</strong>: The Dart code formatter</li>
<li><strong>pub</strong>: The Dart package manager</li>
</ul>
<h2 id="安裝-CLI-Tools"><a class="header-anchor" href="#安裝-CLI-Tools"> </a>安裝 CLI Tools</h2>
<p>打開命令視窗，分別執行下列的指令，會將 <a href="https://webdev.dartlang.org/tools/webdev">webdev</a> 和 <a href="https://pub.dartlang.org/packages/stagehand">stagehand</a> 這兩套工具安裝起來</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pub global activate webdev</span><br><span class="line">pub global activate stagehand</span><br></pre></td></tr></table></figure>
<h2 id="VSCode-安裝擴充套件"><a class="header-anchor" href="#VSCode-安裝擴充套件"> </a>VSCode 安裝擴充套件</h2>
<ul>
<li>可安裝 <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code">Dart</a> 套件，讓 VS Code 支援 Dart 語言的開發</li>
</ul>
<h1 id="第一個-Hello-World"><a class="header-anchor" href="#第一個-Hello-World"> </a>第一個 Hello World</h1>
<p>在還沒有正式進入 Angular Dart 之前，先簡單來一個 Web Dart 版本的  Hello World，首先，我們先將開發專案的環境建構出來</p>
<ol>
<li>建立專案資料夾:
<ul>
<li><code>mkdir helloNgDart</code></li>
</ul>
</li>
<li>進入資料夾
<ul>
<li><code>cd helloNgDart</code></li>
</ul>
</li>
<li>使用剛剛安裝的 CLI 工具來初始化環境
<ul>
<li><code>stagehand web-simple</code></li>
</ul>
</li>
<li>安裝相依套件
<ul>
<li><code>pub get</code></li>
</ul>
</li>
<li>啟動 webdev server，開啟網頁 <code>http://localhost:8080</code>，即可看到第一個 Dart 網頁
<ul>
<li><code>webdev serve</code></li>
<li><img src="1552621088853.png" alt=""></li>
</ul>
</li>
<li>當看到上圖時，就表示使用 Dart 開發 Web 的環境已經準備好了</li>
</ol>
<h1 id="第一個-Angular-Dart-網頁"><a class="header-anchor" href="#第一個-Angular-Dart-網頁"> </a>第一個 Angular Dart 網頁</h1>
<h2 id="安裝-Angular-套件"><a class="header-anchor" href="#安裝-Angular-套件"> </a>安裝 Angular 套件</h2>
<p>Angular Dart 要如何安裝呢? 很簡單，只需要在 <code>pubspec.yaml</code> 內，將 <code>angular: ^5.0.0</code> 放在 <code>dependencies</code> 下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">helloNgDart</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">An</span> <span class="string">absolute</span> <span class="string">bare-bones</span> <span class="string">web</span> <span class="string">app.</span></span><br><span class="line"><span class="comment"># version: 1.0.0</span></span><br><span class="line"><span class="comment">#homepage: https://www.example.com</span></span><br><span class="line"><span class="comment">#author: Kevin Yang &lt;email@example.com&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">sdk:</span> <span class="string">&#x27;&gt;=2.1.0 &lt;3.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">angular:</span> <span class="string">^5.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">build_runner:</span> <span class="string">^1.1.2</span></span><br><span class="line">  <span class="attr">build_web_compilers:</span> <span class="string">^1.0.0</span></span><br><span class="line">  <span class="attr">pedantic:</span> <span class="string">^1.0.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當將 <code>angular: ^5.0.0</code> 加入到 <code>pubspec.yaml</code>  時，編輯器工具會在背景安裝此套件</p>
<h2 id="撰寫-AngularDart"><a class="header-anchor" href="#撰寫-AngularDart"> </a>撰寫 AngularDart</h2>
<ol>
<li>
<p>將 <code>web</code> 資料夾下的  index.html 檔案修改一下，</p>
<ol>
<li>將 <code>&lt;app-root&gt;&lt;/app-root&gt;</code> 放到 <code>&lt;body&gt;</code> 區塊中</li>
<li>新增 <code>&lt;base href...&gt;</code> 標籤</li>
</ol>
</li>
<li>
<p>修改 <code>main.dart</code> 檔案，先移除既有的程式碼，改寫成下列程式碼</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:helloNgDart/app_component.template.dart&#x27;</span> <span class="keyword">as</span> ng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(ng.AppComponentNgFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>目前這階段，編輯器會提示第二行的 import  找不到，這問題之後會被修正掉</p>
<ul>
<li><code>import 'package:&lt;pubspec 內設定的 name 值&gt;/&lt;檔案名稱&gt;'</code></li>
<li>預設會指到 <code>lib</code> 資料夾</li>
</ul>
</li>
<li>
<p>新增 <code>lib</code> 資料夾並建立 <code>app_component.dart</code> 檔案</p>
</li>
<li>
<p><code>app_component.dart</code> 檔案內容</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(</span><br><span class="line">  selector: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  template: <span class="string">&#x27;&lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Angular&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重新執行 <code>webdev serve</code>  後開啟網頁 <code>http://localhost:8080</code> ，應可以看到以下的畫面</p>
<p><img src="1552622388583.png" alt="1552622388583"></p>
</li>
<li>
<p>如果能看到畫面，恭喜，Angular Dart 的開發環境也設定完成了</p>
</li>
</ol>
<h1 id="部署"><a class="header-anchor" href="#部署"> </a>部署</h1>
<p>如果想要將 Angular Dart 輸出成可以部署的狀態時，又該如何處理，這部分也可以透過指令來完成</p>
<blockquote>
<p>webdev build --no-release --output web:build</p>
</blockquote>
<ul>
<li>–no-release : 會輸出成開發狀態的檔案， 檔案數量會很多且檔案很大。</li>
</ul>
<p>要輸出成 production mode ，將 <code>--no-release</code> 的參數拿掉即可，當拿掉參數時， webdev build 將使用 dart2js  的方式建置專案。如果想要額外設定 <code>dart2js</code> (dart2js 有自己的參數可以設定)，需要額外新增 <code>build.yaml</code> 檔案，並將相關設定檔案設定在裡面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">targets:</span></span><br><span class="line">  <span class="string">$default:</span></span><br><span class="line">    <span class="attr">builders:</span></span><br><span class="line">      <span class="string">build_web_compilers|entrypoint:</span></span><br><span class="line">        <span class="comment"># These are globs for the entrypoints you want to compile.</span></span><br><span class="line">        <span class="attr">generate_for:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">test/**.browser_test.dart</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">web/**.dart</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="attr">compiler:</span> <span class="string">dart2js</span></span><br><span class="line">          <span class="comment"># List any dart2js specific args here, or omit it.</span></span><br><span class="line">          <span class="attr">dart2js_args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--fast-startup</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--minify</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--trust-primitives</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--trust-type-annotations</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="比較輸出結果"><a class="header-anchor" href="#比較輸出結果"> </a>比較輸出結果</h2>
<ul>
<li>
<p>with <code>--no-release</code></p>
<p><img src="1552623225062.png" alt="1552623225062"></p>
<p><img src="SNAGHTML8bcf2ef.PNG" alt="img"></p>
</li>
<li>
<p>without  <code>--no-release</code></p>
<p><img src="1552623460275.png" alt="1552623460275"></p>
<p><img src="SNAGHTML8bf574d.PNG" alt="img"></p>
</li>
</ul>
<h1 id="Conclusion"><a class="header-anchor" href="#Conclusion"> </a>Conclusion</h1>
<p>Angular Dart 因為所使用語言的關係，可以享受到一些 TypeScript 所沒有提供的，但也由於是不同語言開發的，即使有 90% 的觀念相同，仍需要針對差異的部份去做了解，但那部份就留在以後分享了</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://webdev.dartlang.org/guides/get-started">Start Guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularDart] Component</title>
    <url>/2019/03/25/ngdart-component/</url>
    <content><![CDATA[<p>Angular Dart 裡沒有 <code>NgModule</code>，在官方文件裡提到的 <code>Module</code> 是指每一個 Component  的檔案，這可以從 <code>main.dart</code> 看出來</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:helloNgDart/app_component.template.dart&#x27;</span> <span class="keyword">as</span> ng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(ng.AppComponentNgFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="基本架構"><a class="header-anchor" href="#基本架構"> </a>基本架構</h1>
<p>基本 Angular Library 都是從 <code>package:angular/angular.dart</code> 來的，如果需要其他的功能，例如 Http ，則需要引用其他的 library。一個基本的 <code>Component</code> 會有 class 本體與 metadata 的部分，既有的 lifecyle hooks 依然存在，像是 OnInit、OnDestory 等。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(</span><br><span class="line">  selector: <span class="string">&#x27;hero-list&#x27;</span>,</span><br><span class="line">  templateUrl: <span class="string">&#x27;hero_list_component.html&#x27;</span>,</span><br><span class="line">  directives: [coreDirectives, formDirectives, HeroDetailComponent],</span><br><span class="line">  providers: [ClassProvider(HeroService)],</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroListComponent</span> <span class="keyword">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Hero&gt; heroes;</span><br><span class="line">  Hero selectedHero;</span><br><span class="line">  <span class="keyword">final</span> HeroService _heroService;</span><br><span class="line"></span><br><span class="line">  HeroListComponent(<span class="keyword">this</span>._heroService);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> ngOnInit() <span class="keyword">async</span> &#123;</span><br><span class="line">    heroes = <span class="keyword">await</span> _heroService.getAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> selectHero(Hero hero) &#123;</span><br><span class="line">    selectedHero = hero;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>硬要說 Angular 與 AngularDart Component 的差異，應該是在 directives 與 providers 的部分，因為 AngularDart 版本並沒有 <code>NgModule</code> 這一個元素，所以服務的部分必須定義在 Component 這一個層級，同樣的內建的 <code>directive</code> ，像是 <code>ngIf</code> 、<code>ngFor</code> 等，都必須額外在 <code>directives</code> 的地方註冊，連使用到的 <code>component</code> 也必須被註冊。</p>
<h2 id="Directive"><a class="header-anchor" href="#Directive"> </a>Directive</h2>
<p>如果需要使用到 <code>NgClass</code>、<code>NgFor</code>、<code>NgIf</code>、<code>NgTemplateOutlet</code>、<code>NgStyle</code>、<code>NgSwitch</code>、<code>NgSwitchWhen</code>、<code>NgSwitchDefault</code> 的，需要加入 <code>coreDirectives</code> 至 directives 。</p>
<p>如果需要使用到 <code>NgModel</code> 時，需要加入 <code>formDirectives</code> 至 directives。並需加入 <code>angular_forms: 2.1.1</code> 套件</p>
<h1 id="Dependency-Injection"><a class="header-anchor" href="#Dependency-Injection"> </a>Dependency Injection</h1>
<p>AngularDart 版本的 Dependency Injection，基本運作原理與 Angular 版本是一樣的，所以我們只需要將 AppComponent 視為 RootComponent(RootModule)，任何 service 註冊在這一層的，都是 root level service，註冊 Service 的方式為</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(</span><br><span class="line">    ...</span><br><span class="line">    providers: [ClassProvider(DataService)])</span><br></pre></td></tr></table></figure>
<p>對應到 Angular 的註冊方式</p>
<table>
<thead>
<tr>
<th>使用方式</th>
<th>Angular</th>
<th>AngularDart</th>
</tr>
</thead>
<tbody>
<tr>
<td>Class Provider</td>
<td>[Logger]</td>
<td>ClassProvider(Logger)</td>
</tr>
<tr>
<td>Use-Class Provider</td>
<td>[{provide: Logger, useClass: BetterLogger}]</td>
<td>ClassProvider(Logger, useClass: BetterLogger)</td>
</tr>
<tr>
<td>Exisiting Provider</td>
<td>[{provide, useExisting: BetterLogger}]</td>
<td>ExistingProvider(Logger, BetterLogger)</td>
</tr>
<tr>
<td>Value Provider</td>
<td>[{ provide: Logger, useValue: silentLogger }]</td>
<td>ValueProvider(Logger, silentLogger)</td>
</tr>
<tr>
<td>Factory Provider</td>
<td>{ provide: HeroService,useFactory: heroServiceFactory, deps: [Logger, UserService]}</td>
<td>FactoryProvider(HeroService, heroServiceFactory)</td>
</tr>
</tbody>
</table>
<h2 id="Token-使用法"><a class="header-anchor" href="#Token-使用法"> </a>Token 使用法</h2>
<table>
<thead>
<tr>
<th>使用方式</th>
<th>Angular</th>
<th>AngularDart</th>
</tr>
</thead>
<tbody>
<tr>
<td>Token</td>
<td>export const APP_CONFIG = new InjectionToken<AppConfig>(『app.config』);</td>
<td>const appTitleToken = OpaqueToken<String>(『app.title』);</td>
</tr>
<tr>
<td>註冊</td>
<td>[{ provide: APP_CONFIG, useValue: 『app config content』}]</td>
<td>ValueProvider.forToken(appTitleToken, appTitle)</td>
</tr>
<tr>
<td>取得</td>
<td>constructor(@Inject(APP_CONFIG) config: AppConfig) { this.title = config.title; }</td>
<td>AppComponent(@Inject(appTitleToken) this.title); AppComponent(@appTitleToken this.title);</td>
</tr>
</tbody>
</table>
<h1 id="範例程式"><a class="header-anchor" href="#範例程式"> </a>範例程式</h1>
<ul>
<li>
<p>app_component.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:helloNgDart/app-detail.component.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./services/data.service.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(</span><br><span class="line">    selector: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">    template: <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;app-detail&gt;&lt;/app-detail&gt;</span></span><br><span class="line"><span class="string">    &lt;hr/&gt;</span></span><br><span class="line"><span class="string">    &lt;div *ngFor=&quot;let item of list&quot;&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123; item &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>,</span><br><span class="line">    directives: [coreDirectives, AppDetailComponent],</span><br><span class="line">    providers: [ClassProvider(DataService)])</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;Angular&#x27;</span>;</span><br><span class="line">  <span class="keyword">final</span> DataService service;</span><br><span class="line">  <span class="keyword">var</span> list;</span><br><span class="line">  AppComponent(<span class="keyword">this</span>.service) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = <span class="keyword">this</span>.service.list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>app-detail.component.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./services/data.service.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular_forms/angular_forms.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(</span><br><span class="line">  selector: <span class="string">&#x27;app-detail&#x27;</span>,</span><br><span class="line">  template: <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  &#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;input [(ngModel)]=&quot;t&quot; /&gt;</span></span><br><span class="line"><span class="string">  &lt;button (click)=&quot;add()&quot;&gt;Add&lt;/button&gt;  </span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span>,</span><br><span class="line">  directives: [formDirectives],</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDetailComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;App Detail Component&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line">  <span class="keyword">final</span> DataService service;</span><br><span class="line"></span><br><span class="line">  AppDetailComponent(<span class="keyword">this</span>.service);</span><br><span class="line"></span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">this</span>.service.add(<span class="keyword">this</span>.t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>services/data.service.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> list = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  add(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.add(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>pubspec.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">helloNgDart</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">An</span> <span class="string">absolute</span> <span class="string">bare-bones</span> <span class="string">web</span> <span class="string">app.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">sdk:</span> <span class="string">&#x27;&gt;=2.1.0 &lt;3.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">angular:</span> <span class="string">^5.0.0</span></span><br><span class="line">  <span class="attr">angular_forms:</span> <span class="number">2.1</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">build_runner:</span> <span class="string">^1.1.2</span></span><br><span class="line">  <span class="attr">build_web_compilers:</span> <span class="string">^1.0.0</span></span><br><span class="line">  <span class="attr">pedantic:</span> <span class="string">^1.0.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>Angular Dart 的基本開發觀念是，每一個 Component 都是獨立個體，除了 provider 的部分，其餘的部分都需要各自設定，而這一部分是和 Angular (TS版) 有很大的差異性的</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://webdev.dartlang.org/angular/guide/architecture">Architecture</a></li>
<li><a href="https://webdev.dartlang.org/api?package=angular">angular library API</a></li>
<li><a href="https://webdev.dartlang.org/angular/guide/dependency-injection#factory-providers">Dependecy Injection</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularDart] HttpClient</title>
    <url>/2019/03/26/ngdart-httpclient/</url>
    <content><![CDATA[<p>當需要呼叫 API  時，該如何處理? Angular  有 HttpClient 可以使用，那 AngularDart 呢? 好家在的是 Dart 有 <code>http</code> 的 library 可以使用，只要在 <code>pubspec.yaml</code> 裡面加上 <code>http: ^0.11.0</code> 的 package，再調整一下程式碼，就可以呼叫 API 了</p>
<span id="more"></span>
<h1 id="設定"><a class="header-anchor" href="#設定"> </a>設定</h1>
<p>設定 HTTP Service 的方式很簡單，只要在 <code>main.dart</code> 做一下設定即可完成</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/browser_client.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:helloNgDart/app_component.template.dart&#x27;</span> <span class="keyword">as</span> ng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;main.template.dart&#x27;</span> <span class="keyword">as</span> self;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GenerateInjector</span>([</span><br><span class="line">  ClassProvider(Client, useClass: BrowserClient),</span><br><span class="line">])</span><br><span class="line"><span class="keyword">final</span> InjectorFactory injector = self.injector$Injector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(ng.AppComponentNgFactory, createInjector: injector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>如果在 VSCode 上面開發時，<code>self.injector$Injector</code> 會出現紅色底線，但是在編譯時卻不會發現任何錯誤，主要的原因是因為 <code>main.template.dart</code> 會在編譯時產出，那時候就不會有任何錯誤
<ul>
<li><a href="https://github.com/dart-lang/angular/issues/1716">Issue</a></li>
</ul>
</li>
</ul>
<h1 id="使用"><a class="header-anchor" href="#使用"> </a>使用</h1>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(</span><br><span class="line">  selector: <span class="string">&#x27;my-app&#x27;</span>,</span><br><span class="line">  template: <span class="string">&#x27;&#x27;&#x27;    </span></span><br><span class="line"><span class="string">    &#123;&#123; todo | async | json &#125;&#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>,</span><br><span class="line">  directives: [],  </span><br><span class="line">  pipes: [AsyncPipe, JsonPipe],</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> <span class="keyword">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Client _http;</span><br><span class="line">  <span class="keyword">var</span> todo;  </span><br><span class="line"></span><br><span class="line">  AppComponent(<span class="keyword">this</span>._http);</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  ngOnInit() &#123;    </span><br><span class="line">    todo = getAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future getAll() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _http</span><br><span class="line">          .<span class="keyword">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span>)</span><br><span class="line">          .then((resp) =&gt; json.decode(resp.body));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        errorMessage = e.toString();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>constructor</code> 的地方注入 <code>Client</code> (需 import <code>package:http/http.dart</code>)</li>
<li><code>http.get</code> 會回傳 <code>Future&lt;Response&gt;</code> 的資料，可以透過 <code>.then</code> 的方式做後續的處理</li>
<li><code>json.decode</code> 可以做 JSON 文字轉為物件的動作，(來源: <code>dart:convert</code>)</li>
<li>記得要處理 Exception</li>
</ul>
<h2 id="Send-data"><a class="header-anchor" href="#Send-data"> </a>Send data</h2>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> _headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Future&lt;Hero&gt; create(<span class="built_in">String</span> name) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> response = <span class="keyword">await</span> _http.post(_heroesUrl,</span><br><span class="line">          headers: _headers, body: json.encode(&#123;<span class="string">&#x27;name&#x27;</span>: name&#125;));</span><br><span class="line">      <span class="keyword">return</span> Hero.fromJson(_extractData(response));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> _handleError(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Http-Client-介面"><a class="header-anchor" href="#Http-Client-介面"> </a>Http Client 介面</h1>
<p><code>BrowserClient</code> 常用的方法有</p>
<ul>
<li>get(dynamic url, { Map&lt;String, String&gt; headers }) → Future<Response></li>
<li>post(dynamic url, { Map&lt;String, String&gt; headers, dynamic body, Encoding encoding }) → Future<Response></li>
<li>put(dynamic url, { Map&lt;String, String&gt; headers, dynamic body, Encoding encoding }) → Future<Response></li>
<li>patch(dynamic url, { Map&lt;String, String&gt; headers, dynamic body, Encoding encoding }) → Future<Response></li>
<li>delete(dynamic url, { Map&lt;String, String&gt; headers }) → Future<Response></li>
<li>head(dynamic url, { Map&lt;String, String&gt; headers }) → Future<Response></li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://webdev.dartlang.org/angular/guide/server-communication">HTTP Client</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[AngularDart] Pipe</title>
    <url>/2019/03/26/ngdart-pipe/</url>
    <content><![CDATA[<p><a href="https://blog.kevinyang.net/2019/03/25/ngdart-component/">上一篇</a> 提到在 Angular Dart 版本的 Component 如果要使用到 <code>ngIf</code> 這一類的 <code>directive</code> 時，需要在該 <code>component</code> 將 <code>coreDirectives</code> 加到 <code>component</code> 的 <code>metadata</code> 內，而要使用內建 <code>pipe</code> 或是自訂 <code>pipe</code> 時，也需要比照辦理，但唯一的差異是必須分別加</p>
<span id="more"></span>
<h1 id="內建-Pipe"><a class="header-anchor" href="#內建-Pipe"> </a>內建 Pipe</h1>
<p>AngularDart 內建的 Pipe 有以下幾個</p>
<ul>
<li><a href="https://webdev.dartlang.org/api/angular/angular/AsyncPipe-class">AsyncPipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/CurrencyPipe-class">CurrencyPipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/DatePipe-class">DatePipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/DecimalPipe-class">DecimalPipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/JsonPipe-class">JsonPipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/LowerCasePipe-class">LowerCasePipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/PercentPipe-class">PercentPipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/ReplacePipe-class">ReplacePipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/SlicePipe-class">SlicePipe</a></li>
<li><a href="https://webdev.dartlang.org/api/angular/angular/UpperCasePipe-class">UpperCasePipe</a></li>
</ul>
<h1 id="自訂-Pipe"><a class="header-anchor" href="#自訂-Pipe"> </a>自訂 Pipe</h1>
<p>自訂 Pipe 的方式也很簡單，只需要實做 <code>PipeTransform</code> 介面即可，以下有一個簡單的範例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span> <span class="keyword">as</span> math;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Raise the value exponentially</span></span><br><span class="line"><span class="comment"> * Takes an exponent argument that defaults to 1.</span></span><br><span class="line"><span class="comment"> * Usage:</span></span><br><span class="line"><span class="comment"> *   value | exponentialStrength:exponent</span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> *   &#123;&#123; 2 |  exponentialStrength:10&#125;&#125;</span></span><br><span class="line"><span class="comment"> *   formats to: 1024</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Pipe</span>(<span class="string">&#x27;exponentialStrength&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExponentialStrengthPipe</span> <span class="keyword">extends</span> <span class="title">PipeTransform</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> transform(<span class="built_in">num</span> value, <span class="built_in">num</span> exponent) =&gt; math.pow(value ?? <span class="number">0</span>, exponent ?? <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當寫完自訂 pipe 要在 <code>component</code> 使用時，務必記得要在 component  的 <code>pipes</code> 加入該 pipe class，不然會出現編譯錯誤的訊息</p>
<p>既然是自訂 Pipe，就一定會遇到 <code>pure</code> 與 <code>impure</code> pipe 的問題，因為 Dart 語言每一個型別都是 <code>Object</code> ，所以要稍微留意一下這部分，像是 List 的操作，就必須留意 <code>pure</code> 與 <code>impure</code> 的設定</p>
<p>設定為 <code>impure</code> 的方式為</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(<span class="string">&#x27;flyingHeroes&#x27;</span>, pure: <span class="keyword">false</span>)</span><br></pre></td></tr></table></figure>
<h1 id="AsyncPipe"><a class="header-anchor" href="#AsyncPipe"> </a>AsyncPipe</h1>
<p>AsyncPipe 在 Angular 可以用來接 Promise 或是 Observable，而在 AngularDart 內，可以接 Future 或是 Stream 型別的資料，使用方法是一樣的</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:angular/angular.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(</span><br><span class="line">  selector: <span class="string">&#x27;hero-message&#x27;</span>,</span><br><span class="line">  template: <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Async Hero Message and AsyncPipe&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Message: &#123;&#123; message | async &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;resend()&quot;&gt;Resend&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span>,</span><br><span class="line">  pipes: [commonPipes],</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroAsyncMessageComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> _msgEventDelay = <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  Stream&lt;<span class="built_in">String</span>&gt; message;</span><br><span class="line"></span><br><span class="line">  HeroAsyncMessageComponent() &#123;</span><br><span class="line">    resend();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> resend() &#123;</span><br><span class="line">    message =</span><br><span class="line">        Stream.periodic(_msgEventDelay, (i) =&gt; _msgs[i]).take(_msgs.length);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; _msgs = &lt;<span class="built_in">String</span>&gt;[</span><br><span class="line">    <span class="string">&#x27;You are my hero!&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;You are the best hero!&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Will you be my hero?&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://webdev.dartlang.org/angular/guide/pipes">Pipes</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] gRPC with Visual Studio 2019 and .NET Core 3</title>
    <url>/2019/04/08/grpc-chat-server/</url>
    <content><![CDATA[<p>微軟在去年年底發出一篇關於 .NET Core 3.0 會包含哪些新功能 (<a href="https://msdn.microsoft.com/en-us/magazine/mt848631.aspx">文章由此去</a>)，而其中提到了 gRPC 專案將會成為 first-class support for .NET developers.</p>
<blockquote>
<p>A common question from customers is how to have an RPC (as in .NET Remoting and Windows Communication Foundation) experience on .NET Core. We are contributing to the gRPC (<a href="http://grpc.io/">grpc.io</a>) project to ensure gRPC will have first-class support for .NET developers.</p>
</blockquote>
<p>而在 2019 年 .NET Core 3.0 preview 及 Visual Studio 2019 的釋出 (註: 必須使用 Visual Studio 2019 開發)，就將 gRPC Service 的專案範本內建了，真的從零到一個可以運行的 gRPC service 只需要幾個步驟就完成了，與早期那個什麼都需要自己刻的時代，整個幸福太多了。</p>
<span id="more"></span>
<h1 id="gRPC-簡介"><a class="header-anchor" href="#gRPC-簡介"> </a>gRPC 簡介</h1>
<p>但開始介紹如何開發 gRPC 前，要先稍微了解 gRPC 是什麼?</p>
<p><a href="http://www.grpc.io/">gRPC</a>是一個高性能、通用的開源RPC框架，其由Google主要面向移動應用開發並基於HTTP/2協議標準而設計，基於ProtoBuf (Protocol Buffers)序列化協議開發，且支持眾多開發語言。</p>
<p><img src="landing-2.svg" alt="Concept Diagram"></p>
<p>更多的細節，可以在 <a href="https://grpc.io/docs/guides/">grpc.io</a> 的網站上找到，建議可以好好的閱讀過後，在進行開發會比較順利</p>
<h1 id="開發"><a class="header-anchor" href="#開發"> </a>開發</h1>
<h2 id="環境準備"><a class="header-anchor" href="#環境準備"> </a>環境準備</h2>
<ul>
<li>
<p>.NET Core 3.0 ：要安裝 preview 3 的版本，支援程度會比較高，<a href="https://dotnet.microsoft.com/download/dotnet-core/3.0">下載網頁</a></p>
</li>
<li>
<p>Visual Studio 2019: <a href="https://visualstudio.microsoft.com/zh-hant/vs/">下載網址</a>，可以下載 Community 版本的 (免費)</p>
<ul>
<li>
<p>因為 Visual Studio 2019 正式版預設是不支援使用 .NET Core SDK Preview 版本，所以要手動開啟</p>
<p><img src="1554781422715.png" alt="1554781422715"></p>
<p><img src="1554781465103.png" alt="1554781465103"></p>
</li>
<li>
<p>確定後，關閉重啟 Visual Studio 即可使用 .NET Core SDK 預覽版本</p>
</li>
</ul>
</li>
</ul>
<h1 id="建立新專案"><a class="header-anchor" href="#建立新專案"> </a>建立新專案</h1>
<ol>
<li>
<p>開啟 VS 2019</p>
</li>
<li>
<p>建立新專案</p>
<p><img src="1554781107356.png" alt="1554781107356"></p>
</li>
<li>
<p>選擇 【<a href="http://ASP.NET">ASP.NET</a> Core Web 應用程式】，下一步</p>
<p><img src="1554781164014.png" alt="1554781164014"></p>
</li>
<li>
<p>設定專案名稱及專案儲存位置後，點選【建立】</p>
<p><img src="1554781245650.png" alt="1554781245650"></p>
</li>
<li>
<p>選擇 【<a href="http://ASP.NET">ASP.NET</a> Core 3.0】，方可看到 gRPC Service 專案範本</p>
<p><img src="1554781566463.png" alt="1554781566463"></p>
</li>
<li>
<p>選擇 【gRPC Service】專案範本後，點選【建立】</p>
<p><img src="1554781620367.png" alt="1554781620367"></p>
</li>
<li>
<p>等待建立專案</p>
<p><img src="1554781653394.png" alt="1554781653394"></p>
</li>
<li>
<p>完成專案建立後，會看到這兩個專案被建立在同一個方案下</p>
<p><img src="1554781734084.png" alt="1554781734084"></p>
</li>
<li>
<p>這時候已經完成建立一個可以被執行的 gRPC 專案了，包含 Server 與 Client 端的程式碼</p>
</li>
</ol>
<h1 id="專案檔案解說"><a class="header-anchor" href="#專案檔案解說"> </a>專案檔案解說</h1>
<ul>
<li>
<p>專案檔 (xxx.csproj)：在 VS2019 已經不需要將專案先卸載後才能看 csproj 檔案，可以直接開啟看，十分方便</p>
<ul>
<li>經保哥提醒，在 VS2017 就有這個功能了，看我多久沒寫後端了</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk.Web&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp3.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   // 定義 proto 檔案的讀取位置</span><br><span class="line">   // 在 Client 端也有此設定，所以 server 與 client 是共用同一份 proto 檔案</span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Protobuf</span> <span class="attr">Include</span>=<span class="string">&quot;..\Protos\*.proto&quot;</span> <span class="attr">GrpcServices</span>=<span class="string">&quot;Server&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Content</span> <span class="attr">Include</span>=<span class="string">&quot;@(Protobuf)&quot;</span> <span class="attr">LinkBase</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    // gRPC 相關的套件</span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Grpc.AspNetCore.Server&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;0.1.19-pre1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Google.Protobuf&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;3.6.1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Grpc.Tools&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;1.19.0-pre1&quot;</span> <span class="attr">PrivateAssets</span>=<span class="string">&quot;All&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="1554782483949.png" alt="1554782483949"></p>
</li>
<li>
<p><code>Startup.cs</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 加入 gRPC 服務</span></span><br><span class="line">    services.AddGrpc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 設定 gPRC 實做 proto 的 service </span></span><br><span class="line">    app.UseRouting(routes =&gt;</span><br><span class="line">                   &#123;                       </span><br><span class="line">                       routes.MapGrpcService&lt;GreeterService&gt;();</span><br><span class="line">                   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>greet.proto</code>：gRPC  通訊的合約規範檔，當每次重建專案時，Visual Studio 會依據此檔案將相關的程式碼產生出來 (Code Gen)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package Greet;</span><br><span class="line"></span><br><span class="line">// 定義 Greeter service 內有哪些方法可以使用</span><br><span class="line">// 可依 gRPC 的各種溝通模式定義之</span><br><span class="line">service Greeter &#123;</span><br><span class="line">  // Sends a greeting</span><br><span class="line">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定義 Response 與 Request 的資料型別及結構</span><br><span class="line">// The request message containing the user&#x27;s name.</span><br><span class="line">message HelloRequest &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// The response message containing the greetings.</span><br><span class="line">message HelloReply &#123;</span><br><span class="line">  string message = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>Services/GreeterService.cs</code> ： 實做部分</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Greet;</span><br><span class="line"><span class="keyword">using</span> Grpc.Core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">gRPCDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 繼承 Greeter.GreeterBase (根據 proto 檔案所產生的檔案)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GreeterService</span> : <span class="title">Greeter.GreeterBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task&lt;HelloReply&gt; <span class="title">SayHello</span>(<span class="params">HelloRequest request, ServerCallContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Task.FromResult(<span class="keyword">new</span> HelloReply</span><br><span class="line">            &#123;</span><br><span class="line">                Message = <span class="string">&quot;Hello &quot;</span> + request.Name</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1554783284157.png" alt="1554783284157"></p>
</li>
<li>
<p>Client 端的使用方式</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Greet;</span><br><span class="line"><span class="keyword">using</span> Grpc.Core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">gRPCDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Include port of the gRPC server as an application argument</span></span><br><span class="line">            <span class="keyword">var</span> port = args.Length &gt; <span class="number">0</span> ? args[<span class="number">0</span>] : <span class="string">&quot;50051&quot;</span>; <span class="comment">// 預設連接 port</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立連接頻道</span></span><br><span class="line">            <span class="keyword">var</span> channel = <span class="keyword">new</span> Channel(<span class="string">&quot;localhost:&quot;</span> + port, ChannelCredentials.Insecure);</span><br><span class="line">            <span class="comment">// 建立 client 實體</span></span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> Greeter.GreeterClient(channel);</span><br><span class="line">		   </span><br><span class="line">            <span class="comment">// 呼叫使用 client 的方法</span></span><br><span class="line">            <span class="comment">// service Greeter &#123;</span></span><br><span class="line"> 		   <span class="comment">//   rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span></span><br><span class="line">		   <span class="comment">// &#125;</span></span><br><span class="line">            <span class="keyword">var</span> reply = <span class="keyword">await</span> client.SayHelloAsync(<span class="keyword">new</span> HelloRequest &#123; Name = <span class="string">&quot;GreeterClient&quot;</span> &#125;);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Greeting: &quot;</span> + reply.Message);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 關閉連線</span></span><br><span class="line">            <span class="keyword">await</span> channel.ShutdownAsync();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Press any key to exit...&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="實做-Chat-Server"><a class="header-anchor" href="#實做-Chat-Server"> </a>實做 Chat Server</h1>
<p>既然已經知道基本 gRPC Server 與 Client 端的檔案結構，那就來弄一個簡單的通訊軟體</p>
<ol>
<li>
<p>修改 greet.proto 檔名至 chat.proto</p>
</li>
<li>
<p>修改 chat.proto 內容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package Chat;</span><br><span class="line"></span><br><span class="line">service ChatRoom &#123;</span><br><span class="line">  rpc join (stream Message) returns (stream Message) &#123;&#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Message &#123;</span><br><span class="line">  string user = 1;</span><br><span class="line">  string text = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 Services 資料夾下，新增 <code>ChatService.cs </code> 檔案</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Chat;</span><br><span class="line"><span class="keyword">using</span> Grpc.Core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">chatwithgrpc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatService</span>: <span class="title">ChatRoom.ChatRoomBase</span></span><br><span class="line">    &#123;        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">join</span>(<span class="params">IAsyncStreamReader&lt;Message&gt; requestStream, IServerStreamWriter&lt;Message&gt; responseStream, ServerCallContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">await</span> requestStream.MoveNext()) <span class="keyword">return</span>;            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle request chat message</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="keyword">await</span> requestStream.MoveNext());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>因為要記錄連上 gRPC 服務的連線 (就是  <code>IServerStreamWriter&lt;Message&gt; responseStream</code> 的部分)，所以需要另外建立一個 service 並註冊成 <code>Singleton</code> 模式，這裡就先建立一個服務叫做 <code>ChatRoom.cs</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Startup.cs 檔案，註冊 ChatRoom 服務</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    services.AddGrpc();</span><br><span class="line">    services.AddSingleton&lt;Server.ChatRoom&gt;(); <span class="comment">// add this line</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>ChatRoom.cs</code></li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Chat;</span><br><span class="line"><span class="keyword">using</span> Grpc.Core;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Concurrent;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">chatwithgrpc.Server</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatRoom</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, IServerStreamWriter&lt;Message&gt;&gt; users = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, IServerStreamWriter&lt;Message&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">join</span>(<span class="params"><span class="built_in">string</span> name, IServerStreamWriter&lt;Message&gt; response</span>)</span> =&gt; users.TryAdd(name, response);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>  =&gt; users.TryRemove(name, <span class="keyword">out</span> <span class="keyword">var</span> s);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">BroadcastMessageAsync</span>(<span class="params">Message message</span>)</span> =&gt; <span class="keyword">await</span> BroadcastMessages(message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 將某 Client 的請求內容，傳送到其他 Client 端去</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">BroadcastMessages</span>(<span class="params">Message message</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> user <span class="keyword">in</span> users.Where(x =&gt; x.Key != message.User))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> item = <span class="keyword">await</span> SendMessageToSubscriber(user, message);</span><br><span class="line">                <span class="keyword">if</span> (item != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Remove(item?.Key);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	           </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">async</span> Task&lt;Nullable&lt;KeyValuePair&lt;<span class="built_in">string</span>, IServerStreamWriter&lt;Message&gt;&gt;&gt;&gt; SendMessageToSubscriber(KeyValuePair&lt;<span class="built_in">string</span>, IServerStreamWriter&lt;Message&gt;&gt; user, Message message)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 將訊息送到 Client 端</span></span><br><span class="line">                <span class="keyword">await</span> user.Value.WriteAsync(message);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex);</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 <code>ChatService.cs</code> 內注入 <code>ChatRoom</code> 並完成相關實做</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Chat;</span><br><span class="line"><span class="keyword">using</span> Grpc.Core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">chatwithgrpc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChatService</span>: <span class="title">ChatRoom.ChatRoomBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Server.ChatRoom _chatroomService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ChatService</span>(<span class="params">Server.ChatRoom chatRoomService</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _chatroomService = chatRoomService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">join</span>(<span class="params">IAsyncStreamReader&lt;Message&gt; requestStream, IServerStreamWriter&lt;Message&gt; responseStream, ServerCallContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">await</span> requestStream.MoveNext()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                _chatroomService.Join(requestStream.Current.User, responseStream);</span><br><span class="line">                <span class="keyword">await</span> _chatroomService.BroadcastMessageAsync(requestStream.Current);</span><br><span class="line">            &#125; <span class="keyword">while</span> (<span class="keyword">await</span> requestStream.MoveNext());</span><br><span class="line"></span><br><span class="line">            _chatroomService.Remove(context.Peer);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>line 19: 第一次 join 時，並不會收到任何由 client 傳來的請求，所以就加個條件排除第一次</li>
<li>line 21~25 : 當 client 發出任何請求時，處理其請求內容，這裡就是廣播到其他有連線到 gRPC 服務的 client 端</li>
</ol>
</li>
<li>
<p>到這裡後端的實做可以算是完成了，接下來換寫 Client 端</p>
</li>
<li>
<p><code>Program.cs</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;請輸入使用者姓名&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> userName = Console.ReadLine();</span><br><span class="line">            <span class="comment">// Include port of the gRPC server as an application argument</span></span><br><span class="line">            <span class="keyword">var</span> port = args.Length &gt; <span class="number">0</span> ? args[<span class="number">0</span>] : <span class="string">&quot;50051&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> channel = <span class="keyword">new</span> Channel(<span class="string">&quot;localhost:&quot;</span> + port, ChannelCredentials.Insecure);</span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> ChatRoom.ChatRoomClient(channel);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> chat = client.<span class="keyword">join</span>())</span><br><span class="line">            &#123;               </span><br><span class="line">                _ = Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">await</span> chat.ResponseStream.MoveNext(cancellationToken: CancellationToken.None))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> response = chat.ResponseStream.Current;</span><br><span class="line">                        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;response.User&#125;</span>: <span class="subst">&#123;response.Text&#125;</span>&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">				                </span><br><span class="line">                <span class="keyword">await</span> chat.RequestStream.WriteAsync(<span class="keyword">new</span> Message &#123; User = userName, Text = <span class="string">$&quot;<span class="subst">&#123;userName&#125;</span> has joined the room&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> line;</span><br><span class="line">                <span class="keyword">while</span> ((line = Console.ReadLine()) != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (line.ToLower() == <span class="string">&quot;bye&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">await</span> chat.RequestStream.WriteAsync(<span class="keyword">new</span> Message &#123; User = userName, Text = line &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">await</span> chat.RequestStream.CompleteAsync();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Disconnecting&quot;</span>);</span><br><span class="line">            <span class="keyword">await</span> channel.ShutdownAsync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>line 13: 建立與 server 端串流 (streaming) 連線</li>
<li>line 15~22: 處理由 server 端回傳的訊息，這裡是由其他 Client 端所傳送的聊天訊息</li>
<li>line 24: 對 Server 端發出第一次 Request</li>
<li>line 27~34: 持續讀取 Console 畫面上的輸入訊息後，發訊息給 Server 端</li>
<li>line 35: 結束由 <code>join</code> 建立的串流連線</li>
<li>line 38: 關閉與 gRPC 服務的連線</li>
</ol>
</li>
<li>
<p>如果這時後直接執行 Server 與 Client 端時，會發現 Client 會很容易斷線。這是因為 gRPC 有預設 request timeout 的時間，這可以在 Server 端的 <code>Program.cs</code> 內做設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">           Host.CreateDefaultBuilder(args)</span><br><span class="line">               .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">               &#123;</span><br><span class="line">                   webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">                   webBuilder.ConfigureKestrel((context, options) =&gt;</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="comment">// 增加此設定避免閒置斷線的問題</span></span><br><span class="line">                       options.Limits.MinRequestBodyDataRate = <span class="literal">null</span>;</span><br><span class="line">                   &#125;);</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="執行效果"><a class="header-anchor" href="#執行效果"> </a>執行效果</h2>
<p><img src="2019-04-09_14-00-48.gif" alt="2019-04-09_14-00-48"></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://grpc.io/">grpc.io</a></li>
<li><a href="https://grpc.io/docs/quickstart/csharp.html">gRPC C# Quick Start</a></li>
<li><a href="https://github.com/grpc/grpc-dotnet">gRPC for .NET GitHub</a></li>
<li><a href="https://github.com/chgc/grpc-dotnetcore-3-chat">簡單聊天功能 Repo</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 使用 Windows 驗證 (Windows Authentication)</title>
    <url>/2019/04/11/ng-windows-auth/</url>
    <content><![CDATA[<p>Angular 使用 Windows Authentication，聽起來沒什麼，但是加上 CORS 就是不同的故事了</p>
<p>※ 這篇文章的後端是使用 <a href="http://ASP.NET">ASP.NET</a> Core MVC ，但要處理的問題是一樣的，觀念通用</p>
<span id="more"></span>
<p>Angular 的 HttpClient 在發送請求時，如果在同一個網址下 (同一個網站)，自然會付上 cookie，但遇到不同站點下時又想要帶 cookie 時，該怎麼處理，這時候就必須將 <code>withCredentials</code> 開啟，這是 <code>XMLHttpRequest</code> 內建屬性，用途為判斷是否該使用類似 cookies, authorization headers 或者 TLS 客戶端認證這一類資格證書來建立一個跨站點訪問控制（cross-site <code>Access-Control</code>）請求。這裡是基本用法，當然如果要全域套用時，就會寫成 Http interceptor</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">&#x27;https://localhost:44369/api/values&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure>
<p>Angular 端這樣子就可以算是設定完成了</p>
<p>問題是後端要怎麼設定，會遇到幾個問題</p>
<ol>
<li>CORS</li>
<li>Web 授權設定</li>
</ol>
<h1 id="簡單情境"><a class="header-anchor" href="#簡單情境"> </a>簡單情境</h1>
<p>當 Angular  的 Http 請求只有單純的設定 <code>withCredentials: true</code> 時，後端的設定就很單純，(這裡就假設已經會新增一個基本的 <a href="http://ASP.NET">ASP.NET</a> Core MVC 網站)</p>
<ol>
<li>
<p>開啟 <code>windowsAuthentication</code> 的方法有兩種</p>
<ol>
<li>
<p>直接修改 <code>Properties/launchSettings.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;iisSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;windowsAuthentication&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 設定為 true</span></span><br><span class="line">    <span class="attr">&quot;anonymousAuthentication&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iisExpress&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;applicationUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:11235&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span> <span class="number">44369</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   ....</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>透過 UI 的方式設定</p>
<p><img src="1554953527168.png" alt="1554953527168"></p>
</li>
<li>
<p>在 API 的 Controller 的地方，加上 <code>[Authorize]</code></p>
</li>
</ol>
</li>
<li>
<p>啟動 <code>CORS</code></p>
<ol>
<li>
<p>在 <code>Startup.cs</code> 檔案新增以下程式碼</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">            services.AddCors(o =&gt; o.AddPolicy(<span class="string">&quot;CORSPolicy&quot;</span>, builder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AllowAnyOrigin()</span><br><span class="line">                       .AllowAnyMethod()</span><br><span class="line">                       .AllowAnyHeader()</span><br><span class="line">                       .AllowCredentials()</span><br><span class="line">                       .WithOrigins(<span class="string">&quot;http://localhost:4200&quot;</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    	...</span><br><span class="line">        app.UseCors(<span class="string">&quot;CORSPolicy&quot;</span>);</span><br><span class="line">    	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>.WithOrigins(&quot;http://localhost:4200&quot;)</code> 這一行很重要，當 CORS + <code>withCredentials: true</code> 時，沒有這一行就會噴出錯誤訊息</p>
<p><img src="1554953778917.png" alt="1554953778917"></p>
</li>
<li>
<p>在 API 的 Controller 的地方，加上 <code>[EnableCors(&quot;CORSPolicy&quot;)]</code></p>
</li>
<li>
<p>相關關於 <a href="http://ASP.NET">ASP.NET</a> Core MVC 如何加上 CORS 的文章，網路很多，搜尋一下應該很容易就找到了</p>
</li>
</ol>
</li>
<li>
<p>當上述的兩的步驟完成後，應可以完成最基本的 Windows 驗證功能</p>
</li>
<li>
<p>至於之後驗證要做到多細，就與處理登入驗證的做法是一樣的了</p>
</li>
</ol>
<h1 id="稍微複雜情境"><a class="header-anchor" href="#稍微複雜情境"> </a>稍微複雜情境</h1>
<p>在實做的過程中發現了一個問題，當我的 Http 請求寫成這樣時，後端設定就變複雜許多</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">http</span></span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">&#x27;https://localhost:44369/api/values&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(&#123;</span><br><span class="line">          <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure>
<p>瀏覽器在請求時，因為會先發 <code>Options</code> 的 preflight 請求，但這時發的請求是不會有任何 credentials 的，當然後端會直接擋掉</p>
<p><img src="1554954488888.png" alt="1554954488888"></p>
<p>這時候後端的設定要調整一下，要允許匿名登入，設定方式跟上面開啟 <code>windowsAuthentication</code> 類似，只要將 <code>anonymousAuthentication</code> 設定為真，或是將 <code>啟動匿名驗證</code> 打勾</p>
<p><img src="1554954644800.png" alt="1554954644800"></p>
<p>當這樣子設定完後，重新啟動後端服務，當打開 <code>https://localhost:44369/api/values</code>  網址時會出現以下的錯誤畫面</p>
<p><img src="1554954728393.png" alt="1554954728393"></p>
<p>只好再來調整一下 <code>Startup.cs</code> 的程式了</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 新增這行</span></span><br><span class="line">    services.AddAuthentication(IISDefaults.AuthenticationScheme);</span><br><span class="line"></span><br><span class="line">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當修改完成後，重新整理一次網頁，之前的錯誤訊息就會消失了，打開 <code>Networking</code> 的地方，就會看到兩次對後端的請求都是正常的</p>
<p><img src="1554955062068.png" alt="1554955062068"></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/authentication/windowsauth?view=aspnetcore-2.2&amp;tabs=visual-studio">設定 Windows 驗證</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials">XMLHttpRequest.withCredentials</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[VS Code] 自訂 Emmet 範本</title>
    <url>/2019/04/15/vscode-custom-emmet/</url>
    <content><![CDATA[<p>今天朋友問到，要如何修改 VS Code 內 Emmet 的預設範本。一開始想說是沒有辦法修改預設的，應該也沒有辦法覆蓋吧，所以稍微在網路上找了一下，果然沒有找到相關的資料，但其實在官方文件內有提到自訂範本的事情，那就來看看怎麼修改吧</p>
<span id="more"></span>
<p>首先，先根據<a href="https://code.visualstudio.com/docs/editor/emmet#_using-custom-emmet-snippets">這裡</a>的說明，將自訂 <code>snippet.json</code> 檔案所處的資料夾位置，設定到 <code>settings</code> 裡 <code>emmet.extensionsPath</code> 的地方</p>
<p><img src="1555301445272.png" alt="1555301445272"></p>
<p>我這裡先用 html 的部分做說明，CSS 依循一樣的規則，VS Code Emmet 內建所使用的 HTML Snippet 是使用這一份 <a href="https://github.com/emmetio/snippets/blob/master/html.json">html.json</a>，假設我們想要修改 <code>!</code> 所產生出來的預設 html 範本內容，我們只需要重新定義一個 <code>doc</code> 即可 (原始定義如下)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html[lang=$&#123;lang&#125;]&gt;(head&gt;meta[charset=$&#123;charset&#125;]+meta:vp+meta:edge+title&#123;$&#123;1:Document&#125;&#125;)+body&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;!|html:5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;!!!+doc&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>而自訂 <code>snippet.json</code> 的內容如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;html&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;snippets&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html[lang=$&#123;lang&#125;]&gt;(head&gt;meta[charset=$&#123;charset&#125;]+meta:vp+meta:edge+title&#123;$&#123;1:Documentttt&#125;&#125;)+body&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我們只需要重新定義 <code>doc</code> 即可達到我們的需求，同樣的，如果想要擴充 Emmet 的功能，直接在此編寫即可</p>
<p>剩下的就看各位的想像力了</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/emmetio/snippets/blob/master/html.json">html.json</a></li>
<li><a href="https://github.com/emmetio/snippets/blob/master/css.json">css.json</a></li>
<li><a href="https://code.visualstudio.com/docs/editor/emmet#_using-custom-emmet-snippets">VS Code - Using custom Emmet snippets</a></li>
</ul>
]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Push Notification with SwPush</title>
    <url>/2019/04/20/ng-push-notification/</url>
    <content><![CDATA[<p>自從 Angular 內建 Service Worker package 與 <code>@angular/pwa</code> 後，寫 PWA 就變得簡單很多了，但是在 Push Notification 的地方，一直找不到好的教學文章講如何與 Firebase Cloud Message 整合在一起，大多數找到的文章都是直接使用 firebase.js 所提供的方法做操作，這樣子就浪費了內建的 <code>SwPush</code> 的功能了，而這篇文章就是講如何將兩者整合再一起</p>
<span id="more"></span>
<h1 id="基本環境套件安裝"><a class="header-anchor" href="#基本環境套件安裝"> </a>基本環境套件安裝</h1>
<p>首先，先建立一個新的專案並將 PWA 的功能設定起來</p>
<ol>
<li><code>ng new ngpwa</code></li>
<li>進入 <code>ngpwa</code> 專案資料夾後，執行 <code>ng add @angular/pwa</code>，將 PWA 加入到 Angular 專案內</li>
<li>安裝 <code>firebase</code>，<code>npm install firebase</code></li>
</ol>
<p>完成上述 3 個步驟，就已將完成安裝所需的套件了，接下來要開始設定 push notification 的部分，但這之前，我們要先將自動更新 <code>service worker</code> 的功能加上去，在 <code>app.module.ts</code> 的地方加上這幾行程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">swUpdate: SwUpdate</span>) &#123;</span><br><span class="line">    swUpdate.<span class="property">available</span>.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上的程式碼，可以 <code>service worker</code> (以下簡稱 SW) 自動檢查是否有新版本的程式，如果有就更新 cache 在 SW 內的程式，相關的介紹可以參考這篇 <a href="https://blog.kevinyang.net/2018/09/07/angular-sw-update/">[Angular] Service Worker Update</a></p>
<h1 id="設定推播訊息所需的參數"><a class="header-anchor" href="#設定推播訊息所需的參數"> </a>設定推播訊息所需的參數</h1>
<ol>
<li>
<p>在 <code>manifest.json</code> 內，要加上一行參數，這是固定的，直接複製貼上到自己的 <code>manifest.json</code> 內即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;gcm_sender_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;103953800507&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>從 firebase 專案的地方，可以取得 <code>messagingSenderId</code>，相關位置請參考下圖，將該 id 記錄在 <code>environement</code> 變數檔內</p>
<p><img src="1555763051428.png" alt="1555763051428"></p>
<p><img src="1555763082962.png" alt="1555763082962"></p>
<p><img src="1555763138746.png" alt="1555763138746"></p>
</li>
</ol>
<p>到這邊，我們已經取得所需的設定參數了</p>
<h1 id="設定-push-notification"><a class="header-anchor" href="#設定-push-notification"> </a>設定 push notification</h1>
<p>Angular 內建的 <code>SwPush</code> 有實作與 Push Notifications 相關的方法，包含註冊訂閱，監聽訊息，處理訊息動作後續的行為等，在本次文章，會先著重於如何將 SwPush 與 Cloud Messaging 整合在一起。</p>
<p>在網路上面可以搜尋到的文章，都是講利用 <code>firebase.messaging</code> 的功能來監聽推播訊息，但這樣子就不能使用 <code>SwPush</code> 與必須要自己另外寫一個處理推播訊息的 SW，所以接下的程式碼，就是讓 firebase.messaging 的後續動作，交給 SwPush 來處理，先看程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SwPush</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/service-worker&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> firebase <span class="keyword">from</span> <span class="string">&#x27;firebase/app&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;firebase/messaging&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;src/environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> swPush: SwPush</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    firebase.<span class="title function_">initializeApp</span>(&#123;</span><br><span class="line">      <span class="attr">messagingSenderId</span>: environment.<span class="property">firebase</span>.<span class="property">messagingSenderId</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> messaging = firebase.<span class="title function_">messaging</span>();</span><br><span class="line">    navigator.<span class="property">serviceWorker</span>.<span class="property">ready</span>.<span class="title function_">then</span>(<span class="function"><span class="params">registration</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !!registration &amp;&amp;</span><br><span class="line">        registration.<span class="property">active</span> &amp;&amp;</span><br><span class="line">        registration.<span class="property">active</span>.<span class="property">state</span> &amp;&amp;</span><br><span class="line">        registration.<span class="property">active</span>.<span class="property">state</span> === <span class="string">&#x27;activated&#x27;</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        messaging.<span class="title function_">useServiceWorker</span>(registration);</span><br><span class="line">        messaging</span><br><span class="line">          .<span class="title function_">requestPermission</span>()</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">() =&gt;</span> messaging.<span class="title function_">getToken</span>())</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function"><span class="params">token</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Permission granted!&#x27;</span>, token));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">&#x27;No active service worker found, not able to get firebase messaging&#x27;</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">swPush</span>.<span class="property">messages</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 3, 4: import firebase/app 與 messaging 相關功能</li>
<li>line 13: 注入 SwPush 服務</li>
<li>line 15: 由於 SW 註冊的順序性，必須在 <code>ngOnInit</code> 的地方撰寫註冊 <code>messaging</code> 的功能。</li>
<li>line 16 ~ 17:  初始化 <code>firebase</code> 物件</li>
<li>line 19: 建立 <code>firebase.messaging</code> 服務</li>
<li>line 20: 判斷監聽瀏覽器 SW 是否已經準備完成，相關說明請參閱 <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready">MDN</a></li>
<li>line 21~ 26: 判斷 SW 是否已經準備好可以使用</li>
<li>line 27: 告訴 <code>firebase.messaging</code> 服務，之後的訊息請交由此 SW 處理</li>
<li>line 28 ~ 31: 請求權限並取得 token，這 token 要存起來，後端要發訊息到前端時，需要這個 token，這個 token 在每一次 SW 註冊時都會改變</li>
<li>line 39~41: 利用  <code>SwPush</code> 監聽推播訊息</li>
</ul>
<p>以上的幾行程式碼，就是將 firebase.messaging 的功能，改用 <code>SwPush</code> 來處理，因為 Angular PWA 只有在 <code>production</code> 模式下才會啟動，要測試是否成功，必須使用 <code>--prod</code> 來切換成 <code>production</code> 模式，所以建議使用 <code>ng build --prod</code> 後，再利用 <code>lite-server</code> 的方式將網站開啟，當網頁開啟後，第一次會被詢問是否允許開啟通知功能，點選允許，後續才可以接受到通知訊息</p>
<p>接下來再打開 F12 開發者工具並切換到 <code>console</code> 下，應可以看到 <code>Permission granted! xxxxxxxxxxxxx</code> 的訊息，而後面的那一串就是本次 SW 註冊後跟 FCM 取得 client token (先記起來，下面測試時用的到)</p>
<p>至於要怎麼測試有設定成功，以下提供一個簡單的測試方式</p>
<h2 id="利用-Postman-來做-Push-Notification-的測試"><a class="header-anchor" href="#利用-Postman-來做-Push-Notification-的測試"> </a>利用 Postman 來做 Push Notification 的測試</h2>
<ol>
<li>
<p>打開 <code>Postman</code>，並建立一個新的 <code>Post</code> 請求</p>
</li>
<li>
<p>網址輸入: <code>https://fcm.googleapis.com/fcm/send </code></p>
</li>
<li>
<p><code>Header</code> 的地方需要新增兩項</p>
<ol>
<li>
<p><code>&quot;Content-Type&quot; : &quot;application/json&quot;</code></p>
</li>
<li>
<p>`「Authorization」 : 「key=&lt;伺服器金鑰&gt;」，伺服器金鑰取得的位置</p>
<p><img src="1555764407416.png" alt="1555764407416"></p>
</li>
</ol>
</li>
<li>
<p>Body 的內容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;to&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;YOUR_FCM_TOKEN_WILL_BE_HERE&quot;</span><span class="punctuation">,</span> <span class="comment">// 剛剛在 SW 註冊時，取得的 Client Token</span></span><br><span class="line"> <span class="attr">&quot;collapse_key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;type_a&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;notification&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;body&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Body of Your Notification&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Title of Your Notification&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;data&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;body&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Body of Your Notification in Data&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Title of Your Notification in Title&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;key_1&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Value for key_1&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;key_2&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Value for key_2&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>按下送出，如果有正常的送出，不論寄送成功失敗，在 postman 都會看到這個 response 的訊息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multicast_id&quot;</span><span class="punctuation">:</span> <span class="number">6098520606839994749</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failure&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;canonical_ids&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;results&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;message_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0:1555764770224963%e609af1cf9fd7ecd&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>瀏覽器開發者工具的 Console 裡會看到，作業系統也會收到通知訊息</p>
<p><img src="1555764913301.png" alt="1555764913301"></p>
</li>
</ol>
<p>以上就是利用 postman 進行 Push Notifications 測試的方法</p>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p>網頁的 Push Notifications 可以做到很多事情，這留在後面再來研究，但至少利用 <code>@angular/pwa</code> 加上 <code>SwPush</code> 與 <code>Firebase Cloud Messaging</code> 的串接，可以少寫很多程式碼了。在此分享給各位</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[NestJS] 進入 NestJS 的世界 - Day 01</title>
    <url>/2019/05/04/nestjs-getting-start/</url>
    <content><![CDATA[<p>NestJS 問世已經有好一段時間了，一直到現在才時間開始研究 NestJS 這一個以 Angular 風格著稱的後端 Node.js 框架，支援 JavaScript 和 TypeScript 語言且擁有 OOP、FP、FRP 的特性，還有其他強大的功能，更多的資訊可以在 <a href="https://docs.nestjs.com/">NestJS</a> 的文件裡找到。</p>
<span id="more"></span>
<h1 id="工具-環境"><a class="header-anchor" href="#工具-環境"> </a>工具/環境</h1>
<p>NestJS 有提供 CLI 工具，可以讓我們透過指令的方式建立專案及其他的元件，就跟 Angular CLI 一樣，可以透過 npm/yarn 安裝成全域工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g @nestjs/cli</span><br></pre></td></tr></table></figure>
<p>當安裝完成後，就可以使用 nest CLI 提供的指令建立 nest 專案了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nest new &lt;project-name&gt;</span><br></pre></td></tr></table></figure>
<p>這行指令可以建立一個完整的 nest 專案，包含測試的環境等，最基礎的專案結構分為 <code>src</code> 與 <code>test</code> 兩個資料夾，分別放要執行的程式碼與測試碼，其他的就是一些執行要用的設定檔</p>
<p><img src="1556962007650.png" alt="1556962007650"></p>
<p>至於要怎麼將專案執行起來，在 <code>package.json</code> 內提供了一些 <code>script</code> 可以執行</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -p tsconfig.build.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write \&quot;src/**/*.ts\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node -r tsconfig-paths/register src/main.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start:dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start:debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --config nodemon-debug.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prestart:prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rimraf dist &amp;&amp; npm run build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start:prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node dist/main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tslint -p tsconfig.json -c tslint.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:cov&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --coverage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:e2e&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest --config ./test/jest-e2e.json&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在命令視窗內執行 <code>npm start</code> 即可以將執行環境給跑起來，預設網站的連接埠為 3000，打開瀏覽器並輸入 <code>http://localhost:3000</code> 即可看到以下的畫面</p>
<p><img src="1556962210719.png" alt="1556962210719"></p>
<h1 id="基本架構"><a class="header-anchor" href="#基本架構"> </a>基本架構</h1>
<h2 id="Main"><a class="header-anchor" href="#Main"> </a>Main</h2>
<ul>
<li>
<p><code>main.ts</code> : 進入點。決定要啟動哪一個 Module 跟要使用哪一個連接埠，預設為 3000</p>
<ul>
<li>
<p>有兩種平台可以選擇，<code>express</code> (default) 與 <code>fastify</code>，要設定使用哪一種平台也十分容易，只要在 <code>create</code> 時指定平台就可以了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestExpressApplication</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/platform-express&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="property">create</span>&lt;<span class="title class_">NestExpressApplication</span>&gt;(<span class="title class_">AppModule</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>fastify 版本</p>
<ul>
<li>
<p><code>npm i @nestjs/platform-fastify</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">FastifyAdapter</span>,</span><br><span class="line">  <span class="title class_">NestFastifyApplication</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/platform-fastify&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="property">create</span>&lt;<span class="title class_">NestFastifyApplication</span>&gt;(</span><br><span class="line">    <span class="title class_">AppModule</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FastifyAdapter</span>(),</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>如果是跑在 docker 的環境，<code>app.listen</code> 需要多設定 <code>IP</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Module"><a class="header-anchor" href="#Module"> </a>Module</h2>
<ul>
<li><code>app.module.ts</code> :  Root Module，內含 modules、controllers 與 providers 等設定</li>
<li>相關的觀念與 Angular 的 NgModule 相同</li>
<li>Global Module：如果有一個 Module 需要重複 import 到其他 Module 時，這時候使用 <code>@Gloabl()</code> 的方式標示，就可以讓該 module 成為 Gloabl 等級的模組，但只能被註冊一次。(<a href="https://docs.nestjs.com/modules#global-modules">文件說明</a>)</li>
</ul>
<h2 id="Controller"><a class="header-anchor" href="#Controller"> </a>Controller</h2>
<ul>
<li>
<p><code>app.controller.ts</code> : 擁有基本路由設定的控制器</p>
<ul>
<li>
<p>CLI 建立指令: <code>nest g controller &lt;controller name&gt;</code></p>
</li>
<li>
<p>路由設定</p>
<ul>
<li>
<p>可透過 <code>@Controller(route)</code> 的方式來設定最上層的路由，例如 <code>@Controller('products')</code> ，當瀏覽到 <code>http://localhost:3000/products</code> 就會進入到這個 Controller ，然後再去找相對應的請求方式及路由設定</p>
</li>
<li>
<p>順序性很重要，讀取順序是由上而下，假設有程式碼的順序如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;:id&#x27;</span>)</span><br><span class="line">  <span class="title function_">findOne</span>(<span class="params"><span class="meta">@Param</span>(<span class="string">&#x27;id&#x27;</span>) id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This action returns a #<span class="subst">$&#123;id&#125;</span> product`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 因為 @Get(&#x27;:id&#x27;) 已經攔截了，所以這裡永遠不會執行到</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>請求方式</p>
<ul>
<li>
<p>網頁請求的方式有很多種，使用 decorator 的方式來標示 function ，其設定方式直覺</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Req</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getAll</span>(<span class="params"><span class="meta">@Req</span>() request: Request</span>) &#123;    </span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>請求時的相關資訊，可以透過 <code>@Req()</code> 來取得</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Req</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getAll</span>(<span class="params"><span class="meta">@Req</span>() request: Request</span>) &#123;    </span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>更多的資訊可以參考<a href="https://docs.nestjs.com/controllers#request-object">這裡</a>的表格</p>
</li>
</ul>
</li>
<li>
<p>非同步</p>
<ul>
<li>
<p>支援 async / await</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">findAll</span>(): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>[]&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>更支援 RxJS Observable</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="title function_">findAll</span>(): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>[]&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">of</span>([]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>Request payload</p>
<ul>
<li>
<p>如果是來自 C# <a href="http://ASP.NET">ASP.NET</a> MVC 的朋友，一定很習慣當 POST/PUT 這一類的請求，所傳進來的 payload 會配上一個資料模組 (Data model)，用來描述所取得的資料結構，而 nestjs 也提供一樣的功能</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CreateCatDto</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>() createCatDto: CreateCatDto</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;This action adds a new cat&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Provider"><a class="header-anchor" href="#Provider"> </a>Provider</h2>
<p>地位等同於 Angular Service，所有的邏輯跟相關操作都可以放在 provider 層，再透過 DI 的方式讓 Controller 或是其他的 service 使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CatsService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">cats</span>: <span class="title class_">Cat</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">create</span>(<span class="params">cat: Cat</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cats</span>.<span class="title function_">push</span>(cat);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">findAll</span>(): <span class="title class_">Cat</span>[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cats</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p>到這裡只是介紹很基本很基本的 <code>NestJS</code> 的內容，還有更多更進階的設定需要被探索，那只能留在之後探勘了。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.nestjs.com/">NestJS Doc</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>NestJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[NestJS] Middleware - Day 02</title>
    <url>/2019/05/05/nestjs-middleware/</url>
    <content><![CDATA[<p>什麼是 <code>Middleware</code>? <code>Middleware</code> 是介於 Client 端與後端路由中間的一層或是多層 Function，而該 Functions 能存取 <code>Request</code> 與 <code>Request</code> 資訊，也可以透過 <code>next()</code> 來控制流程。</p>
<span id="more"></span>
<p><img src="Middlewares_1.png" alt="Middlewares_1"></p>
<p><code>NestJS</code> 裡的 <code>Middleware</code> 基本概念與 <code>express</code> 的 <code>Middleware</code> 相同，所以相關的資訊也可以參考 <a href="http://expressjs.com/en/guide/using-middleware.html">express middleware</a>。而以下的幾件事情是可以透過 <code>Middleware</code> 完成的</p>
<ol>
<li>執行任何程式碼</li>
<li>改變 Request / Response 物件內容</li>
<li>結束 Request /Response 生命週期</li>
<li>執行下一個 Middleware ，表示可以串接多個 Middleware</li>
</ol>
<h1 id="建立"><a class="header-anchor" href="#建立"> </a>建立</h1>
<p>可以透過 CLI 的指令建立 <code>Middleware</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nest g mi &lt;middleware-name&gt;</span><br></pre></td></tr></table></figure>
<p>當建立完成後，以下為基本的 middleware 程式碼架構</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NestMiddleware</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CheckMiddleware</span> <span class="keyword">implements</span> <span class="title class_">NestMiddleware</span> &#123;</span><br><span class="line">  <span class="title function_">use</span>(<span class="params">req: <span class="built_in">any</span>, res: <span class="built_in">any</span>, next: () =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="設定"><a class="header-anchor" href="#設定"> </a>設定</h1>
<p>當建立完一個 middleware 後，當然需要告訴 <code>NestJS</code> 說，這一個 <code>Middleware</code> 需要套用在那些路由規則上，這裡就先設定在最上層的 <code>AppModule</code> 內</p>
<ol>
<li>
<p>實作 <code>NestModule</code> 介面</p>
</li>
<li>
<p>建立 <code>configure</code> 方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span>, <span class="title class_">NestModule</span>, <span class="title class_">MiddlewareConsumer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProductsController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./products/products.controller&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">ProductsController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> <span class="keyword">implements</span> <span class="title class_">NestModule</span> &#123;</span><br><span class="line">  <span class="title function_">configure</span>(<span class="params">consumer: MiddlewareConsumer</span>) &#123;&#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>利用 consumer 來設定 middleware 適用的路由範圍</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> <span class="keyword">implements</span> <span class="title class_">NestModule</span> &#123;</span><br><span class="line">  <span class="title function_">configure</span>(<span class="params">consumer: MiddlewareConsumer</span>) &#123;</span><br><span class="line">    consumer.<span class="title function_">apply</span>(<span class="title class_">CheckMiddleware</span>).<span class="title function_">forRoutes</span>(<span class="title class_">ProductsController</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>apply 可以放多個 middleware，且會依序執行，但前提是每一個 middleware 都有執行 <code>next()</code></li>
<li>可以設定排除規則， <code>exclude(  &#123; path: 'products', method: RequestMethod.POST &#125;)</code>，但根據官網說明，此規則並不適用於 functional middleware，在下面會介紹什麼是 functional middleware</li>
<li><code>forRoutes</code> 有以下的設定方式
<ul>
<li>直接放 Controller Class</li>
<li>指定路由 <code>forRoutes('products')</code></li>
<li>指定路由與請求方式 <code>forRoutes(&#123;path: 'products', method: RequestMethod.GET &#125;)</code></li>
<li>也支援 Route wildcards 的方式，<code>forRoutes(&#123; path: 'ab*cd', method: RequestMethod.ALL &#125;);</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>如果要設定成全域使用的 middleware 時，可以在 <code>main.ts</code> 內設定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const app = await NestFactory.create(AppModule);</span><br><span class="line">app.use(CheckMiddleware);</span><br><span class="line">await app.listen(3000);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Middleware-進一步說明"><a class="header-anchor" href="#Middleware-進一步說明"> </a>Middleware 進一步說明</h1>
<p>那到底 <code>Middleware</code> 可以做到怎樣的事情呢? 這裡有一個簡單的範例</p>
<p><strong>攔截所有的 Request ，不給進 <code>ProductController</code></strong></p>
<ul>
<li>middleware 的設定如上，直接套用 <code>ProductController</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NestMiddleware</span>, <span class="title class_">HttpStatus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CheckMiddleware</span> <span class="keyword">implements</span> <span class="title class_">NestMiddleware</span> &#123;</span><br><span class="line">  <span class="title function_">use</span>(<span class="params">req: Request, res: Response, next: () =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>).<span class="title function_">send</span>(<span class="string">&#x27;哈，你被攔截了&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下來用 Postman 來打 <code>/products</code> ，看結果是什麼</p>
<p><img src="1557061306473.png" alt="1557061306473"></p>
<p>當然可以加上一些條件，例如 Request 的內容中，如果 <code>queryParams</code> 的 name 是 Kevin 時，就會直接回傳，不然就進入 <code>ProductController</code> 內處理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NestMiddleware</span>, <span class="title class_">HttpStatus</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CheckMiddleware</span> <span class="keyword">implements</span> <span class="title class_">NestMiddleware</span> &#123;</span><br><span class="line">  <span class="title function_">use</span>(<span class="params">req: Request, res: Response, next: () =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">name</span> === <span class="string">&#x27;Kevin&#x27;</span>) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>).<span class="title function_">send</span>(<span class="string">&#x27;哈，你被攔截了&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">next</span>();   </span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1557061532063.png" alt="1557061532063"></p>
<p><img src="1557061556509.png" alt="1557061556509"></p>
<h1 id="Functional-Middleware"><a class="header-anchor" href="#Functional-Middleware"> </a>Functional Middleware</h1>
<p>如果 <code>Middleware</code> 不需要任何使用到其他的服務，就沒有寫成 Class 的必要性，可以單純的使用 Function 來完成</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">logger</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Request...`</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.nestjs.com/middleware">官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>NestJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[NestJS] Exception Filters - Day 03</title>
    <url>/2019/05/06/nestjs-filters/</url>
    <content><![CDATA[<p><code>NestJS</code> 有內建例外錯誤處理層，負責處理所以未處理的例外狀態，算是框架層級的錯誤處理機制，這裡 <code>NestJS</code> 使用一個名詞 <code>exception filter</code>，預設的處理型別為 <code>HttpException</code></p>
<span id="more"></span>
<h1 id="執行順序"><a class="header-anchor" href="#執行順序"> </a>執行順序</h1>
<p><code>Middleware</code> 優先於 <code>Exception Filter</code></p>
<h1 id="例外狀態"><a class="header-anchor" href="#例外狀態"> </a>例外狀態</h1>
<p>如果例外狀態是沒有被處理的話，則會回傳預設訊息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;statusCode&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Internal server error&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>既然我們知道可以手動處理例外狀態的回傳，在呼叫時就可以刻意的回傳正確的例外狀況，例如</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">findAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(<span class="string">&#x27;Forbidden&#x27;</span>, <span class="title class_">HttpStatus</span>.<span class="property">FORBIDDEN</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 <code>HttpException</code> 是可以被繼承的，那我們也可以自行建立克制的例外狀態，根據官網的範例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ForbiddenException</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HttpException</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&#x27;Forbidden&#x27;</span>, <span class="title class_">HttpStatus</span>.<span class="property">FORBIDDEN</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>更多的例外狀態種類有以下</p>
<ul>
<li><code>BadRequestException</code></li>
<li><code>UnauthorizedException</code></li>
<li><code>NotFoundException</code></li>
<li><code>ForbiddenException</code></li>
<li><code>NotAcceptableException</code></li>
<li><code>RequestTimeoutException</code></li>
<li><code>ConflictException</code></li>
<li><code>GoneException</code></li>
<li><code>PayloadTooLargeException</code></li>
<li><code>UnsupportedMediaTypeException</code></li>
<li><code>UnprocessableEntityException</code></li>
<li><code>InternalServerErrorException</code></li>
<li><code>NotImplementedException</code></li>
<li><code>BadGatewayException</code></li>
<li><code>ServiceUnavailableException</code></li>
<li><code>GatewayTimeoutException</code></li>
</ul>
<h1 id="例外過濾"><a class="header-anchor" href="#例外過濾"> </a>例外過濾</h1>
<p>知道有各種例外狀態的種類，那就可以來寫過濾器，來攔截特定的例外狀況並回傳自訂的錯誤訊息。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">ArgumentsHost</span>,</span><br><span class="line">  <span class="title class_">Catch</span>,</span><br><span class="line">  <span class="title class_">ExceptionFilter</span>,</span><br><span class="line">  <span class="title class_">HttpException</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Response</span>, <span class="title class_">Request</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 攔截特定的例外狀態</span></span><br><span class="line"><span class="meta">@Catch</span>(<span class="title class_">HttpException</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HttpExceptionFilter</span> <span class="keyword">implements</span> <span class="title class_">ExceptionFilter</span> &#123;</span><br><span class="line">  <span class="keyword">catch</span>(<span class="attr">exception</span>: <span class="title class_">HttpException</span>, <span class="attr">host</span>: <span class="title class_">ArgumentsHost</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = host.<span class="title function_">switchToHttp</span>(); <span class="comment">// 取得 context 本身</span></span><br><span class="line">    <span class="keyword">const</span> response = ctx.<span class="property">getResponse</span>&lt;<span class="title class_">Response</span>&gt;(); <span class="comment">// 取得 Response 資訊</span></span><br><span class="line">    <span class="keyword">const</span> request = ctx.<span class="property">getRequest</span>&lt;<span class="title class_">Request</span>&gt;(); <span class="comment">// 取得 Request 資訊</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> status = exception.<span class="title function_">getStatus</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回傳自訂錯誤訊息</span></span><br><span class="line">    response.<span class="title function_">status</span>(status).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">statusCode</span>: status,</span><br><span class="line">      <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">      <span class="attr">path</span>: request.<span class="property">url</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="套用-Filter"><a class="header-anchor" href="#套用-Filter"> </a>套用 Filter</h1>
<p>想要套用 <code>Exception Filter</code> 時，可以透過 <code>@UseFilters()</code> 的方式來設定，可以設定在 method 或是 class 層級。如果想套用多個 Filter 時，直接使用 <code>,</code> 做分隔即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="meta">@UseFilters</span>(<span class="title class_">HttpExceptionFilter</span>) <span class="comment">// 設定 Exception Filter</span></span><br><span class="line">  <span class="title function_">getAll</span>(<span class="params"><span class="meta">@Res</span>() response: Response, <span class="meta">@Query</span>() query</span>) &#123;    </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">HttpException</span>(<span class="string">&#x27;Forbidden&#x27;</span>, <span class="title class_">HttpStatus</span>.<span class="property">FORBIDDEN</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1557147634449.png" alt="1557147634449"></p>
<p>要設定成為 Application 層級時，可以這樣子設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">ApplicationModule</span>);</span><br><span class="line">  app.<span class="title function_">useGlobalFilters</span>(<span class="keyword">new</span> <span class="title class_">HttpExceptionFilter</span>());</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure>
<h1 id="應用發想"><a class="header-anchor" href="#應用發想"> </a>應用發想</h1>
<p>如果可以攔截到例外狀態，也有一個地方可以集中處理，那就可以很簡單的將例外狀態儲存到某一個地方，並且可以依種類回傳不同的錯誤訊息。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.nestjs.com/exception-filters">官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>NestJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[NestJS] Pipe - Day 04</title>
    <url>/2019/05/07/nestjs-pipe/</url>
    <content><![CDATA[<p>昨天提到 <code>Exception Filter</code>，今天來談談 <code>Pipe</code>，<code>Pipe</code> 在 <code>NestJS</code> 裡面有兩個比較常見的使用情境， 1. 轉型 2. 驗證。至於怎麼完成呢?</p>
<span id="more"></span>
<p>根據官網的圖，<code>Pipe</code> 是落在這一個象限內。
<img src="Pipe_1.png" alt="Pipe_1"></p>
<p>而常見的使用情境有</p>
<ol>
<li>轉型 (Transformation)</li>
<li>驗證 (Validation)</li>
</ol>
<h1 id="建立與註冊"><a class="header-anchor" href="#建立與註冊"> </a>建立與註冊</h1>
<p>CLI 指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nest g pi &lt;pipe name&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ArgumentMetadata</span>, <span class="title class_">Injectable</span>, <span class="title class_">PipeTransform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ValidatePipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">value: <span class="built_in">any</span>, metadata: ArgumentMetadata</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>是否有一種熟悉的感覺，就跟 Angular 的 Pipe 語法很類似，沒錯，基本上就是類似的運行方式，而註冊方式與註冊 <code>Exception Filter</code> 雷同</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductsController</span> &#123;</span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="meta">@UsePipes</span>(<span class="title class_">ValidatePipe</span>)</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>(<span class="string">&#x27;some data&#x27;</span>) body: ProductModel, <span class="meta">@Res</span>() response: Response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">CREATED</span>).<span class="title function_">send</span>(body);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Pipe-詳解"><a class="header-anchor" href="#Pipe-詳解"> </a>Pipe 詳解</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">transform</span>(<span class="params">value: <span class="built_in">any</span>, metadata: ArgumentMetadata</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><code>transform</code> 函式內有兩個參數，一個是<code>value</code> 另一個是 <code>metadata</code>，以下為 <code>metadata</code> 的格式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ArgumentMetadata</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">type</span>: <span class="string">&#x27;body&#x27;</span> | <span class="string">&#x27;query&#x27;</span> | <span class="string">&#x27;param&#x27;</span> | <span class="string">&#x27;custom&#x27;</span>;</span><br><span class="line">  <span class="keyword">readonly</span> metatype?: <span class="title class_">Type</span>&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">  <span class="keyword">readonly</span> data?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>實際取得的資訊如下</p>
<p><img src="1557243358947.png" alt="1557243358947"></p>
<p>重新看一下使用 <code>Pipe</code> 的 Controller</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Post</span>()</span><br><span class="line"><span class="meta">@UsePipes</span>(<span class="title class_">ValidatePipe</span>)</span><br><span class="line"><span class="title function_">create</span>(<span class="params"><span class="meta">@Body</span>(<span class="string">&#x27;abc&#x27;</span>) body: ProductModel, <span class="meta">@Res</span>() response: Response</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> response.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">CREATED</span>).<span class="title function_">send</span>(body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@Body()</code> :  <code>@Body</code>可設定要從 <code>Body</code> 取哪一個值，類似 pluck 的功能，而相關的資訊會顯示在 Pipe 的 metadata.data，但必須為文字，如果不傳，metadata 的 data 會收到 <code>undefined</code>，</li>
<li>參數型別，<code>body: ProductModel</code> ，後面的型別會顯示在 <code>metatype</code> 上,</li>
<li><code>metadata.type</code> 會顯示接受到的資料是來自哪裡</li>
</ul>
<p>既然可以取道完整的資料，就可以做到轉型或是驗證的功能。轉型比較簡單，我們先來看怎麼做</p>
<h2 id="轉型"><a class="header-anchor" href="#轉型"> </a>轉型</h2>
<p>其實就將要改變的資料回傳回去就可以了</p>
<p><img src="1557244166904.png" alt="1557244166904"></p>
<p><img src="1557244186484.png" alt="1557244186484"></p>
<h2 id="驗證"><a class="header-anchor" href="#驗證"> </a>驗證</h2>
<p>既然能轉型，就能做到驗證，因為驗證資料格式的方法有很多種，這裡我們就簡單示範一下</p>
<p><img src="1557244358019.png" alt="1557244358019"></p>
<p>執行結果</p>
<p><img src="1557244390580.png" alt="1557244390580"></p>
<p><img src="1557244418440.png" alt="1557244418440"></p>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>官方也有提供一些內建的 Pipe 可以直接使用，例如 <code>ValiationPipe</code> 和 <code>ParseIntPipe</code> ，至於詳細的用法，可以參考官方文件 (<a href="https://docs.nestjs.com/pipes#the-built-in-validationpipe">連結在此</a>)，真的可以花點時間看一下 <code>ValidationPipe</code> 的部分，可以省去不少資料驗證的工作</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.nestjs.com/pipes">官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>NestJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[NestJS] Guard - Day 05</title>
    <url>/2019/05/08/nestjs-guard/</url>
    <content><![CDATA[<p>Angular 有 Router Guard，是用來管制是否能進入 Component 的一道關卡，而在 NestJS 內也有一樣的機制，名字也叫做 Guard</p>
<span id="more"></span>
<p>Guard 的執行順序，會在每一個 middleware 之後，但在 interceptor 或是 pipe 之前，這順序要稍微記一下</p>
<h1 id="建立"><a class="header-anchor" href="#建立"> </a>建立</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nest g gu &lt;guard name&gt;</span><br></pre></td></tr></table></figure>
<p>建立出來 Guard 的基本內容</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CanActivate</span>, <span class="title class_">ExecutionContext</span>, <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">canActivate</span>(</span><br><span class="line">    <span class="attr">context</span>: <span class="title class_">ExecutionContext</span>,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>需要實作 <code>CanActivate</code> 介面</p>
</li>
<li>
<p>回傳的結果為布林值，也可以是 Promise 或是 Observable 的格式</p>
<ul>
<li>true: 請求會繼續下去</li>
<li>false: 會拒絕連線請求</li>
</ul>
</li>
<li>
<p>註冊方式與其他 filter/pipe 類似</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">UseGuards</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.guard&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>)</span><br><span class="line">  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">appService</span>.<span class="title function_">getHello</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>當連線被拒絕時，會收到此訊息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  statusCode<span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">  error<span class="punctuation">:</span> <span class="string">&quot;Forbidden&quot;</span><span class="punctuation">,</span></span><br><span class="line">  message<span class="punctuation">:</span> <span class="string">&quot;Forbidden resource&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="ExecutionContext"><a class="header-anchor" href="#ExecutionContext"> </a>ExecutionContext</h1>
<p>在 <code>canActivate</code> 的方法，會有一個 <code>context</code> 的變數，其型別為 <code>ExecutionContext</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">canActivate</span>(</span><br><span class="line">    <span class="attr">context</span>: <span class="title class_">ExecutionContext</span>,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>而這一個 <code>ExecutionContext</code> 是繼承 <code>ArgumentsHost</code>，而這個型別我們也在 <code>Exception Filter</code> 那邊有看過，相關細節的部分，可以再回去那個章節閱讀</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ExecutionContext</span> <span class="keyword">extends</span> <span class="title class_">ArgumentsHost</span> &#123;</span><br><span class="line">  getClass&lt;T = <span class="built_in">any</span>&gt;(): <span class="title class_">Type</span>&lt;T&gt;;</span><br><span class="line">  <span class="title function_">getHandler</span>(): <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="範例-Role-based-Auth"><a class="header-anchor" href="#範例-Role-based-Auth"> </a>範例: Role-based Auth</h1>
<p>既然可以透過回傳 <code>ture</code> 或是 <code>false</code> 的方式決定是否能進入後續的請求流程，那再搭配其他的設定，不就能做到 Role-based 的權限控管了</p>
<p>官方文件內使用了 <code>SetMetadata</code> 與 <code>Reflection</code> 的方式來設定每一個 Controller method 的允許角色</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>)</span><br><span class="line">  <span class="meta">@SetMetadata</span>(<span class="string">&#x27;roles&#x27;</span>, [<span class="string">&#x27;admin&#x27;</span>]) <span class="comment">// 設定 metaData</span></span><br><span class="line">  <span class="title function_">getHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">appService</span>.<span class="title function_">getHello</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>在 Guard 的地方可以用這種方式取得所設定的 metaData</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Reflector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> reflector: Reflector</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">canActivate</span>(</span><br><span class="line">    <span class="attr">context</span>: <span class="title class_">ExecutionContext</span>,</span><br><span class="line">  ): <span class="built_in">boolean</span> | <span class="title class_">Promise</span>&lt;<span class="built_in">boolean</span>&gt; | <span class="title class_">Observable</span>&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> roles = <span class="variable language_">this</span>.<span class="property">reflector</span>.<span class="title function_">get</span>(<span class="string">&#x27;roles&#x27;</span>, context.<span class="title function_">getHandler</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(roles); <span class="comment">// 可以取得 [&#x27;admin&#x27;] 的資料</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然能取得所設定的 metaData，那後續的動作就可以自由發揮了</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.nestjs.com/guards">官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>NestJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[NestJS] Interceptors - Day 06</title>
    <url>/2019/05/10/nestjs-interceptors/</url>
    <content><![CDATA[<p>Interceptor 是 NestJS 內唯一可以雙向影響的服務，至於有哪些用途，就先來看官網的文件</p>
<span id="more"></span>
<p><img src="Interceptors_1.png" alt="Interceptors_1"></p>
<h1 id="基本型"><a class="header-anchor" href="#基本型"> </a>基本型</h1>
<p>Nest CLI 指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nest g in &lt;interceptor name&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CallHandler</span>, <span class="title class_">ExecutionContext</span>, <span class="title class_">Injectable</span>, <span class="title class_">NestInterceptor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">NestInterceptor</span> &#123;</span><br><span class="line">  <span class="title function_">intercept</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>, <span class="attr">next</span>: <span class="title class_">CallHandler</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> next.<span class="title function_">handle</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>context: 內包含所接紹的 Request / Response 等資訊</li>
<li>next: 可以串接/改變傳出去的內容，為 Observable</li>
</ul>
<p><strong>簡單範例</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CallHandler</span>, <span class="title class_">ExecutionContext</span>, <span class="title class_">Injectable</span>, <span class="title class_">NestInterceptor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">NestInterceptor</span> &#123;</span><br><span class="line">  <span class="title function_">intercept</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>, <span class="attr">next</span>: <span class="title class_">CallHandler</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    consoole.<span class="title function_">log</span>(<span class="string">&#x27;Before&#x27;</span>)</span><br><span class="line">   <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">      .<span class="title function_">handle</span>()</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`After... <span class="subst">$&#123;<span class="built_in">Date</span>.now() - now&#125;</span>ms`</span>)),</span><br><span class="line">     );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>註冊方式與之前的 <code>Pipe</code> 、<code>Fitler</code> 等一樣</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="meta">@UseInterceptors</span>(<span class="title class_">LoggingInterceptor</span>)</span><br><span class="line">  <span class="title function_">getAll</span>(<span class="params"><span class="meta">@Res</span>() response: Response, <span class="meta">@Query</span>() query</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>).<span class="title function_">json</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>輸出結果</p>
<p><img src="1557548376599.png" alt="1557548376599"></p>
<h1 id="進階應用"><a class="header-anchor" href="#進階應用"> </a>進階應用</h1>
<p>因為 intercetpor 需要回傳 Observable 型別，這表示任何可以跟 Observable 串的 Operators 都可以使用，或可以直接回傳另外一個 Observable</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CallHandler</span>, <span class="title class_">ExecutionContext</span>, <span class="title class_">Injectable</span>, <span class="title class_">NestInterceptor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">NestInterceptor</span> &#123;</span><br><span class="line">  <span class="title function_">intercept</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>, <span class="attr">next</span>: <span class="title class_">CallHandler</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;    </span><br><span class="line">     <span class="keyword">return</span> <span class="title function_">of</span>(<span class="string">&#x27;這跟原本 Controller 回傳的內容不一樣&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或是這樣子使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CallHandler</span>, <span class="title class_">ExecutionContext</span>, <span class="title class_">Injectable</span>, <span class="title class_">NestInterceptor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggingInterceptor</span> <span class="keyword">implements</span> <span class="title class_">NestInterceptor</span> &#123;</span><br><span class="line">  <span class="title function_">intercept</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>, <span class="attr">next</span>: <span class="title class_">CallHandler</span>): <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; &#123;    </span><br><span class="line">     <span class="keyword">return</span> next.<span class="title function_">handle</span>().<span class="title function_">pipe</span>(<span class="title function_">catchError</span>(<span class="function">()=&gt;</span>  <span class="title function_">throwError</span>(<span class="keyword">new</span> <span class="title class_">BadGatewayException</span>())),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="執行順序"><a class="header-anchor" href="#執行順序"> </a>執行順序</h1>
<p>從一開始到現在也看了很多不同介於 Client 與 Server 端的服務，但相互的執行順序又是如何，就簡單做一個測試</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tslint:disable-next-line:max-classes-per-file</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductsController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="meta">@UseInterceptors</span>(<span class="title class_">LoggingInterceptor</span>)</span><br><span class="line">  <span class="meta">@UseFilters</span>(<span class="title class_">HttpExceptionFilter</span>)</span><br><span class="line">  <span class="meta">@UsePipes</span>(<span class="title class_">ValidatePipe</span>)</span><br><span class="line">  <span class="meta">@UseGuards</span>(<span class="title class_">AuthGuard</span>)</span><br><span class="line">  <span class="title function_">getAll</span>(<span class="params"><span class="meta">@Res</span>() response: Response, <span class="meta">@Query</span>() query</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">OK</span>).<span class="title function_">json</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">    <span class="comment">// throw new HttpException(&#x27;Forbidden&#x27;, HttpStatus.FORBIDDEN);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>middleware</code> 是註冊在 App.module，執行結果</p>
<p><img src="1557550471551.png" alt="1557550471551"></p>
<h1 id="Recap"><a class="header-anchor" href="#Recap"> </a>Recap</h1>
<p>這邊可以算是 NestJS 基本的運作，但還有更多的內容等著去開發。例如如何連結資料庫等，就繼續探索下去吧</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.nestjs.com/interceptors">官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>NestJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[NestJS] Custom Decorators - Day 07</title>
    <url>/2019/05/11/nestjs-custom-decorators/</url>
    <content><![CDATA[<p>NestJS 裡大量使用 Decorators 來設定相關的功能，類似 Filter、Pipe、Interceptors、Req、Body 等，當然也可以自訂 Decorators 來做一些我們想要簡化的功能</p>
<span id="more"></span>
<p>在 NestJS 內要自訂 Decorators 很單純，NestJS 為我們準備好 <code>createParamDecorator</code> ，可以透過此方法來建立 decorator。這裡有一個官網提供的範例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">User</span> = <span class="title function_">createParamDecorator</span>(<span class="function">(<span class="params">data, req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> req.<span class="property">user</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>當建立完成後，就可以在需要的地方使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Get</span>()</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="params"><span class="meta">@User</span>() user: UserEntity</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣當執行到這一行時，就可以直接取得 <code>user</code> 的資訊，簡化了很多。這功能在 <code>@Body</code> 也是這樣子完成的。</p>
<p>假設資料結構長這樣</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">101</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alan&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Turing&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alan@email.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;roles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;admin&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以透過 <code>data</code> 參數，告訴 decorator 更多的資訊，類似這樣子使用 <code>@User('firstName')</code>，在原本 Decorators 的地方也稍微加工一下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">User</span> = <span class="title function_">createParamDecorator</span>(<span class="function">(<span class="params">data: <span class="built_in">string</span>, req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data ? req.<span class="property">user</span> &amp;&amp; req.<span class="property">user</span>[data] : req.<span class="property">user</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>修改完成後，就可以指定要回傳的資料欄位了，是不是很簡單</p>
<h1 id="實際使用範例"><a class="header-anchor" href="#實際使用範例"> </a>實際使用範例</h1>
<p>稍微修改一下上面的 decorator</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createParamDecorator &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">User</span> = <span class="title function_">createParamDecorator</span>(<span class="function">(<span class="params">data: <span class="built_in">string</span>[], req: Request</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> user = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (data) &#123;</span><br><span class="line">    user = data.<span class="title function_">reduce</span>(<span class="function">(<span class="params">newuser, prop</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...newuser, [prop]: user[prop] &#125;;</span><br><span class="line">    &#125;, &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>實際使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// tslint:disable-next-line:max-classes-per-file</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;products&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ProductsController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"><span class="meta">@User</span>([<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>]) body, <span class="meta">@Res</span>() response: Response</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">CREATED</span>).<span class="title function_">send</span>(body);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="1557563340786.png" alt="1557563340786"></p>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://docs.nestjs.com/custom-decorators">官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>NestJS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Static Query 是什麼?</title>
    <url>/2019/05/29/angular-static-viewchild/</url>
    <content><![CDATA[<p>Angular 8 在五月底正式釋出，而這次的釋出裡面有一個更新屬於新設定，觀念上是有需要調整的，所以寫了這篇文章釐清一下</p>
<span id="more"></span>
<p>所謂的 Query 上的改變，是針對 <code>ViewChild</code> / <code>ContentChild</code> 這一類的 decorator 做額外的設定，以前我們的程式碼會這樣子寫</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(<span class="string">&#x27;foo&#x27;</span>) <span class="attr">foo</span>: <span class="title class_">ElementRef</span></span><br></pre></td></tr></table></figure>
<p>這樣子寫在取得內容的時間點，有時候會是在 <code>Oninit</code> 有時候需要在 <code>ngAfterViewInit</code> 時才可以取得。稍微分析一下為什麼會有這樣子的時間點上的差異性</p>
<ol>
<li>當所要查詢的 Element 上沒有任何 <code>*ngIf</code> 或是 <code>*ngFor</code> 的 directive 時，該 element 一開始就已經存在，不需要再經過 Angular 做額外的判斷 (頁面處理)，這時候就可以在 <code>OnInit</code> 這階段取得該 Element 的相關資訊</li>
</ol>
<p><img src="1559139325690.png" alt="1559139325690"></p>
<ol start="2">
<li>當有使用到 <code>*ngIf</code> 或是 <code>*ngFor</code> 時，就會出現另外一種狀態</li>
</ol>
<p><img src="1559139445907.png" alt="1559139445907"></p>
<p>以上就是同一種寫法卻有可能在兩種地方取得物件，這一個問題 Angular 團隊想要透過手動設定的方式來告訴底層的 compiler 在何時取得物件</p>
<h1 id="在-Version-8-過度時期"><a class="header-anchor" href="#在-Version-8-過度時期"> </a>在 Version 8 (過度時期)</h1>
<p>當在寫 <code>@ViewChild</code> 或是 <code>@ContentChild</code> 時，就必須明確的標示第二個參數 <code>&#123; static: true | false&#125;</code>，這參數的設定意義分別為</p>
<ul>
<li>
<p>當設定為 <code>true</code> 時，只會在 <code>ngOnInit</code> 的地方取得 Element 物件</p>
<p><img src="1559139827426.png" alt="1559139827426"></p>
<p>當設定為 <code>&#123; static: true &#125;</code> 時，在加上 <code> ngIf</code> 的條件，在 <code>ngAfterViewInit</code> 的地方依舊取不到該 Element 物件，原因是 Angular Compiler 認定該 Element 為 static ，所以只會在 OnInit 的地方取一次，之後就不會被執行</p>
<p><img src="1559140008278.png" alt="1559140008278"></p>
<p>所以當遇到這種情形，就必須將 <code>static</code> 設定為 <code>false</code></p>
</li>
<li>
<p>當設定為 <code>false</code> 時，只會在 <code>ngAfterViewInit</code> 的地方取得 Element 物件</p>
<p><img src="1559140094660.png" alt="1559140094660"></p>
</li>
</ul>
<h1 id="最後"><a class="header-anchor" href="#最後"> </a>最後</h1>
<p>而這一個 API 改變是暫時性的，在 Angular 9 這一個參數的預設值會是 <code>false</code>，之後就又會回到一般的使用方式。在下面的參考文件中的後半段，有一些 QA 的內容，如果對於這樣子的設定有問題的，也可以閱讀那邊的回答</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/guide/static-query-migration">Static Query Migration Guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Web worker</title>
    <url>/2019/06/07/angular-web-worker/</url>
    <content><![CDATA[<p>Angular CLI 8 提供建立 web worker 的指令，這一個指令能幫助我們建立相關的檔案及修正相關要調整的設定，剩下的就是功能實作及在何處使用 web worker 了。</p>
<p>Web worker 是什麼?  我們都知道 JavaScript 基本上是一個單執行緒的語言，web worker 可以讓我們多開一條執行緒，這樣子的好處就是可以將高計算的工作放到 worker 內運算，善用現代電腦的強大硬體。</p>
<span id="more"></span>
<h1 id="概述"><a class="header-anchor" href="#概述"> </a>概述</h1>
<p>Web Worker 一旦被建立起來後，就會一直運行，所以在使用上要留意關閉的時機點，避免資源浪費，Web Worker 可以讓我們多開戰場，但還是有其使用上的限制，有以下幾點需要留意的</p>
<ol>
<li><strong>必須來至相同的網址</strong>:  web worker 的程式不能跨網域的讀取</li>
<li><strong>DOM操作限制</strong>:
<ol>
<li>不能使用:  <code>doucment</code>、<code>window</code>、<code>parent</code>  物件</li>
<li>可以使用: <code>navigator</code> 、<code>location</code></li>
</ol>
</li>
<li><strong>溝通</strong>: <code>Worker</code> 與 <code>Main Thread</code> 不能直接溝通，必須透過 <code>Message</code> 來溝通</li>
<li><strong>腳本限制</strong>: 不能使用 <code>alert()</code> 和 <code>confirm()</code> 但可以使用 <code>XMLHttpRequest</code></li>
<li><strong>檔案限制</strong>: 不能讀取本機檔案 (<code>file://</code>)，但可以讀取網路上的</li>
</ol>
<h1 id="基本用法"><a class="header-anchor" href="#基本用法"> </a>基本用法</h1>
<h2 id="Main-Thread"><a class="header-anchor" href="#Main-Thread"> </a>Main Thread</h2>
<h3 id="建立"><a class="header-anchor" href="#建立"> </a>建立</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="傳遞訊息"><a class="header-anchor" href="#傳遞訊息"> </a>傳遞訊息</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">worker.<span class="title function_">postMessage</span>(data);</span><br></pre></td></tr></table></figure>
<p><code>postMessage</code> 就是 <code>Main Thread</code> 與 <code>Worker</code> 間傳遞訊息的方法</p>
<h3 id="接受訊息"><a class="header-anchor" href="#接受訊息"> </a>接受訊息</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">worker.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="關閉"><a class="header-anchor" href="#關閉"> </a>關閉</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">worker.<span class="title function_">terminate</span>();</span><br></pre></td></tr></table></figure>
<h3 id="Worker-例外狀況處理"><a class="header-anchor" href="#Worker-例外狀況處理"> </a>Worker 例外狀況處理</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">worker.<span class="property">onerror</span> = <span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// handle exception here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Worker"><a class="header-anchor" href="#Worker"> </a>Worker</h2>
<h3 id="接受訊息-v2"><a class="header-anchor" href="#接受訊息-v2"> </a>接受訊息</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// code here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="傳送訊息"><a class="header-anchor" href="#傳送訊息"> </a>傳送訊息</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">postMessage</span>(data);</span><br></pre></td></tr></table></figure>
<p>透過 <code>postMessage</code> 的方法可以從 <code>worker</code> 傳送訊息到 <code>Main Thread</code></p>
<h3 id="引用-Library"><a class="header-anchor" href="#引用-Library"> </a>引用 Library</h3>
<p>在 worker 內一樣可以使用 JavaScript Library, 引用方式如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">importScripts(<span class="string">&#x27;script.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">importScripts(<span class="string">&#x27;script1.js&#x27;</span>, <span class="string">&#x27;script2.js&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="錯誤處理"><a class="header-anchor" href="#錯誤處理"> </a>錯誤處理</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// handle exception here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="關閉-v2"><a class="header-anchor" href="#關閉-v2"> </a>關閉</h3>
<p>Worker 也可以自我關閉</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">close</span>();</span><br></pre></td></tr></table></figure>
<h1 id="Angular-用法"><a class="header-anchor" href="#Angular-用法"> </a>Angular 用法</h1>
<h2 id="建立-worker-檔案"><a class="header-anchor" href="#建立-worker-檔案"> </a>建立 worker 檔案</h2>
<p>透過 Angular CLI 可以快速的建立及設定相關的環境，指令是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng g webWorker &lt;worker-name&gt;</span><br></pre></td></tr></table></figure>
<p>該指令會做以下的幾件事情</p>
<ol>
<li>新增 <code>&lt;worker-name&gt;.worker.ts</code> 檔案</li>
<li>新增 <code>tsconfig.worker.json</code> 檔案</li>
<li>更新  <code>tsconfig.app.json</code> 檔案，排除 <code>worker.ts</code> 檔案</li>
<li>更新 <code>angular.json</code> 檔案，新增讀取 worker 相關的設定</li>
</ol>
<h2 id="使用-Web-Worker"><a class="header-anchor" href="#使用-Web-Worker"> </a>使用 Web Worker</h2>
<p>在 Angular 內不論是 component 或是 service 都可以使用，基本使用方式為</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Worker</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;./my-worker.worker&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;module&#x27;</span> &#125;);</span><br><span class="line"> <span class="comment">// 監聽訊息</span></span><br><span class="line">    <span class="comment">// 不使用 rxjs</span></span><br><span class="line">     worker.<span class="property">onmessage</span> = <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;        </span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;got message back:&#x27;</span>, data);</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 rxjs</span></span><br><span class="line">     fromEvent&lt;<span class="built_in">any</span>&gt;(worker, <span class="string">&#x27;message&#x27;</span>).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rxjs version:&#x27;</span>, data);</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">     worker.<span class="title function_">postMessage</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 2: 建立 worker，第二個參數可以設定以下的項目 (Optional)
<ul>
<li><strong>type</strong>: 指定建立的類型， 預設為 <code>classic</code> ，可設定的選項是 <code>classic</code> 和 <code>module</code>
<ul>
<li>設定為 <code>module</code> 類型時 ，可以使用 <code>import &#123;&#125; from xxx</code> 語法</li>
</ul>
</li>
<li><strong>credentials</strong>: 指定 <code>credentials</code> 類型，可設定的選項有 <code>omit</code> 、<code>same-origin</code>、<code>include</code>，如果 <code>type</code> 的設定為 <code>classic</code> 時，此設定為 <code>omit</code> (不需要 credentials)</li>
<li><strong>name</strong>: 設定 workder 名稱，通常使用於 Debugging 時期 (IE、Safari 不支援)</li>
</ul>
</li>
<li>line 5~12: 兩種監聽 <code>Worker</code> 傳回訊息的方式
<ul>
<li>基本寫法</li>
<li>使用 rxjs 的方式</li>
</ul>
</li>
<li>line 15: 送訊息到 worker</li>
</ul>
<h1 id="應用範例"><a class="header-anchor" href="#應用範例"> </a>應用範例</h1>
<p>假設我想要做一個定期撈資料的功能，這一個功能雖然可以在 service 內寫 timer 定期去完成。如果想要放到 web worker 內，又該如何完成了，又不能再 web worker 內使用 <code>httpClient</code> 的物件。</p>
<p>這裡有幾個選擇，既然可以使用 <code>import </code> 的方式載入第三方的套件，這裡就用 rxjs 內的 ajax 物件來做示範</p>
<ul>
<li>my.worker.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference lib=&quot;webworker&quot; /&gt;</span></span><br><span class="line"><span class="keyword">import</span> &#123; takeUntil, concatMap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; timer, <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ajax &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/ajax&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> destory$ = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">queryGithub</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  ajax.<span class="title function_">getJSON</span>(<span class="string">&#x27;https://api.github.com/users?per_page=5&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">longPolling</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">timer</span>(<span class="number">1000</span>, <span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">concatMap</span>(<span class="function">() =&gt;</span> <span class="title function_">queryGithub</span>()),</span><br><span class="line">    <span class="title function_">takeUntil</span>(destory$)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (data) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;start&#x27;</span>:</span><br><span class="line">      <span class="title function_">longPolling</span>().<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="title function_">postMessage</span>(value));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;stop&#x27;</span>:</span><br><span class="line">      destory$.<span class="title function_">next</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>app-component.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;start()&quot;&gt;start&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;stop()&quot;&gt;stop&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;ngWorker&#x27;</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">worker</span>: <span class="title class_">Worker</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Worker</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">worker</span> = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;./my.worker&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;module&#x27;</span> &#125;);</span><br><span class="line">      <span class="comment">// 監聽訊息</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">worker</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Data:&#x27;</span>, data);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">worker</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">worker</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">worker</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">worker</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;stop&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Web-Worker-與-Service-Worker-的差異"><a class="header-anchor" href="#Web-Worker-與-Service-Worker-的差異"> </a>Web Worker 與 Service Worker 的差異</h1>
<p>以下兩張圖快速解釋 Web Worker 與 Service Worker 各自負責的事情</p>
<h2 id="Web-Worker"><a class="header-anchor" href="#Web-Worker"> </a>Web Worker</h2>
<p><img src="web-worker.jpg" alt="web-worker"></p>
<h2 id="Service-Worker"><a class="header-anchor" href="#Service-Worker"> </a>Service Worker</h2>
<p><img src="service-worker.jpg" alt="service-worker"></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] Notification </title>
    <url>/2019/07/01/rxjs-notification/</url>
    <content><![CDATA[<p>RxJS 內除了 <code>Observable</code> 之外，還有另外一種物件型別，稱做 <code>Notification</code>，什麼是 <code>Notification</code> 而他可以做到那些事情，就讓這篇文章來探討一下</p>
<span id="more"></span>
<h1 id="基本介紹"><a class="header-anchor" href="#基本介紹"> </a>基本介紹</h1>
<p><code>Notification</code> 是一個物件可以用來描述 Observable 所送出的事件資訊，例如這次送出的資料狀態是什麼? 是否有資料? 資料又是什麼? 我們可以透過這些資訊來做一些額外的判斷處理。</p>
<p>我們沒有辦法直接取得 <code>Notification</code> 類型的資料，需要搭配兩個 <code>operator</code> 來完成、<code>materialize</code> 與 <code>dematerialize</code></p>
<ul>
<li><code>materialize</code> 是將 <code>Observable</code> 送出的事件資料轉換成 <code>Notification</code> 物件</li>
<li><code>dematerialize</code> 是將 <code>Notification</code> 轉換為 <code>Observable</code> 的事件資料</li>
</ul>
<p>當然我們也可以直接建立 <code>Notification</code> 物件</p>
<h2 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">     .<span class="title function_">pipe</span>(<span class="title function_">materialize</span>())</span><br><span class="line">     .<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>
<p>輸出結果</p>
<p><img src="1561945226547.png" alt="1561945226547"></p>
<p>可以很容易的看到，透過 <code>materialize</code> 的方法，可以讓在 <code>Observable</code> 間流動的資料用物件的方式呈現相關的資訊，來做一點變化</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">materialize</span>(),</span><br><span class="line">        <span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> (x.<span class="property">kind</span> === <span class="string">&#x27;C&#x27;</span> ? x : <span class="keyword">new</span> <span class="title class_">Notification</span>(x.<span class="property">kind</span>, x.<span class="property">value</span> + <span class="string">&#x27;!&#x27;</span>)))</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>
<ul>
<li>line 4: 透過 map 的方法，來加入一些判斷變化條件</li>
</ul>
<p>輸出結果</p>
<p><img src="1561945532051.png" alt="1561945532051"></p>
<p>最後到 <code>subscribe</code> 的步驟，維持 <code>Notification</code> 的格式是還蠻奇怪的，所以可以使用 <code>dematerialize</code> 做轉換</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">materialize</span>(),</span><br><span class="line">        <span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> (x.<span class="property">kind</span> === <span class="string">&#x27;C&#x27;</span> ? x : <span class="keyword">new</span> <span class="title class_">Notification</span>(x.<span class="property">kind</span>, x.<span class="property">value</span> + <span class="string">&#x27;!&#x27;</span>))),</span><br><span class="line">        <span class="title function_">dematerialize</span>()</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>
<p>輸出結果</p>
<p><img src="1561945668313.png" alt="1561945668313"></p>
<h1 id="Notification"><a class="header-anchor" href="#Notification"> </a>Notification</h1>
<p>透過上述的範例，我們能知道一個 <code>Notification</code> 至少包含了幾個資訊</p>
<ol>
<li><code>kind</code>: 目前資料的狀態: N (Next), E (Error), C (Complete)</li>
<li><code>value</code>: 值/資料</li>
<li><code>hasValue</code>: 是否有包含資料</li>
<li><code>error</code>: 錯誤訊息</li>
</ol>
<p>也可以直接使用 <code>new Notification()</code> 的方式建立</p>
<h2 id="延伸變化"><a class="header-anchor" href="#延伸變化"> </a>延伸變化</h2>
<p>知道 Notification 之後，到底能用在哪裡呢? 例如想不寫 complete function 但又想要在完成時做動作時，這時候就可以利用 Notification 的 kind 來處理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">range</span>(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">materialize</span>(),</span><br><span class="line">        <span class="title function_">tap</span>(<span class="function"><span class="params">notifcation</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (notifcation.<span class="property">kind</span> === <span class="title class_">NotificationKind</span>.<span class="property">COMPLETE</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;let do something when complete&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="title function_">dematerialize</span>()</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="1561950262865.png" alt="1561950262865"></p>
<p>雖然上述的功能，可以利用 <code>finally</code> 來完成，但多知道一種變化型，不是很好嗎?</p>
<p>在深處思考一下以下的情形，是否能用 Notification 寫出 <code>tap</code> 的效果， <code>tap</code> 本身就接受 3 種狀態的 callback ( <code>tap&lt;T&gt;(nextOrObserver?: PartialObserver&lt;T&gt; | ((x: T) =&gt; vlid), error?: (e:any) =&gt; void, complete?: () =&gt; void)</code>)，下面程式碼也可以做到一樣的事情</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">materialize</span>(),</span><br><span class="line"><span class="title function_">map</span>(<span class="function"><span class="params">noti</span> =&gt;</span> &#123;</span><br><span class="line">     noti.<span class="title function_">accept</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;extra callback fn&#x27;</span>, v));</span><br><span class="line">     <span class="keyword">return</span> noti;</span><br><span class="line"> &#125;),</span><br><span class="line"><span class="title function_">dematerialize</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Notification</code> 的 <code>accept(nextOrObserver: PartialObserver | ((value: T) =&gt; void), error?: (err: any) =&gt; void, complete?: () =&gt; void)</code></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Firebase 該如何連結多登入方式到同一個驗證帳號上</title>
    <url>/2019/07/15/angular-firebase-link-provide-to-same-account/</url>
    <content><![CDATA[<p><code>AngularFire</code> 讓我們在處理 firebase 相關功能時，變得十分簡單，可以說是無痛結合。周末有朋友提出一個問題，當我們利用 Firebase 當作系統的登入驗證功能時，由於 Firebase本身有提供多種登入驗證的方式，我們該如何讓使用者可以用不同的登入方式登入，但我們仍將其視為同一使用者呢?</p>
<span id="more"></span>
<p>其實 firebase 有提供一種帳號連結模式，讓我們可以連結多種登入方式到同一個帳號上，讓該使用者即使用不同的方式登入系統，能可取得相同的 uid. 這篇文章將會筆記如何完成這一動作</p>
<h1 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h1>
<p>當使用者第一次使用第三方驗證登入時，Firebase 就會先 assign 一個 uid 給該使用者使用，但有些情境是類似這樣</p>
<p><img src="1563155952362.png" alt="1563155952362"></p>
<p>網站也允許使用者使用帳號密碼登入，這裡我們就來實做這一個功能，讓 Google 登入的帳號，也可以綁訂一個 email 帳號做後續的登入</p>
<h2 id="連結"><a class="header-anchor" href="#連結"> </a>連結</h2>
<ol>
<li>
<p>先用 Google 登入的方式取得第一個 UID</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; auth &#125; <span class="keyword">from</span> <span class="string">&#x27;firebase/app&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> afAuth: AngularFireAuth</span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">googleLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">afAuth</span>.<span class="property">auth</span>.<span class="title function_">signInWithPopup</span>(<span class="keyword">new</span> auth.<span class="title class_">GoogleAuthProvider</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>AngularFireAuth</code>  的  <code>authState</code> 可以用來取得已登入 Firebase 的 User 物件資訊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;firebase/app&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="attr">user</span>: <span class="title class_">User</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">afAuth</span>.<span class="property">authState</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isLogin</span> = user !== <span class="literal">null</span> &amp;&amp; !user.<span class="property">isAnonymous</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">user</span> = user;      </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>刻一個表單用來取得使用者的 email 與 password 資訊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">account = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">  <span class="attr">email</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(),</span><br><span class="line">  <span class="attr">password</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">      Email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">      password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">&quot;linkWithEmail()&quot;</span>&gt;</span>Link With Email<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>綁定 email 資訊到登入的使用者身上</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">linkWithEmail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; email, password &#125; = <span class="variable language_">this</span>.<span class="property">account</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">const</span> credential = auth.<span class="property">EmailAuthProvider</span>.<span class="title function_">credential</span>(email, password);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span></span><br><span class="line">      .<span class="title function_">linkWithCredential</span>(credential)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(success);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>連結成功後並不會觸發 <code>afAuth</code> 狀態</li>
<li>連結成功後會重新回傳一個 User 物件，建議更新原本的 user 變數值.</li>
</ul>
</li>
<li>
<p>如果要綁定其它第三方認證的方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">linkWithFB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span>.<span class="title function_">linkWithPopup</span>(<span class="keyword">new</span> auth.<span class="title class_">FacebookAuthProvider</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="連結狀態"><a class="header-anchor" href="#連結狀態"> </a>連結狀態</h2>
<p>我們又該如何得知此帳號到底有連結那些 provider，在 user 物件資訊內，可以從 <code>providerData</code> (陣列)取得更多資訊，所以可以透過該陣列內取得其它的連結服務 (可利用 <code>providerId</code> )</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">userProviders</span> = user.<span class="property">providerData</span>.<span class="title function_">map</span>(<span class="function"><span class="params">userInfo</span> =&gt;</span> userInfo.<span class="property">providerId</span>);</span><br></pre></td></tr></table></figure>
<h2 id="取消連結"><a class="header-anchor" href="#取消連結"> </a>取消連結</h2>
<p>既然能連結，就能取消連結，取消連結的方式如下，其它 provider 也比照辦理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">user</span>.<span class="title function_">unlink</span>(auth.<span class="property">EmailAuthProvider</span>.<span class="property">PROVIDER_ID</span>)</span><br></pre></td></tr></table></figure>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p>透過以上的方式就可以做到多驗證服務商的帳號連結動作，而在連結失敗時 Firebase 回傳的錯誤訊息也很清晰明瞭。後續的變化就交給各位發揮了</p>
<p>雖然這篇文章是用 TypeScript 做範例，其它的語言的操作模式也相同，轉換上應該沒有太大的問題才是</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 與 O365 跳舞系列 - OneDrive</title>
    <url>/2019/07/26/angular-with-o365-3/</url>
    <content><![CDATA[<p>自從去年寫了兩篇跟 O365 Graph 有關的文章後，就停了好長的一段時間，長到連登入的方法都改變了，(<a href="https://blog.kevinyang.net/2018/10/20/angular-with-o365-1/">登入篇</a> 也做了相對應的更新)</p>
<p>存取檔案可以算是很常見的需求，所以這次要來研究如何讀寫在  OneDrive 上的檔案</p>
<span id="more"></span>
<h1 id="權限"><a class="header-anchor" href="#權限"> </a>權限</h1>
<p>當然要存取檔案系統，就必須申請權限，操作檔案需要請求 <code>Files.Read</code>  或 <code>Files.ReadWrite</code> 讀寫權限。</p>
<h1 id="基本概念"><a class="header-anchor" href="#基本概念"> </a>基本概念</h1>
<p>Microsoft Graph 針對檔案操作有兩種類型的物件</p>
<ol>
<li><code>Drive</code> : 代表著使用者裝檔案的容器或檔案的基本資訊</li>
<li><code>DriveItem</code>: 呈現檔案或是資料夾本身的詳細資訊</li>
</ol>
<p>這裡我只會針對 <code>DriveItem</code> 去做展示，大部分的操作也是針對 <code>DriveItem</code> 資料類型去做操作。</p>
<h1 id="API-操作"><a class="header-anchor" href="#API-操作"> </a>API 操作</h1>
<h2 id="列表"><a class="header-anchor" href="#列表"> </a>列表</h2>
<ul>
<li>
<p><code>/drivers/&#123;drive-id&#125;</code> : 取得特定 drive 的 metadata</p>
</li>
<li>
<p><code>/drive/root</code> : 取得目前使用者預設根目錄</p>
</li>
<li>
<p><code>/drive/root/children</code> 列出目前使用者根目錄下的所有資料夾和檔案項目</p>
</li>
<li>
<p><code>/drive/root/search</code>: 搜尋根目錄</p>
</li>
<li>
<p><code>/drive/sharedWithMe</code>: 列出分享給使用者的檔案清單</p>
</li>
<li>
<p><code>/drive/special/&#123;special-folder-id&#125;</code>: 進入特定的資料夾，特殊資料夾有以下</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>ID</th>
</tr>
</thead>
<tbody>
<tr>
<td>Documents</td>
<td>documents</td>
</tr>
<tr>
<td>Photos</td>
<td>photos</td>
</tr>
<tr>
<td>Camera Roll</td>
<td>cameraroll</td>
</tr>
<tr>
<td>App Root</td>
<td>approot</td>
</tr>
<tr>
<td>Music</td>
<td>music</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p><strong>範例程式</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getPhotos</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">append</span>(</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>,</span><br><span class="line">      <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.accessToken&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(</span><br><span class="line">      <span class="string">&#x27;https://graph.microsoft.com/v1.0/me/drive/special/photos&#x27;</span>,&#123;headers&#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>此 API 呼叫會回傳  <code>Drive</code> 型別的資訊</p>
<p><img src="1564120526642.png" alt="1564120526642"></p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getPhotos</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> header = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">append</span>(</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>,</span><br><span class="line">      <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.accessToken&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(</span><br><span class="line">      <span class="string">&#x27;https://graph.microsoft.com/v1.0/me/drive/special/photos/children&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">headers</span>: header</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>取得 Photos 資料夾下所有的檔案項目</p>
</li>
<li>
<p>回傳的資料型別為 <code>DriveItem</code></p>
<p><img src="1564120647528.png" alt="1564120647528"></p>
</li>
<li>
<p>如果是檔案，就會出現 <code>@microsoft.graph.downloadUrl</code> ，如果是資料夾就不會</p>
</li>
</ul>
<h2 id="新增資料夾"><a class="header-anchor" href="#新增資料夾"> </a>新增資料夾</h2>
<p>建立資料夾當然需要擁有寫入資料夾的權限，記得要授權 <code>Files.ReadWrite</code></p>
<p>可以使用的 API 有</p>
<ul>
<li><code>POST /drives/&#123;drive-id&#125;/items/&#123;parent-item-id&#125;/children</code></li>
<li><code>POST /groups/&#123;group-id&#125;/drive/items/&#123;parent-item-id&#125;/children</code></li>
<li><code>POST /me/drive/items/&#123;parent-item-id&#125;/children</code></li>
<li><code>POST /sites/&#123;site-id&#125;/drive/items/&#123;parent-item-id&#125;/children</code></li>
<li><code>POST /users/&#123;user-id&#125;/drive/items/&#123;parent-item-id&#125;/children</code></li>
</ul>
<p><strong>範例程式</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createFolder</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> driveItem = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;New Folder&#x27;</span>,</span><br><span class="line">     <span class="attr">folder</span>: &#123;&#125;,</span><br><span class="line">     <span class="string">&#x27;@microsoft.graph.conflictBehavior&#x27;</span>: <span class="string">&#x27;rename&#x27;</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">append</span>(</span><br><span class="line">     <span class="string">&#x27;Authorization&#x27;</span>,</span><br><span class="line">     <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.accessToken&#125;</span>`</span></span><br><span class="line">   );</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">post</span>&lt;<span class="built_in">any</span>&gt;(</span><br><span class="line">     <span class="string">&#x27;https://graph.microsoft.com/v1.0/me/drive/items/689EA0E484C3AFBF!33462/children&#x27;</span>,</span><br><span class="line">     driveItem,</span><br><span class="line">     &#123; headers &#125;</span><br><span class="line">   );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 5: 決定當遇到名稱重複時的動作
<ul>
<li><code>fail</code></li>
<li><code>replace</code></li>
<li><code>rename</code> : 在名稱後給予流水號，例如 <code>fname</code> 、<code>fname 1</code> 、<code>fname 2</code></li>
</ul>
</li>
<li>回傳的 response 內就會包含這一次建立資料夾的相關資訊</li>
</ul>
<h2 id="修改名稱-移動檔案"><a class="header-anchor" href="#修改名稱-移動檔案"> </a>修改名稱 / 移動檔案</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">renameItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> driveItem = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Folder After Rename&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">append</span>(</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>,</span><br><span class="line">      <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.accessToken&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">patch</span>&lt;<span class="built_in">any</span>&gt;(</span><br><span class="line">      <span class="string">&#x27;https://graph.microsoft.com/v1.0/me/drive/items/&#123;item-id&#125;&#x27;</span>,</span><br><span class="line">      driveItem,</span><br><span class="line">      &#123; headers &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>要使用 <code>patch</code> 的方法</p>
</li>
<li>
<p>如果移動資料夾或是檔案，要修改的對象為 <code>parentReference</code> 裡的 id</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> driveItem = &#123;</span><br><span class="line">      <span class="attr">parentReference</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;&#123;new-parent-folder-id&#125;&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;new-item-name.txt&#x27;</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="刪除檔案"><a class="header-anchor" href="#刪除檔案"> </a>刪除檔案</h2>
<p>刪除檔案就比較直覺了</p>
<p>可以使用的 API 有</p>
<ul>
<li><code>DELETE /drives/&#123;drive-id&#125;/items/&#123;item-id&#125;</code></li>
<li><code>DELETE /groups/&#123;group-id&#125;/drive/items/&#123;item-id&#125;</code></li>
<li><code>DELETE /me/drive/items/&#123;item-id&#125;</code></li>
<li><code>DELETE /sites/&#123;siteId&#125;/drive/items/&#123;itemId&#125;</code></li>
<li><code>DELETE /users/&#123;userId&#125;/drive/items/&#123;itemId&#125;</code></li>
</ul>
<p><strong>範例程式</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">deleteItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">append</span>(</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>,</span><br><span class="line">      <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.accessToken&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="property">delete</span>&lt;<span class="built_in">any</span>&gt;(</span><br><span class="line">      <span class="string">&#x27;https://graph.microsoft.com/v1.0/me/drive/items/&#123;item-id&#125;&#x27;</span>,</span><br><span class="line">      &#123; headers &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="下載檔案"><a class="header-anchor" href="#下載檔案"> </a>下載檔案</h2>
<p>透過 API 方式取得檔案的內容，可以使用的 API 有</p>
<ul>
<li><code>GET /drives/&#123;drive-id&#125;/items/&#123;item-id&#125;/content</code></li>
<li><code>GET /groups/&#123;group-id&#125;/drive/items/&#123;item-id&#125;/content</code></li>
<li><code>GET /me/drive/root:/&#123;item-path&#125;:/content</code></li>
<li><code>GET /me/drive/items/&#123;item-id&#125;/content</code></li>
<li><code>GET /sites/&#123;siteId&#125;/drive/items/&#123;item-id&#125;/content</code></li>
<li><code>GET /users/&#123;userId&#125;/drive/items/&#123;item-id&#125;/content</code></li>
</ul>
<p><strong>範例程式</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span>;</span><br><span class="line"><span class="title function_">downloadFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>().<span class="title function_">append</span>(</span><br><span class="line">      <span class="string">&#x27;Authorization&#x27;</span>,</span><br><span class="line">      <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">this</span>.accessToken&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span></span><br><span class="line">      .<span class="title function_">get</span>(</span><br><span class="line">        <span class="string">&#x27;https://graph.microsoft.com/v1.0/me/drive/items/&#123;item-id&#125;/content&#x27;</span>,</span><br><span class="line">        &#123; headers, <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span> &#125;</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123; <span class="attr">type</span>: res.<span class="property">type</span> &#125;);</span><br><span class="line">        <span class="keyword">const</span> filename = <span class="string">&#x27;example.txt&#x27;</span>;</span><br><span class="line">        <span class="title function_">saveAs</span>(blob, filename);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>偷懶一下，安裝 <code>file-saver</code> 套件</li>
<li>設定  <code>responseType</code> 至 <code>blob</code></li>
</ul>
<h1 id="結語"><a class="header-anchor" href="#結語"> </a>結語</h1>
<p>更多的相關操作可以參閱官方文件，文件的部分寫得算是很詳細。文件的連結我就放在下面的參考資料內</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li>Microsoft Graph Rest API V1.0
<ul>
<li><a href="https://docs.microsoft.com/en-us/graph/api/resources/drive?view=graph-rest-1.0">Drive</a></li>
<li><a href="https://docs.microsoft.com/en-us/graph/api/resources/driveitem?view=graph-rest-1.0">DriveItem</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
        <category>O365</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>O365</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] 使用 nodeservice 來串接 puppeteer 服務</title>
    <url>/2019/08/08/core-mvc-nodeservice-puppeteer/</url>
    <content><![CDATA[<p><a href="http://ASP.NET">ASP.NET</a> Core MVC 有提供一個 <code>nodeservice</code> 的服務，這一個服務可以將 .NET Core 與 JavaScript 的程式碼整個傳接起來，怎麼使用，下面再來介紹</p>
<p>另外一個要使用的套件叫做 <code>Puppeteer</code>，這一個套件是 Google 出的，可以讓我們創造出 headless 的瀏覽器環境，功能之強大，需要另外寫文章介紹，這邊只是做個配角</p>
<span id="more"></span>
<h1 id="NodeServices"><a class="header-anchor" href="#NodeServices"> </a>NodeServices</h1>
<p>不管底層怎麼運作，先來知道怎麼使用吧，如果你的 .NET Core  版本有維持在最新版的話，在建立一個 MVC  專案時，只需要在 <code>startup.cs</code> 內新增這一行即可完成加入 <code>NodeServices</code> 的功能</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    services.AddNodeServices();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加入完成後，基本上就可以使用 nodeServices 了</p>
<p>接下來就是使用 npm 來準備 node service 的開發環境，不一定要使用 <code>TypeScript</code>，在專案根目錄下，執行 <code>npm init -y</code> 來建立一個簡單的 <code>package.json</code> 檔案</p>
<h2 id="新增第一個-script-檔案"><a class="header-anchor" href="#新增第一個-script-檔案"> </a>新增第一個 script 檔案</h2>
<p>在專案中開一個資料夾來放 JavaScript/TypeScript 檔案，如果是新增 TypeScript 檔案，Visual Studio 基本上會詢問你是否要安裝 TypeScriptBuild 的套件，這邊就依各位的口味做選擇了。</p>
<p>新增 <code>hello-world.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">module</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Callback</span> = <span class="function">(<span class="params">error: <span class="built_in">any</span>, result: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">helloWorld</span> (<span class="attr">callback</span>: <span class="title class_">Callback</span>, <span class="attr">name</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = helloWorld;</span><br></pre></td></tr></table></figure>
<p><code>NodeServices</code> 可以透過 <code>InvokeAsync&lt;T&gt;</code> 的方法執行某個檔案中預設 export 的方法，當然在同一個檔案可以同時公開多個方法，這時候就需要使用另外一個方法</p>
<ul>
<li>export 出去的 function ，第一個參數一定是 callback，這個 callback 的型別是 <code>(error, result) =&gt; void</code></li>
</ul>
<p>Controller 的部分，當然需要將 <code>NodeSerivces</code> 注入進來使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> INodeServices _nodeservices;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ValuesController</span>(<span class="params">INodeServices nodeservices</span>)</span> &#123;</span><br><span class="line">    _nodeservices = nodeservices;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行 JS 的方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;<span class="built_in">string</span>&gt;&gt; Get()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> _nodeservices.InvokeAsync&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;./Scripts/hello-world&quot;</span>, <span class="string">&quot;Kevin&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>InvokeAsync<T>(<code>&lt;file path&gt;</code> , 要傳入的參數)</li>
</ul>
<p>當呼叫該 api 時，就會回傳 <code>Hello Kevin</code> 的文字在畫面上</p>
<h2 id="一個-JS-檔案多個方法"><a class="header-anchor" href="#一個-JS-檔案多個方法"> </a>一個 JS 檔案多個方法</h2>
<p>當然一個 JS/TS 檔案內可以有多個可執行且公開的方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">module</span>: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">callback, a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">callback, a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, a - b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    add, subtract</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在這情形下，<code>NodeServices</code> 提供另外一個方法來呼叫執行</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;<span class="built_in">long</span>&gt;&gt; Get()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> _nodeservices.InvokeExportAsync&lt;<span class="built_in">long</span>&gt;(<span class="string">&quot;./Scripts/fns&quot;</span>, <span class="string">&quot;add&quot;</span>, <span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    result = <span class="keyword">await</span> _nodeservices.InvokeExportAsync&lt;<span class="built_in">long</span>&gt;(<span class="string">&quot;./Scripts/fns&quot;</span>, <span class="string">&quot;subtract&quot;</span>, result, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>InvokeExportAsync&lt;T&gt;(&lt;file path&gt;, &lt;export function name&gt;, args)</code></li>
</ul>
<p>到這邊我們已經知道基本 NodeServices 的使用方法</p>
<h1 id="情境應用"><a class="header-anchor" href="#情境應用"> </a>情境應用</h1>
<p>手上有一個案子，需要用到 <code>Puppeteer</code> 將 SPA 的網頁產生靜態檔案，除了使用 rendertron 外，似乎也可以使用 <code>Puppeteer</code>  這個解決方案，畢竟不是所有人都有辦法架設 rendertron 的服務</p>
<p>快速簡單的介紹 <code>Puppeteer</code> ，Puppeteer 就是 Headless Chrome Node API，結束</p>
<ol>
<li>
<p>安裝 <code>puppeteer</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i puppeteer</span><br><span class="line">// or</span><br><span class="line">npm i puppeteer-core</span><br></pre></td></tr></table></figure>
<ul>
<li><code>puppeteer</code> 會下載最新版的 Chromium 到電腦上，檔案很大(~170MB Mac, ~282MB Linux, ~280MB Win)，但能確保 API 能跑</li>
<li><code>puppeteer-core</code>  不會下載 Chromium，可以使用本機上安裝的 Chrome 也可以連接遠端的 puppeteer services，像是 <a href="http://browserless.io/">http://browserless.io</a></li>
</ul>
</li>
<li>
<p>新增 <code>render.ts</code> 檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">callback, url</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>()</span><br><span class="line">        <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">        <span class="keyword">await</span> page.<span class="title function_">goto</span>(url, &#123; <span class="attr">waitUntil</span>: <span class="string">&#x27;networkidle2&#x27;</span> &#125;);</span><br><span class="line">        <span class="keyword">const</span> content = <span class="keyword">await</span> page.<span class="title function_">content</span>();</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, content);</span><br><span class="line">        <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 5: 啟動 puppeteer</li>
<li>line 6: 開啟新頁籤</li>
<li>line 7: 前往某網址，並等到該網頁的連線請求低於某一種程度 (<code>networkidle2</code>)，還有其他模式</li>
<li>line 8: 取得該網頁的內容 (HTML)</li>
<li>line 9: 回傳結果</li>
<li>line 10: 關閉 puppeteer</li>
</ul>
</li>
<li>
<p>建立 Middleware，篩選需要執行 <code>render</code> 方法的對象，新增 <code>PuppeteerMiddleware.cs</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http.Extensions;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.NodeServices;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">nodeservices_demo.Extensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">PuppeteerMiddlewareExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">UsePeppeteerRenderer</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder builder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> builder.UseMiddleware&lt;PuppeteerMiddleware&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PuppeteerMiddleware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] BotUserAgents = <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">      &#123;</span><br><span class="line">            <span class="string">&quot;W3C_Validator&quot;</span>,</span><br><span class="line">            <span class="string">&quot;baiduspider&quot;</span>,</span><br><span class="line">            <span class="string">&quot;bingbot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;embedly&quot;</span>,</span><br><span class="line">            <span class="string">&quot;facebookexternalhit&quot;</span>,</span><br><span class="line">            <span class="string">&quot;linkedinbo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;outbrain&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pinterest&quot;</span>,</span><br><span class="line">            <span class="string">&quot;quora link preview&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rogerbo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;showyoubot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;slackbot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;twitterbot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;vkShare&quot;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> INodeServices _nodeServices;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PuppeteerMiddleware</span>(<span class="params">RequestDelegate next, INodeServices nodeServices</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _next = next;</span><br><span class="line">            _nodeServices = nodeServices;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Task <span class="title">Invoke</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (IsNeedRender(context))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> InvokeRender(context);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> _next(context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsNeedRender</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> userAgent = context.Request.Headers[<span class="string">&quot;User-agent&quot;</span>].ToString().ToLowerInvariant();</span><br><span class="line">            <span class="keyword">return</span> BotUserAgents.Any(x =&gt; userAgent.Contains(x.ToLowerInvariant()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">InvokeRender</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> cancellationToken = context.RequestAborted;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> _nodeServices.InvokeAsync&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;./Scripts/render&quot;</span>, context.Request.GetDisplayUrl());</span><br><span class="line">            <span class="keyword">await</span> context.Response.WriteAsync(result, cancellationToken);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 middleware</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  	...</span><br><span class="line">    app.UsePeppeteerRenderer();</span><br><span class="line">  	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>至於如何測試，我們可以透過 <code>curl</code> 這指令來完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -D - &lt;url&gt; -A &lt;user-agent&gt;</span><br></pre></td></tr></table></figure>
<p>範例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -D - https://2019.angular.tw -A bingbot</span><br></pre></td></tr></table></figure>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p><a href="http://ASP.NET">ASP.NET</a> Core 所提供的 <code>NodeServices</code> 可以讓我們使用很多前端好用的套件工具，就自己的感覺，我認為開發者的發揮空間又更大了</p>
<p>此外，Puppeteer 這套件的功能之強大，並不是這一篇能涵蓋的，之後再利用幾篇來介紹這一個工具</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/aspnet/JavaScriptServices/tree/master/src/Microsoft.AspNetCore.NodeServices">NodeServices</a></li>
<li><a href="https://github.com/GoogleChrome/puppeteer">Puppeteer</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure] Deployment Center in App Service</title>
    <url>/2019/08/12/azure-app-service-deployment/</url>
    <content><![CDATA[<p>部署網站到 Azure App Service 的方式有很多種，而為了讓部署的動作能連貫且步驟是最少的，就必須整合到 DevOps 之類的服務。App service 針對部署也有提供幾個不錯的功能，這一篇文章會先從 <code>Deployment Center</code> (部署中心) 開始</p>
<span id="more"></span>
<p>Azure App Service 的部署中心，支援多種版控服務，像是 Azure Repos、GitHub、Bitbucket、Local Git 還有一些檔案服務等，這篇文章，我們使用 GitHub 來作為持續部署的程式來源</p>
<h1 id="基本設定操作"><a class="header-anchor" href="#基本設定操作"> </a>基本設定操作</h1>
<ol>
<li>
<p>建立 GitHub Repo</p>
</li>
<li>
<p>建立一個簡單的 Razor Page 網站，並將其推送到  GitHub Repo 上</p>
</li>
<li>
<p>建立 Azure App Service</p>
</li>
<li>
<p>點選 部署中心 (Deployment Center)</p>
<p><img src="1565588656492.png" alt="1565588656492"></p>
</li>
<li>
<p>選擇原始檔控制，我這裡選擇 GitHub，由於第一次尚未授權，所以要先進行授權</p>
<p><img src="SNAGHTML1572a0a5.PNG" alt="img"></p>
<p><img src="1565589007381.png" alt="1565589007381"></p>
<p>完成授權，點選【繼續】</p>
<p><img src="1565589189698.png" alt="1565589189698"></p>
</li>
<li>
<p>選擇【組件提供者】，這邊選擇 <strong>App Service 組件服務</strong> 後，繼續下一步</p>
<p><img src="1565589252725.png" alt="1565589252725"></p>
</li>
<li>
<p>進入設定頁面，如果選擇不到 Repo 的話，那表示在 GitHub 這邊還需要在設定一些東西</p>
<p><img src="1565589356437.png" alt="1565589356437"></p>
<ol>
<li>
<p>前往 GitHub ，進入 【Setting】頁面</p>
<p><img src="1565589970877.png" alt="1565589970877"></p>
</li>
<li>
<p>進入 【Application】 並選擇 【Authorized OAuth Apps】，找到 Azure App Service</p>
<p><img src="1565590071114.png" alt="1565590071114"></p>
</li>
<li>
<p>將尚未授權的 Orgranization ，開放權限 (Grant)</p>
</li>
<li>
<p>如果還沒有看到，重新整理畫面，並重新做一次 Deployment Center 的設定畫面，應可以看到相關資訊了</p>
</li>
</ol>
</li>
<li>
<p>選擇要部署的 Repo 來源</p>
<p><img src="1565590741348.png" alt="1565590741348"></p>
</li>
<li>
<p>繼續進入最終步驟，確認完成。</p>
<p><img src="1565590787555.png" alt="1565590787555"></p>
</li>
<li>
<p>完成設定</p>
<p><img src="1565590831627.png" alt="1565590831627"></p>
</li>
<li>
<p>第一次部署成功</p>
<p><img src="1565590951080.png" alt="1565590951080"></p>
</li>
<li>
<p>執行結果。太棒了，看到畫面</p>
<p><img src="1565591008327.png" alt="1565591008327"></p>
</li>
</ol>
<h2 id="第二次-Commit"><a class="header-anchor" href="#第二次-Commit"> </a>第二次  Commit</h2>
<p>嘗試修改一些文字並 commit 到 GitHub 上後，觀察看看部署中心是否有做到自動建置部署的動作</p>
<p>當 commit push 到 GitHub 上，在部署中心的頁面上，會發現第二次 Commit 的訊息</p>
<p><img src="1565591206262.png" alt="1565591206262"></p>
<p><img src="1565591388557.png" alt="1565591388557"></p>
<p>修改後的畫面</p>
<p><img src="1565591414880.png" alt="1565591414880"></p>
<p>可以看到順利修改後的結果，這代表整個流程已可以正常運作了</p>
<h1 id="退版"><a class="header-anchor" href="#退版"> </a>退版</h1>
<p>有時候在 commit 時，發現上的版本有重大問題需要退版時，透過部署中心可以快速做到退版，以下是操作步驟</p>
<ol>
<li>
<p>選擇想要退版的 commit 紀錄</p>
<p><img src="1565591661549.png" alt="1565591661549"></p>
</li>
<li>
<p>點選【重新佈署】</p>
<p><img src="1565591693288.png" alt="1565591693288"></p>
</li>
<li>
<p>退版成功</p>
<p><img src="1565591759740.png" alt="1565591759740"></p>
</li>
</ol>
<p>就是這麼簡單</p>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>雖然 GitHub 是很常見好用的程式碼寄放的位置，但如果要跟 Azure App Service 整個的部署整合更流暢，我相信使用 Azure DevOps 的服務會是最佳選擇</p>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>App Service</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure] App Service Deployment with Azure DevOps</title>
    <url>/2019/08/13/azure-app-service-deployment-with-devops/</url>
    <content><![CDATA[<p>上一篇提到使用 Deployment with GitHub，Azure 當然要整合自家的 DevOps 才能將效益最大化，這一篇就來看看整合 DevOps 後能做到那些事情</p>
<span id="more"></span>
<h1 id="串接-DevOps"><a class="header-anchor" href="#串接-DevOps"> </a>串接 DevOps</h1>
<p>假設大家都知道如何在 Azure DevOps 上面開專案跟將程式 Push 到上面，這時 App Service 要串接步驟就很簡單</p>
<ol>
<li>
<p>【部屬中心】選擇 Azure Repos</p>
<p><img src="1565660910292.png" alt="1565660910292"></p>
</li>
<li>
<p>步驟二、不選擇 Azure Pipelines 就說不過去了</p>
<p><img src="1565660962720.png" alt="1565660962720"></p>
</li>
<li>
<p>選擇專案放置的位置</p>
<p><img src="1565660990160.png" alt="1565660990160"></p>
</li>
<li>
<p>步驟四，確認無誤後即可完成整個動作</p>
</li>
</ol>
<p>當上述動作完成後，我們回到 Azure Devops 的畫面，可以看到在 PipleLines 的 Build 頁面，看到一個自動產生的 Build Pipeline，更好的是，連 Release Piple 也一併完成了。</p>
<p><img src="1565661238520.png" alt="1565661238520"></p>
<p>部屬中心顯示的歷史紀錄</p>
<p><img src="1565661290482.png" alt="1565661290482"></p>
<h1 id="退版"><a class="header-anchor" href="#退版"> </a>退版</h1>
<p>當 App Service 部署中心連結到 DevOps 又選擇 pipelines 時，退版的動作就不一樣了，將會是透過 release pipeline 的 redeploy 來完成</p>
<ol>
<li>
<p>選擇要退版的紀錄，並點選 <code>release x</code></p>
<p><img src="1565662278833.png" alt="1565662278833"></p>
</li>
<li>
<p>這時候會開啟該 Release pipeline 的操作畫面</p>
<p><img src="1565662349092.png" alt="1565662349092"></p>
</li>
<li>
<p>將滑鼠移到 stages production 的文字方框上，底下會出現 <code>Redeploy</code> 的按鈕</p>
<p><img src="1565662399975.png" alt="1565662399975"></p>
</li>
<li>
<p>當按下 <code>Redeploy</code> 的按鈕時，會跳出一個視窗做最後的確認，如果確定，就按下 Deploy</p>
<p><img src="1565662445276.png" alt="1565662445276"></p>
</li>
</ol>
<h2 id="如何分辨目前所在版本"><a class="header-anchor" href="#如何分辨目前所在版本"> </a>如何分辨目前所在版本</h2>
<p>在 Pipelines -&gt; Releases 的第一個畫面，可以透過 <code>Stages</code> 的顯示方式來得知目前的版本</p>
<p><img src="1565662562904.png" alt="1565662562904"></p>
<p>目前所在版本會用有背景色做標示</p>
<h1 id="多-Stage-設定"><a class="header-anchor" href="#多-Stage-設定"> </a>多 Stage 設定</h1>
<p>如果我們想要做多 Stage 的 release 設定又要搭配 App Services 時，基本要求方案是基本以上(Standard)，先來將 App Service 使用的方案升級一下</p>
<h2 id="App-Service-部分"><a class="header-anchor" href="#App-Service-部分"> </a>App Service 部分</h2>
<ol>
<li>升級方案 (如果原本方案不支援部署位置功能)</li>
</ol>
<p><img src="1565662994053.png" alt="1565662994053"></p>
<ul>
<li>可以使用部署位置的最低方案為 S1</li>
</ul>
<p>升級完成後，即可看到這一畫面</p>
<p><img src="1565663087327.png" alt="1565663087327"></p>
<ol start="2">
<li>接下來是多加入一個位置 (Slot)</li>
</ol>
<p><img src="SNAGHTML19df8ca9.PNG" alt="img"></p>
<ul>
<li>
<p>名稱: 位置名稱，可自己設定</p>
</li>
<li>
<p>複製設定: 假設原本已有設定一堆參數設定，這時候為了將設定一致性或是因為程式某些設定是吃環境參數設定時，就可以選擇要複製的站台</p>
</li>
<li>
<p>確認後即可按下【新增】按鈕</p>
</li>
<li>
<p>在部署位置頁面節可看到兩個部署位置，分別為獨立的站台 (各自擁有瀏覽網址)</p>
<p><img src="1565663386683.png" alt="1565663386683"></p>
<p><img src="1565663434551.png" alt="1565663434551"></p>
</li>
</ul>
<h2 id="DevOps-部分"><a class="header-anchor" href="#DevOps-部分"> </a>DevOps 部分</h2>
<p>當 App Service 環節設定完成後，即可到 Azure DevOps 編輯 release pipeline</p>
<ol>
<li>
<p>選擇 release pipeline 並進行編輯動作\</p>
<p><img src="1565663612034.png" alt="1565663612034"></p>
</li>
<li>
<p>按下在 Stages 的 Add ，並選擇 <code>New Stage</code></p>
<p><img src="1565663661713.png" alt="1565663661713"></p>
</li>
<li>
<p>範本選擇: Azure App Service deployment with Slot</p>
<p><img src="1565663707173.png" alt="1565663707173"></p>
</li>
<li>
<p>設定完 Stage 名稱後即可關掉該畫面</p>
<p><img src="1565663765749.png" alt="1565663765749"></p>
</li>
<li>
<p>設定剛新增的 Stage</p>
<p><img src="1565663831850.png" alt="1565663831850"></p>
<ul>
<li>Slot: 選擇剛剛在 App Service 所新增的新位置</li>
</ul>
</li>
<li>
<p>如果不想要自動進行 Swap 動作時，則可以 <code>Manage Azure App Service - Slow Swap</code> 給拿掉</p>
</li>
<li>
<p>設定完成後，可以先將預設的 <code>Production</code> 切換成手動</p>
</li>
<li>
<p>記得儲存設定</p>
</li>
</ol>
<h2 id="測試"><a class="header-anchor" href="#測試"> </a>測試</h2>
<p>當新開的部署位置，該位置是不會有任何程式碼的，所以開啟該網址應該會看到這個畫面</p>
<p><img src="1565664281182.png" alt="1565664281182"></p>
<p>先 push 一個新的 commit 到 devOps Repo，重新觸發整個部署流程</p>
<p><img src="1565664378225.png" alt="1565664378225"></p>
<p>當一切完成後，剛新增的位置，就可以看到修改後的結果，而原本正式的網站還是保留原本舊版的畫面</p>
<p><img src="1565664526914.png" alt="1565664526914"></p>
<p>如果能正確地看到這個畫面，表示剛剛設定的 release pipeline 是正確的</p>
<h2 id="交換"><a class="header-anchor" href="#交換"> </a>交換</h2>
<p>當我們確認一切的修改都是正確的，想要將 QA Stage  的內容更新到正式環境時，只需要透過【交換】的方式即可完成</p>
<p><img src="1565664649872.png" alt="1565664649872"></p>
<p><img src="SNAGHTML19f6c676.PNG" alt="img"></p>
<p>資訊確認後即可進行交換的動作，成功會出現的訊息</p>
<p><img src="1565664841103.png" alt="1565664841103"></p>
<p>重新檢視兩個網站的內容，會發現顯示的內容的確有被交換</p>
<p><img src="1565664908995.png" alt="1565664908995"></p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>Multi-stage 的設定當然沒有那麼簡單，而 App Service 的部署位置也可以玩一些不同的東西，但這一切就留在後面在玩吧。</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/release/define-multistage-release-process?view=azure-devops">Define your multi-stage continuous deployment (CD) pipeline</a></li>
</ul>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] Pipe 的延伸應用</title>
    <url>/2019/08/19/angular-rxjs-practice-2/</url>
    <content><![CDATA[<p>昨天在重構手上一個案子的程式碼，其中有一個功能是在讀取資料時，要顯示 loading 的圖示，這算是一個很常見的需求，但要怎麼寫才能寫得漂亮，這是我目前得到的答案</p>
<span id="more"></span>
<h1 id="LoadingComponent"><a class="header-anchor" href="#LoadingComponent"> </a>LoadingComponent</h1>
<p>這個案子我使用 Angular Material (<code>MatProgressSpinnerModule</code> ) 的 <code>mat-progress-spinner</code> 和 <code>MatDialog</code> 來完成，簡單的說，就是當讀取時，使用 <code>MatDialog</code> 來開啟 <code>LoadingComponent</code>，沒什麼特殊的技巧，最多是 css 的設定</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transparent</span> <span class="selector-class">.mat-dialog-container</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: none;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>監控是否開啟 <code>LoadingComponet</code> 的程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">loadingService</span>.<span class="property">isLoading$</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">isLoading</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dialogRef</span> = <span class="variable language_">this</span>.<span class="property">dialog</span>.<span class="title function_">open</span>(<span class="title class_">LoadingComponent</span>, &#123;</span><br><span class="line">          <span class="attr">height</span>: <span class="string">&#x27;200px&#x27;</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="string">&#x27;200px&#x27;</span>,</span><br><span class="line">          <span class="attr">panelClass</span>: <span class="string">&#x27;transparent&#x27;</span>,</span><br><span class="line">          <span class="attr">disableClose</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">dialogRef</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">dialogRef</span>.<span class="title function_">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h1 id="LoadingService"><a class="header-anchor" href="#LoadingService"> </a>LoadingService</h1>
<p>比較特殊的處理是在 <code>LoadingService</code> 的地方，這裡我有用到 TypeScript 多型的手法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">load&lt;T&gt;(): <span class="title class_">UnaryFunction</span>&lt;T, T&gt;;</span><br><span class="line">load&lt;T, A&gt;(<span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;): <span class="title class_">UnaryFunction</span>&lt;T, A&gt;;</span><br><span class="line">load&lt;T, A, B&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, B&gt;;</span><br><span class="line">load&lt;T, A, B, C&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="title class_">UnaryFunction</span>&lt;B, C&gt;</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, C&gt;;</span><br><span class="line">load&lt;T, A, B, C, D&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="title class_">UnaryFunction</span>&lt;B, C&gt;,</span><br><span class="line">  <span class="attr">fn4</span>: <span class="title class_">UnaryFunction</span>&lt;C, D&gt;</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, D&gt;;</span><br><span class="line">load&lt;T, A, B, C, D, E&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="title class_">UnaryFunction</span>&lt;B, C&gt;,</span><br><span class="line">  <span class="attr">fn4</span>: <span class="title class_">UnaryFunction</span>&lt;C, D&gt;,</span><br><span class="line">  <span class="attr">fn5</span>: <span class="title class_">UnaryFunction</span>&lt;D, E&gt;</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, E&gt;;</span><br><span class="line">load&lt;T, A, B, C, D, E, F&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="title class_">UnaryFunction</span>&lt;B, C&gt;,</span><br><span class="line">  <span class="attr">fn4</span>: <span class="title class_">UnaryFunction</span>&lt;C, D&gt;,</span><br><span class="line">  <span class="attr">fn5</span>: <span class="title class_">UnaryFunction</span>&lt;D, E&gt;,</span><br><span class="line">  <span class="attr">fn6</span>: <span class="title class_">UnaryFunction</span>&lt;E, F&gt;</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, F&gt;;</span><br><span class="line">load&lt;T, A, B, C, D, E, F, G&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="title class_">UnaryFunction</span>&lt;B, C&gt;,</span><br><span class="line">  <span class="attr">fn4</span>: <span class="title class_">UnaryFunction</span>&lt;C, D&gt;,</span><br><span class="line">  <span class="attr">fn5</span>: <span class="title class_">UnaryFunction</span>&lt;D, E&gt;,</span><br><span class="line">  <span class="attr">fn6</span>: <span class="title class_">UnaryFunction</span>&lt;E, F&gt;,</span><br><span class="line">  <span class="attr">fn7</span>: <span class="title class_">UnaryFunction</span>&lt;F, G&gt;</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, G&gt;;</span><br><span class="line">load&lt;T, A, B, C, D, E, F, G, H&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="title class_">UnaryFunction</span>&lt;B, C&gt;,</span><br><span class="line">  <span class="attr">fn4</span>: <span class="title class_">UnaryFunction</span>&lt;C, D&gt;,</span><br><span class="line">  <span class="attr">fn5</span>: <span class="title class_">UnaryFunction</span>&lt;D, E&gt;,</span><br><span class="line">  <span class="attr">fn6</span>: <span class="title class_">UnaryFunction</span>&lt;E, F&gt;,</span><br><span class="line">  <span class="attr">fn7</span>: <span class="title class_">UnaryFunction</span>&lt;F, G&gt;,</span><br><span class="line">  <span class="attr">fn8</span>: <span class="title class_">UnaryFunction</span>&lt;G, H&gt;</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, H&gt;;</span><br><span class="line">load&lt;T, A, B, C, D, E, F, G, H, I&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="title class_">UnaryFunction</span>&lt;B, C&gt;,</span><br><span class="line">  <span class="attr">fn4</span>: <span class="title class_">UnaryFunction</span>&lt;C, D&gt;,</span><br><span class="line">  <span class="attr">fn5</span>: <span class="title class_">UnaryFunction</span>&lt;D, E&gt;,</span><br><span class="line">  <span class="attr">fn6</span>: <span class="title class_">UnaryFunction</span>&lt;E, F&gt;,</span><br><span class="line">  <span class="attr">fn7</span>: <span class="title class_">UnaryFunction</span>&lt;F, G&gt;,</span><br><span class="line">  <span class="attr">fn8</span>: <span class="title class_">UnaryFunction</span>&lt;G, H&gt;,</span><br><span class="line">  <span class="attr">fn9</span>: <span class="title class_">UnaryFunction</span>&lt;H, I&gt;</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, I&gt;;</span><br><span class="line">load&lt;T, A, B, C, D, E, F, G, H, I&gt;(</span><br><span class="line">  <span class="attr">fn1</span>: <span class="title class_">UnaryFunction</span>&lt;T, A&gt;,</span><br><span class="line">  <span class="attr">fn2</span>: <span class="title class_">UnaryFunction</span>&lt;A, B&gt;,</span><br><span class="line">  <span class="attr">fn3</span>: <span class="title class_">UnaryFunction</span>&lt;B, C&gt;,</span><br><span class="line">  <span class="attr">fn4</span>: <span class="title class_">UnaryFunction</span>&lt;C, D&gt;,</span><br><span class="line">  <span class="attr">fn5</span>: <span class="title class_">UnaryFunction</span>&lt;D, E&gt;,</span><br><span class="line">  <span class="attr">fn6</span>: <span class="title class_">UnaryFunction</span>&lt;E, F&gt;,</span><br><span class="line">  <span class="attr">fn7</span>: <span class="title class_">UnaryFunction</span>&lt;F, G&gt;,</span><br><span class="line">  <span class="attr">fn8</span>: <span class="title class_">UnaryFunction</span>&lt;G, H&gt;,</span><br><span class="line">  <span class="attr">fn9</span>: <span class="title class_">UnaryFunction</span>&lt;H, I&gt;,</span><br><span class="line">  ...<span class="attr">fns</span>: <span class="title class_">UnaryFunction</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;[]</span><br><span class="line">): <span class="title class_">UnaryFunction</span>&lt;T, &#123;&#125;&gt;;</span><br><span class="line"><span class="comment">/* tslint:enable:max-line-length */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">load</span>(...<span class="attr">operations</span>: <span class="title class_">OperatorFunction</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt;[]): <span class="title class_">UnaryFunction</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">begin</span>()),</span><br><span class="line">    <span class="title function_">pipeFromArray</span>(operations),</span><br><span class="line">    <span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">finish</span>())</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我建立了一個 load 方法，這一個方法的使用方式跟我們在使用 pipe 的方式是一樣的，只是我在最前面跟最後面加上 loading 的開關，這樣的寫法雖然囉嗦，卻可以保留型別推導的能力，至於實際要怎麼使用呢? 範例如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">combineLatest</span>([favGroup$, searchField$, paginator$])</span><br><span class="line">     .<span class="title function_">pipe</span>(</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">loadingService</span>.<span class="title function_">load</span>(</span><br><span class="line">         <span class="title function_">switchMap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">api</span>.<span class="title function_">randomUsr</span>()),</span><br><span class="line">         <span class="title function_">map</span>(<span class="function"><span class="params">users</span>=&gt;</span> users.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">9</span>)),</span><br><span class="line">         ...</span><br><span class="line">       )</span><br><span class="line">     )</span><br><span class="line">     .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">       <span class="attr">next</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">         ...</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>
<p>這樣封裝起來，在任何需要的地方，都只需要呼叫同一個方法即可達到 loading 顯示的效果</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] HttpInterceptor 應用 - 日期轉換</title>
    <url>/2019/08/22/angular-http-inteceptor-practice-1/</url>
    <content><![CDATA[<p>呼叫後端 API 當遇到回傳資料欄位是日期時，我們所拿到的都是文字格式的日期資料，這時候就必須多做一次轉換才能變成日期型別，因為 TypeScript 並不會因為將 Model Class 欄位標示為日期格式，就會自動轉換，並不會好嗎，這樣太為難 TypeScript 了。</p>
<p>所以看起來最省事的解法是在 http request 時就解結掉，這樣就不需要到處寫日期轉換</p>
<span id="more"></span>
<p>既然是要在 Http 層處理，<code>HttpInterceptor</code> 就是個好選擇，也懶得解釋了，程式碼自己看</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">HttpInterceptor</span>,</span><br><span class="line">  <span class="title class_">HttpRequest</span>,</span><br><span class="line">  <span class="title class_">HttpHandler</span>,</span><br><span class="line">  <span class="title class_">HttpEvent</span>,</span><br><span class="line">  <span class="title class_">HttpResponse</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; tap &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">JsonInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HttpInterceptor</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> utcRegex = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)T(\d&#123;2&#125;):(\d&#123;2&#125;):(\d&#123;2&#125;(?:\.\d*)?)Z$/</span>;</span><br><span class="line">  <span class="keyword">private</span> dateRegex = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)T(\d&#123;2&#125;):(\d&#123;2&#125;):(\d&#123;2&#125;(?:\.\d*)?)$/</span>;</span><br><span class="line">  <span class="keyword">private</span> zoneRegex = <span class="regexp">/^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)T(\d&#123;2&#125;):(\d&#123;2&#125;):(\d&#123;2&#125;(?:\.\d*)?)([+-])(\d&#123;2&#125;):(\d&#123;2&#125;)$/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">intercept</span>(</span><br><span class="line">    <span class="attr">req</span>: <span class="title class_">HttpRequest</span>&lt;<span class="built_in">any</span>&gt;,</span><br><span class="line">    <span class="attr">next</span>: <span class="title class_">HttpHandler</span></span><br><span class="line">  ): <span class="title class_">Observable</span>&lt;<span class="title class_">HttpEvent</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> next.<span class="title function_">handle</span>(req).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">tap</span>(<span class="function">(<span class="params">event: HttpEvent&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event <span class="keyword">instanceof</span> <span class="title class_">HttpResponse</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">convertDates</span>(event.<span class="property">body</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">convertDates</span>(<span class="params"><span class="built_in">object</span>: <span class="built_in">Object</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">object</span> || !(<span class="built_in">object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">object</span> <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> <span class="built_in">object</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">convertDates</span>(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="built_in">object</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="built_in">object</span>[key];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> value) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">convertDates</span>(item);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">convertDates</span>(value);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> a;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">          a = <span class="variable language_">this</span>.<span class="property">utcRegex</span>.<span class="title function_">exec</span>(value);</span><br><span class="line">          <span class="keyword">if</span> (a) &#123;</span><br><span class="line">            <span class="built_in">object</span>[key] = <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">              <span class="title class_">Date</span>.<span class="title function_">UTC</span>(+a[<span class="number">1</span>], +a[<span class="number">2</span>] - <span class="number">1</span>, +a[<span class="number">3</span>], +a[<span class="number">4</span>], +a[<span class="number">5</span>], +a[<span class="number">6</span>])</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          a = <span class="variable language_">this</span>.<span class="property">dateRegex</span>.<span class="title function_">exec</span>(value);</span><br><span class="line">          <span class="keyword">if</span> (a) &#123;</span><br><span class="line">            <span class="built_in">object</span>[key] = <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">              +a[<span class="number">1</span>],</span><br><span class="line">              +a[<span class="number">2</span>] - <span class="number">1</span>,</span><br><span class="line">              +a[<span class="number">3</span>],</span><br><span class="line">              +a[<span class="number">4</span>],</span><br><span class="line">              +a[<span class="number">5</span>],</span><br><span class="line">              +a[<span class="number">6</span>]</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          a = <span class="variable language_">this</span>.<span class="property">zoneRegex</span>.<span class="title function_">exec</span>(value);</span><br><span class="line">          <span class="keyword">if</span> (a) &#123;</span><br><span class="line">            <span class="keyword">const</span> dir = a[<span class="number">7</span>] === <span class="string">&#x27;+&#x27;</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">object</span>[key] = <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">              <span class="title class_">Date</span>.<span class="title function_">UTC</span>(</span><br><span class="line">                +a[<span class="number">1</span>],</span><br><span class="line">                +a[<span class="number">2</span>] - <span class="number">1</span>,</span><br><span class="line">                +a[<span class="number">3</span>],</span><br><span class="line">                +a[<span class="number">4</span>] + dir * a[<span class="number">8</span>],</span><br><span class="line">                +a[<span class="number">5</span>] + dir * a[<span class="number">9</span>],</span><br><span class="line">                +a[<span class="number">6</span>]</span><br><span class="line">              )</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>記得在 <code>App.module</code> 的地方註冊 <code>Http Interceptor</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">HTTP_INTERCEPTORS</span>,</span><br><span class="line">      <span class="attr">useClass</span>: <span class="title class_">JsonInterceptor</span>,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] 探討 repeat</title>
    <url>/2019/08/30/rxjs-repeat/</url>
    <content><![CDATA[<p>來探討一下 RxJS 的 <code>repeat</code> 這個 operator</p>
<span id="more"></span>
<h1 id="repeat-的功能"><a class="header-anchor" href="#repeat-的功能"> </a>repeat 的功能</h1>
<blockquote>
<p><code>repeat</code> 的功能是當一個 <code>Observable</code> 完成時，會重新再 <code>subscribe</code> <code>n</code> 次</p>
</blockquote>
<p>使用的方式是</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">obs.<span class="title function_">pipe</span>(<span class="title function_">retry</span>()).<span class="title function_">subscribe</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li><code>repeat(count: number: -1)</code> 當不給重複的次數時，將會一直有作用</li>
</ul>
<p><img src="repeat.png" alt="repeat marble diagram"></p>
<h1 id="基本範例"><a class="header-anchor" href="#基本範例"> </a>基本範例</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; repeat, delay &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">of</span>(<span class="string">&#x27;Repeat message&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> example = source.<span class="title function_">pipe</span>(<span class="title function_">repeat</span>(<span class="number">3</span>));</span><br><span class="line">example.<span class="title function_">subscribe</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Results</span></span><br><span class="line"><span class="comment">// Repeat message</span></span><br><span class="line"><span class="comment">// Repeat message</span></span><br><span class="line"><span class="comment">// Repeat message</span></span><br></pre></td></tr></table></figure>
<h1 id="探討"><a class="header-anchor" href="#探討"> </a>探討</h1>
<p>根據上面的簡單介紹，可以知道 <code>repeat</code> 的用法。延伸思考，<code>repeat</code> 的作用範圍是如何定義，而 Observable 所傳出的值是否如果我們所預期的呢? 如果搭配其他的 operator 是否有先後順序的問題?</p>
<p>先來一個簡單的問題，重複取十次值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">source</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span> <span class="title function_">resolve</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_">from</span>(<span class="title function_">source</span>())</span><br><span class="line">.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">repeat</span>(<span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">value</span>=&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="順序重要嗎"><a class="header-anchor" href="#順序重要嗎"> </a>順序重要嗎?</h2>
<p>根據實驗，順序其實不重要，都會被重新 subscribe</p>
<h2 id="Observable-的值呢"><a class="header-anchor" href="#Observable-的值呢"> </a>Observable 的值呢</h2>
<p>根據實驗，repeat 所使用的 observable 值是第一次發生的結果，這表示，如果想要做到每一次重新啟動都要觸發 source observable 時，就必須使用不同的寫法</p>
<p><img src="1567137814105.png" alt="1567137814105"></p>
<ul>
<li>
<p>解法1: 如果想要的效果可以使用 interval 完成，改用 interval + mergeMap(or other map) + take 來完成</p>
<p><img src="1567137918853.png" alt="1567137918853"></p>
</li>
<li>
<p>解法2: 使用 <code>defer</code> 來包 Observable/Promise</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">source</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_">defer</span>(<span class="function">() =&gt;</span> <span class="title function_">from</span>(<span class="title function_">source</span>()))</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">repeat</span>(<span class="number">10</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p><img src="1567137859126.png" alt="1567137859126"></p>
</li>
</ul>
<h2 id="啟動範圍"><a class="header-anchor" href="#啟動範圍"> </a>啟動範圍</h2>
<p><code>repeat</code> 會重新 subscribe 所歸屬的 Observable</p>
<p><img src="1567138639858.png" alt="1567138639858"></p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>每一個 operator 都有可以細細品嘗的細節，跟 repeat 類似的 operator 有 <code>repeatWhen</code> 、<code>retry</code>、<code>retryWhen</code> ，也都可以去看看了解一下</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[ASP.NET MVC] WebAPI with CancellationToken</title>
    <url>/2019/09/03/csharp-cancellationtoken/</url>
    <content><![CDATA[<p>這裡是 WebAPI 用非同步的寫法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">SomeItem</span>(<span class="params"><span class="built_in">int</span> id</span>)</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但如果想要搭配 RxJS 的 switchMap 使用，這樣子是不夠的。我們需要使用 CancellationToekn 的協助</p>
<span id="more"></span>
<p>先簡單介紹什麼是 <code>switchMap</code> ，前端 RxJS  的 <code>switchMap</code> 的作用是當快速發出 request 時，會將之前的 request 全部 cancel 掉，只保留最後一次的 request，所以當打開開發者工具時，在 Network 下可以看到 <code>cancel</code> 的狀態，但這一個現象只是前段處理，如果後端沒有處理取消行為，所有的 request 還是會全部跑完，只是前端最後不理會而已。</p>
<p>如果 RxJS 的 <code>switchMap</code> 是這樣的功能，那後端要怎麼處理呢? 好家在 C# 有對應的處理方式，那就是使用 <code>CancellationToken</code>，基本寫法是這樣</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">ShowItem</span>(<span class="params"><span class="built_in">int</span> id, CancellationToken cancellationToken</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> rep.getItem(id).FirstOrDefaultAsync(cancellationToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其實就這麼簡單，C# 的 async 方法基本上可接受 <code>CancellationToken</code>，傳進去就可以，當前端發出取消請求，後面的行為也會跟著被取消。</p>
]]></content>
      <categories>
        <category>ASP.NET MVC</category>
      </categories>
      <tags>
        <tag>ASP.NET MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] generate</title>
    <url>/2019/09/04/rxjs-generate/</url>
    <content><![CDATA[<p><code>generate</code> 是 RxJS 裡面的 for loop 方法，這樣的描述應該夠簡單明瞭了</p>
<span id="more"></span>
<h1 id="基本用法"><a class="header-anchor" href="#基本用法"> </a>基本用法</h1>
<p>這是 JavaScript for loop 的寫法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt; <span class="number">100</span>; ++i)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而這是 RxJS 使用 generate 的寫法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">generate</span>(<span class="number">0</span>, <span class="function"><span class="params">x</span>=&gt;</span> x&lt; <span class="number">100</span>, <span class="function"><span class="params">x</span>=&gt;</span> ++x)</span><br></pre></td></tr></table></figure>
<p>generate 介面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">generate&lt;T, S&gt;(<span class="attr">initialStateOrOptions</span>: S | <span class="title class_">GenerateOptions</span>&lt;T, S&gt;, condition?: <span class="title class_">ConditionFunc</span>&lt;S&gt;, iterate?: <span class="title class_">IterateFunc</span>&lt;S&gt;, resultSelectorOrObservable?: (<span class="title class_">ResultFunc</span>&lt;S, T&gt;) | <span class="title class_">SchedulerLike</span>, scheduler?: <span class="title class_">SchedulerLike</span>): <span class="title class_">Observable</span>&lt;T&gt;</span><br></pre></td></tr></table></figure>
<h1 id="變化用法"><a class="header-anchor" href="#變化用法"> </a>變化用法</h1>
<h2 id="with-resultSelector"><a class="header-anchor" href="#with-resultSelector"> </a>with resultSelector</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="title function_">generate</span>(<span class="number">0</span>, <span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">10</span>, <span class="function"><span class="params">x</span> =&gt;</span> ++x, <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="string">&#x27;!!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>輸出結果</p>
<p><img src="1567578743411.png" alt="1567578743411"></p>
<h2 id="串接其他-observable"><a class="header-anchor" href="#串接其他-observable"> </a>串接其他 observable</h2>
<ul>
<li>
<p>with from</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="title function_">from</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">concatMap</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="title function_">generate</span>(<span class="number">0</span>, <span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">3</span>, <span class="function"><span class="params">x</span> =&gt;</span> ++x, <span class="function"><span class="params">x</span> =&gt;</span> value + <span class="string">&#x27;-&#x27;</span> + x))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="1567579046848.png" alt="1567579046848"></p>
</li>
<li>
<p>double generate</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="title function_">of</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">concatMap</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="title function_">generate</span>(<span class="number">0</span>, <span class="function"><span class="params">x</span> =&gt;</span> x &lt; value.<span class="property">length</span>, <span class="function"><span class="params">x</span> =&gt;</span> ++x, <span class="function"><span class="params">x</span> =&gt;</span> value[x] + <span class="string">&#x27;-&#x27;</span> + x)),</span><br><span class="line">  <span class="title function_">concatMap</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="title function_">generate</span>(<span class="number">0</span>, <span class="function"><span class="params">y</span> =&gt;</span> y &lt; <span class="number">3</span>, <span class="function"><span class="params">y</span> =&gt;</span> ++y, <span class="function"><span class="params">y</span> =&gt;</span> value + <span class="string">&#x27;-&#x27;</span> + y))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="1567579775214.png" alt="1567579775214"></p>
</li>
</ul>
<h2 id="range-效果"><a class="header-anchor" href="#range-效果"> </a>range 效果</h2>
<p>RxJS 裡面原本就有一個 <code>range</code> 的  observable，但是卻沒有辦法設定 step，這時候就可以使用 generate 來完成這件事情</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="title function_">generate</span>(<span class="number">0</span>, <span class="function"><span class="params">x</span> =&gt;</span> x &lt; <span class="number">10</span>, <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="1567580096145.png" alt="1567580096145"></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://rxjs.dev/api/index/function/generate">Generate API</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] 環境設定</title>
    <url>/2019/10/04/flutter-basic-start/</url>
    <content><![CDATA[<p>Flutter 從去年年底發佈到現在，也接近一年的時間，目前在寫這篇筆記時，Flutter SDK 版本是 1.9，而也是因為看過不少實際將 Flutter 用在專案產品上的案例，所以才決定要開始探索 Flutter。</p>
<span id="more"></span>
<h1 id="什麼是-Flutter"><a class="header-anchor" href="#什麼是-Flutter"> </a>什麼是 Flutter</h1>
<p>Flutter 是 Google 所提出用來開發跨平台的 UI Framework。我這裡會指跨平台的原因是，Flutter 從早期的手機跨平台，到現在連 Web 或是桌面應用程式都可以開發。(野心真的很大)</p>
<h1 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h1>
<p>在開發之前，需要先安裝 SDK (<a href="https://flutter.dev/docs/get-started/install">安裝網址</a>)，根據自己的作業系統選擇對應的 SDK 版本下載安裝，詳細的操作步驟可參閱文件，安裝完成後，可以執行 <code>flutter doctor</code> 來確定開發環境是否完整</p>
<p><img src="1570152054567.png" alt="1570152054567"></p>
<p>如果有提示，可依上述提示安裝缺少的部分，通常都是 Android SDK 環境的部分需要設定</p>
<h1 id="編輯器選擇"><a class="header-anchor" href="#編輯器選擇"> </a>編輯器選擇</h1>
<p>官方首推薦使用 <code>Android Studio</code> 作為開發工具，只要有在開發手機 App 的人，對於這工具應不陌生，這 IDE 對於 Flutter 的支援度是完整而且相關的功能是很強大的</p>
<p>當然也可以使用 <code>Visual Studio Code</code> 開發，也是沒有問題的，只是有些在 <code>Android Studio</code> 上有的功能就不一定會出現在 VSC 上。</p>
<p>編輯器設定安裝步驟，可以參閱<a href="https://flutter.dev/docs/get-started/editor?tab=androidstudio">此連結</a></p>
<h1 id="建立第一個範例專案"><a class="header-anchor" href="#建立第一個範例專案"> </a>建立第一個範例專案</h1>
<p>當上面的環境都設定完成後，第一次安裝者，大概會花 1 個小時左右完成設定，大多數的時間都是在等待下載檔案。</p>
<p>來建立第一個範例 Flutter App 來確定所有的設定是正常運作的</p>
<ol>
<li>
<p>開啟 Android Studio</p>
</li>
<li>
<p>建立新專案</p>
<p><img src="1570152997616.png" alt="1570152997616"></p>
</li>
<li>
<p>選擇 <code>Flutter Application</code></p>
<p><img src="1570153032795.png" alt="1570153032795"></p>
</li>
<li>
<p>輸入專案資訊</p>
<p><img src="1570153079169.png" alt="1570153079169"></p>
</li>
<li>
<p>設定 package 資訊，基本上預設即可，Kotlin support 當然要選取</p>
<p><img src="1570153111481.png" alt="1570153111481"></p>
</li>
<li>
<p>Finish 開始建立</p>
<p><img src="1570153176412.png" alt="1570153176412"></p>
</li>
<li>
<p>專案建立完成後的畫面</p>
<p><img src="1570153228989.png" alt="1570153228989"></p>
</li>
</ol>
<p>預設範本已經是一個可以運行的 Flutter 專案了，這裡我們有兩個選擇，1. 跑在模擬機上 ，或是 2. 跑在實際手機上。我這裡就選擇跑在實體手機，這樣速度比較快</p>
<p>當用 USB 接上手機時， Android Studio 就可以看到手機型號，同樣的動作在  VSC 也可以做到</p>
<p><img src="1570153450820.png" alt="1570153450820"></p>
<p>這時候就可以按下 F5 或是點綠色箭頭部屬 App，部屬中的畫面</p>
<p><img src="1570153514391.png" alt="1570153514391"></p>
<p>如果看到這一個畫面，就代表部屬執行成功</p>
<p><img src="screenshot-1570153683833-1570154755283.jpg" alt="screenshot-1570153683833"></p>
<p>可以點右下角的 <code>+</code> 看到中間數字的改變</p>
<p>Flutter 開發過程中另外一個特色是支援 Hot Reload，這表示在開發時按下儲存時，會立刻影響到開發機器上的 App，可以嘗試修改 Title 來看看效果</p>
<p>修改 <code>MyHomePage</code> Title 文字後儲存看結果，結果會發現 Title 被改變了，而且原本的狀態也沒有被重製，這就是 Hot Reload 的好處</p>
<p><img src="1570153929806.png" alt="1570153929806"></p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>跨平台開發的框架越來越多，而 Flutter 算是後起新秀，也希望 Google Flutter 和社群能持續努力讓此生態圈更強大，之後的學習筆記將會從零開始探索 Flutter</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/vysor/gidgenkbbabolejbgbpnhbimgjbffefm/related">Vysor</a> 可以在桌面上看到手機畫面的工具</li>
<li><a href="https://dart.dev/">Dart</a> 開發 Flutter 所用的程式語言</li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] 專案程式基本架構</title>
    <url>/2019/10/04/flutter-code-structure/</url>
    <content><![CDATA[<p>上一篇建立了第一個 Flutter 專案，這回從零開始，認識 Flutter 的基本程式架構</p>
<span id="more"></span>
<h1 id="專案架構"><a class="header-anchor" href="#專案架構"> </a>專案架構</h1>
<p>一個基本的 Flutter 程式架構，會長這樣</p>
<p><img src="1570162516223.png" alt="1570162516223"></p>
<ul>
<li><code>android</code> / <code>build</code> : 建置輸出成 Android 的專案</li>
<li><code>ios</code> : 建置輸出成 iPhone 的專案</li>
<li><code>lib</code> : 主要程式碼存放位置</li>
<li><code>test</code> : 測試碼存放位置</li>
<li><code>pubspec.yaml</code> : 專案設定檔，包含引用其他套件的設定是寫在這個檔案內</li>
</ul>
<h2 id="程式進入點"><a class="header-anchor" href="#程式進入點"> </a>程式進入點</h2>
<p>基本上是由 Android Studio 這逼設定要從哪一個檔案執行，因為每一個 dart 檔案都是可以被單獨執行的。而預設進入點是 <code>main.dart</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MyAppWidget();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 3: main () 程式進入點</li>
<li><code>runApp()</code> 是來自 <code>package:flutter/material.dart;</code>  檔案，傳入要啟動的 widget，這裡是傳 <code>MyApp</code> <code>StatelessWidget</code></li>
<li>line 6  <code>build</code> 是 Flutter 產生畫面時會執行的 function, 裡面也是回傳一個要顯示的 widget，而這裡我回傳另外一個 <code>StatefulWidget</code></li>
</ul>
<p>至於什麼是 <code>StatelessWidget</code> 和 <code>StatefulWidget</code> 這留到後面在介紹，但到這邊就可以發現 Flutter 是由很多個 widget 將整個 app 的畫面建構出來的一種開發模式</p>
<h1 id="基本-Widgets"><a class="header-anchor" href="#基本-Widgets"> </a>基本 Widgets</h1>
<ul>
<li>
<p>Text:</p>
<ul>
<li>要在 Flutter 上面顯示文字，不能很單純的傳入文字，是必須使用 Text widget，Text widget 可以設定文字的顯示方式</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Text(</span><br><span class="line">    <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">    textAlign: TextAlign.center,</span><br><span class="line">    overflow: TextOverflow.ellipsis,</span><br><span class="line">    style: TextStyle(fontWeight: FontWeight.bold),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>如果文字要顯示得更多樣式，可以使用 <code>Text.rich</code> 的方法來完成</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Text.rich(</span><br><span class="line">  TextSpan(</span><br><span class="line">    text: <span class="string">&#x27;Hello&#x27;</span>, <span class="comment">// default text style</span></span><br><span class="line">    children: &lt;TextSpan&gt;[</span><br><span class="line">      TextSpan(text: <span class="string">&#x27; beautiful &#x27;</span>, style: TextStyle(fontStyle: FontStyle.italic)),</span><br><span class="line">      TextSpan(text: <span class="string">&#x27;world&#x27;</span>, style: TextStyle(fontWeight: FontWeight.bold)),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>Container</code> 顧名思義，是一個容器可以用來包其他的 widget，可以想成 HTML 裡面的 <code>div</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">      height: <span class="number">56.0</span>, <span class="comment">// in logical pixels</span></span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">8.0</span>),</span><br><span class="line">      decoration: BoxDecoration(color: Colors.blue[<span class="number">500</span>]),</span><br><span class="line">      <span class="comment">// Row is a horizontal, linear layout.</span></span><br><span class="line">      child: Row(</span><br><span class="line">        <span class="comment">// &lt;Widget&gt; is the type of items in the list.</span></span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">         ...</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>Row</code>、<code>Column</code> 是用來排版用的 widget，<code>Row</code> 是橫向排，而 <code>Column</code> 是垂直</p>
<p><img src="1570169456174.png" alt="1570169456174"></p>
</li>
<li>
<p><code>Stack</code> 會將 children 內的 widget 用疊層的方式呈現，越晚設定的 widget 會顯示在最上面</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Stack(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">90</span>,</span><br><span class="line">      height: <span class="number">90</span>,</span><br><span class="line">      color: Colors.green,</span><br><span class="line">    ),</span><br><span class="line">    Container(</span><br><span class="line">      width: <span class="number">80</span>,</span><br><span class="line">      height: <span class="number">80</span>,</span><br><span class="line">      color: Colors.blue,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><img src="1570169862564.png" alt="1570169862564"></p>
</li>
</ul>
<p>當然還有其他更用來排版的 widget</p>
<h1 id="排版"><a class="header-anchor" href="#排版"> </a>排版</h1>
<p>Flutter 在排版上的想法，跟在開發網頁時有很多雷同的概念，這裡有些圖可以來顯示 Flutter 的排版概念 (圖出處: <a href="https://flutter.dev/docs/development/ui/layout">https://flutter.dev/docs/development/ui/layout</a>)</p>
<p><img src="1570170424374.png" alt="1570170424374"></p>
<p><img src="1570170468044.png" alt="1570170468044"></p>
<p>在不使用 Material Widget 排版的方式會是如此排版</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      decoration: BoxDecoration(color: Colors.white),</span><br><span class="line">      child: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">          textDirection: TextDirection.ltr,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontSize: <span class="number">32</span>,</span><br><span class="line">            color: Colors.black87,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1570170684290.png" alt="1570170684290"></p>
<p>如果是使用 <code>MaterialApp</code> 來排版呢? 起手式是這樣</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter layout demo&#x27;</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;Flutter layout demo&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">&#x27;Hello World&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1570170822757.png" alt="1570170822757"></p>
<p>更多的排版細節等下一篇再來研究，畢竟 Flutter 要寫好，排版的基本功要練好，就跟切版一樣</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://flutter.dev/docs/development/ui/widgets-intro">Introduction to widgets</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] Layout 思維</title>
    <url>/2019/10/05/flutter-layout-01/</url>
    <content><![CDATA[<p>這一類的 UI Framework 最需要掌握的是 UI Component (Widget) 的操作，尤其是排版的部分，要如何生出自己想要的畫面，就決定於排版技巧的熟悉度，就像網頁切版，如果 CSS 不熟，就無法切出漂亮有可用的版型，同理，Flutter 也需要先從 Layout Widget 跟設計思維學起</p>
<span id="more"></span>
<h1 id="Layout-思維"><a class="header-anchor" href="#Layout-思維"> </a>Layout 思維</h1>
<p>Flutter 有提供很多種用來排版的 Widget，但要使用哪一種會比較合適，這既需要對每一個 Layout Widget 的特性做深入的了解，但這之前，總要知道如何安排畫面，才能選到對的 Widget。這裡有一個官網文件提供的圖</p>
<p><img src="1570243349615.png" alt="1570243349615"></p>
<p>這是一個算常見的產品介紹畫面，當看到這畫面時，會思考要怎麼呈現。根據圖上面所標示的，可以知道第一層是使用 <code>Row</code> 來呈顯左右兩欄的畫面，而第一欄使用 <code>Column Widget</code> 來顯示其他資訊，而第二欄是使用 <code>Image Widget</code> 來顯示畫面。</p>
<p>再來第一欄的產品資訊使用 <code>Column Widget</code> ，所以物件會是由上而下的呈現，細節設計思維的部分可以參閱下圖</p>
<p><img src="1570243368663.png" alt="1570243368663"></p>
<p>所以綜合這些資訊，我們可以理解成 Flutter 的畫面是從左上到右下，由上而下，由左而右採 S 型移動。這樣理解後，就可以幫我們選擇合適的 layout widget 了</p>
<h1 id="Layout-Widget-屬性"><a class="header-anchor" href="#Layout-Widget-屬性"> </a>Layout Widget 屬性</h1>
<h2 id="Aligning-Widgets"><a class="header-anchor" href="#Aligning-Widgets"> </a>Aligning Widgets</h2>
<p><code>Row</code> 和 <code>Column</code> widget 內有可以設定排序物件的屬性，<code>mainAxisAligment</code> 和 ``crossAxisAlignment`</p>
<p><img src="1570243387835.png" alt="1570243387835"></p>
<p>而 <code>mainAxisAlignment</code> 有提供下列的選項可以使用</p>
<ul>
<li>
<p>start (預設值)</p>
<p><img src="1570249691644.png" alt="1570249691644"></p>
</li>
<li>
<p>center</p>
<p><img src="1570248054188.png" alt="1570248054188"></p>
</li>
<li>
<p>end</p>
<p><img src="1570248078641.png" alt="1570248078641"></p>
</li>
<li>
<p>spaceAround: 頭尾的空白大小是中間空白的一半</p>
<p><img src="1570248128083.png" alt="1570248128083"></p>
</li>
<li>
<p>spaceBetween</p>
<p><img src="1570248154754.png" alt="1570248154754"></p>
</li>
<li>
<p>spaceEvenly</p>
<p><img src="1570248184243.png" alt="1570248184243"></p>
</li>
</ul>
<p><code>crossAxisAlignment</code> 有提供以下的選項可使用</p>
<ul>
<li>
<p>center(預設值)</p>
<p><img src="1570248054188.png" alt="1570248054188"></p>
</li>
<li>
<p>baseline: 須設定 <code>textBaseline</code> 屬性</p>
<p><img src="1570249395817.png" alt="1570249395817"></p>
</li>
<li>
<p>沒設定 baseline 時</p>
<p><img src="1570249591807.png" alt="1570249591807"></p>
</li>
<li>
<p>end</p>
<p><img src="1570248907202.png" alt="1570248907202"></p>
</li>
<li>
<p>start</p>
<p><img src="1570248936450.png" alt="1570248936450"></p>
</li>
<li>
<p>stretch: 塞滿畫面</p>
</li>
</ul>
<h2 id="Sizing"><a class="header-anchor" href="#Sizing"> </a>Sizing</h2>
<p>使用 <code>Expanded widget</code> 可以避免原始圖檔太大造成 App 產生畫面時的錯誤</p>
<ul>
<li>
<p>使用前</p>
<p><img src="1570249918702.png" alt="1570249918702"></p>
</li>
<li>
<p>使用後</p>
<p><img src="1570249929541.png" alt="1570249929541"></p>
</li>
</ul>
<p>設定 <code>flex</code> 的效果</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">        children: [</span><br><span class="line">          Expanded(</span><br><span class="line">            child: Image.network(<span class="string">&#x27;https://picsum.photos/300&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">          Expanded(</span><br><span class="line">            flex: <span class="number">2</span>,</span><br><span class="line">            child: Image.network(<span class="string">&#x27;https://picsum.photos/800&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">          Expanded(</span><br><span class="line">            flex: <span class="number">3</span>,</span><br><span class="line">            child: Image.network(<span class="string">&#x27;https://picsum.photos/600&#x27;</span>),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      );</span><br></pre></td></tr></table></figure>
<p><img src="1570250111924.png" alt="1570250111924"></p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>很多排法跟 css flex 很像，在觀念銜接上是很快速的。基本上沒什麼大問題，下一篇筆記會針對 layout widget 做研究</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] Layout Widget - Container</title>
    <url>/2019/10/05/flutter-layout-container/</url>
    <content><![CDATA[<p>Flutter 有幾個基本的 Layout Widget ，例如 <code>Container</code>、<code>GridView</code>、<code>ListView</code>、<code>Stack</code>，Material Wdigets 也有 <code>Card</code> 和 <code>ListTile</code> 這幾種，這一篇先探索 <code>Container</code>，<code>Container</code> 算是最常使用的 layout widget，因為像是 padding、margins、borders 等效果都是由這一個 widget 來設定的</p>
<span id="more"></span>
<h1 id="Container"><a class="header-anchor" href="#Container"> </a>Container</h1>
<p>Container 的設定項目有</p>
<ul>
<li>
<p>child: 指定一個 widget</p>
</li>
<li>
<p>alignment:</p>
<ul>
<li>Aligment 設定，九宮格 ，topLeft、topCenter、topRight、centerLeft、center、centerRight、bottomLeft、bottomCenter 及 bottomRight</li>
</ul>
</li>
<li>
<p>constraints: 屬性限制</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">  constraints: BoxConstraints.expand(</span><br><span class="line">    height: Theme.of(context).textTheme.display1.fontSize * <span class="number">1.1</span> + <span class="number">200.0</span>,</span><br><span class="line">  ),</span><br><span class="line"> ...</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>width: 寬度</p>
</li>
<li>
<p>height: 高度</p>
</li>
<li>
<p>decoration: 使用 BoxDecoration 來做設定背景</p>
<ul>
<li>BoxDecooration 可設定以下屬性
<ul>
<li>color: 設定顏色</li>
<li>image: DecorationImage class</li>
<li>border: Border class</li>
</ul>
</li>
</ul>
</li>
<li>
<p>foregroundDecoration: 前景顏色，填滿  padding 內的區塊</p>
</li>
<li>
<p>margin &amp; padding</p>
<ul>
<li>可使用 <code>EdgeInsets</code> class 設定</li>
</ul>
</li>
<li>
<p>transform: 可使用 <code>Matrix4</code> 來做轉換效果</p>
</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Container(</span><br><span class="line">       color: Colors.pink[<span class="number">100</span>],</span><br><span class="line">       child: Container(</span><br><span class="line">         alignment: Alignment.bottomRight, <span class="comment">// 右下對齊</span></span><br><span class="line">         decoration: BoxDecoration(</span><br><span class="line">           color: Colors.blue, <span class="comment">// 背景顏色</span></span><br><span class="line">           image: DecorationImage(</span><br><span class="line">             image: NetworkImage(<span class="string">&#x27;https://picsum.photos/300&#x27;</span>), <span class="comment">// 背景圖</span></span><br><span class="line">           ),</span><br><span class="line">           border: Border.all(color: Colors.yellow, width: <span class="number">5</span>), <span class="comment">// 邊框線</span></span><br><span class="line">           borderRadius: BorderRadius.all(Radius.circular(<span class="number">10</span>)), <span class="comment">// 邊框圓角</span></span><br><span class="line">         ),</span><br><span class="line">         foregroundDecoration: BoxDecoration(</span><br><span class="line">           color: Colors.green[<span class="number">50</span>].withOpacity(<span class="number">0.5</span>) <span class="comment">// 前景蓋了一層綠色半透明</span></span><br><span class="line">         ),</span><br><span class="line">         height: <span class="number">400</span>, <span class="comment">// 高度</span></span><br><span class="line">         width: <span class="number">400</span>, <span class="comment">// 寬度</span></span><br><span class="line">         padding: EdgeInsets.all(<span class="number">50</span>), <span class="comment">// 上下左右各 padding 50</span></span><br><span class="line">         margin: EdgeInsets.fromLTRB(<span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>), <span class="comment">// Margin 邊框設定</span></span><br><span class="line">         child: Image.network(<span class="string">&#x27;https://picsum.photos/150&#x27;</span>), <span class="comment">// context widget</span></span><br><span class="line">         transform: Matrix4.rotationZ(<span class="number">0.1</span>), <span class="comment">// 轉換效果</span></span><br><span class="line">       ),</span><br><span class="line">     );</span><br></pre></td></tr></table></figure>
<p>顯示效果</p>
<p><img src="1570274905690.png" alt="1570274905690"></p>
<h2 id="Margin-Padding-Border-關係圖"><a class="header-anchor" href="#Margin-Padding-Border-關係圖"> </a>Margin Padding Border 關係圖</h2>
<p><img src="1570272641129.png" alt="1570272641129"></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://api.flutter.dev/flutter/widgets/Container-class.html">Container Class</a></li>
<li><a href="https://api.flutter.dev/flutter/painting/BoxDecoration-class.html">BoxDecoration</a></li>
<li><a href="https://api.flutter.dev/flutter/painting/DecorationImage-class.html">DecorationImage</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] Layout - GridView and ListView</title>
    <url>/2019/10/06/flutter-layout-grid-list/</url>
    <content><![CDATA[<p>當畫面內容很長時，既需要可以滾動 (scrollable)，基本上有兩種可以用 <code>Gridview</code> 和 <code>ListView</code>，稍微紀錄一下使用的方式</p>
<span id="more"></span>
<h1 id="GridView"><a class="header-anchor" href="#GridView"> </a>GridView</h1>
<p>GridView 有兩種決定每一列能放多少項目的方式</p>
<ol>
<li>GridView.count: 設定 <code>crossAxisCount</code> 來指定每一列要放多少欄，</li>
<li>GridView.extent: 設定 <code>maxCrossAxisExtent</code> 來讓 widget 自行計算每一列可以放多少欄</li>
</ol>
<p>其他可以用的設定屬性</p>
<ol>
<li>padding: GridView 外圍的距離</li>
<li><code>mainAxisSpacing</code> 橫向的寬度</li>
<li><code>crossAxisSpacing</code> 縱向的寬度</li>
<li>children 要放入 GridView 的 widgets</li>
<li><code>childAspectRatio</code> 放大比例</li>
<li><code>dragStartBehavior</code> 設定活動的觸發時間點
<ol>
<li><code>DragStartBehavior.start </code>: 當拖拉事件發生時才設定初始位置</li>
<li><code>DragStartBehaviro.down</code> : 當按到畫面時就設定初始位置</li>
</ol>
</li>
</ol>
<p><img src="1570370406789.png" alt="1570370406789"></p>
<h2 id="範例程式"><a class="header-anchor" href="#範例程式"> </a>範例程式</h2>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget _buildGrid() =&gt; GridView.extent(</span><br><span class="line">    maxCrossAxisExtent: <span class="number">150</span>,</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">4</span>),</span><br><span class="line">    mainAxisSpacing: <span class="number">4</span>,</span><br><span class="line">    crossAxisSpacing: <span class="number">4</span>,</span><br><span class="line">    children: _buildGridTileList(<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span>&lt;Container&gt; _buildGridTileList(<span class="built_in">int</span> count) =&gt; <span class="built_in">List</span>.generate(</span><br><span class="line">    count, (i) =&gt; Container(child: Image.asset(<span class="string">&#x27;images/pic<span class="subst">$i</span>.jpg&#x27;</span>)));</span><br></pre></td></tr></table></figure>
<h1 id="ListView"><a class="header-anchor" href="#ListView"> </a>ListView</h1>
<p>ListView 就很單純是清單列表</p>
<ol>
<li><code>scrollDirection</code> :  設定滾動方向
<ol>
<li>Axis.verticle 垂直滾動</li>
<li>Axis.horizontal: 水平滾動</li>
</ol>
</li>
</ol>
<p>假設在每一個 listItem 中間顯示分隔線，ListView 也有提供方法做到這件事情，範例程式碼如下</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ListView.separated(</span><br><span class="line">        shrinkWrap: <span class="keyword">true</span>,</span><br><span class="line">        itemCount: <span class="number">15</span>,</span><br><span class="line">        itemBuilder: (BuildContext context, <span class="built_in">int</span> index) =&gt;</span><br><span class="line">            Container(child: Image.network(<span class="string">&#x27;https://picsum.photos/400&#x27;</span>)),</span><br><span class="line">        separatorBuilder: (BuildContext context, <span class="built_in">int</span> index) =&gt; <span class="keyword">const</span> Divider(</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          thickness: <span class="number">8</span>,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br></pre></td></tr></table></figure>
<p><img src="1570371431161.png" alt="1570371431161"></p>
<h2 id="Lifecycle"><a class="header-anchor" href="#Lifecycle"> </a>Lifecycle</h2>
<p>ListView 有一個需要注意的地方是，他並不是所有的清單內的項目都會被建立，只有在顯示範圍內的才會變建立出來，而離開視線範圍的，就會被摧毀，細節說明可以參閱[此文件 的 Child elements’ lifecycle section] (<a href="https://api.flutter.dev/flutter/widgets/ListView-class.html">https://api.flutter.dev/flutter/widgets/ListView-class.html</a>)</p>
<h2 id="範例程式-v2"><a class="header-anchor" href="#範例程式-v2"> </a>範例程式</h2>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget _buildList() =&gt; ListView(</span><br><span class="line">      children: [</span><br><span class="line">        _tile(<span class="string">&#x27;CineArts at the Empire&#x27;</span>, <span class="string">&#x27;85 W Portal Ave&#x27;</span>, Icons.theaters),</span><br><span class="line">        _tile(<span class="string">&#x27;The Castro Theater&#x27;</span>, <span class="string">&#x27;429 Castro St&#x27;</span>, Icons.theaters),</span><br><span class="line">        _tile(<span class="string">&#x27;Alamo Drafthouse Cinema&#x27;</span>, <span class="string">&#x27;2550 Mission St&#x27;</span>, Icons.theaters),</span><br><span class="line">        _tile(<span class="string">&#x27;Roxie Theater&#x27;</span>, <span class="string">&#x27;3117 16th St&#x27;</span>, Icons.theaters),</span><br><span class="line">        _tile(<span class="string">&#x27;United Artists Stonestown Twin&#x27;</span>, <span class="string">&#x27;501 Buckingham Way&#x27;</span>,</span><br><span class="line">            Icons.theaters),</span><br><span class="line">        _tile(<span class="string">&#x27;AMC Metreon 16&#x27;</span>, <span class="string">&#x27;135 4th St #3000&#x27;</span>, Icons.theaters),</span><br><span class="line">        Divider(),</span><br><span class="line">        _tile(<span class="string">&#x27;Kescaped_code#39;s Kitchen&#x27;</span>, <span class="string">&#x27;757 Monterey Blvd&#x27;</span>, Icons.restaurant),</span><br><span class="line">        _tile(<span class="string">&#x27;Emmyescaped_code#39;s Restaurant&#x27;</span>, <span class="string">&#x27;1923 Ocean Ave&#x27;</span>, Icons.restaurant),</span><br><span class="line">        _tile(</span><br><span class="line">            <span class="string">&#x27;Chaiya Thai Restaurant&#x27;</span>, <span class="string">&#x27;272 Claremont Blvd&#x27;</span>, Icons.restaurant),</span><br><span class="line">        _tile(<span class="string">&#x27;La Ciccia&#x27;</span>, <span class="string">&#x27;291 30th St&#x27;</span>, Icons.restaurant),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">ListTile _tile(<span class="built_in">String</span> title, <span class="built_in">String</span> subtitle, IconData icon) =&gt; ListTile(</span><br><span class="line">      title: Text(title,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            fontWeight: FontWeight.w500,</span><br><span class="line">            fontSize: <span class="number">20</span>,</span><br><span class="line">          )),</span><br><span class="line">      subtitle: Text(subtitle),</span><br><span class="line">      leading: Icon(</span><br><span class="line">        icon,</span><br><span class="line">        color: Colors.blue[<span class="number">500</span>],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>當然除了這兩個 widget 之外，其他還有所謂的 <code>table</code> 或是 <code>DataTable</code> widget，但這部分就留到後面在探索了，關於 Layout 相關的 widget，就可參閱這份<a href="https://flutter.dev/docs/development/ui/widgets/layout">文件</a>，裡面有更詳細的說明</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="">GridView</a>(<a href="https://api.flutter.dev/flutter/widgets/GridView-class.html">https://api.flutter.dev/flutter/widgets/GridView-class.html</a>)</li>
<li><a href="https://api.flutter.dev/flutter/widgets/ListView-class.html">ListView</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] interactivity 互動 - stateful widget</title>
    <url>/2019/10/07/flutter-interactivity/</url>
    <content><![CDATA[<p>一個 App 加減都會有互動，有互動就需要面對狀態管理的課題，而 Flutter 針對狀態管理又有幾套實作的方式，這一個學習筆記將從基本元素開始看起，<code>stateful widget</code></p>
<span id="more"></span>
<h1 id="stateless-與-stateful-widgets"><a class="header-anchor" href="#stateless-與-stateful-widgets"> </a>stateless 與 stateful widgets</h1>
<p>Flutter 內的 widget 有兩種，無狀態和有狀態的 widget，<code>stateless widget</code> 基本上會長這樣</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter layout demo!&#x27;</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;Flutter layout demo&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// Change to buildColumn() for the other column example</span></span><br><span class="line">        body: Center(child: buildRow()),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而 <code>stateful widget</code> 會稍微複雜一點，基本架構會這樣，會由兩個 class 組成</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FavoriteWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _FavoriteWidgetState createState() =&gt; _FavoriteWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FavoriteWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FavoriteWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而狀態就可以存放在 state class 內，這裡面的狀態，在 widget 沒有被摧毀前，都會存在著，至於避免狀態隨著 widget 消失而消失的方法，這個下一篇再來探討</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FavoriteWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FavoriteWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _isFavorited = <span class="keyword">true</span>;</span><br><span class="line">  <span class="built_in">int</span> _favoriteCount = <span class="number">41</span>;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但不論是 <code>stateless</code> 或是 <code>stateful</code> widget 都是透過 <code>build</code> 方法產生要顯示的 UI 畫面，在 <code>stateful widget</code> 內如果要更新 UI 時，可以透過 <code>setState</code> 來觸發 <code>build</code> 方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FavoriteWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FavoriteWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Row(</span><br><span class="line">      mainAxisSize: MainAxisSize.min,</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          padding: EdgeInsets.all(<span class="number">0</span>),</span><br><span class="line">          child: IconButton(</span><br><span class="line">            icon: (_isFavorited ? Icon(Icons.star) : Icon(Icons.star_border)),</span><br><span class="line">            color: Colors.red[<span class="number">500</span>],</span><br><span class="line">            onPressed: _toggleFavorite,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        SizedBox(</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          child: Container(</span><br><span class="line">            child: Text(<span class="string">&#x27;<span class="subst">$_favoriteCount</span>&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">void</span> _toggleFavorite() &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="keyword">if</span> (_isFavorited) &#123;</span><br><span class="line">          _favoriteCount -= <span class="number">1</span>;</span><br><span class="line">          _isFavorited = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          _favoriteCount += <span class="number">1</span>;</span><br><span class="line">          _isFavorited = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="more-about-stateful-widget"><a class="header-anchor" href="#more-about-stateful-widget"> </a>more about stateful widget</h2>
<p>如果要從外部傳資料到 stateful widget 時，又會怎麼處理呢? 繼續使用上面的範例</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FavoriteWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;    </span><br><span class="line">  FavoriteWidget(&#123;<span class="keyword">this</span>.name&#125;); <span class="comment">//</span></span><br><span class="line">       </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _FavoriteWidgetState createState() =&gt; _FavoriteWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FavoriteWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FavoriteWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">print</span>($widget.name); <span class="comment">//</span></span><br><span class="line">    <span class="keyword">return</span> Container();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>line 3: 透過建構式的方式將值從外部傳入</li>
<li>line 12: 可以透過 <code>widget.xxx</code> 的方法取得 widget 的變數</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://www.youtube.com/watch?v=AqCMFXEmf3w">How Stateful Widgets Are Used Best - Flutter Widgets 101 Ep. 2</a></li>
<li><a href="https://flutter.dev/docs/development/ui/interactive">Adding interactivity</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] Responsive Apps</title>
    <url>/2019/10/07/flutter-responsive-app/</url>
    <content><![CDATA[<p>由於手機或是相關的設備，螢幕尺寸都不一樣，這時候就必須有所謂的響應式的設計，而 Flutter 內野有提供相對應的方法來幫助我們完成這件事情</p>
<span id="more"></span>
<h1 id="LayoutBuilder"><a class="header-anchor" href="#LayoutBuilder"> </a>LayoutBuilder</h1>
<p><code>LayoutBuilder</code> 起手式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">LayoutBuilder(builder: (context, constraints) &#123;</span><br><span class="line">    <span class="comment">// Code here</span></span><br><span class="line">&#125;,)</span><br></pre></td></tr></table></figure>
<ul>
<li>context: <code>BuildContext</code>，這裡取得的 context 等同於 build 方法的 context。</li>
<li>constraints:  <code>BoxConstraints</code> 型別，內包含許多顯示畫面的相關資訊，就可以透過這資訊來決定畫面要怎麼處理</li>
</ul>
<p>範例程式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">LayoutBuilder(</span><br><span class="line">    builder: (context, constraints) &#123;</span><br><span class="line">        <span class="keyword">if</span>(constraints.maxWidth &gt; <span class="number">600</span>) &#123;</span><br><span class="line">            getWideLayout();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            getNormalLayout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="MediaQuery"><a class="header-anchor" href="#MediaQuery"> </a>MediaQuery</h1>
<p>如果不透過 LayoutBuilder，也可以透過 <code>MediaQuery.of</code> 的方法來取得相關資訊</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;    </span><br><span class="line">    MediaQueryData media = MediaQuery.of(context);</span><br><span class="line">    ...</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>
<p>MediaQueryData 包含許多資訊，細節內容可以參閱<a href="https://api.flutter.dev/flutter/widgets/MediaQueryData-class.html">官方文件</a></p>
<h1 id="AspectRatio"><a class="header-anchor" href="#AspectRatio"> </a>AspectRatio</h1>
<p>另外一個很實用的 widget，顯示圖片時，因為圖片本身有所謂的長寬比例，而在做放大縮小時，理論上也應該按一定比例做縮放，這時候就可以使用 <code>AspectRatio</code> 來完成</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AspectRation(</span><br><span class="line">	aspectRatio: <span class="number">3</span> / <span class="number">2</span>,</span><br><span class="line">    child: MyWidget()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>aspectRatio</code> 可以指定數字，或是用 width / height 的方式表示</li>
</ul>
<h1 id="使用範例"><a class="header-anchor" href="#使用範例"> </a>使用範例</h1>
<p>在其幾篇有介紹到 <code>GridView.count</code> 的使用方法，由於 <code>count</code> 是很明確的指定每一個 row 的顯示數量，這時候當設備是直立顯示與橫向使用，可使用的寬度就是不一樣，這裡就可以使用 <code>MediaQuery</code> 來做到動態設定 count  的功能</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Orientation orientation = MediaQuery.of(context).orientation;</span><br><span class="line">...</span><br><span class="line">GridView.count(</span><br><span class="line">    crossAxisCount: (orientation == Orientation.portrait) ? <span class="number">2</span> : <span class="number">3</span>,</span><br><span class="line">    mainAxisSpacing: <span class="number">4.0</span>,</span><br><span class="line">    crossAxisSpacing: <span class="number">4.0</span>,</span><br><span class="line">    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">4.0</span>),</span><br><span class="line">    childAspectRatio: (orientation == Orientation.portrait) ? <span class="number">1.0</span> : <span class="number">1.3</span>,</span><br><span class="line">    children: photos.map&lt;Widget&gt;((Photo photo) &#123;</span><br><span class="line">        <span class="keyword">return</span> GridDemoPhotoItem(</span><br><span class="line">            photo: photo,</span><br><span class="line">            tileStyle: _tileStyle,</span><br><span class="line">            onBannerTap: (Photo photo) &#123;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                    photo.isFavorite = !photo.isFavorite;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">        );</span><br><span class="line">    &#125;).toList(),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://api.flutter.dev/flutter/widgets/LayoutBuilder-class.html">LayoutBuilder</a></li>
<li><a href="https://api.flutter.dev/flutter/widgets/MediaQuery-class.html">MediaQuery</a></li>
<li><a href="https://api.flutter.dev/flutter/widgets/AspectRatio-class.html">AspectRatio</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] Provider</title>
    <url>/2019/10/12/flutter-provider/</url>
    <content><![CDATA[<p>Flutter 內狀態管理的方法很多種，先從包裝好的 <code>provider</code> package 先研究起，<a href="https://pub.dev/packages/provider">pub 網址</a></p>
<span id="more"></span>
<h1 id="Basic"><a class="header-anchor" href="#Basic"> </a>Basic</h1>
<p>Provider 是 Dependency injection 和 state manager 的混和體，使用 provider 可以讓我們很容易的重複使用 wigdet class，並確保幾件事情</p>
<ol>
<li>維護姓，單一方向的資料流</li>
<li>測試性，容易 mock service</li>
<li>健全性，不容易遺忘處理更新事件</li>
</ol>
<p>Provider 的安裝方式很簡單，在 <code>pubspec.yaml</code> 的 dependcies 內加入 provider 套件即可。然後再 flutter pub get 安裝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  provider: ^3.1.0</span><br></pre></td></tr></table></figure>
<h1 id="設定方式"><a class="header-anchor" href="#設定方式"> </a>設定方式</h1>
<p>如果只需要設定單一 <code>provider</code> ，有兩種設定方式</p>
<ol>
<li>
<p>使用 <code>Provider&lt;T&gt;.value()</code></p>
 <figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Provider&lt;<span class="built_in">String</span>&gt;.value(</span><br><span class="line">  value: <span class="string">&#x27;Hello World&#x27;</span>,</span><br><span class="line">  child: MaterialApp(</span><br><span class="line">    home: Home(),</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>比較複雜的情況，像是要處理 <code>constructor</code> 或是 <code>dispose</code> 時，可以使用這種設定方式</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Provider&lt;MyComplexClass&gt;(</span><br><span class="line">  builder: (context) =&gt; MyComplexClass(),</span><br><span class="line">  dispose: (context, value) =&gt; value.dispose()</span><br><span class="line">  child: SomeWidget(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>不論是哪一種方式，使要是被 provider 包起來的 child widget，都能讀取設定的 provider，但通常我們需要註冊的 service 不只有一個，這時候就可以使用多層 provider 設定的寫法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">MultiProvider(</span><br><span class="line">  providers: [</span><br><span class="line">    Provider&lt;<span class="built_in">String</span>&gt;.value(value: <span class="string">&#x27;Provider Rocks&#x27;</span>),</span><br><span class="line">    Provider(builder: (context) =&gt; AppConfig,)</span><br><span class="line">  ],</span><br><span class="line">  child: someWidget,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h1 id="取用方式"><a class="header-anchor" href="#取用方式"> </a>取用方式</h1>
<p>如何在不同的 widget 中取得 provider 內的 services 呢? 有以下幾種做法</p>
<ol>
<li>
<p>在 <code>build(context)</code> 下，可以單純的使用 <code>Provider.of&lt;T&gt;(context)</code> 的方式取得，因為 <code>Provider</code> 就是 <code>Inheritedwidget</code> 的實作</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> title = Provider.of&lt;<span class="built_in">String</span>&gt;(context);</span><br><span class="line">    <span class="keyword">return</span> Container(child: Text(title));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>假設 widget 並不是直接放在 <code>build</code> 下面時，因為沒有方法直接存取 <code>context</code> ，這時候就可以使用 <code>consumer</code> 來存取 provider</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> title = Provider.of&lt;<span class="built_in">String</span>&gt;(context);</span><br><span class="line">    <span class="keyword">return</span> Container(child: titleWidget);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget titleWidget = Consumer&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">    builder: (context, title, child) =&gt; Text(title),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>更進一步的可以使用 <code>selector</code> 來提升 app 效能，可以設定依某條件才觸發更新</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Selector&lt;<span class="built_in">List</span>, <span class="built_in">int</span>&gt;(</span><br><span class="line">  selector: (_, list) =&gt; list.length, <span class="comment">// 觸發條件</span></span><br><span class="line">  builder: (_, length, __) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">&#x27;<span class="subst">$length</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>假設同時需要存取多個 provider 時，可以這樣子寫，以此類推，最多到 6 個</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget titleWidget = Consumer2&lt;<span class="built_in">String</span>, AppConfig&gt;(</span><br><span class="line">  builder: (context, title, appConfig, child) =&gt; Text(title),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="其他-Provider-類型"><a class="header-anchor" href="#其他-Provider-類型"> </a>其他 Provider 類型</h1>
<p>除了 Provider 外，還有其他延伸變化類型的 provider</p>
<table>
<thead>
<tr>
<th>name</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://pub.dartlang.org/documentation/provider/latest/provider/Provider-class.html">Provider</a></td>
<td>The most basic form of provider. It takes a value and exposes it, whatever the value is.</td>
</tr>
<tr>
<td><a href="https://pub.dartlang.org/documentation/provider/latest/provider/ListenableProvider-class.html">ListenableProvider</a></td>
<td>A specific provider for Listenable object. ListenableProvider will listen to the object and ask widgets which depend on it to rebuild whenever the listener is called.</td>
</tr>
<tr>
<td><a href="https://pub.dartlang.org/documentation/provider/latest/provider/ChangeNotifierProvider-class.html">ChangeNotifierProvider</a></td>
<td>A specification of ListenableProvider for ChangeNotifier. It will automatically call <code>ChangeNotifier.dispose</code> when needed.</td>
</tr>
<tr>
<td><a href="https://pub.dartlang.org/documentation/provider/latest/provider/ValueListenableProvider-class.html">ValueListenableProvider</a></td>
<td>Listen to a ValueListenable and only expose <code>ValueListenable.value</code>.</td>
</tr>
<tr>
<td><a href="https://pub.dartlang.org/documentation/provider/latest/provider/StreamProvider-class.html">StreamProvider</a></td>
<td>Listen to a Stream and expose the latest value emitted.</td>
</tr>
<tr>
<td><a href="https://pub.dartlang.org/documentation/provider/latest/provider/FutureProvider-class.html">FutureProvider</a></td>
<td>Takes a <code>Future</code> and updates dependents when the future completes.</td>
</tr>
<tr>
<td><a href="https://pub.dev/documentation/provider/latest/provider/ProxyProvider-class.html">ProxyProvider</a></td>
<td>A provider that builds a value based on other providers.(3.0 版新增功能)</td>
</tr>
</tbody>
</table>
<ul>
<li><a href="https://pub.dev/documentation/provider/latest/provider/provider-library.html">完整的 list</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] 靜態檔案</title>
    <url>/2019/10/15/flutter-assets/</url>
    <content><![CDATA[<p>Flutter 處理靜態檔案的方法，特別針對圖檔的處理算是很完整又簡單，筆記如下</p>
<span id="more"></span>
<h1 id="靜態檔案"><a class="header-anchor" href="#靜態檔案"> </a>靜態檔案</h1>
<p>Flutter 是透過設定 <code>pubspec.yaml</code> 的 <code>assets</code> 區塊來決定哪些靜態檔案或是資料夾下的靜態檔案要被包到 Flutter 專案內</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/my_icon.png</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/background.png</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/docs/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以直接設定靜態檔案名稱</li>
<li>設定資料夾名稱 (結尾要有 <code>/</code>)，則會包含第一層內的所有靜態檔案</li>
</ul>
<p>單針對影像檔的處理方式有更彈性的作法，由於手機設備的螢幕大小都不太一樣，為了讓圖片顯示得更清楚，都會針對不同的解析度而輸出相對應的圖檔，所以如果採用上述的打包規則，設定規則會超級囉嗦。</p>
<p>針對這一塊，Flutter 的彈性處理方式是，他會根據圖檔的檔名，往下找一樣檔名的檔案並一起打包進來，假設圖檔的存放結構如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.../assets/images/background.png</span><br><span class="line">.../assets/images/dark/background.png</span><br><span class="line">.../assets/images/my_icon.png</span><br></pre></td></tr></table></figure>
<p>這時候我的 <code>pubspec.yaml</code>  是這樣子設定</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">  	<span class="bullet">-</span> <span class="string">assets/images/background.png</span></span><br></pre></td></tr></table></figure>
<p>Flutter 會連同 <code>assets/images/dark/background.png</code> 檔案一起打包進來，同理套用在資料夾模式，真的很彈性。</p>
<p>透過這樣的機制，就可以很輕鬆的處理多尺寸圖片的問題了，資料夾的命名依放大比例命名 (ex: <code>/2.0x/image.png</code>，<code>/3.0x/image</code>)，沒放在資料夾內的圖檔為 base ration (1倍)</p>
<h2 id="讀取靜態檔案"><a class="header-anchor" href="#讀取靜態檔案"> </a>讀取靜態檔案</h2>
<ul>
<li>
<p>讀取文字</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span> <span class="keyword">show</span> Future;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span> <span class="keyword">show</span> rootBundle;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; loadAsset() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> rootBundle.loadString(<span class="string">&#x27;assets/config.json&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>讀取圖檔</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imageData = <span class="keyword">await</span> rootBundle.load(<span class="string">&#x27;assets/images/ReceiptRaw_1.jpg&#x27;</span>); <span class="comment">// Future&lt;ByteData&gt;</span></span><br><span class="line"><span class="keyword">var</span> image = Image.memory(imageData);</span><br></pre></td></tr></table></figure>
<p>更簡單的方式是使用 widget 讀取，當使用會針對解析度改變會處理的 widget，會自己載入合適的圖檔</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AssetImage(<span class="string">&#x27;graphics/background.png&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="打包-package-的靜態檔案"><a class="header-anchor" href="#打包-package-的靜態檔案"> </a>打包 package 的靜態檔案</h2>
<p>當要使用 package 的圖檔時，則需要這樣子設定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  assets:</span><br><span class="line">  	- backgrounds/background1.png</span><br><span class="line">    - packages/fancy_backgrounds/backgrounds/background1.png</span><br></pre></td></tr></table></figure>
<p>當使用 <code>AssetImage</code> 時，就可以指定要載入哪一個 <code>package</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">AssetImage(<span class="string">&#x27;backgrounds/background1.png&#x27;</span>, package: <span class="string">&#x27;fancy_backgrounds&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://flutter.dev/docs/development/ui/assets-and-images">Assets and images</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 如何設定開發時期的 SignalR proxy 檔</title>
    <url>/2019/10/17/angular-proxy-with-signalr/</url>
    <content><![CDATA[<p>Angular 在開發時期有提供 <code>proxy</code> 的檔案供我們設定 <code>reverse proxy</code> ，以避免 CORS 所產生的問題，而 API 的設定上是沒有問題的，那遇到 <code>SignalR </code> 又該怎麼辦呢?</p>
<span id="more"></span>
<p>首先要先了解 <code>SignalR</code> 是跑在什麼協定上，<code>SignalR</code> (這裡提的 <code>SignalR</code> 是用最新版的 <code>@microsoft/signalr</code>) 預設是跑在 <code>websocket</code> 上，既然知道是跑在 <code>websocket</code> 上，proxy 設定檔就變簡單了，以下是基本範例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;/messageHub&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;your url&gt;&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">    <span class="attr">&quot;ws&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 這是關鍵設定</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當加上 line:5 後，一切問題就解決了。</p>
<h1 id="進階設定"><a class="header-anchor" href="#進階設定"> </a>進階設定</h1>
<p>當要設定的網址很多時，可以怎樣設定呢? 可以使用 <code>context</code> 來設定，範例如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/messageHub&quot;</span><span class="punctuation">,</span> <span class="string">&quot;/api&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;your url&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;secure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;changeOrigin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ws&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] Go 語言學習筆記 - 語法</title>
    <url>/2019/11/25/golang-note-1/</url>
    <content><![CDATA[<p>Go 這語言出來也好一段時間了，由於本身後端都是用 C# 在開發，一直都沒有很大的動機學習另外一個後端語言。趁著這次 GDG 台中 12 月份的大活動，來學習一波 Go 吧</p>
<span id="more"></span>
<h1 id="歷史"><a class="header-anchor" href="#歷史"> </a>歷史</h1>
<p>Go 是由 Google 和眾多的貢獻者一起發展的開源專案 (<a href="https://golang.org/LICENSE">BSD-style 授權</a>)</p>
<p><img src="image-20191125100827886.png" alt="image-20191125100827886"></p>
<h1 id="安裝"><a class="header-anchor" href="#安裝"> </a>安裝</h1>
<p>依官網的<a href="https://golang.org/doc/install">安裝文件</a>安裝，基本上是沒有問題的。編輯器的部分可以使用 VS Code + Go 的擴充套建，或是使用<a href="https://www.jetbrains.com/go/">JetBrains GoLand</a> 編輯器(商用)</p>
<h1 id="Hello-World"><a class="header-anchor" href="#Hello-World"> </a>Hello World</h1>
<p>第一個 Go 的程式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello-world.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過下指令的方式就可以執行 Go 檔案，<code>go run hello.world.go</code></p>
<p><img src="image-20191125101426094.png" alt="image-20191125101426094"></p>
<p>要將 Go 建置成可以跑執行檔，執行 <code>go build hello.world.go</code> 之後，就可以執行 <code>./hello-word</code></p>
<p><img src="image-20191125101724070.png" alt="image-20191125101724070"></p>
<p>如果要將 Go  打包成全域可使用的話，可透過 <code>go install </code> 的語法，但要使用這個前置條件是 <code>GOBIN</code> 的環境變數要設定，windows 就加入一個環境參數 <code>GOBIN</code> 並設定一個資料夾即可</p>
<p><img src="image-20191125104233033.png" alt="image-20191125104233033"></p>
<h1 id="基本語法"><a class="header-anchor" href="#基本語法"> </a>基本語法</h1>
<h2 id="packages"><a class="header-anchor" href="#packages"> </a>packages</h2>
<p>go 世界裡，每一個 go 檔案都會歸屬到一個 packages 裡面，就拿上面的 <code>hello-world</code> 來看</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>要使用其他 package 就需要透過 <code>import</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>當 package 被 import 時，就可以使用該 package  內第一個為大寫的 functions。換句話說，如果 functions  的名稱第一個是小寫的，就不會被 export 出去</p>
<p><img src="image-20191125121819111.png" alt="image-20191125121819111"></p>
<p>上圖為使用小寫 functions 時會出現的錯誤訊息，當改使用大寫的 functions，則會是這個結果</p>
<p><img src="image-20191125122001264.png" alt="image-20191125122001264"></p>
<h2 id="functions"><a class="header-anchor" href="#functions"> </a>functions</h2>
<p>Go 的 functions 也是要定型別的，只是定型別的順序跟常見的  C# 等語言不太一樣</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>型別都定義在後方，當連續的參數都是同一型別時，也可以這樣寫</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Go 另外一個比較特別的地方就是 function 允許回傳多個值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a, b := swap(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">    <span class="comment">// a=world , b= hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>換另外一種命名方式回傳 (但不太建議這樣子使用)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="type">int</span>)</span></span> (x, y <span class="type">int</span>) &#123;</span><br><span class="line">	x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">	y = sum - x</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="variables"><a class="header-anchor" href="#variables"> </a>variables</h2>
<p>可愛的 <code>var</code> 又來了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, python, java <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">	fmt.Println(i, c, python, java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>設定預設值的方式，就在後面一順序給要的預設值就可以了，Go 會依預設值自行推斷型別</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c, python, java = <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">&quot;no!&quot;</span></span><br></pre></td></tr></table></figure>
<p>另外一種簡化的宣告方式，使用 <code>:=</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原本的做法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line">	result = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 := 語法糖</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;	</span><br><span class="line">    result := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="basic-types"><a class="header-anchor" href="#basic-types"> </a>basic types</h2>
<ul>
<li>bool</li>
<li>string</li>
<li>int int8 int16 int32 int64</li>
<li>uint uint8 uint16 uint32 uint64 uintptr</li>
<li>byte // alias for uint8</li>
<li>rune // alias for int32, represents a Unicode code point</li>
<li>float32 float64</li>
<li>complex64 complex128</li>
</ul>
<h3 id="defaultValue"><a class="header-anchor" href="#defaultValue"> </a>defaultValue</h3>
<p>各型別如果沒有給予設值的系統預設值為</p>
<ul>
<li>string =&gt; 「」</li>
<li>bool =&gt; false</li>
<li>數字型 =&gt; 0</li>
</ul>
<p>如果要轉型的話，可以這樣子操作 <code>T(v)</code> 會將 value <code>v</code> 轉換成 <code>T</code> 型別</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure>
<h3 id="consts"><a class="header-anchor" href="#consts"> </a>consts</h3>
<p>使用 <code>const</code> 宣告常數值，常數值不能使用 <code>:=</code> 宣告</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>
<h1 id="流程控制"><a class="header-anchor" href="#流程控制"> </a>流程控制</h1>
<h2 id="for"><a class="header-anchor" href="#for"> </a>for</h2>
<p>for 迴圈的基本起手式，不需要小括弧，但大括弧是必要的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		sum += i</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>go 版本的 <code>while</code>，仍是用 <code>for</code> 表示</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sum := <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">		sum += sum</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum)</span><br></pre></td></tr></table></figure>
<p>永不停止的寫法，還是用 <code>for</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="if"><a class="header-anchor" href="#if"> </a>if</h2>
<p>條件判斷應該是最基本的，只是不需要小括弧，但大括弧是必要的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> sqrt(-x) + <span class="string">&quot;i&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更懶惰但要習慣的寫法是，在 <code>if</code> 內做變數指定</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line">		<span class="keyword">return</span> v</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="switch"><a class="header-anchor" href="#switch"> </a>switch</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">today := time.Now().Weekday()</span><br><span class="line"><span class="keyword">switch</span> time.Saturday &#123;</span><br><span class="line">    <span class="keyword">case</span> today + <span class="number">0</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Today.&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> today + <span class="number">1</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Tomorrow.&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> today + <span class="number">2</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;In two days.&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    fmt.Println(<span class="string">&quot;Too far away.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本 switch case 都會附上 break (預設隱藏)，當然要寫也是可以的，而 case 的條件也可以是 expression，這樣就不局限必須為一個數值之類的，可以是條件、function 的，以下是一些 switch case 不同的寫法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myswitch</span><span class="params">(v <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> v &gt; <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;value 大於 10&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> v == <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;value 等於 10&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;value 小於 10&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20191125181044628.png" alt="image-20191125181044628"></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myswitch</span><span class="params">(v <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> v == <span class="number">10</span>:</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> v &gt; <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;數字大於等於 10&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;其他數值&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20191125181816420.png" alt="image-20191125181816420"></p>
<ul>
<li><code>fallthrough</code> : 執行完此 case 後，繼續往下走 switch case 判斷</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myswitch</span><span class="params">(v <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> v &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;介於 0 ~ 5 之間&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;介於 6 ~ 10 之間&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;其他數值&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20191125181317946.png" alt="image-20191125181317946"></p>
<h2 id="defer"><a class="header-anchor" href="#defer"> </a>defer</h2>
<p><code>defer</code> 會等到周圍的 function 都執行完成後，再執行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;hello&quot;</span>) <span class="comment">// hello world</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>既然 defer 會 hold 住 function，那當好幾個 defer 時，又會怎麼執行呢</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;counting&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>輸出結果為</p>
<p><img src="image-20191125144018502.png" alt="image-20191125144018502"></p>
<p>所以 defer 所堆疊起來的 functions，會採後進先出的方式執行，可以讀此<a href="https://blog.golang.org/defer-panic-and-recover">文章</a>了解更多</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://tour.golang.org/basics/2">A Tour of Go - Packages, variables, and functions</a></li>
<li><a href="https://tour.golang.org/flowcontrol/1">A Tour of Go - Flow control…</a></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] Go 語言學習筆記 - 語言 part 2</title>
    <url>/2019/11/25/golang-note-2/</url>
    <content><![CDATA[<p>上一篇簡單快速的介紹 Go 最基礎最簡單的部分，這一篇要進入比較進階一點的地方，更多跟語言有關的筆記介紹如下</p>
<span id="more"></span>
<h1 id="Pointers"><a class="header-anchor" href="#Pointers"> </a>Pointers</h1>
<p>Pointer 的作用是讓變數可以參考某一個變數的記憶體位置，預設值為 <code>nil</code>，語法是 <code>*T</code> 是指到 T 的位址(memory address)，<code>&amp;</code> 是產生 <code>pointer</code> 的運算式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i, j := <span class="number">42</span>, <span class="number">2701</span></span><br><span class="line"></span><br><span class="line">	p := &amp;i</span><br><span class="line">	fmt.Println(*p) <span class="comment">// 42</span></span><br><span class="line">	*p = <span class="number">21</span></span><br><span class="line">	fmt.Println(i) <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line">	p = &amp;j</span><br><span class="line">	*p = *p / <span class="number">37</span></span><br><span class="line">	fmt.Println(j) <span class="comment">// 73</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Structs"><a class="header-anchor" href="#Structs"> </a>Structs</h1>
<p>可以利用 <code>struct</code> 來當作一個資料模型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X <span class="type">int</span> <span class="comment">// field</span></span><br><span class="line">	Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以將 <code>structs</code> 視為一個 data object，當然就可以做到這件事情</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// Vertex Model</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X <span class="type">int</span></span><br><span class="line">	Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	v.X = <span class="number">4</span></span><br><span class="line">    fmt.Println(v) <span class="comment">// output: &#123;4 2&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>當 <code>strcut</code> 遇上 <code>pointer</code> 時，由於 <code>*</code> 寫起來很麻煩，所以當是一個 struct point 時， <code>*</code> 就可以不用寫</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X <span class="type">int</span></span><br><span class="line">	Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	p := &amp;v</span><br><span class="line">    p.X = <span class="number">5</span></span><br><span class="line">    fmt.Println(v) <span class="comment">// output &#123;5 2&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果還是要加 <code>*</code> 的話，還是可以加，寫法如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">	p := &amp;v</span><br><span class="line">    (*p).X = <span class="number">5</span> <span class="comment">// 加 * 的寫法 (*T).field</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定義完 <code>strcut</code> 後，建立 struct 實體的方式除了直接一開始就先給值之外，還可以這樣子寫</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v1 := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// has type Vertex</span></span><br><span class="line">v2 := Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 is implicit</span></span><br><span class="line">v3 := Vertex&#123;&#125;      <span class="comment">// X:0 and Y:0</span></span><br><span class="line">p  := &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// has type *Vertex</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Arrays"><a class="header-anchor" href="#Arrays"> </a>Arrays</h1>
<p>陣列的操作，在任何程式語言都應該被好好熟悉並掌握，在 Go 裡面宣告陣列的方式比較不一樣，宣告方視為 <code>[n]T</code>  is an array of <code>n</code> values of type <code>T</code>，範例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">2</span>]<span class="type">string</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="string">&quot;world&quot;</span></span><br><span class="line">    fmt.Println(a[<span class="number">0</span>], a[<span class="number">1</span>]) <span class="comment">// output: Hello World</span></span><br><span class="line">    fmt.Println(a) <span class="comment">// output: [Hello World]</span></span><br><span class="line">    </span><br><span class="line">    primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125; <span class="comment">//  宣告後直接賦予值</span></span><br><span class="line">	fmt.Println(primes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Go 在開發時，會立刻針對型別做檢查</p>
</li>
<li>
<p>如果陣列初始值長度大於宣告的，也會出現錯誤提示</p>
<p><img src="image-20191125211743398.png" alt="image-20191125211743398"></p>
</li>
</ul>
<h1 id="Slices"><a class="header-anchor" href="#Slices"> </a>Slices</h1>
<h2 id="設定方法-1"><a class="header-anchor" href="#設定方法-1"> </a>設定方法 1</h2>
<p>Array 是一個有固定長度的陣列，而 slices 是沒有固定長度的陣列，宣告使用方式為</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">q := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// strcut slices</span></span><br><span class="line">s := []<span class="keyword">struct</span> &#123;</span><br><span class="line">		i <span class="type">int</span></span><br><span class="line">		b <span class="type">bool</span></span><br><span class="line">	&#125;&#123;</span><br><span class="line">		&#123;<span class="number">2</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">		&#123;<span class="number">3</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">		&#123;<span class="number">5</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">		&#123;<span class="number">7</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">		&#123;<span class="number">11</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">		&#123;<span class="number">13</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="設定方法-2"><a class="header-anchor" href="#設定方法-2"> </a>設定方法 2</h2>
<p>slices 可透過這語法<code>array[lowIndex: highIndex]</code>，包含 <code>lowIndex</code> 但不包含 <code>highIndex</code>，從一個陣列中取出某一部分的陣列資料</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">	s := primes[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">    fmt.Println(primes, s) <span class="comment">// output: [2,3,5,7,11,13] [3,5]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> 非常重要，slice 出來的陣列，並不是複製體，而是參考到原本的來源陣列，這表示，改動 slice 出來的陣列，是會影響到原本的資料，測試程式碼如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">	s := primes[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">// 由上面得知是 [3,5]</span></span><br><span class="line">	s[<span class="number">0</span>] = <span class="number">1</span> <span class="comment">// 修改後變成 [1,5]</span></span><br><span class="line">    fmt.Println(primes, s) <span class="comment">// output: [2,1,5,7.11.13] [1,5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當沒有設 <code>lowIndex</code> 或 <code>highIndex</code> 時，Go 內的預設值會是</p>
<ul>
<li><code>lowIndex</code> : 0</li>
<li><code>highIndex</code>: 陣列長度</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">    s := primes[:<span class="number">3</span>] <span class="comment">// output: [2 3 5]</span></span><br><span class="line">    p := primes[<span class="number">4</span>:] <span class="comment">// output: [11 13]</span></span><br><span class="line">	fmt.Println(s, p) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="slices-資訊-重要觀念"><a class="header-anchor" href="#slices-資訊-重要觀念"> </a>slices 資訊 (重要觀念)</h2>
<p>如果想要得知目前 <code>slice</code> 長度跟複製的陣列來源長度，可以透過 <code>len()</code> 和 <code>cap()</code> 兩個方法取得</p>
<ul>
<li><code>len()</code> : slice 出來的陣列長度</li>
<li><code>cap()</code>: slice 來源的陣列長度</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line">    printSlice(s) <span class="comment">// len: 6, cap: 6, s: [2 3 5 7 11 13]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Slice the slice to give it zero length.</span></span><br><span class="line">	s = s[:<span class="number">0</span>]</span><br><span class="line">    printSlice(s) <span class="comment">// len: 0, cap: 6, s: [], cap_s: [2 3 5 7 11 13]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Extend its length.</span></span><br><span class="line">    s = s[:<span class="number">4</span>] </span><br><span class="line">	printSlice(s) <span class="comment">// len: 4, cap: 6, s: [2 3 5 7], cap_s: [2 3 5 7 11 13]</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Drop its first two values.</span></span><br><span class="line">    s = s[<span class="number">2</span>:]</span><br><span class="line">    printSlice(s) <span class="comment">// len: 2 cap: 4, s: [5 7], cap_s: [5 7 11 13]</span></span><br><span class="line">    </span><br><span class="line">    s = s[:<span class="number">4</span>]</span><br><span class="line">    printSlice(s) <span class="comment">// len: 4 cap: 4, s: [5 7 11 13], cap_s: [5 7 11 13]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="預設值"><a class="header-anchor" href="#預設值"> </a>預設值</h2>
<p>而一個 <code>slices</code> 沒有設定初始值時，預設值就是 <code>nil</code></p>
<h2 id="使用-make-建立-slices"><a class="header-anchor" href="#使用-make-建立-slices"> </a>使用 make 建立 slices</h2>
<p><code>make</code> 是 go 內建的方法之一，可以透過 <code>make</code> 來建立一個動態長度的陣列, slices. 語法是</p>
<blockquote>
<p>make( []T, len, cap)</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">    fmt.Println(a, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a)) <span class="comment">// output: [] 0 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多維陣列"><a class="header-anchor" href="#多維陣列"> </a>多維陣列</h2>
<p>這應該就不用多解釋了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">board := [][]<span class="type">string</span>&#123;</span><br><span class="line">		[]<span class="type">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">		[]<span class="type">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">		[]<span class="type">string</span>&#123;<span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;_&quot;</span>&#125;,</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="擴增"><a class="header-anchor" href="#擴增"> </a>擴增</h2>
<p>透過 <code>append( s []T, vs ...T)</code> 的方式增加 slices 內的資料筆數，slices 會根據需要長大</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a []<span class="type">int</span></span><br><span class="line">	a = <span class="built_in">append</span>(a, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(a, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="range"><a class="header-anchor" href="#range"> </a>range</h2>
<p>range 是一種 for loop slices 的用法，直接看程式碼比較快</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">		fmt.Println(i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="image-20191125222622273.png" alt="image-20191125222622273"></p>
<p>由圖片得知, <code>range</code> 會回傳目前所在的 index 和 value (複製本)</p>
<p>如果只想值，不想取得 index 時，第一個 index 可以用 <code>_</code> 來代替</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果只是想要取得 index 的話，那可直接省略 <code>, v</code> 的部分</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> pow &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h2>
<p>更多關於 slices 的資訊，可以閱讀<a href="https://blog.golang.org/go-slices-usage-and-internals">這篇文章</a></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Element as SharePoint WebPart</title>
    <url>/2019/11/27/angular-element-with-sharepoint/</url>
    <content><![CDATA[<p>Angular Element 的使用情境是什麼? 關於這個問題的答案有很多，在去年年初(2018/2) Angular 團隊的 Rob 在 歐洲一場 SharePoint 的活動內介紹了這一段， <a href="https://youtu.be/qdC1SVdLM3c">影片</a>，SharePoint 這產品在台灣除了一些大公司或是老公司中還可以看到外，基本上很難在聽到他的名字，可是在國外，SharePoint 還是有很多使用者的。而 WebPart 允許我們使用不同的技術 + sharepoint 提供的 sdk 來做畫面顯示及資料串接。</p>
<span id="more"></span>
<p>當然我們也可以使用 HTML + CSS + JavaScript 才做到這件事情，而有一群使用 SharePoint 的社群推出一套基於 <code>@microsoft/generator-sharepoint</code> 的 yeoman ，擴充出來的另外一個 SharePoint 套件，<code>@pnp/generator-spfx</code>，這一個產生器內支援了 Angular / Vue / React 等前端框架，裡用這些框架來開發 SharePoint 的 WebPart / extendsion / library 等，這一篇筆記就是來記錄如何使用 <code>@pnp/generator-spfx</code> 來建立第一個 Angular Element as WebPart in SharePoint</p>
<h1 id="環境要求"><a class="header-anchor" href="#環境要求"> </a>環境要求</h1>
<ul>
<li>node 版本: 10.x 版 。很重要， 目前  <code>@microsoft/generator-sharepoint</code> 還不支援 Node 12.x 版，會在 <code>node-sass</code> 的地方壞掉</li>
<li><code>yeoman</code> 套件</li>
<li><code>gulp</code> 工具</li>
<li><code>Angular CLI</code> 版本: 6、7、8，但這邊我們可以手動修改讓他支援 9 版</li>
</ul>
<h1 id="工具安裝"><a class="header-anchor" href="#工具安裝"> </a>工具安裝</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g yo gulp @pnp/generator-spfx</span><br></pre></td></tr></table></figure>
<p>這邊假設以經安裝過 <code>@angular/cli</code> 了</p>
<h1 id="建立專案"><a class="header-anchor" href="#建立專案"> </a>建立專案</h1>
<ol>
<li>
<p>建立一個空的資料夾並進入到該資料夾</p>
</li>
<li>
<p>執行 <code>yo</code> 指令</p>
<p><img src="image-20191127145057422.png" alt="image-20191127145057422"></p>
</li>
<li>
<p>選擇 <code>@pnp/spfx</code> 產生器</p>
</li>
<li>
<p>選擇要建立的範本，這邊先選取 <code>SharePoint Online only</code></p>
<p><img src="image-20191127145153250.png" alt="image-20191127145153250"></p>
</li>
<li>
<p>選擇要使用的前端框架</p>
<p><img src="image-20191127145248584.png" alt="image-20191127145248584"></p>
<ul>
<li>
<p>假設看到 Angular Elements 是 Disabled 狀態時，這是因為安裝的 <code>@angular/cli</code> 版本沒有落在 <code>@pnp/generator-spfx</code> 內所設定的 <code>@angular/cli</code> 版本，這裡需要手動去改一下程式，修改步驟如下</p>
</li>
<li>
<p>windows 版可以到 <code>  %UserProfile%\AppData\Roaming\npm\node_modules\@pnp\generator-spfx</code> 資料夾下，修改以下檔案</p>
<ul>
<li>
<p><code>app/promptConfig.js</code> ，約 第19 行的地方，新增 <code>||  ngVersion.version.startsWith('9')</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// support for Angular 6/7/8</span></span><br><span class="line">        <span class="keyword">if</span> (ngVersion.<span class="property">version</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;6&#x27;</span>) ||</span><br><span class="line">            ngVersion.<span class="property">version</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;7&#x27;</span>) ||</span><br><span class="line">            ngVersion.<span class="property">version</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;8&#x27;</span>) || </span><br><span class="line">            ngVersion.<span class="property">version</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;9&#x27;</span>)) &#123; </span><br><span class="line"></span><br><span class="line">            angularVersion = <span class="string">` (uses @angular/cli <span class="subst">$&#123; ngVersion.version&#125;</span>)`</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>generators/angularelements/index.js</code> 約第 83 行的地方，新增 <code>||  ngVersion.version.startsWith('9')</code>，記得要將第二段的條件用小括弧包起來</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ngVersion.<span class="property">version</span> !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">            (ngVersion.<span class="property">version</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;8&quot;</span>)|| </span><br><span class="line">            ngVersion.<span class="property">version</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;9&#x27;</span>))) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>完成後，重新執行步驟二，執行 <code>yo</code>，就可以看到 Angular Elements 被開啟了</p>
<p><img src="image-20191127150220003.png" alt="image-20191127150220003"></p>
</li>
</ul>
</li>
<li>
<p>選擇是否安裝其他 Library，預設 Enter 下一步</p>
<p><img src="image-20191127150329720.png" alt="image-20191127150329720"></p>
</li>
<li>
<p>選擇 TypeScript 版本，我本身是喜歡越新版的 TypeScirpt 越好</p>
<p><img src="image-20191127150407163.png" alt="image-20191127150407163"></p>
</li>
<li>
<p>其他檢查套件安裝，直接 Enter 下一步</p>
<p><img src="image-20191127150435725.png" alt="image-20191127150435725"></p>
</li>
<li>
<p>是否安裝 pipeline 設定，Enter 下一步</p>
<p><img src="image-20191127150524771.png" alt="image-20191127150524771"></p>
</li>
<li>
<p>開始設定專案相關資訊，就依畫面上提示的輸入即可</p>
<p><img src="image-20191127150631222.png" alt="image-20191127150631222"></p>
</li>
<li>
<p>進入 SharePoint 專案的設定階段，基本上都是依文字說明選擇自己要的設定，但當第二個問題 Enter 下一步後，會停住</p>
<p><img src="SNAGHTML474593cc.PNG" alt="img"></p>
<p>這邊理論上會問專案要建立在<strong>目前的資料夾</strong>呢，還是<strong>建立新的資料夾</strong>，不確定為什麼會空白，在多按一次 Enter 就會繼續往下走，而專案會建立在目前所在的資料夾內</p>
</li>
<li>
<p>選擇要建立的 component 類型，選擇 <code>WebPart</code> 後 Enter 下一步</p>
<p><img src="image-20191127151023184.png" alt="image-20191127151023184"></p>
</li>
<li>
<p>輸入 <code>WebPart</code> 的名稱等相關資訊</p>
<p><img src="image-20191127151153037.png" alt="image-20191127151153037"></p>
</li>
<li>
<p>接下來就是漫長的安裝過程</p>
<p><img src="image-20191127152652831.png" alt="image-20191127152652831"></p>
</li>
<li>
<p>完成後，可以檢視目前的資料夾，會有兩個資料夾，一個是 Angular 專案，一個是 SPFx 專案。</p>
</li>
<li>
<p>最後，如果從沒有安裝過開發憑證，可先進入 SPFx 專案資料夾內，執行 <code>gulp trust-dev-cert</code></p>
<p><img src="image-20191127153041838.png" alt="image-20191127153041838"></p>
</li>
<li>
<p>測試是否有安裝成功，需要執行以下兩個步驟</p>
<ol>
<li>
<p>進入 Angular  專案資料夾，執行 <code>npm run bundle</code> 指令</p>
</li>
<li>
<p>進入 SPFx  專案資料夾，執行 <code>gulp serve</code> ，看看是否能正常地啟動起測試用的網頁</p>
<p><img src="image-20191127153736116.png" alt="image-20191127153736116"></p>
<p><img src="image-20191127153750416.png" alt="image-20191127153750416"></p>
<p>能看到這些畫面，就代表環境及專案都建立成功了，就可以往下一階段進行了</p>
</li>
</ol>
</li>
</ol>
<h1 id="程式碼架構"><a class="header-anchor" href="#程式碼架構"> </a>程式碼架構</h1>
<h2 id="Angular-專案"><a class="header-anchor" href="#Angular-專案"> </a>Angular 專案</h2>
<p>採用 Angular Element 的方式來完成，所以在 <code>app.module.ts</code> 的地方可以看到註冊 custom Element  的程式碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NgModule</span>, <span class="title class_">Injector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createCustomElement &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/elements&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HelloWorldWebPartComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./hello-world-web-part/hello-world-web-part.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    <span class="title class_">HelloWorldWebPartComponent</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">BrowserModule</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [],</span><br><span class="line">  <span class="attr">entryComponents</span>: [<span class="title class_">HelloWorldWebPartComponent</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> injector: Injector</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngDoBootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="title function_">createCustomElement</span>(<span class="title class_">HelloWorldWebPartComponent</span>, &#123; <span class="attr">injector</span>: <span class="variable language_">this</span>.<span class="property">injector</span> &#125;);</span><br><span class="line">    customElements.<span class="title function_">define</span>(<span class="string">&#x27;app-hello-world-web-part&#x27;</span>, el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Component 本身的 Selector 只會在 Angular 內部環境生效，對外是吃 customElements 這邊定義的名稱</li>
<li>如果是 Angular CLI 的版本，第 15 行的 <code>entryComponents</code> 可以不用在寫了 (可移除)</li>
</ul>
<h2 id="SPFx-專案"><a class="header-anchor" href="#SPFx-專案"> </a>SPFx 專案</h2>
<p><code>src/webparts/helloWorld</code> 資料夾內是我們要看的部分</p>
<h3 id="webpart"><a class="header-anchor" href="#webpart"> </a>webpart</h3>
<ul>
<li><code>HelloWorldWebPart.ts</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;ng-element-webpart/dist/ngElementWebpart/bundle&quot;</span>; <span class="comment">// 引用 Angular 建置 bundle 出來的檔案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HelloWorldWebPart</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseClientSideWebPart</span>&lt;</span><br><span class="line">  <span class="title class_">IHelloWorldWebPartProps</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">domElement</span>.<span class="property">innerHTML</span> = <span class="string">`&lt;app-hello-world-web-part description=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.properties.description&#125;</span>&quot;&gt;&lt;/app-hello-world-web-part&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<ul>
<li><code>render</code> 是用來顯示 WebParts 畫面的方法</li>
</ul>
<p>另外一種寫法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HelloWorldWebPart</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseClientSideWebPart</span>&lt;</span><br><span class="line">  <span class="title class_">IHelloWorldWebPartProps</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">render</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ngElement = <span class="variable language_">this</span>.<span class="property">domElement</span>.<span class="title function_">getElementsByTagName</span>(</span><br><span class="line">      <span class="string">&#x27;app-hello-world-web-part&#x27;</span></span><br><span class="line">    )[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngElement) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">domElement</span>.<span class="title function_">removeChild</span>(ngElement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> baseEl = customElements.<span class="title function_">get</span>(<span class="string">&quot;app-hello-world-web-part&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> element = <span class="keyword">new</span> <span class="title function_">baseEl</span>();</span><br><span class="line">    element.<span class="property">description</span> = <span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">description</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">domElement</span>.<span class="title function_">appendChild</span>(element);</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>WebParts 屬性的設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">HelloWorldWebPart</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseClientSideWebPart</span>&lt;</span><br><span class="line">  <span class="title class_">IHelloWorldWebPartProps</span></span><br><span class="line">&gt; &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">getPropertyPaneConfiguration</span>(): <span class="title class_">IPropertyPaneConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">pages</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">header</span>: &#123;</span><br><span class="line">            <span class="attr">description</span>: strings.<span class="property">PropertyPaneDescription</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">groups</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">groupName</span>: strings.<span class="property">BasicGroupName</span>,</span><br><span class="line">              <span class="attr">groupFields</span>: [</span><br><span class="line">                <span class="title class_">PropertyPaneTextField</span>(<span class="string">&quot;description&quot;</span>, &#123;</span><br><span class="line">                  <span class="attr">label</span>: strings.<span class="property">DescriptionFieldLabel</span></span><br><span class="line">                &#125;)</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>這邊程式碼的寫法有支援 i18n 多國語系，要搭配 loc 資料夾內的檔案一起看，有興趣的可以去對應一下</li>
</ul>
<h3 id="manifest-json"><a class="header-anchor" href="#manifest-json"> </a>manifest.json</h3>
<ul>
<li>
<p><code>HelloWorldWebPart.manifest.json</code> WebPart 在 SharePoint  內要顯示的資訊設定檔</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;preconfiguredEntries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;groupId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5c03119e-3074-46fd-976b-c60198311f70&quot;</span><span class="punctuation">,</span> <span class="comment">// Other</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Other&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HelloWorld-2&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 顯示在 WebParts 清單內的名稱</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HelloWorld description&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;officeFabricIconFontName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Page&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HelloWorld-2&quot;</span> <span class="comment">// 屬性預設值</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://pnp.github.io/generator-spfx/howtos/angularelements/">PnP/generator-SPFx - Angular Elements</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>O365</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Element as SharePoint WebPart - Connect Data</title>
    <url>/2019/11/28/angular-element-with-sharepoint-part2/</url>
    <content><![CDATA[<p><a href="https://blog.kevinyang.net/2019/11/27/angular-element-with-sharepoint/">上一篇</a> 介紹了如何使用 Angular Element 建立 SharePoint 的 WebPart，但如果不串接資料，這功能就太弱了，所以這篇就來記錄一下，如何使用內建的方法來取得 SharePoint 或是 MS Graph 的資料</p>
<span id="more"></span>
<p>但由於使用 Graph API 需要在環境設定權限等，<s>這篇就不做這部分的範例 (也找不到相關的資料.QQ)</s> 找到方法，補充在後面</p>
<p>要連接 SharePoint 的資料，我們可以透過 <code>@pnp</code> 的套件來完成，<a href="https://pnp.github.io/pnpjs/documentation/getting-started/">官方說明文件</a></p>
<h1 id="安裝"><a class="header-anchor" href="#安裝"> </a>安裝</h1>
<p>可以使用的套件有這些，可以選擇安裝自己需要的部分即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @pnp/logging @pnp/common @pnp/odata @pnp/sp @pnp/graph --save</span><br></pre></td></tr></table></figure>
<h1 id="初始啟動"><a class="header-anchor" href="#初始啟動"> </a>初始啟動</h1>
<p>文件上有提供三種啟動方式，這裡我就舉其中一種方法，在 WebPart 的程式裡，加入這些程式碼</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="title function_">onInit</span>(): <span class="title class_">Promise</span>&lt;<span class="keyword">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">onInit</span>().<span class="title function_">then</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// other init code may be present</span></span><br><span class="line">    sp.<span class="title function_">setup</span>(&#123;</span><br><span class="line">      <span class="attr">spfxContext</span>: <span class="variable language_">this</span>.<span class="property">context</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="取-SharePoint-資料"><a class="header-anchor" href="#取-SharePoint-資料"> </a>取 SharePoint 資料</h1>
<p>在 Angular Element Component 單純使用 <code>@pnp/sp</code> 包裝好的 api，就可以很輕鬆地取得相關的資訊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sp &#125; <span class="keyword">from</span> <span class="string">&#x27;@pnp/sp&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">webLists</span> = sp.<span class="property">web</span>.<span class="property">lists</span>.<span class="title function_">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of webLists | async&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.Title &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更多 <code>@pnp/sp</code> Library API 可以閱讀<a href="https://pnp.github.io/pnpjs/sp/docs/">此文件</a></p>
<h1 id="測試"><a class="header-anchor" href="#測試"> </a>測試</h1>
<p>由於 <code>@pnp/sp</code> 內有包 <code>context</code> 這物件，而這物件只有在真正的 <code>SharePoint</code> 環境才會存在，那我們也不可能每次都要打包上傳到正式環境，基於這裡由。其實在當執行 <code>gulp serve</code> 時，除了本機會啟動一個測試用的環境外，也會試著遠端連線到 SharePoint Server (不確定這邊的原理是什麼)，但可以透過開啟 <code>https://&#123;sharepoint-site-name&#125;.sharepoint.com/_layouts/15/workbench.aspx</code> 來進行遠端測試</p>
<p><img src="image-20191128111304460.png" alt="image-20191128111304460"></p>
<p>可以看到正式環境擁有的 App，當然也可以找到我們正在寫的 WebPart，找到後加入到頁面上，就可以看到撈出來的資料有正常的顯示到畫面上了</p>
<p><img src="image-20191128111415289.png" alt="image-20191128111415289"></p>
<h1 id="使用-Graph-API"><a class="header-anchor" href="#使用-Graph-API"> </a>使用 Graph API</h1>
<h2 id="程式碼"><a class="header-anchor" href="#程式碼"> </a>程式碼</h2>
<p>呼叫 graph 的程式碼不困難，但一樣相依 <code>context</code> 這一個物件，所以如果 Angular Element  component 要使用，就要被傳進 component</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HelloWorldWebPartComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">AfterViewInit</span> &#123;  </span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">context</span>: <span class="title class_">WebPartContext</span>;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">context</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">msGraphClientFactory</span>.<span class="title function_">getClient</span>().<span class="title function_">then</span>((client): <span class="function"><span class="params">void</span> =&gt;</span> &#123;            </span><br><span class="line">            client.<span class="title function_">api</span>(<span class="string">&#x27;/me&#x27;</span>).<span class="title function_">get</span>(<span class="function">(<span class="params">error, user, rawResponse?: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">user</span> = user;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">   	 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 <code>WebPart</code>的部分就要將 context 傳進去</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="title function_">render</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ngElement = <span class="variable language_">this</span>.<span class="property">domElement</span>.<span class="title function_">getElementsByTagName</span>(</span><br><span class="line">      <span class="string">&quot;app-hello-world-web-part&quot;</span></span><br><span class="line">    )[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ngElement) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">domElement</span>.<span class="title function_">removeChild</span>(ngElement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> baseEl = customElements.<span class="title function_">get</span>(<span class="string">&quot;app-hello-world-web-part&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> element = <span class="keyword">new</span> <span class="title function_">baseEl</span>();</span><br><span class="line">    element.<span class="property">description</span> = <span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">description</span>;</span><br><span class="line">    element.<span class="property">context</span> = <span class="variable language_">this</span>.<span class="property">context</span>; <span class="comment">// 將 content 傳給 Angular Element</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">domElement</span>.<span class="title function_">appendChild</span>(element);    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="權限設定"><a class="header-anchor" href="#權限設定"> </a>權限設定</h2>
<p>當要使用 graphAPI 時，需要在 SPFx 專案下的 <code>config/package-solution.json</code> 內的 <code>solution</code> 區塊新增 <code>webApiPermissionRequests</code> 的權限請求</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;webApiPermissionRequests&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">     <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;resource&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Microsoft Graph&quot;</span><span class="punctuation">,</span></span><br><span class="line">       <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;User.ReadBasic.All&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
<p>為了要將權限請求限制在此 WebPart，需要多開啟一個設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;isDomainIsolated&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>當這些都設定完成後，就需要上傳到 SharePoint 做 API 權限請求核准的動作，先來打包一下，依序執行動作</p>
<ol>
<li>
<p>編譯打包 Angular Element，在 Angular 專案內執行 <code>npm run bundle</code></p>
</li>
<li>
<p>在 SPFx 專案下，執行以下指令</p>
<ol>
<li><code>gulp bundle --ship</code></li>
<li><code>gulp package-solution --ship</code> : 會產生一個 <code>.sppkg</code> 檔案在 <code>sharepoint/solution</code> 的資料夾下</li>
</ol>
</li>
<li>
<p>打開 SharePoint 網站，進入 <code>應用程式目錄網站</code> 的網站內進行 App 上船動作，如果沒有 <code>應用程式目錄網站</code>的，則須要先建立。建立方法如下</p>
<ol>
<li>
<p>進入 SharePoint 系統管理中心，網址: <code>https://&lt;org&gt;-admin.sharepoint.com</code></p>
</li>
<li>
<p>點選 <code>更多功能</code>，並開啟 <code>App</code></p>
<p><img src="image-20191128153715984.png" alt="image-20191128153715984"></p>
</li>
<li>
<p>進入 <code>應用程式目錄</code>，依上面文字建立一個應用程式目錄</p>
</li>
<li>
<p>建立完成後，稍後一下，應可以在【網站】-&gt; 【使用中網站】的清單中看到剛剛建立的應用程式目錄網站</p>
</li>
</ol>
</li>
<li>
<p>進入【應用程式目錄網站】</p>
</li>
<li>
<p>點選【SharePoint 適用的分散式應用程式】</p>
<p><img src="image-20191128154036607.png" alt="image-20191128154036607"></p>
</li>
<li>
<p>點選【新增】或【上傳】，將剛剛的 <code>ssppkg</code> 檔案上傳</p>
</li>
<li>
<p>上傳成功應可以看到這個畫面，點選【部屬】</p>
<p><img src="image-20191128154241885.png" alt="image-20191128154241885"></p>
</li>
<li>
<p>由於我們有請求授權，所以需要在到 <code>SharePoint 系統管理中心</code> 的 【API 管理】頁面去授權，這個選項如果一開始沒有任何的請求時是不會出現的，一旦有第一次請求時就會自己跑出來了</p>
<p><img src="image-20191128154526210.png" alt="image-20191128154526210"></p>
</li>
<li>
<p>點選等待核准的項目，進行核准</p>
<p><img src="image-20191128154602942.png" alt="image-20191128154602942"></p>
<p><img src="image-20191128154615500.png" alt="image-20191128154615500"></p>
</li>
<li>
<p>一旦核准成功後，我們就可以透過前面介紹的 <code>gulp server --nobrowser</code> 的方式到線上測試 webpart 的功能是否正常了</p>
</li>
</ol>
<h1 id="小-結"><a class="header-anchor" href="#小-結"> </a>小 結</h1>
<p>這段我其實卡很久，都卡在 context 為什麼都取不到，結果後來發現要使用遠端的測試環境，就可以正常地做到測試了。</p>
<p>另外還是想要解決的是使用 Graph API 這段，因為我們可以透過 MS Graph API 取到更多 O365 上有的資訊</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p><a href="https://docs.microsoft.com/en-us/sharepoint/dev/spfx/web-parts/get-started/connect-to-sharepoint">Connect your client-side web part to SharePoint (Hello World part 2)</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>O365</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] Go 語言學習筆記 - 語言 part 3</title>
    <url>/2019/11/29/golang-note-3/</url>
    <content><![CDATA[<p>繼續研究 Go，這次會涵蓋 <code>Map</code> 和 <code>Functions</code></p>
<span id="more"></span>
<h1 id="Map"><a class="header-anchor" href="#Map"> </a>Map</h1>
<p>Map 是一個 Key Value 形式的格式，當沒有給予初始值時，預設值為 <code>nil</code>，一樣可以使用 <code>make</code> 建立</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">if</span> m == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;is nil&quot;</span>) <span class="comment">// output: is nil</span></span><br><span class="line">	&#125;</span><br><span class="line">    m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    fmt.Println(m) <span class="comment">// output: map[]</span></span><br><span class="line">	</span><br><span class="line">    m[<span class="string">&quot;first&quot;</span>] = <span class="number">1</span></span><br><span class="line">    fmt.Println(m) <span class="comment">// output: map[first:1]</span></span><br><span class="line">    fmt.Println(m[<span class="string">&quot;first&quot;</span>]) <span class="comment">// output: 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>給予初始值的方式與 struct 雷同，但須要多給 key 值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	Lat, Long <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">string</span>]Vertex&#123;</span><br><span class="line">	<span class="string">&quot;Bell Labs&quot;</span>: Vertex&#123;</span><br><span class="line">		<span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;Google&quot;</span>: Vertex&#123;</span><br><span class="line">		<span class="number">37.42202</span>, <span class="number">-122.08408</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以這樣</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">string</span>]Vertex&#123;</span><br><span class="line">	<span class="string">&quot;Bell Labs&quot;</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</span><br><span class="line">	<span class="string">&quot;Google&quot;</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 Map 資料的方式也很直覺，直接根據 Key 值修改資料即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">	m[<span class="string">&quot;Answer&quot;</span>] = <span class="number">42</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;The value:&quot;</span>, m[<span class="string">&quot;Answer&quot;</span>])</span><br><span class="line"></span><br><span class="line">	m[<span class="string">&quot;Answer&quot;</span>] = <span class="number">48</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;The value:&quot;</span>, m[<span class="string">&quot;Answer&quot;</span>])</span><br><span class="line"></span><br><span class="line">	<span class="built_in">delete</span>(m, <span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;The value:&quot;</span>, m[<span class="string">&quot;Answer&quot;</span>])</span><br><span class="line"></span><br><span class="line">    v, ok := m[<span class="string">&quot;Answer&quot;</span>] <span class="comment">// 第二個回傳值: 判斷 key 值是否存在</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;The value:&quot;</span>, v, <span class="string">&quot;Present?&quot;</span>, ok) <span class="comment">// output: 0 Present?: false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Functions"><a class="header-anchor" href="#Functions"> </a>Functions</h1>
<p>Go  裡面的 Function 也是一種型別，表示我們可以將 Function 傳入一個 Function 或是回傳一個 Function。</p>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">(fn <span class="keyword">func</span>(<span class="type">float64</span>, <span class="type">float64</span>)</span></span> <span class="type">float64</span>) <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	hypot := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> math.Sqrt(x*x + y*y)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(hypot(<span class="number">5</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line">	fmt.Println(compute(hypot))</span><br><span class="line">	fmt.Println(compute(math.Pow))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Function Closures 好像也是基本了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		sum += x</span><br><span class="line">		<span class="keyword">return</span> sum</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	pos := adder()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(</span><br><span class="line">            pos(i), <span class="comment">// output: 1 3 6 10 ...			</span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>到這篇筆記為止，應該都算是 Go  的基礎篇，接下來的筆記都算是比較進階的內容。期待進入 Go 的進階世界</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] Go 語言學習筆記 Part 4- Methods</title>
    <url>/2019/12/02/go-note-4-method/</url>
    <content><![CDATA[<p>Go 的 Methods 功能很強， 但也很多要注意的地方，就仔細地跟著官網的文件學習了。</p>
<span id="more"></span>
<h1 id="基本"><a class="header-anchor" href="#基本"> </a>基本</h1>
<p>Go  本身沒有並沒有 Class 語法, 但我們卻可以針對型別去擴充功能。Method 也是一種 function 但有特定寫法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v T)</span></span> &lt;<span class="function"><span class="keyword">func</span> <span class="title">name</span>&gt; &lt;<span class="title">return</span> <span class="title">type</span>&gt;</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 範例</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>與一般 function  差異在於 <code>function name</code> 的前面指定作用的型別 <code>(v Type)</code>, 這樣子定義完成後, 我們就可以直接使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(v.Abs()) <span class="comment">// 使用 Methods</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一開始就有提到 Method 也是 function, 那為什麼要刻意在區分出來呢, 這個在後面會提到, 到就這裡先用標準 function 寫出同樣功能吧</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Abs</span><span class="params">(v Vertax)</span></span> <span class="type">float64</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(Abs(v))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然 Method 是可以在型別上做擴充功能, 原生型別是否可行呢?  答案是不行的</p>
<p><img src="image-20191202104204601.png" alt="image-20191202104204601"></p>
<p>Method 只能宣告在 local type 上, 所以當要在處理類似的動作, 就必須做 type 宣告</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span> <span class="comment">// 給予 alias type</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := MyFloat(-math.Sqrt2)</span><br><span class="line">	fmt.Println(f.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Pointer"><a class="header-anchor" href="#Pointer"> </a>Pointer</h1>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">	v.X = v.X * f</span><br><span class="line">	v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	v.Scale(<span class="number">10</span>)</span><br><span class="line">	fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>16 行的 method 使用 <code>*</code> 來描述 <code>Scale</code> 是定義在 <code>*T</code> 上, 表示這個 method  的操作會直接反應回操作實體上</p>
</li>
<li>
<p>當第 23 執行時, v 裡面的 x 會這樣子變動</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">v.Scale(<span class="number">10</span>) <span class="comment">// &#123;30 40&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">	v.X = v.X * f  <span class="comment">// v.X = 3 * 10</span></span><br><span class="line">	v.Y = v.Y * f  <span class="comment">// v.Y = 4 * 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>接下來的第 24 行的執行結果就是  $$\sqrt{30 \times 30 + 40 \times 40} = 50$$</p>
</li>
</ul>
<p>回到上一段提到的 Methods 也是 functions, 但這兩者對於 Pointers 的處理方式是一樣的嗎? 先用 function 的方式寫出一樣的功能</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scale</span><span class="params">(v *Vertex, f <span class="type">float64</span>)</span></span> &#123;</span><br><span class="line">	v.X = v.X * f</span><br><span class="line">	v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	Scale(&amp;v, <span class="number">10</span>)</span><br><span class="line">	fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到這邊的寫法是一樣的, 但當將 function 裡的 <code>*</code> 給移除後, 就會發生錯誤訊息</p>
<p><img src="image-20191202111227821.png" alt="image-20191202111227821"></p>
<p>但 methods 是否會有同樣的問題呢?</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Scale(f <span class="type">float64</span>) &#123;</span><br><span class="line">	v.X = v.X * f</span><br><span class="line">	v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	v.Scale(<span class="number">10</span>)</span><br><span class="line">    fmt.Println(v)</span><br><span class="line">	fmt.Println(v.Abs()) <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>雖然將第 5 行的 <code>*</code> 給移除掉是不會壞掉, 但是第 13 行的執行結果就完全不一樣了</li>
<li>來看一下執行的順序
<ol>
<li>line 12 的 Scale 的是取得 Value Receiver 的副本, 所以任何改變都不會影響本體</li>
<li>line 13 印出來的結果還是 {3 4}</li>
<li>當然 line 14  的結果是 5</li>
<li>如果要將該 method 改成與原本的結果一樣, 就必須將 v 回傳</li>
</ol>
</li>
<li>所以加上加 Pointer (<code>*</code>) 雖然 method 都不會壞掉, 但意義上是全然不同的</li>
</ul>
<p>換另外一個方向來看, 當使用的 Value 本體是否為 Pointer 呢? function 一定會壞掉, function 本身就是那麼嚴謹</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(v.Abs())</span><br><span class="line">    p := &amp;v</span><br><span class="line">    fmt.Println(p.Abs()) <span class="comment">// 等同 (p*).Abs()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="選擇-value-or-pointer-Receiver"><a class="header-anchor" href="#選擇-value-or-pointer-Receiver"> </a>選擇  value or pointer Receiver</h2>
<p>簡單說, 選擇 pointer receiver 的理由就是為了快, 因為不會多產生一個副本, 針對越大的 struct 效果越明顯, 另外一個決定點, 是否要共用資料 (side effect or not) 如果不想要, 就使用 value receiver, 反之, 使用 pointer receiver</p>
<p>一般來說為了維護一致性, 並不會混和 value 和 pointer 一起使用</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>[Go] Go 語言學習筆記 Part 5 - interface</title>
    <url>/2019/12/09/go-note-5-interface/</url>
    <content><![CDATA[<p>繼續上次的 Method, Go 內的 interface  也是很重要的一個環節, 尤其跟 method 間的關係更是緊密</p>
<span id="more"></span>
<h1 id="基本宣告"><a class="header-anchor" href="#基本宣告"> </a>基本宣告</h1>
<p>Interce 是用來定義 method signatures, 換句話說, 如果是這個型別(interface) 的值, 就會有所規範的 method 可以使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Abser <span class="keyword">interface</span> &#123;</span><br><span class="line">	Abs() <span class="type">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣的描述跟原本常見的 interface 會有些差異, 主要原因還是因為 Go 沒有 class 造成的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a Abser</span><br><span class="line">	f := MyFloat(-math.Sqrt2)</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">	a = f  <span class="comment">// a MyFloat implements Abser, see line 17~24</span></span><br><span class="line">	a = &amp;v <span class="comment">// a *Vertex implements Abser, See line 26~32</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// In the following line, v is a Vertex (not *Vertex)</span></span><br><span class="line">	<span class="comment">// and does NOT implement Abser.</span></span><br><span class="line">	a = v <span class="comment">// 這行會壞掉</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(a.Abs())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在上述程式碼提到 line 11 行會壞掉, 主要原因是 Abs() 方法只有在 struct Vertex 上面實做 (Pointer type), 而沒有再 value type 上面實做。這也是為什麼會發生錯誤的原因</li>
</ul>
<h2 id="nil"><a class="header-anchor" href="#nil"> </a>nil</h2>
<p>interface 當被指定時, 預設值是 <code>nil</code> , 而所宣告的 method  還是可以被呼叫, 只是是透過 <code>nil receiver</code> 罷了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">	M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">	S <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> M() &#123;</span><br><span class="line">	<span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;&lt;nil&gt;&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i I</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> t *T</span><br><span class="line">	i = t <span class="comment">// t 此時為 nil</span></span><br><span class="line">	describe(i) <span class="comment">// output (&lt;nil&gt;, *main.T)</span></span><br><span class="line">	i.M() <span class="comment">// &lt;nil&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但如果只有單純的宣告卻沒有指定值時 (如 line 22), 就會出現以下的錯誤訊息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">	M()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i I</span><br><span class="line">    describe(i) <span class="comment">// output: (&lt;nil&gt;, &lt;nil&gt;)</span></span><br><span class="line">    i.M() <span class="comment">// error: panic: runtime error: invalid memory address or nil pointer dereference</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Type-switches"><a class="header-anchor" href="#Type-switches"> </a>Type switches</h1>
<p>在介紹 Type switches 之前, 要先了解兩個東西, 1. empty interface, 2. type assertions</p>
<h2 id="Empty-interface"><a class="header-anchor" href="#Empty-interface"> </a>Empty interface</h2>
<p>empty interface 就字面上意思, 是沒有宣告任何 method 的 interface, 在 go 裡面會這樣子表示</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// interface&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    describe(i) <span class="comment">// output: &lt;nil&gt;, &lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line">	i = <span class="number">42</span></span><br><span class="line">    describe(i) <span class="comment">// output: 42, int</span></span><br><span class="line"></span><br><span class="line">	i = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    describe(i) <span class="comment">// output: hello,string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">describe</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;(%v, %T)\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過上面的範例, 得知我們可以透過 empty interface 來取得變數的值及型別兩種資訊</p>
<h2 id="Type-assertions"><a class="header-anchor" href="#Type-assertions"> </a>Type assertions</h2>
<p>既然知道型別, 那是否可以直接做條件判斷了, 在 go 裡面是可以做到的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">s := i.(<span class="type">string</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line">s, ok := i.(<span class="type">string</span>) </span><br><span class="line">fmt.Println(s, ok) <span class="comment">// &quot;hello&quot;, true</span></span><br><span class="line"></span><br><span class="line">f, ok := i.(<span class="type">float64</span>) <span class="comment">// f: 0, ok:false</span></span><br><span class="line">fmt.Println(f, ok)</span><br><span class="line"></span><br><span class="line">f = i.(<span class="type">float64</span>) <span class="comment">// 噴錯</span></span><br><span class="line">fmt.Println(f)</span><br></pre></td></tr></table></figure>
<ul>
<li>如果 i 的值是 <code>string</code> 型別的話, s 就會等於 i 的值</li>
<li>但如果不是, 就會噴錯。但這樣子就太蠢了, 所以 go 提供了第二個值可以接, 當這一個有接起來, 效果就等於 try catch. 執行時就不會噴錯了</li>
</ul>
<h2 id="switches"><a class="header-anchor" href="#switches"> </a>switches</h2>
<p>透過前面兩地的特性, 再搭配 switch 就可以做到型別的判斷了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Twice %v is %v\n&quot;</span>, v, v*<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%q is %v bytes long\n&quot;</span>, v, <span class="built_in">len</span>(v))</span><br><span class="line">	<span class="keyword">case</span> Vertex:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Vertex %v&quot;</span>, v)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;I don&#x27;t know about type %T!\n&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	do(<span class="number">21</span>)</span><br><span class="line">	do(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">	do(<span class="literal">true</span>)</span><br><span class="line">	do(Vertex&#123;<span class="string">&quot;Go&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>i.(type)</code> 只能搭配 switch 使用</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://tour.golang.org/methods/9">interface 文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] 學習使用 CleanArchitecture 開發 - 筆記 1</title>
    <url>/2019/12/27/asp-net-CleanArchitecture-note1/</url>
    <content><![CDATA[<p>最近 <code>CleanArchitecture</code> 這名詞終於出現在我的雷達裡了，我知道這東西已經存在很久了，所以現在趕快將這一塊的基礎能力補上。好加在地是已經有好心人整理出一個 <code>CleanArchitecture</code> 的專案樣板，只要從中學習使用，應可學習到一些基本知識(應該)</p>
<span id="more"></span>
<h1 id="工具"><a class="header-anchor" href="#工具"> </a>工具</h1>
<p>作者 <code>Jason Taylor</code> 建立一個 dotnet 用的專案範本，能讓我們快速的產生 <code>CleanArchitecture</code> ，Template 的 GitHub 網址在最後的參考資料有提供，但首先我們需要先將這一個範本工具安裝起來</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet new --install Clean.Architecture.Solution.Template</span><br></pre></td></tr></table></figure>
<p>安裝完工具後，就可以來使用了</p>
<ol>
<li>
<p>建立一個專案用的資料夾，並進入該資料夾後，執行下列指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dotnet new ca-sln</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>執行完這個指令後，就會產生以下的資料夾架構</p>
<p><img src="image-20191227110230805.png" alt="image-20191227110230805"></p>
</li>
</ol>
<h1 id="專案架構分析"><a class="header-anchor" href="#專案架構分析"> </a>專案架構分析</h1>
<h2 id="Domain"><a class="header-anchor" href="#Domain"> </a>Domain</h2>
<p>跟 Domain 相關的東西都會放在這邊，包含 <code>entities</code>、<code>enums</code>、<code>exceptions</code>、<code>interfaces</code>、<code>types</code>，這部分需要將自己的 DDD 的知識補起來。</p>
<p><img src="image-20191227112748862.png" alt="image-20191227112748862"></p>
<h3 id="Common"><a class="header-anchor" href="#Common"> </a>Common</h3>
<ul>
<li><code>AuditableEntity</code> 內包含建立與更新的時間及異動人員資訊，<code>Entities</code> 資料夾內的 <code>Entity</code> 都有繼承這一個類別</li>
<li><code>ValueObject</code>: 這一個是 DDD 內的一個概念，更多的資訊可以<a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/implement-value-objects">在此</a>找到，紀錄一下幾個特性
<ul>
<li>無法被識別 (No identity)</li>
<li>Immutable</li>
</ul>
</li>
</ul>
<h3 id="Exceptions"><a class="header-anchor" href="#Exceptions"> </a>Exceptions</h3>
<p>自訂 Exceptions 類別，這方法在後續 logging 會有很幫助，也可以在處理 Exception 時減少重複程式碼的撰寫</p>
<h2 id="Application"><a class="header-anchor" href="#Application"> </a>Application</h2>
<p>這一個資料夾內會撰寫整個應用程式的商業邏輯，只會相依在 domain layer 之上。在這一個階段也會定義一些需要在外部實做的服務介面，這表示 service interface 會在 <code>Application</code> 資料夾內定義，服務程式碼實做會在 <code>Infrasturacuture</code> 完成</p>
<p><img src="image-20191227114724238.png" alt="image-20191227114724238"></p>
<p>而這一個專案架構，使用 Mediator (<code>MediatR</code> library) + <code>CQRS</code> 的模式，所以可以看到 Commands/Queries 的資料夾分類，而在 Coammnds 的內配合 <code>MediatR</code> 訊息傳遞的模式，會有 request 和 handler 的角色</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">CreateTodoListCommand</span> : <span class="title">IRequest</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreateTodoListCommandHandler</span> : <span class="title">IRequestHandler</span>&lt;<span class="title">CreateTodoListCommand</span>, <span class="title">int</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> IApplicationDbContext _context;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">CreateTodoListCommandHandler</span>(<span class="params">IApplicationDbContext context</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                _context = context;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">int</span>&gt; <span class="title">Handle</span>(<span class="params">CreateTodoListCommand request, CancellationToken cancellationToken</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> entity = <span class="keyword">new</span> TodoList();</span><br><span class="line"></span><br><span class="line">                entity.Title = request.Title;</span><br><span class="line"></span><br><span class="line">                _context.TodoLists.Add(entity);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> _context.SaveChangesAsync(cancellationToken);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> entity.Id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>更多關於 <code>MediatR</code>  和 <code>CQRS</code> 的架構資訊可以在參考資料處找到</p>
<h2 id="Infrasturcture"><a class="header-anchor" href="#Infrasturcture"> </a>Infrasturcture</h2>
<p>這一層是存取外部資源的部分，包含資料庫、檔案系統、其他的 API 服務等. 當然這些服務的介面都會在 <code>Application</code> 層定義</p>
<h2 id="WebUI"><a class="header-anchor" href="#WebUI"> </a>WebUI</h2>
<p>對外的顯示介面，相依 <code>Applicatin</code> 及 <code>Infrasturcture</code>。由於整個專案架構是使用 <code>Mediator </code> 模式，所以在 API Controller 的地方，程式碼就會變得很單純，只要決定執行哪一個 command 即可</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TodoListsController</span> : <span class="title">ApiController</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;TodosVm&gt;&gt; Get()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> Mediator.Send(<span class="keyword">new</span> GetTodosQuery());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;FileResult&gt; <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> vm = <span class="keyword">await</span> Mediator.Send(<span class="keyword">new</span> ExportTodosQuery &#123; ListId = id &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> File(vm.Content, vm.ContentType, vm.FileName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpPost</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&lt;<span class="built_in">long</span>&gt;&gt; Create(CreateTodoListCommand command)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> Mediator.Send(command);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpPut(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">Update</span>(<span class="params"><span class="built_in">long</span> id, UpdateTodoListCommand command</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (id != command.Id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> BadRequest();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> Mediator.Send(command);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> NoContent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpDelete(<span class="string">&quot;&#123;id&#125;&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> Mediator.Send(<span class="keyword">new</span> DeleteTodoListCommand &#123; Id = id &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> NoContent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="測試"><a class="header-anchor" href="#測試"> </a>測試</h1>
<p>除了 <code>src</code> 資料夾下的基本架構外，在 <code>tests</code> 裡也有相對應各專案的測試專案</p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>專案架構看似簡單，但藏在背後的原理卻很深奧的，有很多理論是需要深入學習的。希望能透過實做的方式，讓自己能理解相關的理論原理</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://www.youtube.com/watch?v=RQve_bD8X_M">Clean Architecture with ASP.NET Core</a></li>
<li><a href="https://github.com/JasonGT/CleanArchitecture">Clean Architecture Solution Template Repo</a></li>
<li><a href="https://dotnetcoretutorials.com/2019/04/30/the-mediator-pattern-in-net-core-part-1-whats-a-mediator/">Mediator Pattern</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/">CQRS</a></li>
<li><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">The Clean Architecture</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] Angular in Clean Architecture - 學習筆記</title>
    <url>/2019/12/30/angular-in-cleanArchitecture/</url>
    <content><![CDATA[<p>繼上一篇 <a href="https://blog.kevinyang.net/2019/12/27/asp-net-CleanArchitecture-note1/">學習使用 CleanArchitecture 開發 -  筆記 1</a>，依習慣先從畫面往底層看回去，而這專案範本使用 Angular 作為前端開發框架，那就來看看裡面有哪些東西或是技巧是可以偷學的</p>
<span id="more"></span>
<h1 id="學習筆記"><a class="header-anchor" href="#學習筆記"> </a>學習筆記</h1>
<p>##authorize service</p>
<p>這一專案的 <code>authorize service</code> 使用 <code>oidc-client</code> 來和後端 .NET Core 的 <code>IdentityServer</code> 做溝通。這一個 Library<code>oidc-client</code> 支援 OpenID Connect (OIDC)  和 OAuth2 協定的 JS library，程式碼的位置 <code>src/api-authoriztion/authorize.service.ts</code></p>
<ul>
<li>
<p>要建立一個 <code>UserManager</code> ，需要一個 Configuration</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="title class_">ApplicationPaths</span>.<span class="property">ApiAuthorizationClientConfigurationUrl</span>);</span><br><span class="line"><span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Could not load settings for &#x27;<span class="subst">$&#123;ApplicationName&#125;</span>&#x27;`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">settings</span>: <span class="built_in">any</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">settings.<span class="property">automaticSilentRenew</span> = <span class="literal">true</span>;</span><br><span class="line">settings.<span class="property">includeIdTokenInSilentRenew</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">userManager</span> = <span class="keyword">new</span> <span class="title class_">UserManager</span>(settings);</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>line 1: 跟後端要 Configuration 設定檔，回傳結果如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">authority<span class="punctuation">:</span> <span class="string">&quot;https://localhost:44312&quot;</span><span class="punctuation">,</span></span><br><span class="line">client_id<span class="punctuation">:</span> <span class="string">&quot;newMember.WebUI&quot;</span><span class="punctuation">,</span></span><br><span class="line">redirect_uri<span class="punctuation">:</span> <span class="string">&quot;https://localhost:44312/authentication/login-callback&quot;</span><span class="punctuation">,</span></span><br><span class="line">post_logout_redirect_uri<span class="punctuation">:</span> <span class="string">&quot;https://localhost:44312/authentication/logout-callback&quot;</span><span class="punctuation">,</span></span><br><span class="line">response_type<span class="punctuation">:</span> <span class="string">&quot;code&quot;</span><span class="punctuation">,</span></span><br><span class="line">scope<span class="punctuation">:</span> <span class="string">&quot;newMember.WebUIAPI openid profile&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>line 8:  初始化 <code>UserManager</code></p>
</li>
</ol>
</li>
<li>
<p><code>UserManager</code> 有許多 events 可以掛 callback (<a href="https://github.com/IdentityModel/oidc-client-js/wiki#events">API</a>)，而這邊是針對 <code>userSignedOut</code> 的部分做了一些處理</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">userManager</span>.<span class="property">events</span>.<span class="title function_">addUserSignedOut</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userManager</span>.<span class="title function_">removeUser</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userSubject</span>.<span class="title function_">next</span>(<span class="literal">null</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>關於使用者的登入及註冊都交給後端的 <code>ASP.NET Core Idenetity</code> 去處理了 (這是另外一個大坑要填)</p>
</li>
</ul>
<h2 id="LoginComponent"><a class="header-anchor" href="#LoginComponent"> </a>LoginComponent</h2>
<p><code>LoginComponent</code> 的目的並不是用來顯示而是負責處理相對應的行為，例如登入應該要顯示後端的登入畫面等，而因為網址會有分前端管理的跟後端管理的區別，而 Angular 內建的 Router 並沒有辦法直接導覽到非 Angular 網址的地方，所以這裡的處理方式為</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">redirectToApiAuthorizationPath</span>(<span class="params">apiAuthorizationPath: <span class="built_in">string</span></span>) &#123;    </span><br><span class="line">  <span class="keyword">const</span> redirectUrl = <span class="string">`<span class="subst">$&#123;<span class="variable language_">window</span>.location.origin&#125;</span><span class="subst">$&#123;apiAuthorizationPath&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="title function_">replace</span>(redirectUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡使用 <code>window.location.replace</code> 的目的是為了確保使用者按下返回鍵是回到正確的位置而不是 <code>loginComponent</code> 的對應網址</p>
<h2 id="LogoutComponent"><a class="header-anchor" href="#LogoutComponent"> </a>LogoutComponent</h2>
<ul>
<li>
<p>透過 <code>[state]='&#123; local: true &#125;'</code>來傳遞額外的狀態，而在程式碼內則需要從 <code>window.history.state</code> 中取得</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!!<span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">state</span>.<span class="property">local</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如果想要學習如何在後端網頁跟 Angular 間做網頁切換的， 是可以從 <code>LoginComponent</code> 和 <code>LogoutComponent</code> 學習，因為這兩個 Component 本身不做任何顯示，所有的動作在 <code>ngOnInit</code> 就被執行了</p>
<h1 id="API-Service"><a class="header-anchor" href="#API-Service"> </a>API Service</h1>
<p>這專案範本的 API Service 是由 <code>NSwag toolchain</code> 根據 Swagger 的 API JSON 自動產生的，這部分就看個人喜好了，但我個人的偏好是喜歡自己寫，至少程式碼看起來會乾淨很多</p>
<p>關於 NSwag 的資訊，可以 <a href="https://github.com/RicoSuter/NSwag">參考此網站</a></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/IdentityModel/oidc-client-js">oidc-client</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[C#] 8.0 新功能 - 索引與範圍</title>
    <url>/2020/01/16/csharp-8-index-range/</url>
    <content><![CDATA[<p>C# 8 提供了許多新語法，很多新語法可以讓我們的程式碼閱讀性提高，但前提是我們要先了解有那些新功能</p>
<span id="more"></span>
<p>這裡我先挑出一個我最近才用到的好用功能，<strong>陣列索引</strong></p>
<h1 id="索引"><a class="header-anchor" href="#索引"> </a>索引</h1>
<p>早期在操作陣列取值時，使用 <code>Linq</code> 應該算是標準解，但假設只是要取陣列最後的幾個項目，使用 <code>Linq</code> 似乎又太囉嗦</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">csharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> urls = <span class="string">&quot;https://blog.kevinyang.net/images/4550568.jpg&quot;</span>.Split(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> imagesFile = urls.Last();</span><br><span class="line">            <span class="keyword">var</span> folderName = urls.SkipLast(<span class="number">1</span>).LastOrDefault();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Image FileName: &#123;0&#125;&quot;</span>, imagesFile);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Folder Name: &#123;0&#125;&quot;</span>, folderName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="image-20200116091222377.png" alt="image-20200116091222377"></p>
<p>如果是使用 C# 8.0 的新語法，就可以這樣子寫</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">csharp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> urls = <span class="string">&quot;https://blog.kevinyang.net/images/4550568.jpg&quot;</span>.Split(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> imagesFile = urls[^<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> folderName = urls[^<span class="number">2</span>];</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Image FileName: &#123;0&#125;&quot;</span>, imagesFile);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Folder Name: &#123;0&#125;&quot;</span>, folderName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="說明"><a class="header-anchor" href="#說明"> </a>說明</h2>
<p>新語法，當使用 <code>^</code> ，索引計算起點就會從最後面開始起算，圖解如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> words = <span class="keyword">new</span> <span class="built_in">string</span>[]</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">// index from start    index from end</span></span><br><span class="line">    <span class="string">&quot;The&quot;</span>,      <span class="comment">// 0                   ^9</span></span><br><span class="line">    <span class="string">&quot;quick&quot;</span>,    <span class="comment">// 1                   ^8</span></span><br><span class="line">    <span class="string">&quot;brown&quot;</span>,    <span class="comment">// 2                   ^7</span></span><br><span class="line">    <span class="string">&quot;fox&quot;</span>,      <span class="comment">// 3                   ^6</span></span><br><span class="line">    <span class="string">&quot;jumped&quot;</span>,   <span class="comment">// 4                   ^5</span></span><br><span class="line">    <span class="string">&quot;over&quot;</span>,     <span class="comment">// 5                   ^4</span></span><br><span class="line">    <span class="string">&quot;the&quot;</span>,      <span class="comment">// 6                   ^3</span></span><br><span class="line">    <span class="string">&quot;lazy&quot;</span>,     <span class="comment">// 7                   ^2</span></span><br><span class="line">    <span class="string">&quot;dog&quot;</span>       <span class="comment">// 8                   ^1</span></span><br><span class="line">&#125;;              <span class="comment">// 9 (or words.Length) ^0</span></span><br></pre></td></tr></table></figure>
<h1 id="範圍"><a class="header-anchor" href="#範圍"> </a>範圍</h1>
<p>既然知道如何使用索引表示，接下來是另外一個新功能，<code>範圍</code> 。這一個功能在某些語言已經存在一段時間了</p>
<p><strong>語法表示</strong></p>
<blockquote>
<p>Array[StartIndex … EndIndex(不包含 End Index 的值)]</p>
</blockquote>
<p><strong>範例</strong> (延續上面的 <code>words</code> 陣列)</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lazyDogs = words[^<span class="number">2.</span>.^<span class="number">0</span>]; <span class="comment">// [&quot;lazy&quot;, &quot;dog&quot;]</span></span><br><span class="line"><span class="keyword">var</span> firstThreeWords = words[<span class="number">0.</span><span class="number">.3</span>] <span class="comment">// [&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure>
<p>當不指定開始或結束索引時，就會是為最頭至最尾</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allwords = words[..]; <span class="comment">// [&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumped&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;]</span></span><br><span class="line"><span class="keyword">var</span> firstThreeWords = words[.<span class="number">.3</span>];  <span class="comment">// [&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;]</span></span><br><span class="line"><span class="keyword">var</span> skipFirstThree = words[<span class="number">3.</span>.]; <span class="comment">// [&quot;fox&quot;, &quot;jumped&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;]</span></span><br></pre></td></tr></table></figure>
<p>當然也可以先決定 <code>Range</code> 型別後，在放到陣列中</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> range0 = <span class="number">1.</span><span class="number">.2</span>;</span><br><span class="line"><span class="keyword">var</span> range1 = <span class="keyword">new</span> Range(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1..2</span></span><br><span class="line"><span class="keyword">var</span> range2 = Range.StartAt(<span class="number">3</span>); <span class="comment">// 3..</span></span><br><span class="line"><span class="keyword">var</span> range3 = Range.EndAt(<span class="number">3</span>); <span class="comment">// ..3</span></span><br><span class="line">Console.WriteLine(String.Join(<span class="string">&#x27;,&#x27;</span>, words[range0])); <span class="comment">// [&quot;quick&quot;]</span></span><br><span class="line">Console.WriteLine(String.Join(<span class="string">&#x27;,&#x27;</span>, words[range1])); <span class="comment">// [&quot;quick&quot;]</span></span><br><span class="line">Console.WriteLine(String.Join(<span class="string">&#x27;,&#x27;</span>, words[range2])); <span class="comment">// [&quot;fox&quot;, &quot;jumped&quot;, &quot;over&quot;, &quot;the&quot;, &quot;lazy&quot;, &quot;dog&quot;]</span></span><br><span class="line">Console.WriteLine(String.Join(<span class="string">&#x27;,&#x27;</span>, words[range3]));  <span class="comment">// [&quot;The&quot;, &quot;quick&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure>
<p>以下型別都有支援索引和範圍的新功能</p>
<ul>
<li>陣列</li>
<li>字串</li>
<li>Span<T></li>
<li>ReadOnlySpan<T></li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/whats-new/csharp-8#indices-and-ranges">C# 8.0 索引和範圍</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/csharp/tutorials/ranges-indexes#type-support-for-indices-and-ranges">索引和範圍的類型支援</a></li>
</ul>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Scully: Angular + JAMStack</title>
    <url>/2020/01/18/angular-scully-jam/</url>
    <content><![CDATA[<p>JAMStack 這名詞出來有一段時間了，JavaScript+API+Markdown = Static Site Generator，從早期的 Hexo ，到後起新秀 Gatsby、Gridsome 等，但 Angular 卻一直都沒有對應的框架，直到去年年底(2019/12)，由 Aaron Frost、Sander Elias、Jorge Cano、Anderes Villanueva 等人開發出 Scully 後，Angular 正式有了第一套靜態網站產生器了</p>
<span id="more"></span>
<h1 id="需求"><a class="header-anchor" href="#需求"> </a>需求</h1>
<p>必須是 Angular 9 的專案</p>
<h1 id="起手式"><a class="header-anchor" href="#起手式"> </a>起手式</h1>
<ul>
<li>
<p>新的 Angular 專案</p>
</li>
<li>
<p>加入 <code>scullyio</code>，<code>ng add @scullyio/init</code></p>
<ul>
<li><code>package.json</code> 新增兩行 scripts 用來執行 <code>scully</code> 指令</li>
<li><code>app.component.ts</code> 注入 <code>IdleMonitorService</code></li>
<li>新增 <code>scully.config.js</code> 檔案</li>
<li><code>polyfills.ts</code>，加入所需的 polyfill</li>
</ul>
</li>
<li>
<p>第一次啟動</p>
<ul>
<li><strong>注意事項</strong>: Angular 專案內至少要有一個路由設定，不然目前版本的 scully 會壞掉</li>
</ul>
<ol>
<li>
<p><code>ng build</code></p>
</li>
<li>
<p><code>npm run scully</code></p>
<p><img src="image-20200118110058547.png" alt="image-20200118110058547"></p>
</li>
</ol>
</li>
</ul>
<h1 id="使用範例-1"><a class="header-anchor" href="#使用範例-1"> </a>使用範例 1</h1>
<p>網址有</p>
<ul>
<li><code>about</code></li>
<li><code>user/</code></li>
<li><code>user/:id</code></li>
</ul>
<p>當建立完上列的 component 重新執行 build 和 scully 後，在 dist/static 的資料夾下應可看到這些內容</p>
<p><img src="image-20200118111514190.png" alt="image-20200118111514190"></p>
<p>但當執行到 <code>user/1</code> 時，會發現該頁面不存在，這是因為我們還沒有告訴 scully 有哪些對應的資料需要被產生，這裡需要多做一個設定，還記得一開始安裝 scully 時，會多產生一個 <code>scully.config.js</code> 檔案，我們可以從這邊設定相關的資訊</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">config</span> = &#123;</span><br><span class="line">  <span class="attr">projectRoot</span>: <span class="string">&quot;./src/app&quot;</span>,</span><br><span class="line">  <span class="attr">outFolder</span>: <span class="string">&#x27;./dist/static&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>在 routes 的地方告訴 scully 路由規則及處理方式</li>
</ul>
<p>例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/user/:id&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">      <span class="attr">id</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>,</span><br><span class="line">        <span class="attr">property</span>: <span class="string">&#x27;id&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>/user/:id</code> 需要處理的路由</li>
<li><code>type: 'json'</code> 回傳的資料格式</li>
<li><code>id:&#123;..&#125;</code> 需要處理的變數名稱
<ul>
<li>url: 從哪一個 API 取值</li>
<li>property 取值回來所對應的欄位名稱</li>
</ul>
</li>
</ul>
<p>當設定完成後，重新在執行一次 <code>npm run scully</code>，就會看到 scully 會根據我們所設定的規則去撈 API 的資料回來產生對應的靜態檔案</p>
<p><img src="image-20200118112824965.png" alt="image-20200118112824965"></p>
<p><img src="image-20200118112851957.png" alt="image-20200118112851957"></p>
<h1 id="使用範例-2"><a class="header-anchor" href="#使用範例-2"> </a>使用範例 2</h1>
<p>要使用 Scully 所提供的 Blog 範本，可透過 <code>ng g @scullyio/init:blog</code>  來產生相關的檔案</p>
<p>如果要產生一個新的 Post，可以執行 <code>ng g @scullyio/init:post --name=&quot;some title here&quot;</code>，就會幫你在 <code>blog</code> 資料夾下產生一個 Markdown 檔案</p>
<p>細節的部份可以自己動手做看看</p>
<h1 id="參-考資料"><a class="header-anchor" href="#參-考資料"> </a>參 考資料</h1>
<ul>
<li><a href="https://github.com/scullyio/scully">GitHub - Scrullyio</a></li>
<li><a href="https://www.youtube.com/watch?v=Sh37rIUL-d4">YouTube - Introducing Scully: Angular + JAMStack</a></li>
<li><a href="https://jamstack.org/">JAMStack</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 使用 KeyValuePipe 的小地雷</title>
    <url>/2020/02/13/angular-keyvaluepipe/</url>
    <content><![CDATA[<p>Angular 6 版推出了 KeyValue Pipe，可以讓我們在 HTML 上使用 ngFor 跑 Object 或是 Map 型態的資料，但是，這裡面有一個小雷，一個不注意就會踩進去，那就是<strong>排序</strong></p>
<span id="more"></span>
<p>但這一個雷在官網的 API 文件中有提到，以下是說明</p>
<blockquote>
<p>The output array will be ordered by keys. By default the comparator will be by Unicode point value. You can optionally pass a compareFn if your keys are complex types.</p>
</blockquote>
<p>在不讀文件就使用，會讓你 debug 到天荒地老。但這表示我們可以傳入排序的比較函式了，以下是使用方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; input_expression | keyvalue [: compareFn] &#125;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>input 值須為 { [key: string | number] : V } | Map</li>
<li>compareFn: (a:keyValue, b: keyValue) =&gt; number</li>
</ul>
<h1 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import &#123; Component &#125; from &quot;@angular/core&quot;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &quot;my-app&quot;,</span><br><span class="line">  template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Display Object Value<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span>      </span><br><span class="line">      &#123;&#123; data | json &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of (data | keyvalue)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.key &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line">export class AppComponent &#123;</span><br><span class="line">  name = &quot;Angular&quot;;</span><br><span class="line">  data = &#123;</span><br><span class="line">    userId: 1,</span><br><span class="line">    id: 1,</span><br><span class="line">    title: &quot;delectus aut autem&quot;,</span><br><span class="line">    completed: false</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="image-20200213085812920.png" alt="image-20200213085812920"></p>
<p>可以發現物件的顯示順序已經依 key 值的字母做排序了</p>
<p>這時候加入 compareFn 看看，可以取到哪些資訊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">compareFn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>template 的地方也將 compareFn 加上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let item of (data | keyvalue: compareFn)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.key &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>console.log 出來的結果是</p>
<p><img src="image-20200213090105707.png" alt="image-20200213090105707"></p>
<p>從這裡可以得知 a 為新值，而 b 為舊值，這裡就可以使用我們寫陣列排需規則的方式來寫，稍微複習陣列排序的寫法規則</p>
<ol>
<li>當 compareFunction 回傳的值小於 0 ，則 a 會排在 b 之前</li>
<li>當 compareFunction 回傳的值大於 0 ，則 a 會排在 b 之後</li>
<li>當 compareFunction 回傳的值等於 0 ，則 a 與 b 的順序不會改變</li>
</ol>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>使用之前詳讀使用說明書</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Arrary.prototype.sort</a></li>
<li><a href="https://angular.io/api/common/KeyValue">KeyValue</a></li>
<li><a href="https://angular.io/api/common/KeyValuePipe">KeyValuePipe</a></li>
<li><a href="https://stackblitz.com/edit/angular-94dxtk?file=src%2Fapp%2Fapp.component.ts">範例程式碼</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 不要在 Angular template expression 中使用 function，這是不好的</title>
    <url>/2020/02/14/angular-dont-use-function-in-template-expression/</url>
    <content><![CDATA[<p>Angular 原本的顯示效能，在沒有刻意調教的情況下，已經有不錯的表現，但如果有不當的寫法出現，依然可造成如 AngularJS 一樣顯示效能低落的問題，這是可以避免的狀況，只要稍微多留意一些</p>
<p>這一篇文章將會針對 HTML Template 的部分，一個小地方沒留意，就可以大大的拖累整個顯示效能</p>
<span id="more"></span>
<p>Angular 顯示變數到畫面上的方式，基本語法如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; some-variable &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>當資料稍微複雜一點或是想要顯示組合文字時，有能會使用 function 來代替變數，而這一個動作將會造成很大的效能問題，這裡有一個簡單的範例程式來展示使用 function 會造成 Angular Change Detector 過勞</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span>, <span class="title class_">Input</span>, <span class="title class_">SimpleChanges</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-user&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./user.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./user.component.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">user</span>: <span class="title class_">User</span>;</span><br><span class="line"></span><br><span class="line">  calculateFullNameCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">calculateFullNameCounter</span>++;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.user.name&#125;</span>(<span class="subst">$&#123;<span class="variable language_">this</span>.user.username&#125;</span>)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用者: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; fullName() &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>計次: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; calculateFullNameCounter &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>AppComponent</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; users &#125; <span class="keyword">from</span> <span class="string">&#x27;./data&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;next()&quot;&gt;下一位&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;justclick()&quot;&gt;只是一個觸發 CD 的按鈕&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;app-user [user]=&quot;currentUser&quot;&gt;&lt;/app-user&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styles</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  title = <span class="string">&#x27;nofninexpression&#x27;</span>;</span><br><span class="line">  users = users;</span><br><span class="line">  currentUser;</span><br><span class="line">  currentIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentUser</span> = <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">currentIndex</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ++<span class="variable language_">this</span>.<span class="property">currentIndex</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">currentIndex</span> &gt;= <span class="variable language_">this</span>.<span class="property">users</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentIndex</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentUser</span> = <span class="variable language_">this</span>.<span class="property">users</span>[<span class="variable language_">this</span>.<span class="property">currentIndex</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">justclick</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>執行結果 (<a href="https://stackblitz.com/edit/angular-fcetcv">範例程式碼</a>)</li>
</ul>
<p><img src="image-20200214113647591.png" alt="image-20200214113647591"></p>
<p>當按下上方的【只是一個觸發 CD 的按鈕】，會發現計次的數字又多跳了好幾個 (請忽略這個錯誤，這個錯誤是為了要顯示數字而造成的)，但到底為什麼?</p>
<p>Angular 的 Change Detection 會決定畫面上那一部分的內容需要被重新產生，所以他會比較這次的值與上一次的值是否相同，如果有不同時，就會重新顯示該區塊的畫面，但是 Change Detection 卻沒有辦法確認 function 回傳值是否與上次相同，故每一次都會被重新顯示畫面，整個 App 或是該 Component 被觸發了 100 次 CD (Change Detection)，那 function 就會被執行 100 次</p>
<p>或許你會想使用 <code>onPush</code> 是否會有幫助 (<a href="https://stackblitz.com/edit/angular-vmeija?file=src%2Fapp%2Fuser%2Fuser.component.ts">範例程式碼</a>)? 而答案是確實會有幫助，在 Component 的 <code>ChangeDetection 策略</code> 設定為 <code>onPush</code> 時，確實只會讓 Component  本身與外界做隔離，但是，如果是 Component 本身的 CD 觸發時，例如按鈕的 click 等事件，所以還不是一個最佳的解法</p>
<p>以下提供兩種思考方向，來解決上述的問題</p>
<h1 id="解決方案"><a class="header-anchor" href="#解決方案"> </a>解決方案</h1>
<h2 id="手動"><a class="header-anchor" href="#手動"> </a>手動</h2>
<p>所謂的手動，是指事先將資料加工並儲存到另外一個變數上，不論是原本的 data model  或是額外的變數都可以，在畫面顯示該變數即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-user&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./user.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./user.component.css&quot;</span>],</span><br><span class="line">  <span class="attr">changeDetection</span>: <span class="title class_">ChangeDetectionStrategy</span>.<span class="property">OnPush</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserComponent</span> &#123;</span><br><span class="line">  <span class="meta">@Input</span>() <span class="attr">user</span>: <span class="title class_">User</span>;</span><br><span class="line"></span><br><span class="line">  calculateFullNameCounter = <span class="number">0</span>;</span><br><span class="line">  calculateDisplayFullNameCounter = <span class="number">0</span>;</span><br><span class="line">  fullName;</span><br><span class="line">  <span class="title function_">ngOnChanges</span>(<span class="params">change: SimpleChanges</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (change.<span class="property">user</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="title function_">transformData</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">displayfullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">calculateDisplayFullNameCounter</span>++;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.user.name&#125;</span>(<span class="subst">$&#123;<span class="variable language_">this</span>.user.username&#125;</span>)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">transformData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">calculateFullNameCounter</span>++;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.user.name&#125;</span>(<span class="subst">$&#123;<span class="variable language_">this</span>.user.username&#125;</span>)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMouseMove</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>使用 function 顯示欄位<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用者: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; displayfullName() &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>計次: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; calculateDisplayFullNameCounter &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>手動整理顯示欄位<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用者: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>計次: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; calculateFullNameCounter &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Trigger change detection<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> (<span class="attr">mousemove</span>)=<span class="string">&quot;onMouseMove()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hover-area&quot;</span>&gt;</span>移動滑鼠觸發 CD <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可到<a href="https://stackblitz.com/edit/angular-5wa324?file=src%2Fapp%2Fuser%2Fuser.component.html">這裡</a>看執行結果，會發現當手動先處理顯示欄位時，不論 CD 被觸發多少次，計次都不會增加，除了切換至下一位使用者</p>
<h2 id="Pipe"><a class="header-anchor" href="#Pipe"> </a>Pipe</h2>
<p>另外一種方式是透過 <code>Pipe</code> 的方式顯示，因為 <code>Pipe</code> 預設的行為是 pure 的，等同於 <code>onPush</code>，所以只有在串接的值有異動時才會被觸發執行</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pipe</span>, <span class="title class_">PipeTransform</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../data&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;displayFull&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">DisplayFullPipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="attr">user</span>: <span class="title class_">User</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pipe been trigger&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;user.name&#125;</span>(<span class="subst">$&#123;user.username&#125;</span>)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>使用 Pipe 顯示欄位<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用者: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; user | displayFull &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>計次: <span class="tag">&lt;<span class="name">span</span>&gt;</span>請看 console <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>當開啟 F12 看 Console 紀錄時，也只會看到 pipe 被觸發的時間點是 Input 的 User 資料改變時</p>
<ul>
<li><a href="https://stackblitz.com/edit/angular-8qsqdr">範例程式碼</a></li>
</ul>
<h1 id="結論"><a class="header-anchor" href="#結論"> </a>結論</h1>
<p>雖然在 Template 上寫 Function 顯示很快速，但這就是一種技術債，當要還的時候還是得還，一開始就乖乖地寫不就好了，但如果要我選預設的處理方式，大概會是手動先將資料處理完成後，在來顯示，而 Pipe 的使用時機點是通用方法可以共用時，例如換行符號的更換等</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="">完整範例程式碼</a>(<a href="https://stackblitz.com/edit/angular-8qsqdr">https://stackblitz.com/edit/angular-8qsqdr</a>)</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[實用] 如何使用 Zoom 來開線上活動</title>
    <url>/2020/03/03/zoom-create-event/</url>
    <content><![CDATA[<p>Zoom 這套線上會議軟體，從我一開始使用他到現在，整個的功能與介面都有很大幅度的提升，說實話，如果有線上會議的需求，Zoom 這個服務是一個不錯的選擇，而今天這篇文章來分享一下，Zoom 在建立會議時，可以做到那些事情，在辦線上活動時，又能如何利用這些功能</p>
<span id="more"></span>
<h1 id="預約會議"><a class="header-anchor" href="#預約會議"> </a>預約會議</h1>
<p>預約會議的功能雖然可以透過桌面應用程式完成，但透過網頁的方式預約會議，能做到更多的事情</p>
<ol>
<li>
<p>登入 <a href="http://zoom.us">zoom.us</a> 的網站後台並點選【排程會議】</p>
<p><img src="image-20200303110106582.png" alt="image-20200303110106582"></p>
</li>
<li>
<p>填入會議的相關資訊</p>
</li>
<li>
<p>如果想要利用 zoom 會議功能辦線上活動的人，會議排程項目中的【註冊】功能，就是一個不錯的功能，先啟動起來，之後可以做到更多的設定</p>
<p><img src="image-20200303110302403.png" alt="image-20200303110302403"></p>
</li>
</ol>
<h2 id="註冊"><a class="header-anchor" href="#註冊"> </a>註冊</h2>
<p>確定儲存後，就會帶到會議的細節設定頁面，這裡會針對剛剛勾選【註冊】可以設定的項目</p>
<p><img src="image-20200303110847117.png" alt="image-20200303110847117"></p>
<ol>
<li>
<p>註冊選項可以設定的有</p>
<p><img src="image-20200303111216859.png" alt="image-20200303111216859"></p>
<p><img src="image-20200303111244338.png" alt="image-20200303111244338"></p>
<p><img src="image-20200303111530882.png" alt="image-20200303111530882"></p>
</li>
<li>
<p>也可以檢視註冊者有哪些人</p>
<p><img src="image-20200303111717475.png" alt="image-20200303111717475"></p>
</li>
<li>
<p>電子郵件設定的部分可以設定活動聯絡用的 Email 及窗口名稱，也可以客製化郵件內容</p>
<p><img src="image-20200303111926927.png" alt="image-20200303111926927"></p>
</li>
<li>
<p>當然要更專業一點，可以在品牌化的地方上傳 Banner 與 Logo 的圖，而這些圖也會放到電子郵件中</p>
<p><img src="image-20200303112028054.png" alt="image-20200303112028054"></p>
</li>
</ol>
<p>而活動參加者則可以透過 Zoom 所提供的註冊頁面進行活動註冊</p>
<p><img src="image-20200303112119673.png" alt="image-20200303112119673"></p>
<p>使用者一旦完成註冊，會收到活動註冊成功的信件，當所註冊的活動有所異動或是取消，註冊者也會收到相關的訊息，十分方便</p>
<h2 id="問卷調查"><a class="header-anchor" href="#問卷調查"> </a>問卷調查</h2>
<p>在安排活動時，可以事先輸入想要詢問活動參加者的問題，做一些問卷調查，這些調查的結果也可以從之後的報告中取得</p>
<h2 id="直播功能"><a class="header-anchor" href="#直播功能"> </a>直播功能</h2>
<p>Zoom 的 meeting 也有提供直播功能，除了 zoom 本身的會議功能外，也可以直撥到 Facebook、Facebook workspace、YouTube 或是自定的直播服務</p>
<h1 id="會議中"><a class="header-anchor" href="#會議中"> </a>會議中</h1>
<p>在會議中，主持人可以做的事情有</p>
<ol>
<li>錄影</li>
<li>控制參加者的麥克風是否靜音</li>
<li>直播啟動與否</li>
<li>建立問卷調查</li>
<li>開啟分組討論 (另外一篇文章分享)</li>
<li>指定聯合主持人</li>
<li>分享桌面</li>
</ol>
<p>參加者可以做</p>
<ol>
<li>分享桌面</li>
<li>使用聊天，不論是公開或是針對某人的私下聊天</li>
<li>回答問卷等等</li>
</ol>
<h1 id="報告"><a class="header-anchor" href="#報告"> </a>報告</h1>
<p>開啟註冊功能的另外一個好處是可以在報告的功能中，取得更詳細的資訊，報告的功能是為在 <strong>管理員</strong> -&gt; <strong>帳戶管理</strong> -&gt; <strong>報告</strong></p>
<p><img src="image-20200303112835066.png" alt="image-20200303112835066"></p>
<p>當點選報告功能時，可以看到的報告種類其實還不少，管理者看到的報告資訊是全組織的，假如會議有勾選註冊功能，則可以在這 【會議】的分類下看到報表</p>
<p><img src="image-20200303113033835.png" alt="image-20200303113033835"></p>
<p>從這個報表中，就可以產出會議(活動)的報名資訊及問卷調查的結果(民意調查報告)，如果有需要做後續的追蹤，這一個報告資訊其實還蠻完整的</p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>使用 Zoom 這服務也好幾年了，一開始會使用是因為要辦 Angular 線上讀書會，結果一租就租用到現在。如一開始所說的，只要有在使用而且用起來順手，付費的服務都不是問題，因為獲得的價值早已遠大於付出的價格</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Material Datepicker 遇到民國年</title>
    <url>/2020/03/23/material-datepicker-taiwan/</url>
    <content><![CDATA[<p>上周接到一個很討厭的需求，對方想要日期選擇時可以用民國年，其實有在處理日期選擇元件的人多少都會遇到這個需求，基本上就是討厭，但該做的還是要做，那 Angular Material Datepicker 要怎麼處理呢?</p>
<span id="more"></span>
<p>其實也不複雜，因為 Angular Material Datepicker 有提供 <code>DateAdapter</code> 的介面可以實做，但又因為從頭做起太痛苦了，只好借用現有的 <code>MomenetDateAdapter</code> 來擴充了，以下是幾個地方需要調整</p>
<ol>
<li>parse: 處理使用者輸入日期時，要轉換成對的時間</li>
<li>format: 將日期顯示成要顯示的樣子</li>
<li>getYearName: 在選擇年的頁面顯示</li>
</ol>
<h1 id="擴充"><a class="header-anchor" href="#擴充"> </a>擴充</h1>
<h2 id="前置作業"><a class="header-anchor" href="#前置作業"> </a>前置作業</h2>
<p>因為是要擴充 <code>MomentDateAdapter</code>，所以比較保險的方式，是擴充 <code>momenet</code>，讓其可以幫忙處理民國年，網路上面是有一個 <code>momenet-taiwan</code> 的 plugin，但由於 <code>Moment</code> 在 Angular 內的取得方式不太一樣，所以該套件不能直接使用，但裡面所寫的程式碼是可以拿來直接使用，該段程式碼的基本概念是拿 moment 物件直接在上面擴充新功能，相關的程式碼可以參考這個 <a href="https://gist.github.com/chgc/7a3f73f34386eb0009fff0ff9c091eb4">Gist</a></p>
<p>在 <code>MomentDateAdapter</code> 的部分就直接繼承</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyMomentDateAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MomentDateAdapter</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">..</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">providers</span>:[</span><br><span class="line">        ...</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">provide</span>: <span class="title class_">DateAdapter</span>,</span><br><span class="line">          <span class="attr">useClass</span>: <span class="title class_">MyMomentDateAdapter</span>,</span><br><span class="line">          <span class="attr">deps</span>: [<span class="variable constant_">MAT_DATE_LOCALE</span>, <span class="variable constant_">MAT_MOMENT_DATE_ADAPTER_OPTIONS</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="format"><a class="header-anchor" href="#format"> </a>format</h2>
<p><code>DateAdapter</code> 的 format 是用來處理顯示的樣式，其樣式可以透過 <code>MAT_DATE_FORMATS</code> 做設定，介面如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MatDateFormats</span> = &#123;</span><br><span class="line">    <span class="attr">parse</span>: &#123;</span><br><span class="line">        <span class="attr">dateInput</span>: <span class="built_in">any</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="attr">display</span>: &#123;</span><br><span class="line">        <span class="attr">dateInput</span>: <span class="built_in">any</span>;</span><br><span class="line">        <span class="attr">monthYearLabel</span>: <span class="built_in">any</span>;</span><br><span class="line">        <span class="attr">dateA11yLabel</span>: <span class="built_in">any</span>;</span><br><span class="line">        <span class="attr">monthYearA11yLabel</span>: <span class="built_in">any</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以 <code>format</code> 的方法除了原本的日期值外，還會有 <code>displayFormat</code> 的資訊傳入</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">format</span>(<span class="attr">date</span>: <span class="title class_">Moment</span>, <span class="attr">displayFormat</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    date = <span class="variable language_">this</span>.<span class="title function_">clone</span>(date);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">isValid</span>(date)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;MomentDateAdapter: Cannot format invalid date.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> date.<span class="title function_">format</span>(displayFormat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根據我們的需求只需要改變回傳的文字即可，由於我們上面已經有寫好 <code>moment</code> 民國年的擴充方法，所以只要將 moment 加工一下拿來使用即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MomentFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./moment-factory&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyMomentDateAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MomentDateAdapter</span> &#123;</span><br><span class="line">    moment = <span class="title class_">MomentFactory</span>(_moment);</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">format</span>(<span class="attr">date</span>: <span class="title class_">Moment</span>, <span class="attr">displayFormat</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">        date = <span class="variable language_">this</span>.<span class="title function_">clone</span>(date);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">isValid</span>(date)) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;MomentDateAdapter: Cannot format invalid date.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">moment</span>(date).<span class="title function_">format</span>(displayFormat);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>經過這樣子的調整後就可以</p>
<h2 id="parse"><a class="header-anchor" href="#parse"> </a>parse</h2>
<p>parse 的功能是將使用者輸入的文字轉換成日期型，所以這裡的功能是將輸入的民國年文字轉換成西元年的日期型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyMomentDateAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MomentDateAdapter</span> &#123;</span><br><span class="line">  moment = <span class="title class_">MomentFactory</span>(_moment);</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Optional</span>() <span class="meta">@Inject</span>(MAT_DATE_LOCALE) dateLocale: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="meta">@Optional</span>() <span class="meta">@Inject</span>(MAT_MOMENT_DATE_ADAPTER_OPTIONS)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> options?: MatMomentDateAdapterOptions</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(dateLocale, options);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setLocale</span>(dateLocale || <span class="variable language_">this</span>.<span class="property">moment</span>.<span class="title function_">locale</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">parse</span>(<span class="attr">value</span>: <span class="built_in">any</span>, <span class="attr">parseFormat</span>: <span class="built_in">string</span> | <span class="built_in">string</span>[]): <span class="title class_">Moment</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">createMoment</span>(value, parseFormat, <span class="variable language_">this</span>.<span class="property">locale</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value ? <span class="variable language_">this</span>.<span class="title function_">createMoment</span>(value).<span class="title function_">locale</span>(<span class="variable language_">this</span>.<span class="property">locale</span>) : <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">createMoment</span>(</span><br><span class="line">    <span class="attr">date</span>: _moment.<span class="property">MomentInput</span>,</span><br><span class="line">    format?: _moment.<span class="property">MomentFormatSpecification</span>,</span><br><span class="line">    locale?: <span class="built_in">string</span></span><br><span class="line">  ): <span class="title class_">Moment</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; strict, useUtc &#125;: <span class="title class_">MatMomentDateAdapterOptions</span> = <span class="variable language_">this</span>.<span class="property">options</span> || &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> useUtc</span><br><span class="line">      ? <span class="variable language_">this</span>.<span class="property">moment</span>.<span class="title function_">utc</span>(date, format, locale, strict)</span><br><span class="line">      : <span class="variable language_">this</span>.<span class="title function_">moment</span>(date, format, locale, strict);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看起來程式碼比較多，但其實就是將文字轉換成日期型而已</p>
<h2 id="getYearName"><a class="header-anchor" href="#getYearName"> </a>getYearName</h2>
<p><code>getYearName</code> 這一個比較討厭，因為在原本的設計並沒有將這一個顯示的格式做成動態設定，必須手動寫死，這一個方法是用來顯示年度選擇的那個頁面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getYearName</span>(<span class="attr">date</span>: <span class="title class_">Moment</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">moment</span>(<span class="variable language_">this</span>.<span class="title function_">clone</span>(date)).<span class="title function_">format</span>(<span class="string">&#x27;tYY&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>對應到 <code>Material Datepicker</code> 的程式碼是</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Creates an MatCalendarCell for the given year. */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="title function_">_createCellForYear</span>(<span class="params">year: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> yearName = <span class="variable language_">this</span>.<span class="property">_dateAdapter</span>.<span class="title function_">getYearName</span>(<span class="variable language_">this</span>.<span class="property">_dateAdapter</span>.<span class="title function_">createDate</span>(year, <span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MatCalendarCell</span>(year, yearName, yearName, <span class="variable language_">this</span>.<span class="title function_">_shouldEnableYear</span>(year));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/angular/components/blob/master/src/material/datepicker/multi-year-view.ts#L243-L246">source code</a></li>
</ul>
<h1 id="完整程式碼"><a class="header-anchor" href="#完整程式碼"> </a>完整程式碼</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Inject</span>, <span class="title class_">Injectable</span>, <span class="title class_">Optional</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">MatMomentDateAdapterOptions</span>,</span><br><span class="line">  <span class="variable constant_">MAT_MOMENT_DATE_ADAPTER_OPTIONS</span>,</span><br><span class="line">  <span class="title class_">MomentDateAdapter</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/material-moment-adapter&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">MAT_DATE_LOCALE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/material/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Moment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MomentFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./extend-factory&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">MyMomentDateAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MomentDateAdapter</span> &#123;</span><br><span class="line">  moment = <span class="title class_">MomentFactory</span>(_moment);</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Optional</span>()</span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(MAT_DATE_LOCALE)</span></span><br><span class="line"><span class="params">    dateLocale: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="meta">@Optional</span>()</span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(MAT_MOMENT_DATE_ADAPTER_OPTIONS)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> options?: MatMomentDateAdapterOptions</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(dateLocale, options);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setLocale</span>(dateLocale || <span class="variable language_">this</span>.<span class="property">moment</span>.<span class="title function_">locale</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getYearName</span>(<span class="attr">date</span>: <span class="title class_">Moment</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">moment</span>(<span class="variable language_">this</span>.<span class="title function_">clone</span>(date)).<span class="title function_">format</span>(<span class="string">&#x27;tYY&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">parse</span>(<span class="attr">value</span>: <span class="built_in">any</span>, <span class="attr">parseFormat</span>: <span class="built_in">string</span> | <span class="built_in">string</span>[]): <span class="title class_">Moment</span> | <span class="literal">null</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">createMoment</span>(value, parseFormat, <span class="variable language_">this</span>.<span class="property">locale</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value ? <span class="variable language_">this</span>.<span class="title function_">createMoment</span>(value).<span class="title function_">locale</span>(<span class="variable language_">this</span>.<span class="property">locale</span>) : <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">format</span>(<span class="attr">date</span>: <span class="title class_">Moment</span>, <span class="attr">displayFormat</span>: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    date = <span class="variable language_">this</span>.<span class="title function_">clone</span>(date);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">isValid</span>(date)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;MomentDateAdapter: Cannot format invalid date.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">moment</span>(date).<span class="title function_">format</span>(displayFormat);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">createMoment</span>(</span><br><span class="line">    <span class="attr">date</span>: _moment.<span class="property">MomentInput</span>,</span><br><span class="line">    format?: _moment.<span class="property">MomentFormatSpecification</span>,</span><br><span class="line">    locale?: <span class="built_in">string</span></span><br><span class="line">  ): <span class="title class_">Moment</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; strict, useUtc &#125;: <span class="title class_">MatMomentDateAdapterOptions</span> = <span class="variable language_">this</span>.<span class="property">options</span> || &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> useUtc</span><br><span class="line">      ? <span class="variable language_">this</span>.<span class="property">moment</span>.<span class="title function_">utc</span>(date, format, locale, strict)</span><br><span class="line">      : <span class="variable language_">this</span>.<span class="title function_">moment</span>(date, format, locale, strict);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/bradwoo8621/moment-taiwan">moment-taiwan</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[OBS 技巧筆記] OBS-NDI</title>
    <url>/2020/04/02/obs-tips-1/</url>
    <content><![CDATA[<p>OBS 是一套功能強大而且免費的直播軟體，我會將一些我覺得不錯的功能寫成筆記分享出來，今天先介紹 OBS-NDI 這個擴充功能。</p>
<p>NDI 是 NewTek 這間公司發展出來的一個網路協定，全名是 Network Device Interface，詳細功能就讓各位去查了，簡單的說，他可以將影像訊號透過網路的方式傳遞，而且中間的延遲非常的低</p>
<span id="more"></span>
<p>而 OBS 當然也有人寫擴充套件，讓 OBS 也能支援 NDI 這個功能，套件名稱是 <a href="https://obsproject.com/forum/resources/obs-ndi-newtek-ndi%E2%84%A2-integration-into-obs-studio.528/">obs-ndi</a>，還沒有安裝的，就先按網站的步驟安裝下載吧，windows/mac 都可以使用</p>
<p>當安裝完 OBS-NDI 後，OBS 就支援 Input/Output NDI Source 的功能了</p>
<p><img src="image-20200402100903559.png" alt="image-20200402100903559"></p>
<p><img src="image-20200402100925719.png" alt="image-20200402100925719"></p>
<h1 id="Input"><a class="header-anchor" href="#Input"> </a>Input</h1>
<p>當要將外部的 NDI Source 加到 OBS 內，可以透過 add NDI Source 的方式完成</p>
<p><img src="image-20200402102452683.png" alt="image-20200402102452683"></p>
<p>當區域網路內有 NDI Source 存在時，Source name 的下拉選單就可以看到該來源的名稱</p>
<ul>
<li>Bandwidth: 頻寬使用量，在不使用 NDI|HX 的模式下，選擇 Highest 的可以取的高畫質低延遲的影像，這裡指的低延遲，大概就一個 frame 的延遲，但頻寬使用就很高，這也是為什麼一定要在使用有線網路的環境下跑</li>
<li>其他的設定基本上預設就可以了</li>
</ul>
<p>按下 Ok 完成後，剩下的操作就跟其他 OBS 的操作一樣，很簡單的</p>
<h1 id="Output"><a class="header-anchor" href="#Output"> </a>Output</h1>
<p>如果想要讓 OBS 所設定好的畫面輸出給其他支援 NDI 的軟體或介面使用的話，可以開啟 output 的功能</p>
<p><img src="image-20200402101053363.png" alt="image-20200402101053363"></p>
<p>當開啟 Output 時，OBS 也會認定目前處於直播的狀態，所以相關的設定也會被關起來不能被修改。以下為一些可以使用的情境</p>
<ol>
<li>NDI Virtual Input: 將 NDI Source 模擬成 Webcam，讓可以使用 webcam 的軟體看到此訊號</li>
<li>第二台電腦的直播訊號來源，因為直播需要消耗主機支援，可以透過使用第二台電腦來減少主電腦的資訊損耗，這時候透過 NDI 就可以很簡單的將訊號傳給第二台電腦</li>
<li>擷取桌面。給直播主機使用，除了使用 OBS 擷取桌面外，也可以使用這一個軟體
<ul>
<li>VMIX Desktop capture 軟體 (<a href="https://www.vmix.com/software/download.aspx">下載位置</a>)，使用方式很簡單，下載開啟就可以使用了</li>
<li>如果 NDI Source 抓不到，可能是防火牆的問題</li>
</ul>
</li>
</ol>
<h2 id="Filter"><a class="header-anchor" href="#Filter"> </a>Filter</h2>
<p>OBS-NDI 還有另外一個很實用的功能，就是可以將某 Source 設定為單獨輸出的 NDI Source，但這邊就需要使用 Filter 的功能</p>
<p><img src="image-20200402103321321.png" alt="image-20200402103321321"></p>
<p><img src="image-20200402103422148.png" alt="image-20200402103422148"></p>
<ul>
<li>NDI Name 的地方就是輸出出去的名稱，這樣子除了 Main/Preview 的訊號外，還可額外取得某 Source 的 NDI 訊號</li>
</ul>
<p>這功能就可以讓設定直播畫面更加有彈性，當然除了影像外，聲音也可以設定一樣的 Filter，但就只有聲音訊號</p>
<p><img src="image-20200402103640401.png" alt="image-20200402103640401"></p>
<p><img src="image-20200402103703529.png" alt="image-20200402103703529"></p>
<h1 id="延遲測試"><a class="header-anchor" href="#延遲測試"> </a>延遲測試</h1>
<p><img src="image-20200402105240662.png" alt="image-20200402105240662"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>[OBS] 跑馬文字</title>
    <url>/2020/04/02/obs-tips-2/</url>
    <content><![CDATA[<p>使用 OBS 內建的功能就可以完成跑馬燈的效果，而以下是使用方法</p>
<span id="more"></span>
<p>但這之前，要先了解如何新增顯示文字到 OBS 上</p>
<h1 id="新增文字"><a class="header-anchor" href="#新增文字"> </a>新增文字</h1>
<p>在 Source 的地方選擇新增 <code>Text(GDI+)</code></p>
<p><img src="image-20200402211033654.png" alt="image-20200402211033654"></p>
<p><img src="image-20200402211121586.png" alt="image-20200402211121586"></p>
<ul>
<li>
<p>Font: 設定文字字型、樣式、大小等</p>
</li>
<li>
<p>Text: 要顯示的文字</p>
</li>
<li>
<p>Text Transform: 設定英文字大小寫顯示規則</p>
<ul>
<li>None: 不調整</li>
<li>Upper Case: 全部大小</li>
<li>Lower Case: 全部小寫</li>
<li>Start Case: 單字開頭文字大小</li>
</ul>
</li>
<li>
<p>Vertical: 垂直顯示</p>
<p><img src="image-20200402211506493.png" alt="image-20200402211506493"></p>
</li>
<li>
<p>Color: 設定文字顯示顏色</p>
</li>
<li>
<p>Opacity: 飽和度</p>
</li>
<li>
<p>Gradient: 是否開啟顏色漸層效果，開啟後可以選擇第二個顏色達到漸層效果</p>
<p><img src="image-20200402211701490.png" alt="image-20200402211701490"></p>
</li>
<li>
<p>Background Color: 背景顏色設定</p>
</li>
<li>
<p>Background Opacity: 背景顏色飽和度</p>
</li>
<li>
<p>Alignment / Vertical Alignment: 對齊方式</p>
</li>
<li>
<p>Use Custom Text Extents: 自訂文字顯示範圍</p>
</li>
</ul>
<p>當然也可以將檔案的文字讀進來顯示，將 <code>Read from file</code> 勾選起來就可以了，選取檔案後，當檔案內容改變時，要顯示的文字也會跟著改變，雖然有些延遲，但還在可以接受的範圍內</p>
<h1 id="跑馬燈效果"><a class="header-anchor" href="#跑馬燈效果"> </a>跑馬燈效果</h1>
<p>要讓文字跑起來，就要再多加一個 filter 到文字 source 上，透過 scroll  filter 就可以做到跑馬燈的效果</p>
<p><img src="image-20200402214146343.png" alt="image-20200402214146343"></p>
<p><img src="image-20200402214423645.png" alt="image-20200402214423645"></p>
<p>新增完 scroll filter 後，透過設定 Horizontal Speed 和 Vertical Speed 來決定文字移動的方向及速度，就是這麼簡單</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>[Blazor] 基本 Blazor Component 筆記</title>
    <url>/2020/04/04/blazor-basic-component-page/</url>
    <content><![CDATA[<p>Blazor 畫面基本組成是 Razor Component 物件，他可以是顯示元件，也可以是頁面之一，所有的設定都在 .razor 的檔案內做設定，以下是一些在開發過程中，覺得比較重要的筆記內容</p>
<span id="more"></span>
<h1 id="筆記"><a class="header-anchor" href="#筆記"> </a>筆記</h1>
<h2 id="Code-Behind"><a class="header-anchor" href="#Code-Behind"> </a>Code Behind</h2>
<p>預設 Blazor Component 的寫法是將 HTML 與 Code 寫在同一個檔案內，但當程式碼比較複雜的時候，寫在同一個畫面就會變得比較麻煩，或是習慣將 HTML 和 Code 分開寫的朋友，這個是 Code Behinde 的寫法</p>
<ol>
<li>
<p>建立一個與 blazor 物件名稱一樣但附檔名為 .cs 的檔案，例如 <code>Episode.razor.cs</code>，這樣子命名 Visual Studio 就會自動合在一起顯示</p>
<p><img src="image-20200404143437838.png" alt="image-20200404143437838"></p>
</li>
<li>
<p>在 <code>editor.razor.cs</code> 的程式碼內，繼承 <code>ComponentBase</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Components;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EpisodeBase</span>: <span class="title">ComponentBase</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 <code>Episode.razor</code> 檔案繼承上列的 class</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@inherits EpisodeBase</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>這樣就可以做到 Code Behind 的效果</p>
<h3 id="注入"><a class="header-anchor" href="#注入"> </a>注入</h3>
<p>原本的寫法是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@inject SampleSerivce samepleService</span><br></pre></td></tr></table></figure>
<p>當單獨寫一個 class 時，則要這樣子寫</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EpisodeBase</span>: <span class="title">ComponentBase</span></span><br><span class="line">&#123;</span><br><span class="line">   [<span class="meta">Inject</span>]</span><br><span class="line">    <span class="keyword">public</span> SampleService sampleService &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多重路由規則"><a class="header-anchor" href="#多重路由規則"> </a>多重路由規則</h2>
<p>一個 Blazor component 可以擁有多個路由規則，設定方式就是寫多個 <code>@page</code> 就可以了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@page &quot;/manage/new&quot;</span><br><span class="line">@page &quot;/manage/&#123;id:int&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>當有使用到變數時，則須同時宣告 <code>parameter</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Parameter</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Markdown-Editor"><a class="header-anchor" href="#Markdown-Editor"> </a>Markdown Editor</h2>
<p>套件選擇: <a href="https://github.com/lunet-io/markdig">Markdig</a></p>
<ul>
<li>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group col-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;description&quot;</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;description&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">                      @<span class="attr">bind</span>=<span class="string">&quot;formData.Description&quot;</span></span></span><br><span class="line"><span class="tag">                      @<span class="attr">bind:event</span>=<span class="string">&quot;oninput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Preivew<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                @((MarkupString) Preview)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>code</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FormData formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Preview =&gt; Markdown.ToHtml(formData.Description);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="文字結合變數"><a class="header-anchor" href="#文字結合變數"> </a>文字結合變數</h2>
<p>在 blazor component 顯示下，如果寫 <code>somepage/@data.Id</code> ，編譯時會抱怨便顯示這個錯誤</p>
<blockquote>
<p>Blazor RZ9986 — Component attributes do not support complex content (mixed C# and markup)</p>
</blockquote>
<p>簡單的解法是指用 string template formate 的方式改寫，當改成 <code>@($&quot;somepage/&#123;data.Id&#125;&quot;)</code>，就可以成功編譯</p>
<h2 id="生命週期"><a class="header-anchor" href="#生命週期"> </a>生命週期</h2>
<p>Blazor 的生命週期有幾個，且有分同步與非同步，這部分要留意</p>
<ul>
<li>
<p>初始化</p>
<ul>
<li>
<p>同步: OnInitialized</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInitialized</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>非同步: OnInitializedAsync</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">OnInitializedAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>設定參數</p>
<ul>
<li>
<p>之前</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">SetParametersAsync</span>(<span class="params">ParameterView parameters</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">base</span>.SetParametersAsync(parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>之後</p>
<ul>
<li>非同步</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">OnParametersSetAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>同步</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnParametersSet</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>剩餘其他的，請參閱<a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/lifecycle?view=aspnetcore-3.1">生命週期</a>章節</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li>
<p><a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/dependency-injection?view=aspnetcore-3.1#request-a-service-in-a-component">要求元件中的服務</a></p>
</li>
<li>
<p><a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/routing?view=aspnetcore-3.1#route-templates">路由範本</a></p>
</li>
<li>
<p><a href="https://docs.microsoft.com/zh-tw/aspnet/core/blazor/lifecycle?view=aspnetcore-3.1">生命週期</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Blazor</category>
      </categories>
      <tags>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>[Blazor] 自動重新整理 (auto reload)</title>
    <url>/2020/04/04/blazor-reload-after-save/</url>
    <content><![CDATA[<p>在開發 Blazor 時，最常遇到的問題是儲存完程式後，還需要手動重新更新瀏覽器的頁面，除了那個提示畫面很礙眼外，竟然還要手動，以下是一個小技巧可以自動更新頁面</p>
<span id="more"></span>
<p>除了保哥寫的這篇文章外，<a href="https://blog.miniasp.com/post/2020/01/14/ASPNET-Core-Blazor-Server-Hide-Reconnect-Modal">如何讓 ASP.NET Core Blazor Server 在斷線時不影響頁面瀏覽</a>。在 <code>_Host.cshtml</code> 的頁面下加入這段程式碼就可以做到自動更新</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Blazor</span>.<span class="property">defaultReconnectionHandler</span>.<span class="property">_reconnectCallback</span> = <span class="keyword">function</span> (<span class="params">d</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">location</span>.<span class="title function_">reload</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>我是放在 <code>&lt;script src=&quot;_framework/blazor.server.js&quot;&gt;&lt;/script&gt;</code> 的後面。當加上這段程式碼後，畫面就會在連線重新連上時自動更新畫面</p>
<p>如果想限定加入這段 script 的時機點，可以搭配 <code>&lt;environment include=&quot;Development&quot;&gt;</code> 使用</p>
]]></content>
      <categories>
        <category>Blazor</category>
      </categories>
      <tags>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure] 該如何設定 JSON 物件到 App Servie Configuration 中</title>
    <url>/2020/04/11/azure-appservice-configuation-with-nest-object/</url>
    <content><![CDATA[<p>我們都知道 Production 的設定檔應該要放在 Azure App Service 或是其他相關的地方，不應該將該設定檔簽入到版控中，但是，當愈到這種設定檔時，App Service 該如何設定呢?</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;AzureAdB2C&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;Instance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://xxx.xxxx/&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;ClientId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;CallbackPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;Domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;SignUpSignInPolicyId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;...&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在 <code>.NET Core</code> 的程式碼內，可以透過 <code>:</code> 的方式取得階層型態的設定檔，例如 <code>AzureAdB2C:Instance</code>，但是在 Linux 的 App Service 是不能使用冒號，所以要用兩個底線代替冒號</p>
<blockquote>
<p>In a default Linux container or a custom Linux container, any nested JSON key structure in the app setting name like <code>ApplicationInsights:InstrumentationKey</code> needs to be configured in App Service as <code>ApplicationInsights__InstrumentationKey</code> for the key name. In other words, any <code>:</code> should be replaced by <code>__</code> (double underscore).</p>
</blockquote>
<p><img src="image-20200412011534339.png" alt="image-20200412011534339"></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-tw/azure/app-service/configure-common">Configure an App Service app in the Azure portal</a></li>
</ul>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
  </entry>
  <entry>
    <title>[.NET Core] Taipei Standard Time 在 Linux 上找不到 ?</title>
    <url>/2020/04/11/dotnet-core-timezone-on-linux/</url>
    <content><![CDATA[<p><code>.NET Core</code> 在 Linux 環境上遇到設定時區時，會遇到這一個錯誤訊息 <code>The time zone ID 'Taipei Standard Time' was **not** found on the local computer.</code> ，這一個問題在 mac 上也會遇到，主要是因為以前 <code>.Net</code> 只能跑在 windows 上，所以不會遇到這個問題，而當現在 <code>.NET Core</code> 跑在 Linux 環境上就會遇到這類似的問題</p>
<span id="more"></span>
<p>解法很簡單，判斷目前跑的環境是什麼，然後給予正確的時區名稱即可</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> id = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ?</span><br><span class="line">                <span class="string">&quot;Taipei Standard Time&quot;</span> : <span class="string">&quot;Asia/Taipei&quot;</span>;</span><br><span class="line">TimeZoneInfo tw = TimeZoneInfo.FindSystemTimeZoneById(id);</span><br></pre></td></tr></table></figure>
<p>當這樣子寫完，問題就解決了</p>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Podcast] Podcast 新手上路，有什麼是我需要準備的</title>
    <url>/2020/04/15/podcast-preparation/</url>
    <content><![CDATA[<p>收聽 Podcast 的人比你想像中的還多很多，在台灣也有很多有優質的 Podcast 節目，這裡我整理了一些開自己 Podcast 所需要準備的基本工作</p>
<span id="more"></span>
<p>開 Podcast 節目其實不難，可以分幾個部分來看</p>
<h1 id="企劃"><a class="header-anchor" href="#企劃"> </a>企劃</h1>
<p>一個節目最重要的是<strong>內容</strong>及<strong>走向</strong>，這裡所指的走向是風格，想要呈現怎樣的節目風格? 時間長度? 這些都是要在開始製作前需要思考的部分。</p>
<p>一但決定好風格內容後，接下來的另外一個難題就是<strong>節目名稱</strong>，節目名稱的困難點是如何帶給聽眾一個記憶點，或是凸顯主持人的個性，可以花點時間，好好的思考一下。</p>
<p>接下來的<strong>節目規畫</strong>部分就比較簡單了，每一個製作 Podcast 的人風格都不一樣，有些人喜歡將稿先擬好，然後進量不要脫稿演出，有些人喜歡列出這次要講的大綱，更有些人就直接上了，找出適合自己的方式，畢竟 Podcast 是一個需要時間的長期創作，找到適合的工作方式可以讓自己持續下去。</p>
<h1 id="軟體"><a class="header-anchor" href="#軟體"> </a>軟體</h1>
<h2 id="平台"><a class="header-anchor" href="#平台"> </a>平台</h2>
<p>規劃面到一個段落後，就可以來尋找錄出來的節目要放在哪裡，所幸目前的年代已經有很多很方便的平台與服務，可以幫我們處理這一塊的工作，以<a href="https://www.facebook.com/3Nerds">三宅一聲</a>來說，我們是放在 <a href="https://anchor.fm/">anchor.fm</a>上，這是國外的平台，這一類的平台台灣也有，例如 <a href="https://firstory.me/">Firstory</a>，這些平台可以讓你放節目上去並幫你轉發布到其它媒介，例如 Spotify、iTune、Google Podcast  等。另外一種是自有平台，例如 <a href="https://www.soundon.fm/">SoundOn</a>、<a href="https://baabao.com/">八寶網路廣播</a>，這一類的平台就是透過自己的 App 平台收聽廣播。</p>
<p>就挑一個自己操作上沒有問題的平台先做，有很多節目到最後都是各平台都有放</p>
<h2 id="編輯軟體"><a class="header-anchor" href="#編輯軟體"> </a>編輯軟體</h2>
<p>聲音檔的編輯軟體，最常見的是 <a href="https://www.audacityteam.org/">Audacity</a>，這軟體除了可以編輯外，也可以做為錄音的軟體，所以只要在自己的電腦上安裝這軟體，接上麥克風就可以開始錄製節目了。</p>
<h2 id="遠端錄音"><a class="header-anchor" href="#遠端錄音"> </a>遠端錄音</h2>
<p>這部分就有點麻煩，目前能透過網路錄製聲音的工具不多，以下就列出幾個可以錄的</p>
<ol>
<li><strong>Zoom</strong>: 這線上開會軟體，有提供分軌錄音的功能，錄製出來的音質也不錯，除了開起來很耗電腦資源外，算是一個不錯的選擇</li>
<li><strong>Discord</strong>: 這是在打遊戲的人比較知道的通訊軟體，音質跟延遲都有不錯的表現，也有人提供錄音用的 Bot，叫 <a href="https://craig.chat/home/">Craig</a>，這一個 Bot 也可以做到分軌錄音的功能，但就是將音訊檔儲存在雲端空間，等結束錄音後，Bot 會提供對應的下載網址，使用上也不複雜</li>
<li><strong><a href="http://anchor.fm">anchor.fm</a> 手機 App</strong> 有提供多人錄音的功能，沒實際使用過</li>
</ol>
<p>如果有其它不錯的遠端錄音方式，也在下方留言交流一下。</p>
<h1 id="硬體"><a class="header-anchor" href="#硬體"> </a>硬體</h1>
<p>或許會問一定要有電腦才能製作 Podcast 節目嗎? 其實現在每一個人手邊的手機，就是一個不錯的錄音設備，利用他就可以製作出一個高品質的節目，但還是有一些必須擁有的設備，可以讓節目品質更往上走。</p>
<h2 id="麥克風"><a class="header-anchor" href="#麥克風"> </a>麥克風</h2>
<p>一支好的麥克風是很重要的，除了可以將主持人的聲音個性好好地收錄起來，畢竟廣播節目就只有聲音，聲音品質的呈現就非常重要，算是必要投資。但麥克風的價位差異真的很大，至於要選那一種麥克風也是另外一門學問了，這裡就列出最低最低的需求，<strong>手機使用的免持耳機</strong>，至少要有這個吧 。(這個也適用在線上會議，不要在用筆電內建的麥克風了)</p>
<h2 id="監聽耳機"><a class="header-anchor" href="#監聽耳機"> </a>監聽耳機</h2>
<p>為什麼要用耳機，是要避免麥克風再次收到由喇叭發出的聲音，其次有些比較好的耳機或是錄音介面有提供監聽的輸出介面，可以聽見自己的聲音呈現的方式也是提升節目品質的重要環節。</p>
<h2 id="錄音環境"><a class="header-anchor" href="#錄音環境"> </a>錄音環境</h2>
<p>安靜沒有背景雜音的地方，不要太空曠，因為聲音會反彈會讓麥克風收到的聲音有回音，而且會有空洞的感覺。假如你的房間很空洞，多放點雜物，讓聲音的反彈行為被破壞掉就可以了，或是去買吸音棉貼在講話方向的正前方也是一種方式</p>
<p>對於外界的環境音，這部分能透過氣密窗或是比較厚的窗簾來做阻隔，在搭配一隻高指向性的麥克風就可以將環境噪音降到最低</p>
<h1 id="宣傳"><a class="header-anchor" href="#宣傳"> </a>宣傳</h1>
<p>FB 是一個還不錯的地方，除了自己的空間外，還有很多跟 podcast 相關的社團可以加入，例如: <a href="https://www.facebook.com/groups/497608144141740/">Podcast Club</a></p>
<h1 id="我的設備清單"><a class="header-anchor" href="#我的設備清單"> </a>我的設備清單</h1>
<ul>
<li>電腦錄音</li>
<li>Zoom / Discord</li>
<li>麥克風: Blue Yeti</li>
<li>監聽耳機: 普通的手機耳麥</li>
<li>編輯軟體: Audacity</li>
<li>發佈平台: Anchor</li>
<li>FB 粉專: <a href="https://www.facebook.com/3Nerds">三宅一聲</a></li>
<li>自架網站: <a href="https://www.3nerds.tw">3 Nerds</a></li>
</ul>
<h1 id="希望入手的設備清單"><a class="header-anchor" href="#希望入手的設備清單"> </a>希望入手的設備清單</h1>
<ul>
<li>Rode Caster Pro</li>
<li>Rode podcaster</li>
<li>Rode podmic</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="http://blog.baabao.com/search/label/%E6%96%B0%E6%89%8B%E4%B8%8A%E8%B7%AF">八寶 - 新手上路</a></li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>[AMP] First AMP Page</title>
    <url>/2020/04/16/amp-101/</url>
    <content><![CDATA[<p>AMP = Accelerated Mobile Pages，Google帶領開發的開源專案，目的是為提升行動裝置對網站的存取速度。沒寫過，所以要來學，這一篇就是學習過程中的筆記</p>
<span id="more"></span>
<h1 id="AMP-基本組成"><a class="header-anchor" href="#AMP-基本組成"> </a>AMP 基本組成</h1>
<p>一個合格的 AMP 一定要有以下的元素</p>
<ol>
<li>
<p>第一行一定是 <code>&lt;!doctype html&gt;</code></p>
</li>
<li>
<p>一定有 <code>&lt;head&gt;&lt;/head&gt;</code> 和 <code>&lt;body&gt;&lt;/body&gt;</code> 兩個區塊</p>
</li>
<li>
<p><code>&lt;html&gt;</code> 標籤內要標示閃電符號 (<code>&lt;html ⚡&gt;</code>，或是 <code>amp</code> 文字 (<code>&lt;html amp&gt;</code>)</p>
</li>
<li>
<p><code>&lt;head&gt;</code> 的第一個元素一定是 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;head&gt;</code> 內會有 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1,initial-scale=1&quot;&gt;</code></p>
</li>
<li>
<p><code>&lt;head&gt;</code> 內要有 <code>&lt;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&lt;/script&gt;</code>，這一行越早寫越好</p>
</li>
<li>
<p><code>&lt;head&gt;</code> 內要有 <code>&lt;link rel=&quot;canonical&quot; href=&quot;$SOME_URL&quot;&gt;</code>，<code>$SOME_URL</code> 要替換成目前頁面的網址，目的是要連結目前的 AMP 頁面到非 AMP 頁面或是網站</p>
</li>
<li>
<p>包含 AMP-Style: 這段程式碼會在 AMP Script 載入前將畫面隱藏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">amp-boilerplate</span>&gt;</span><span class="language-css"><span class="selector-tag">body</span>&#123;-webkit-<span class="attribute">animation</span>:-amp-start <span class="number">8s</span> <span class="built_in">steps</span>(<span class="number">1</span>,end) <span class="number">0s</span> <span class="number">1</span> normal both;-moz-<span class="attribute">animation</span>:-amp-start <span class="number">8s</span> <span class="built_in">steps</span>(<span class="number">1</span>,end) <span class="number">0s</span> <span class="number">1</span> normal both;-ms-<span class="attribute">animation</span>:-amp-start <span class="number">8s</span> <span class="built_in">steps</span>(<span class="number">1</span>,end) <span class="number">0s</span> <span class="number">1</span> normal both;<span class="attribute">animation</span>:-amp-start <span class="number">8s</span> <span class="built_in">steps</span>(<span class="number">1</span>,end) <span class="number">0s</span> <span class="number">1</span> normal both&#125;<span class="keyword">@-webkit-keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;<span class="keyword">@-moz-keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;<span class="keyword">@-ms-keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;<span class="keyword">@-o-keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;<span class="keyword">@keyframes</span> -amp-start&#123;<span class="selector-tag">from</span>&#123;<span class="attribute">visibility</span>:hidden&#125;<span class="selector-tag">to</span>&#123;<span class="attribute">visibility</span>:visible&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">style</span> <span class="attr">amp-boilerplate</span>&gt;</span><span class="language-css"><span class="selector-tag">body</span>&#123;-webkit-<span class="attribute">animation</span>:none;-moz-<span class="attribute">animation</span>:none;-ms-<span class="attribute">animation</span>:none;<span class="attribute">animation</span>:none&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="AMP-限制"><a class="header-anchor" href="#AMP-限制"> </a>AMP 限制</h1>
<h2 id="CSS"><a class="header-anchor" href="#CSS"> </a>CSS</h2>
<p>在 AMP 上面要使用自訂 CSS 有以下的設定</p>
<ol>
<li>自訂 CSS 必須定義在 <code>&lt;style amp-custom&gt;&lt;/style&gt;</code> 內且只能有一個或是 <code>inline-style</code>，為了節省網路傳輸，不能有外部 style 連結</li>
<li>CSS 內容的部分大小不能大於 75 K</li>
<li>不能使用 <code>!important</code></li>
<li>不能寫 <code>i-amphtml-</code> class 和 tag 名稱，簡單說不能使用 AMP Component 要用的名稱</li>
<li>其它能用不能用的 CSS Style 請參閱 <a href="https://amp.dev/documentation/guides-and-tutorials/develop/style_and_layout/style_pages/?format=websites">Suppored CSS</a></li>
</ol>
<h2 id="HTML"><a class="header-anchor" href="#HTML"> </a>HTML</h2>
<p>除了 CSS 有限制外，HTML 也有允許跟不允許使用的列表 ，<a href="https://github.com/ampproject/amphtml/blob/master/spec/amp-tag-addendum.md#html5-tag-whitelist">HTML5 Tag 白名單</a></p>
<p>更多詳細資訊可以閱讀此文，<a href="https://amp.dev/documentation/guides-and-tutorials/learn/spec/amphtml/?format=websites">AMP HTML Specification</a></p>
<h1 id="開發思維"><a class="header-anchor" href="#開發思維"> </a>開發思維</h1>
<p>AMP 的開發方式，基本上是使用官方提供的 Component 去組出畫面，所以在內容呈現上就是要找到對的 Component 然後將內容套進去，例如 <code>&lt;img&gt;</code>，就會用 <code>&lt;amp-img&gt;</code> 替代</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">amp-img</span> <span class="attr">src</span>=<span class="string">&quot;IMG-URL&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;responsive&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">amp-img</span>&gt;</span>	</span><br></pre></td></tr></table></figure>
<p>所有的動作就交給 component 來處理，像是 RWD 的效果，除了 <code>responsive</code> 的效果外，當然還有其他的設定，設定方式請參閱官方文件 <a href="https://amp.dev/documentation/guides-and-tutorials/learn/amp-html-layout/?format=websites">AMPHTML Layout System</a> 章節</p>
<h2 id="使用-AMP-Components"><a class="header-anchor" href="#使用-AMP-Components"> </a>使用 AMP Components</h2>
<p>每一個 AMP Component 在自己的 API 文件中，大部分都有 <code>Required Scripts</code> 的資訊，而這一個資訊就是要加到頁面中，例如 <code>amp-youtube</code> 元件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">custom-element</span>=<span class="string">&quot;amp-youtube&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.ampproject.org/v0/amp-youtube-0.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基於這種架構，寫 AMP  的第一個門檻是要使用哪一個 component。(怎麼跟 Flutter 好像)，更多關於 Component 的可以參閱 <a href="https://amp.dev/documentation/components/">Components 文件</a></p>
<h1 id="驗證工具"><a class="header-anchor" href="#驗證工具"> </a>驗證工具</h1>
<p>Chrome 有出 AMP 驗證工具，安裝後即可使用，<a href="https://chrome.google.com/webstore/detail/amp-validator/nmoffdblmcmgeicmolmhobpoocbbmknc/related?hl=en">安裝位置</a></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://amp.dev/documentation/courses/beginning-course">AMP Beginning Free Course</a></li>
<li><a href="https://support.google.com/webmasters/answer/139066?hl=zh-Hant">整合重複的網址 canonical</a></li>
<li><a href="https://amp.dev/documentation/guides-and-tutorials/learn/amp-html-layout/?format=websites">AMPHTML Layout System</a></li>
<li><a href="https://amp.dev/documentation/components/">Components 文件</a></li>
</ul>
]]></content>
      <categories>
        <category>AMP</category>
      </categories>
      <tags>
        <tag>AMP</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular Form 值變化 - 不踩雷就不會進步</title>
    <url>/2020/04/20/angular-form-valuechanges/</url>
    <content><![CDATA[<p>Angular Reacitve Form 內有一套值的更新流程，從 FormGroup 到 FormControl 間到底是如何進行資料的更新，有什麼要留意的地方，在這篇筆記內我盡量整理 (會持續潤稿)</p>
<span id="more"></span>
<p>首先先將重點放在 <code>FormGroup</code> 和 <code>FormControl</code> 這兩個主體上就好，我們都知道 <code>FormGroup</code> 和 <code>FormControl</code> 都是繼承 <code>AbstractControl</code>，不同的部分就在各 class 上重新撰寫 ，好加在的是這篇文章要看的程是碼都在同一個<a href="https://github.com/angular/angular/blob/d7e9d8746a47c689fd8014f3913c47c4d6692709/packages/forms/src/model.ts">檔案</a>上</p>
<p>而此篇要探討的是 <code>setValue</code>、<code>patchValue</code> 和 <code>valuechanges</code> 這三件事情，到底更新的流程是什麼，為什麼這件事情很重要，當在寫連動表單或是物件時，流程一但搞錯就會讓你除錯除到死</p>
<h1 id="原始碼解析"><a class="header-anchor" href="#原始碼解析"> </a>原始碼解析</h1>
<h2 id="FormControl"><a class="header-anchor" href="#FormControl"> </a>FormControl</h2>
<p>先從最底層的元件來看，對於 <code>FormControl</code> 來說，<code>patchValue</code> 與 <code>setValue</code> 是沒有差異的，即使呼叫 <code>patchValue</code>，還是會去執行 <code>setValue</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">patchValue</span>(<span class="attr">value</span>: <span class="built_in">any</span>, <span class="attr">options</span>: &#123;</span><br><span class="line">    onlySelf?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitEvent?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitModelToViewChange?: <span class="built_in">boolean</span>,</span><br><span class="line">    emitViewToModelChange?: <span class="built_in">boolean</span></span><br><span class="line">  &#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setValue</span>(value, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 <code>setValue</code> 會執行的程是碼其實也不多，所有的工作都落在 <code>updateValueAndValidity</code> 上</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setValue</span>(<span class="attr">value</span>: <span class="built_in">any</span>, <span class="attr">options</span>: &#123;</span><br><span class="line">   onlySelf?: <span class="built_in">boolean</span>,</span><br><span class="line">   emitEvent?: <span class="built_in">boolean</span>,</span><br><span class="line">   emitModelToViewChange?: <span class="built_in">boolean</span>,</span><br><span class="line">   emitViewToModelChange?: <span class="built_in">boolean</span></span><br><span class="line"> &#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">   (<span class="variable language_">this</span> <span class="keyword">as</span> &#123;<span class="attr">value</span>: <span class="built_in">any</span>&#125;).<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">_pendingValue</span> = value;</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_onChange</span>.<span class="property">length</span> &amp;&amp; options.<span class="property">emitModelToViewChange</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">_onChange</span>.<span class="title function_">forEach</span>(</span><br><span class="line">         <span class="function">(<span class="params">changeFn</span>) =&gt;</span> <span class="title function_">changeFn</span>(<span class="variable language_">this</span>.<span class="property">value</span>, options.<span class="property">emitViewToModelChange</span> !== <span class="literal">false</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">updateValueAndValidity</span>(options); <span class="comment">// 重點 function</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="updateValueAndValidity"><a class="header-anchor" href="#updateValueAndValidity"> </a>updateValueAndValidity</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">updateValueAndValidity</span>(<span class="attr">opts</span>: &#123;onlySelf?: <span class="built_in">boolean</span>, emitEvent?: <span class="built_in">boolean</span>&#125; = &#123;&#125;): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_setInitialStatus</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_updateValue</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">enabled</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_cancelExistingSubscription</span>();</span><br><span class="line">      (<span class="variable language_">this</span> <span class="keyword">as</span> &#123;<span class="attr">errors</span>: <span class="title class_">ValidationErrors</span> | <span class="literal">null</span>&#125;).<span class="property">errors</span> = <span class="variable language_">this</span>.<span class="title function_">_runValidator</span>();</span><br><span class="line">      (<span class="variable language_">this</span> <span class="keyword">as</span> &#123;<span class="attr">status</span>: <span class="built_in">string</span>&#125;).<span class="property">status</span> = <span class="variable language_">this</span>.<span class="title function_">_calculateStatus</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">VALID</span> || <span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">_runAsyncValidator</span>(opts.<span class="property">emitEvent</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opts.<span class="property">emitEvent</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">      (<span class="variable language_">this</span>.<span class="property">valueChanges</span> <span class="keyword">as</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">any</span>&gt;).<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">      (<span class="variable language_">this</span>.<span class="property">statusChanges</span> <span class="keyword">as</span> <span class="title class_">EventEmitter</span>&lt;<span class="built_in">string</span>&gt;).<span class="title function_">emit</span>(<span class="variable language_">this</span>.<span class="property">status</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_parent</span> &amp;&amp; !opts.<span class="property">onlySelf</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_parent</span>.<span class="title function_">updateValueAndValidity</span>(opts);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>主要程式碼是寫在 <code>AbstractControl</code> 裡</p>
<ul>
<li>
<p>line 2: 取得目前物件的狀態，如果是 <code>disabled</code> 的話，則 <code>status</code> 將會是 <code>DISABLED</code> 不然就是 <code>VALID</code></p>
</li>
<li>
<p>line 3: 只有在 <code>FormGroup</code> 和 <code>FormArray</code> 有實做，根據目前 <code>Group</code> / <code>Array</code> 內子物件的值更新本身的值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@internal</span> */</span></span><br><span class="line"><span class="title function_">_updateValue</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">  (<span class="variable language_">this</span> <span class="keyword">as</span> &#123;<span class="attr">value</span>: <span class="built_in">any</span>&#125;).<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">_reduceValue</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** <span class="doctag">@internal</span> */</span></span><br><span class="line"><span class="title function_">_reduceValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">_reduceChildren</span>(</span><br><span class="line">      &#123;&#125;, <span class="function">(<span class="params">acc: &#123;[k: <span class="built_in">string</span>]: AbstractControl&#125;, control: AbstractControl, name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (control.<span class="property">enabled</span> || <span class="variable language_">this</span>.<span class="property">disabled</span>) &#123;</span><br><span class="line">          acc[name] = control.<span class="property">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>line 5 ~ 13: 如果物件狀態是 <code>enabled</code> 才會進行驗證動作，驗證的順序為</p>
<ol>
<li>同步驗證先執行，並更新狀態</li>
<li>如果狀態是 <code>VALID</code> 或是 <code>PENDING</code> 才會進行非同步驗證</li>
</ol>
</li>
<li>
<p>根據傳入參數 <code>emitEvent</code> 來決定是否觸發 <code>valueChanges</code> 和 <code>statusChanges</code></p>
</li>
<li>
<p>根據 <code>onlySelf</code> 來決定是否要觸發父層的 <code>updateValueAndValidity</code></p>
</li>
</ul>
<p>這裡有一個小技巧，所傳入的參數值並沒有設定預設值，而是很明確指定判斷值，這招可以學一下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (opts.<span class="property">emitEvent</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="FormGroup"><a class="header-anchor" href="#FormGroup"> </a>FormGroup</h2>
<h3 id="patchValue"><a class="header-anchor" href="#patchValue"> </a>patchValue</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">patchValue</span>(<span class="attr">value</span>: &#123;[<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125;, <span class="attr">options</span>: &#123;onlySelf?: <span class="built_in">boolean</span>, emitEvent?: <span class="built_in">boolean</span>&#125; = &#123;&#125;):</span><br><span class="line">     <span class="built_in">void</span> &#123;</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">keys</span>(value).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">controls</span>[name]) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">controls</span>[name].<span class="title function_">patchValue</span>(value[name], &#123;<span class="attr">onlySelf</span>: <span class="literal">true</span>, <span class="attr">emitEvent</span>: options.<span class="property">emitEvent</span>&#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">updateValueAndValidity</span>(options);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>會先更新子物件，並設定只會更新子物件本身</li>
<li>在跑自己的 <code>updateValueAndValidity</code></li>
</ul>
<h1 id="細節"><a class="header-anchor" href="#細節"> </a>細節</h1>
<p>一般使用基本上不會遇到什麼問題，但如果遇到連動的情況，就要特別小心</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">formData = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">   <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(),</span><br><span class="line">   <span class="attr">lastName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>()</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="情境-1"><a class="header-anchor" href="#情境-1"> </a>情境 1</h2>
<p>請各位想想根據第一段的原始碼解析，這邊跑出來結果會是什麼呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;formGroup&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">firstName</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;firstName:&quot;</span>, value, <span class="string">&quot;formGroup value:&quot;</span> ,<span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">     <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lastName:&quot;</span>, value, <span class="string">&quot;formGroup value:&quot;</span> ,<span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="title function_">patchValue</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>結果如下</p>
<p><img src="image-20200420113943341.png" alt="image-20200420113943341"></p>
<p>為什麼呢? 來模擬一下執行的步驟</p>
<ol>
<li><code>formGroup.patchValue</code> : 會根據傳進去的資料依序更新 <code>firstname</code> 與 <code>lastName</code> formControl</li>
<li><code>firstName FormControl</code> 更新自身的值，但因為 <code>FormGroup</code> 傳入 <code>onlySelf</code> 為 <code>true</code>，所以不會更新 parent 的值</li>
<li><code>lastName FormControl</code> 更新自身的值，但因為 <code>FormGroup</code> 傳入 <code>onlySelf</code> 為 <code>true</code>，所以不會更新 parent 的值</li>
<li><code>FormGroup</code> 執行 <code>updateValueAndValidity</code></li>
<li>根據 <code>children</code> 更新自身的值</li>
<li>送出 <code>valueChanges event</code></li>
<li>結束</li>
</ol>
<h2 id="情境-2"><a class="header-anchor" href="#情境-2"> </a>情境 2</h2>
<p>這邊跑出來結果會是什麼呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;formGroup&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">firstName</span>.<span class="property">valueChanges</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="title function_">setValue</span>(<span class="string">&quot;3&quot;</span>)))</span><br><span class="line">    .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">&quot;firstName:&quot;</span>,</span><br><span class="line">        value,</span><br><span class="line">        <span class="string">&quot;formGroup value:&quot;</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span></span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lastName:&quot;</span>, value, <span class="string">&quot;formGroup value:&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="title function_">patchValue</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>結果如下</p>
<p><img src="image-20200420114620734.png" alt="image-20200420114620734"></p>
<p>你想對了嗎? 我們來模擬一下執行的步驟</p>
<ol>
<li><code>formGroup.patchValue</code> : 會根據傳進去的資料依序更新 <code>firstname</code> 與 <code>lastName</code> formControl</li>
<li><code>firstName FormControl</code> 更新自身的值，但因為 <code>FormGroup</code> 傳入 <code>onlySelf</code> 為 <code>true</code> ，所以不會更新 parent 的值</li>
<li>過程中去執行更新 <code>lastName FormControl</code> 的值 ，參數接為預設值，所以 <code>emitEvent: true,onlySelf:false</code></li>
<li>觸發 <code>lastName FormControl</code> 的 <code>valueChanges</code></li>
<li>觸發父層的 <code>updateValueAndValidity</code></li>
<li><code>firstName FormControl</code> 自身 <code>valueChanges</code> 流程跑玩</li>
<li><code>lastName FormControl</code> 更新自身的值，但因為 <code>FormGroup</code> 傳入 <code>onlySelf</code> 為 <code>true</code>，所以不會更新父層的值</li>
<li><code>FormGroup</code> 執行 <code>updateValueAndValidity</code></li>
<li>根據 <code>children</code> 更新自身的值</li>
<li>送出 <code>valueChanges event</code></li>
<li>結束</li>
</ol>
<h2 id="情境-3"><a class="header-anchor" href="#情境-3"> </a>情境 3</h2>
<p>這邊跑出來結果會是什麼呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;formGroup&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">firstName</span>.<span class="property">valueChanges</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="title function_">setValue</span>(<span class="string">&quot;3&quot;</span>, &#123;<span class="attr">emitEvent</span>: <span class="literal">false</span>&#125;)))</span><br><span class="line">    .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">&quot;firstName:&quot;</span>,</span><br><span class="line">        value,</span><br><span class="line">        <span class="string">&quot;formGroup value:&quot;</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span></span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lastName:&quot;</span>, value, <span class="string">&quot;formGroup value:&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="title function_">patchValue</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>結果如下，你想對了嗎?</p>
<p><img src="image-20200420115342646.png" alt="image-20200420115342646"></p>
<h2 id="情境-4"><a class="header-anchor" href="#情境-4"> </a>情境 4</h2>
<p>這邊跑出來結果會是什麼呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;formGroup&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">firstName</span>.<span class="property">valueChanges</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">tap</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="title function_">setValue</span>(<span class="string">&quot;3&quot;</span>, &#123;<span class="attr">emitEvent</span>: <span class="literal">false</span>, <span class="attr">onlySelf</span>: <span class="literal">true</span>&#125;)))</span><br><span class="line">    .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">&quot;firstName:&quot;</span>,</span><br><span class="line">        value,</span><br><span class="line">        <span class="string">&quot;formGroup value:&quot;</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span></span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lastName:&quot;</span>, value, <span class="string">&quot;formGroup value:&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="title function_">patchValue</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>結果如下，你想對了嗎?</p>
<p><img src="image-20200420115502508.png" alt="image-20200420115502508"></p>
<h2 id="情境-5"><a class="header-anchor" href="#情境-5"> </a>情境 5</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;formGroup&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">firstName</span>.<span class="property">valueChanges</span></span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">mergeMap</span>(<span class="function">() =&gt;</span></span><br><span class="line">             <span class="title function_">timer</span>(<span class="number">1000</span>, <span class="number">0</span>).<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">take</span>(<span class="number">1</span>),</span><br><span class="line">        <span class="title function_">tap</span>(<span class="function">() =&gt;</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="title function_">setValue</span>(<span class="string">&quot;3&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">emitEvent</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">onlySelf</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)))</span><br><span class="line">      )</span><br><span class="line">	)</span><br><span class="line">    .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">&quot;firstName:&quot;</span>,</span><br><span class="line">        value,</span><br><span class="line">        <span class="string">&quot;formGroup value:&quot;</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span></span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">controls</span>.<span class="property">lastName</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lastName:&quot;</span>, value, <span class="string">&quot;formGroup value:&quot;</span>, <span class="variable language_">this</span>.<span class="property">formData</span>.<span class="property">value</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">formData</span>.<span class="title function_">patchValue</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>結果如下，你想對了嗎?</p>
<p><img src="image-20200420115625936.png" alt="image-20200420115625936"></p>
<h1 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h1>
<p>Reactive Form 將 <code>valueChanges</code> 包成 <code>Observable</code> 是很方便，要做一些連動的動作可以如流水般的操作，但問題是，如果資料流的線路沒搞對，就會發生為什麼這裡取的資料是錯的問題發生。這些細節的部分都是文件中沒有提到的</p>
<p>所以，在 FormControl 的 valuechanges 流中操作其它 FormControl 的值要特別小心，務必確認同步與非同步的發生順序</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular FormGroup Value 之被忽略的細節</title>
    <url>/2020/05/06/angular-formgroup-value/</url>
    <content><![CDATA[<p>當在操作 Angular  表單時，於最後送出表單資料到 API 時，常見的使用方法為 <code>formGroup.value</code> 或是 <code>formGroup.getRawValue()</code> 兩種方法，關於 <code>getRawValue()</code> 大概也不用多贅述了。但你知道 <code>FormGroup</code> 的 value 取得資料的規則嗎 ?</p>
<span id="more"></span>
<h1 id="FormGroup-value"><a class="header-anchor" href="#FormGroup-value"> </a>FormGroup.value</h1>
<p>一般來說，<code>FormGroup</code> 的 value 會將該群組下的控制項資料取出，如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">formData1 = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&quot;Kevin&quot;</span>),</span><br><span class="line">    <span class="attr">lastName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&quot;Yang&quot;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formData1.<span class="property">value</span>); <span class="comment">// &#123;firstName: &#x27;Kevin&#x27;, lastName: &#x27;Yang&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<p>而第一個新手常會踩到的雷，會這遇到 <code>FormControl</code> 狀態是 <code>Disabed</code> 時，<code>FormGroup</code> 取出的值就不會是全部了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">formData1 = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(&#123;<span class="attr">value</span>:<span class="string">&quot;Kevin&quot;</span>, <span class="attr">disabled</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    <span class="attr">lastName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&quot;Yang&quot;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formData1.<span class="property">value</span>); <span class="comment">// &#123;lastName: &#x27;Yang&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formData1.<span class="title function_">getRawValue</span>()); <span class="comment">// &#123;firstName: &#x27;Kevin&#x27;, lastName: &#x27;Yang&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<p>官方文件說明</p>
<blockquote>
<p>For an enabled <code>FormGroup</code>, the values of enabled controls as an object with a key-value pair for each member of the group.</p>
</blockquote>
<p>到這邊都還算正常，但你知道當 <code>FormGroup</code> 狀態為 <code>Disabled</code> 時，就會取出所有控制項的值嗎?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">formData1 = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(&#123;<span class="attr">value</span>:<span class="string">&quot;Kevin&quot;</span>, <span class="attr">disabled</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">    <span class="attr">lastName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&quot;Yang&quot;</span>),</span><br><span class="line">&#125;);</span><br><span class="line">formData1.<span class="title function_">disable</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formData1.<span class="property">value</span>); <span class="comment">// &#123;firstName: &#x27;Kevin&#x27;, lastName: &#x27;Yang&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<p>根據官網的說明</p>
<blockquote>
<p>For a disabled <code>FormGroup</code>, the values of all controls as an object with a key-value pair for each member of the group.</p>
</blockquote>
<p>但如果是這樣子的結構，會取得怎樣的值呢?</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">formData1 = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(&#123;<span class="attr">value</span>:<span class="string">&quot;Kevin&quot;</span>, <span class="attr">disabled</span>: <span class="literal">true</span>&#125;),    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formData1.<span class="property">value</span>); <span class="comment">// ??</span></span><br></pre></td></tr></table></figure>
<p>在第五行會顯示 <code>&#123;firstName: 'Kevin'&#125;</code>，這是一件我剛開始也覺得很困惑的現象，為什麼明明 <code>FormControl</code> 是 <code>disabled</code>  的狀態，但為什麼還能取得呢?</p>
<h2 id="原始碼解析"><a class="header-anchor" href="#原始碼解析"> </a>原始碼解析</h2>
<p>在 <code>FormGroup</code>  class 內有一個方法是在判斷目前 <code>FormGroup</code> 下的控制項是否全部為 <code>Disabled</code> ，如果是自己本身的狀態也會被設定為 <code>Disabled</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">_allControlsDisabled</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> controlName <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">controls</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">controls</span>[controlName].<span class="property">enabled</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">controls</span>).<span class="property">length</span> &gt; <span class="number">0</span> || <span class="variable language_">this</span>.<span class="property">disabled</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/angular/angular/blob/master/packages/forms/src/model.ts#L1631-L1638">source code</a></li>
</ul>
<p>因為這一個關係，上面那一個問題就會使用 <code>FormGroup</code> 為 Disabled 時的規則運行</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/api/forms/AbstractControl#properties">Angular API</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure] 將 Angular 網站放在 App Service Linux Version 上</title>
    <url>/2020/06/15/azure-app-service-linux-angular/</url>
    <content><![CDATA[<p>要將 Angular 放在 Azure 上面的方法有很多種，而今天要介紹的是其中一種，App Service(Linux Version)</p>
<span id="more"></span>
<p>在 Azure 上面，使用 Linux 版本的價錢可以比 Windows 版本便宜許多，但如果想要放靜態網站時又該怎麼呢? 其實可以簡單透過 npm 上面的一個套件 <a href="https://www.npmjs.com/package/serve">serve</a> 來完成，這樣就不用自己寫一個 Http Server。但如果是要給 Production 環境使用，還是建議使用正統的 http server 寫法</p>
<p>在 App Service 上面可以這樣子設定</p>
<p><img src="image-20200615211052044.png" alt="image-20200615211052044"></p>
<p>可以透過啟動指令的方式來啟動我們想要執行的程式，所以如果是 node epxress 的情況下，就會是 <code>node ./index.js </code> 之類的</p>
<p>而部屬的動作就將 Angular build 出的專案資料夾內的檔案上傳到 App Service 即可</p>
]]></content>
      <categories>
        <category>Azure</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] 使用 Azure Key Vault 服務來管理簽章用的金鑰</title>
    <url>/2020/06/22/azure-keyVault-sign-with-rsa/</url>
    <content><![CDATA[<p>要使用 RSA Private Key 來做資料簽章表示我們需要將 Private Key 存放在某一個地方，但絕對不會在程式的參數設定檔內，其實在 <a href="http://ASP.NET">ASP.NET</a> Core 內提供很多方法可以存放設定檔，例如使用 user secret，更多資訊可以參閱<a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/app-secrets?view=aspnetcore-3.1">此文件</a>。</p>
<p>Azure 上面也有一個 Azure Key Vault 的服務，可以集中管理相關的金鑰 (Keys)、秘密 (Secret)、憑證 (Certificate) 等資訊，而相關的服務就可以連線到這一個 Key Vault 服務取得相關的資訊做進一步的使用，例如加解密等作業</p>
<span id="more"></span>
<h1 id="秘密-Secret"><a class="header-anchor" href="#秘密-Secret"> </a>秘密 (Secret)</h1>
<p>在一個網站會有一些設定檔會因為部屬環境而所異動，這一類的設定當然不可能寫死在程式裡，所以會將這一類的設定檔放在某一個設定檔類，例如 appsettings.json 或是 user secret 等地方，而像資料庫連線這種資料敏感的資料，存放在 appsettings.json 內就十分危險，會建議放在版控以外的地方或是 Hosting 的主機上，例如 Azure App Service 就有提供設定環境參數的地方。</p>
<p><img src="image-20200622213144659.png" alt="image-20200622213144659"></p>
<p>但如果同樣的資訊出現在不同的程式裡，分別設定就變得十分不合適了，這時候使用 Azure Key Vault 服務就會是個不錯的選擇，但這邊就不多說明如何建立 Azure Key Vault 的步驟了，相關資訊可以上網找一下，應該蠻多的</p>
<p>當 Azure Key Vault 設定好時，為了要讓網站 (<a href="http://ASP.NET">ASP.NET</a> Core MVC) 可以將 Key Vault 上所設定的 Secret 資訊讀近來，還需要以下有幾個步驟</p>
<ol>
<li>
<p>在 Azure Active Directory 下註冊應用程式</p>
<p><img src="image-20200622213613127.png" alt="image-20200622213613127"></p>
</li>
<li>
<p>註冊完成後，到該應用程式下的【憑證與秘密】，新增 【用戶端密碼】</p>
<ol>
<li>這邊需要記下兩個資訊，分別是 【應用程式 (用戶端) 識別碼】與 【用戶端密碼的值】</li>
<li>這邊如果不想要使用用戶端密碼的，可以使用憑證的方式</li>
</ol>
</li>
<li>
<p>回到 Azure Key Vault 的服務內，授權應用程式可以存取 Key Vault</p>
<p><img src="SNAGHTML2126530-1592833176303.PNG" alt="img"></p>
<ol start="4">
<li>
<p>新增存取原則</p>
<p><img src="image-20200622214050780.png" alt="image-20200622214050780"></p>
<ul>
<li>設定相關的權限</li>
<li>選擇套用的主體，這邊是指剛剛所註冊的應用程式</li>
</ul>
</li>
<li>
<p>完成新增動作</p>
</li>
</ol>
<p>到這邊，就已經完成相關權限設定的部分，接下來就是程式端的設定</p>
<h2 id="程式"><a class="header-anchor" href="#程式"> </a>程式</h2>
<ol>
<li>
<p>需要安裝以下套件</p>
<ol>
<li><a href="https://www.nuget.org/packages/Microsoft.Azure.Services.AppAuthentication">Microsoft.Azure.Services.AppAuthentication</a></li>
<li><a href="https://www.nuget.org/packages/Microsoft.Azure.KeyVault">Microsoft.Azure.KeyVault</a></li>
<li><a href="https://www.nuget.org/packages/Microsoft.Extensions.Configuration.AzureKeyVault/">Microsoft.Extensions.Configuration.AzureKeyVault</a></li>
</ol>
</li>
<li>
<p>在 appsettings.json 的地方新增此資訊</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;KeyVault&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Vault&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ClientId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ClientSecret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>當然這邊的 <code>ClientId</code> 和 <code>ClientSecret</code> 會放在 <code>User secret</code> 下，而不會是 <code>appsettings.json</code> 內</p>
</li>
<li>
<p>在 <code>Program.cs</code> 的地方做出以下調整</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            Host.CreateDefaultBuilder(args)</span><br><span class="line">                .ConfigureAppConfiguration((ctx, builder) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 新增部分</span></span><br><span class="line">                    <span class="keyword">var</span> builtConfig = builder.Build();</span><br><span class="line">                    <span class="keyword">var</span> keyVaultEndpoint = GetKeyVaultEndpoint(builtConfig[<span class="string">&quot;KeyVault:Vault&quot;</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(keyVaultEndpoint))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> azureServiceTokenProvider = <span class="keyword">new</span> AzureServiceTokenProvider();</span><br><span class="line">                        <span class="keyword">var</span> keyVaultClient = <span class="keyword">new</span> KeyVaultClient(</span><br><span class="line">                            <span class="keyword">new</span> KeyVaultClient.AuthenticationCallback(</span><br><span class="line">                                azureServiceTokenProvider.KeyVaultTokenCallback));</span><br><span class="line">                        builder.AddAzureKeyVault(</span><br><span class="line">                            keyVaultEndpoint, keyVaultClient, <span class="keyword">new</span> DefaultKeyVaultSecretManager());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)                </span><br><span class="line">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">                &#125;);</span><br><span class="line">	   <span class="comment">// 新增部分</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetKeyVaultEndpoint</span>(<span class="params"><span class="built_in">string</span> VAULT_NAME</span>)</span> =&gt; <span class="string">$&quot;https://<span class="subst">&#123;VAULT_NAME&#125;</span>.vault.azure.net/&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>當完成這修改後，.NET Core MVC 就會優先從 Azure Key Vault 裡取得 secret 資料，讀取的方式與其他參數設定取法是一樣的</p>
</li>
</ol>
</li>
</ol>
<h1 id="金鑰-Keys"><a class="header-anchor" href="#金鑰-Keys"> </a>金鑰 (Keys)</h1>
<p>至於金鑰的取法就比較特殊點，需要透過 <code>KeyVaultClient</code> 的方式來取得，而且也只能取得公開金鑰的部分，私有金鑰要做的事情，則會透過 <code>KeyVaultClient</code> 來完成。</p>
<p>要建立 <code>KeyVaultClient</code> 的方法如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> KeyVaultClient <span class="title">GetClient</span>()</span> =&gt; <span class="keyword">new</span> KeyVaultClient(<span class="keyword">new</span> KeyVaultClient.AuthenticationCallback(<span class="keyword">async</span> (<span class="built_in">string</span> authority, <span class="built_in">string</span> resource, <span class="built_in">string</span> scope) =&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">var</span> context = <span class="keyword">new</span> AuthenticationContext(authority, TokenCache.DefaultShared);</span><br><span class="line">           ClientCredential clientCred = <span class="keyword">new</span> ClientCredential(configuration[<span class="string">&quot;KeyVault:ClientId&quot;</span>], configuration[<span class="string">&quot;KeyVault:ClientSecret&quot;</span>]);</span><br><span class="line">           <span class="keyword">var</span> authResult = <span class="keyword">await</span> context.AcquireTokenAsync(resource, clientCred);</span><br><span class="line">           <span class="keyword">return</span> authResult.AccessToken;</span><br><span class="line">       &#125;));</span><br></pre></td></tr></table></figure>
<p>執行 <code>GetClient()</code> 就可以取得 KeyVaultClient，當取得 client 後，就可以取得我們想要的金鑰，但這邊最簡單的方式是透過金鑰的識別碼</p>
<p><img src="image-20200622220559893.png" alt="image-20200622220559893"></p>
<p><img src="image-20200622225114968.png" alt="image-20200622225114968"></p>
<p><img src="image-20200622220802801.png" alt="image-20200622220802801"></p>
<p>這邊的【金鑰識別碼】就是我們等等要用的資訊，先記起來，相關的程式碼會這樣子寫。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> KeyId = <span class="string">&quot;xxx&quot;</span>; <span class="comment">// 金鑰識別碼</span></span><br><span class="line"><span class="keyword">var</span> client = GetClient();</span><br><span class="line"><span class="keyword">var</span> hostKey = <span class="keyword">await</span> client.GetKeyAsync(KeyId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得 Public Key </span></span><br><span class="line"><span class="keyword">var</span> rsa = hostkye.Key.ToRSA();</span><br><span class="line"><span class="keyword">var</span> publicKey = rsa.ToXmlString(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 簽章</span></span><br><span class="line"><span class="keyword">var</span> hasher = <span class="keyword">new</span> SHA256CryptoServiceProvider();</span><br><span class="line"><span class="keyword">var</span> digest = hasher.ComputeHash(data_buffer);</span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> client.SignAsync(KeyId, <span class="string">&quot;RS256&quot;</span>, digest);</span><br><span class="line"><span class="built_in">byte</span>[] sign_buffer = result.Result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驗證簽章</span></span><br><span class="line"><span class="keyword">var</span> sign_buffer = sign_getFromSomeWhere();</span><br><span class="line"><span class="keyword">var</span> data_buffer = data_getFromSomeWhere();</span><br><span class="line"><span class="keyword">var</span> rsa = <span class="keyword">new</span> RSACryptoServiceProvider();</span><br><span class="line">rsa.FromXmlString(publicKey);</span><br><span class="line"><span class="keyword">var</span> hasher = <span class="keyword">new</span> SHA256CryptoServiceProvider();</span><br><span class="line"><span class="keyword">var</span> digest = hasher.ComputeHash(data_buffer);</span><br><span class="line"><span class="keyword">var</span> isVerfy = rsa.VerifyHash(digest, <span class="string">&quot;Sha256&quot;</span>, sign_buffer);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>到這裡基本上就是一些 KeyVaultClient 的操作，當然還有其他更細節的東西，可能就要等我之後有玩更深入時，才能分享了</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://azure.microsoft.com/zh-tw/services/key-vault/">Azure Key Vault</a></li>
<li><a href="https://www.youtube.com/watch?v=PgujSug1ZbI">Azure Key Vault Tutorial | Secure secrets, keys and certificates easily</a></li>
<li><a href="https://docs.microsoft.com/zh-tw/aspnet/core/security/key-vault-configuration?view=aspnetcore-3.1">ASP.NET Core 中的 Azure Key Vault 設定提供者</a></li>
<li><a href="https://dotblogs.com.tw/tom5707/2018/05/07/004419">[ASP.NET Core] 使用User Secret安全存放開發應用程式密鑰(VS 2017)</a></li>
</ul>
]]></content>
      <categories>
        <category>Azure</category>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 幫 moment.js 套件瘦身</title>
    <url>/2020/07/25/angular-moment-localte-is-too-fat/</url>
    <content><![CDATA[<p>長久以來，使用 moment.js 這一個時間套件讓我很掙扎，畢竟他很好用但很肥，主要肥胖的地方都是一堆用不到的 locale.</p>
<p>今天終於下定決心要來解決這個問題，經過兩分鐘的搜尋後，以下是解法</p>
<span id="more"></span>
<ol>
<li>在 <code>src</code> 資料夾下建立一個 locale 空的資料夾</li>
<li>在 <code>angular.json</code> 的 <code>fileReplacements</code> 內多新增下面設定</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/moment/locale/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;with&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/locale/&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>當這樣子設定完成後，ng build --prod 時會出現 <code>\moment\locale\af.js&quot; does not exist.</code> 找不到的錯誤訊息，沒關係這個不會影響到我們的程式執行。</p>
<p>經過這樣子的調整後，整個 moment locale 的部分就會被拔掉，瞬間瘦了快 400kb 的大小，可以算是瘦身成功</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Office] 如何在簡報上做出圓圖效果</title>
    <url>/2020/07/28/office-ppt-tips-crop-image/</url>
    <content><![CDATA[<p>這一個技巧應該很多人都知道了，但我是最近需要用到才學會的，但不管怎樣還是分享一下，如何在簡報上做出圓圖效果，而這一個技巧適用於 Office PowerPoint 與 Google 簡報，以下是操作步驟。</p>
<span id="more"></span>
<h1 id="Office-PowerPoint"><a class="header-anchor" href="#Office-PowerPoint"> </a>Office PowerPoint</h1>
<ol>
<li>
<p>加入一張圖片，可以用複製、拖拉、或是手動加入都可以</p>
</li>
<li>
<p>選擇圖片，這時候上方的選單會多出跟圖片編輯相關的選項</p>
<p><img src="image-20200728144934186.png" alt="image-20200728144934186"></p>
</li>
<li>
<p>選擇【圖片格式】</p>
<p><img src="image-20200728145014134.png" alt="image-20200728145014134"></p>
</li>
<li>
<p>裁剪的功能是我們要的，但這之前先介紹裁剪原本的功能</p>
<ol>
<li>
<p>可以裁剪我們想要的圖片範圍，點選【裁剪】後圖片的邊界會顯示如下圖圓圈標示起來的樣式</p>
<p><img src="image-20200728145333770.png" alt="image-20200728145333770"></p>
</li>
<li>
<p>透過移動邊際來決定裁剪後要顯示的範圍</p>
<p><img src="image-20200728145420151.png" alt="image-20200728145420151"></p>
</li>
<li>
<p>確定後只會留下明亮的部分</p>
</li>
</ol>
</li>
<li>
<p>除了預設功能外，【裁剪】下方的箭頭打開還有更多的功能，本篇文章的圓圖顯示就是要利用這邊的功能</p>
<p><img src="image-20200728145539002.png" alt="image-20200728145539002"></p>
</li>
</ol>
<h2 id="顯示圓圖"><a class="header-anchor" href="#顯示圓圖"> </a>顯示圓圖</h2>
<ol>
<li>
<p>選擇裁剪成圖形，選擇橢圓形，(沒有圓形的選項)</p>
<p><img src="image-20200728145657272.png" alt="image-20200728145657272"></p>
<p><img src="image-20200728145738420.png" alt="image-20200728145738420"></p>
</li>
<li>
<p>設定長寬比例為 <strong>1 : 1</strong></p>
<p><img src="image-20200728145813218.png" alt="image-20200728145813218"></p>
</li>
<li>
<p>完成圓形圖片的顯示</p>
<p><img src="image-20200728145845651.png" alt="image-20200728145845651"></p>
</li>
</ol>
<h1 id="Google-簡報"><a class="header-anchor" href="#Google-簡報"> </a>Google 簡報</h1>
<p>在 Google 簡報上要顯示圓形圖片的方式跟 PowerPoint 是一樣的</p>
<ol>
<li>
<p>插入圖片</p>
<p><img src="image-20200728150019552.png" alt="image-20200728150019552"></p>
</li>
<li>
<p>選擇圖片後，會出現【裁剪】的圖示</p>
<p><img src="image-20200728150135004.png" alt="image-20200728150135004"></p>
</li>
<li>
<p>透過旁邊的箭頭選單，選擇要裁剪的圖形樣式</p>
<p><img src="image-20200728150215963.png" alt="image-20200728150215963"></p>
</li>
<li>
<p>這裡要留意的是，如果圖片的長寬比例不是 1 : 1 的關係時，就不會顯示成圓形，所以要裁剪圖片的尺寸</p>
<p><img src="image-20200728150816591.png" alt="image-20200728150816591"></p>
<p><img src="image-20200728150910331.png" alt="image-20200728150910331"></p>
</li>
<li>
<p>打完收工</p>
</li>
</ol>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p>本文章使用的圖片來源是 Photo by <a href="https://unsplash.com/@vdapinto?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Vitor Pinto</a> on <a href="https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p>
]]></content>
      <categories>
        <category>Office</category>
      </categories>
      <tags>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>[容器] 容器技術之 Docker 篇 - 概念整理</title>
    <url>/2020/07/30/docker-101-note-1/</url>
    <content><![CDATA[<p>閃避多年的主題，容器技術，到最後還是閃不到，只好乖乖的面對它。首先先針對比較常見的容器技術 Docker，將一些比較概念性的東西整理在這邊筆記內。</p>
<span id="more"></span>
<h1 id="與-Virtual-Machine-的差異"><a class="header-anchor" href="#與-Virtual-Machine-的差異"> </a>與 Virtual Machine 的差異</h1>
<p>Docker 與虛擬機器(Virtual Machine)的差異</p>
<ul>
<li>Docker 容器與容器間共用相同的 OS Kernel，虛擬機器是各自擁有自己的 OS，這表示 Docker Server 如果是跑 Linux 版本(通常也是這個)，就不能跑 Windows 的容器。虛擬機器只是共用硬體資源，所以在 VM Server 上就可以並存 Linux base 和 Windows Base</li>
<li>在同樣的硬體資源下，Docker 可以跑比較多單位</li>
<li>複製環境的速度，Docker 比較快，因為容器所需要的 Image 是可以透過指令的方式從某一個地方抓下來就可以執行，而 VM 也是可以做到，但因為 VM 的檔案比較大，搬移需要比較長的時間</li>
</ul>
<p><img src="1_gVNbunchCV5wXgnwlT-iGg.jpeg" alt="1_gVNbunchCV5wXgnwlT-iGg"></p>
<h1 id="概念"><a class="header-anchor" href="#概念"> </a>概念</h1>
<h2 id="名詞"><a class="header-anchor" href="#名詞"> </a>名詞</h2>
<ul>
<li>Image: 透過 <code>dockerfile</code> 編譯出來的 Image，唯獨屬性，就想成他是一片 CD</li>
<li>Container: 執行 Image 的容器，就像 CD-ROM，一個 Image 可以創造出很多 Container，Container 具有讀寫的能力，但由於 Image 是唯讀，所以要操作保留的資料應該要放在另外一個地方, <strong>Volume</strong></li>
<li>Volume: 可以想成容器的外掛硬碟，用來保留資料使用</li>
<li>Registry: 放 Image 的地方，有公用的服務，例如 Docker Hub，當然也可以自己架</li>
</ul>
<h2 id="安裝"><a class="header-anchor" href="#安裝"> </a>安裝</h2>
<p>Windows 10 的電腦可以安裝下載 <a href="https://www.docker.com/products/docker-desktop">Docker desktop for Windows</a> 的穩定版，但須具有 Hyper-V 的功能才能啟動 Docker 的服務。如果能安裝 <a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10">WSL 2</a> 及 <a href="https://www.microsoft.com/zh-tw/p/windows-terminal/9n0dx20hk701">Windows Terminal</a> 的，之後的操作上會更加友善</p>
<p>至於其他作業系統的安裝方式，官網或是網路上有很多文件，這邊就不多贅述</p>
<h2 id="網路"><a class="header-anchor" href="#網路"> </a>網路</h2>
<p><strong>None</strong>: 沒有網路功能，簡單說就是一個沒有網卡的 Container</p>
<p><strong>Bridget (Default)</strong>，Docker 內部的虛擬網路，除了可以對外連線外，也提供內部各 Container 間的聯繫</p>
<p><img src="bridge_network.jpg" alt="bridge_network"></p>
<p><strong>Host Mode</strong>: 建立與 Docker Server Host 一樣等級的 network interface</p>
<p><img src="none-mode.png" alt="none-mode"></p>
<p><strong>Container Mode</strong>: Container 共用同一個 Network Interface</p>
<p><img src="container-mode.png" alt="container-mode"></p>
<p><strong>Overlay</strong>: Container 可以與跑在不同 Docker Server 上的 Container 做溝通，類似 VPN Site to Site 的概念?</p>
<h1 id="Overview-流程圖"><a class="header-anchor" href="#Overview-流程圖"> </a>Overview 流程圖</h1>
<p><img src="screen-shot-2020-03-19-at-9.01.25-am.png" alt="screen-shot-2020-03-19-at-9.01.25-am"></p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Container</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>[容器] 容器技術之 Docker 篇 - 指令操作</title>
    <url>/2020/07/31/docker-101-note-2/</url>
    <content><![CDATA[<p>上一篇整理了概念，這一篇來整理常用的指令，雖然也有 GUI 操作 docker 的服務，但透過指令還是比較快的</p>
<span id="more"></span>
<h1 id="Image-相關"><a class="header-anchor" href="#Image-相關"> </a>Image 相關</h1>
<ul>
<li>
<p>列出本機端擁有的 images</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-a</code>：列出完整的映像檔層次資訊。每個映像檔是由不同層次組成的，我們會在稍後說明。</li>
<li><code>-q</code>：只列出映像檔ID。這在做映像檔批次處理時很方便。</li>
<li><code>-tree</code>：官方文件已經沒有這個參數，但還是可以用。列出映像檔不同層次之間的樹狀關係。</li>
</ul>
</li>
<li>
<p>下載 Image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull &lt;image name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>刪除 Image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi &lt;image name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>幫 Image 上 Tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建置 Image 檔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>上傳 Image 檔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Container-相關"><a class="header-anchor" href="#Container-相關"> </a>Container 相關</h1>
<h2 id="執行時的操作指令"><a class="header-anchor" href="#執行時的操作指令"> </a>執行時的操作指令</h2>
<ul>
<li>
<p>建立 Container 並執行指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker create [OPTIONS] IMAGE [COMMAND] [ARG...] // 建立但不會啟動執行 Container </span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...] // 建立且啟動執行 Container</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-d</code> : 背景執行</li>
<li><code>-i</code>: 輸入</li>
<li><code>-t</code>: 輸出</li>
<li><code>--name</code>: 給 Container 名稱</li>
<li><code>-p [本機 Port]:[Container 內部 Port]</code>: Port mapping</li>
<li><code>-v</code>: 掛載  volumes</li>
<li><code>-rm</code>: 執行結束後自動移除</li>
<li>相關參數請參閱 <a href="https://docs.docker.com/engine/reference/commandline/create/#options">Docker docs</a></li>
</ul>
</li>
<li>
<p>刪除執行中的 Container，<strong>但 Container 還是存在，只是死了。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker kill CONTAINER</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--signal, -s</code> : 送訊號到 Container</li>
</ul>
</li>
<li>
<p>移除 Container(停止或運行中都行)，Container就從這世上消失了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm CONTAINER</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--force, -f</code> : 強制移除</li>
<li><code>--link, -l</code> 移除特定連結</li>
<li><code>--volumnes, -v</code> 移除掛載在 Container 上的匿名 volumes</li>
</ul>
</li>
<li>
<p>暫停執行中的 Container，<strong>仍暫有記憶體停，服務不中斷</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>恢復暫停中的 Container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker unpause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>停止執行中的 Container，<strong>但不暫有記憶體，服務中斷</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--time, -t</code> 幾秒後停止 Container</li>
</ul>
</li>
<li>
<p>啟動停止中的 Container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--attach, -a</code> : Attach STDOUT/STDERR and forward signals</li>
<li><code>--interactive, -i</code>: Attach container’s STDIN</li>
</ul>
</li>
<li>
<p>重新啟動Container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--time, -t</code>: 幾秒後重啟 Container</li>
</ul>
</li>
<li>
<p>讓 Container 暫停直到 Container 停止為止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker wait CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>更名 Container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rename CONTAINER NEW_NAME</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="狀態"><a class="header-anchor" href="#狀態"> </a>狀態</h2>
<ul>
<li>inspect：檢查 Container 的狀態</li>
<li>stats：查看 Container 的 CPU、記憶體及網路使用</li>
<li>port：查看 Container 的通訊埠使用</li>
<li>ps：查看 Container 使用狀態
<ul>
<li><code>-a</code> 列出所有的 Container</li>
</ul>
</li>
<li>top：查看 Container 在主系統中的記憶體使用</li>
<li>dpid：查看 Container 的 pid</li>
</ul>
<h2 id="執行時的操作"><a class="header-anchor" href="#執行時的操作"> </a>執行時的操作</h2>
<ul>
<li>
<p>attach：連接 Container 的標準輸出輸入端</p>
<ul>
<li>使用<code>-d</code>或<code>-id</code>參數：離開 Container 時該 Container 停止。</li>
<li>使用<code>-td</code>參數：離開 Container 時該 Container 繼續在背景。</li>
</ul>
</li>
<li>
<p>exec：在外部向 Container 內執行指令</p>
</li>
<li>
<p>denter：進入 Container</p>
</li>
<li>
<p>logs：將 Container 內的輸出顯示到螢幕上</p>
</li>
<li>
<p>cp: 複製檔案到 Container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp /path/to/file1 DOCKER_ID:/path/to/file2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Registry-相關"><a class="header-anchor" href="#Registry-相關"> </a>Registry 相關</h1>
<ul>
<li>
<p>登入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login // 預設指向 public docker hub</span><br><span class="line">docker loing &lt;ip&gt; // 登入私有 docker registry</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>登出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>搜尋</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search &lt;search word&gt;</span><br><span class="line">// 查詢星星數條件</span><br><span class="line">docker search -s &lt;n start&gt; &lt;search word&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>n 是限定須有幾顆星以上的 image 才會被搜尋出來</li>
</ul>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/docker/">docker base command</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Container</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>[容器] 如何寫 Dockerfile</title>
    <url>/2020/08/03/docker-101-note-3/</url>
    <content><![CDATA[<p>前面兩篇筆記都在整理如何操作 docker container，要怎麼製作最重要的 Image 呢? 我會在這篇整理出來</p>
<span id="more"></span>
<p>要建立出一個可以用來執行的 Image，就必須透過 <code>Dockerfile</code> 來設定，<code>Dockerfile</code> 是一個類似文字檔的設定檔，docker 會依 <code>Dockerfile</code> 內的設定建立出一個可以部屬到 Registry 的 Image，其設定內容其實不複雜，以下為簡單語法介紹</p>
<h1 id="Dockerfile-結構與使用語法"><a class="header-anchor" href="#Dockerfile-結構與使用語法"> </a>Dockerfile 結構與使用語法</h1>
<p>如之前所說，Image 所能執行的 OS 必須跟底層 docker server 跑的 OS 一樣或是使用同種 Kernel，所以當 docker server 是跑在 Linux base 上，那 Dockerfile 能跑的環境也只能是 Linux base。下面是一個簡單的範例</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> python /app/app.py</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>FROM</code> Image 將執行的環境，這邊可以使用別人建立好的 Base Image，通常是作業系統，例如 ubuntu, centos 或是 <code>core/aspnet</code> 的執行環境</li>
<li><code>COPY</code> 複製本機檔案到 Image 裡，本機根目錄的認定為 <code>Dockerfile</code> 所處的目錄</li>
<li><code>RUN</code> 執行 Linux 指令</li>
<li><code>CMD</code> 當執行 <code>docker run</code> 時會執行的指令，如果有個 <code>CMD</code> 只有最後一行會生效</li>
</ul>
<p>如果能看懂跟理解上面的 <code>Dockerfile</code>，那基本上就只是 <code>Dockerfile</code> 語法及環境設定的熟悉度了，下面再列出幾個常用的指令</p>
<ul>
<li>
<p><code>WORKDIR</code> 設定當前的工作目錄</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>LABEL</code> Image 的 Metadata 資訊</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;這是LABEL的範例&quot;</span> version=<span class="string">&quot;1.0&quot;</span> owner=<span class="string">&quot;CK&#x27;s Notepad&quot;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>ENV</code> 設定環境變數</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;KEY&gt; &lt;Value&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>ENTRYPOINT</code> 作用跟 <code>CMD</code> 一樣，差異在他不會被 <code>docker run &lt;image&gt; &lt;command&gt;</code> 給覆蓋掉</p>
</li>
<li>
<p><code>EXPOSE</code> 宣告 Container 運行時對外有哪些 Port 可以使用 (宣告而已)</p>
</li>
</ul>
<h1 id="實際-Dockerfile-範例"><a class="header-anchor" href="#實際-Dockerfile-範例"> </a>實際 Dockerfile 範例</h1>
<h2 id="asp-net-core"><a class="header-anchor" href="#asp-net-core"> </a><a href="http://asp.net">asp.net</a> core</h2>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class="number">3.0</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy csproj and restore as distinct layers</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> *.sln .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> aspnetapp/*.csproj ./aspnetapp/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dotnet restore</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># copy everything else and build app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> aspnetapp/. ./aspnetapp/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app/aspnetapp</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dotnet publish -c Release -o out</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class="number">3.0</span> AS runtime</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/aspnetapp/out ./</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;dotnet&quot;</span>, <span class="string">&quot;aspnetapp.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<h2 id="Angular"><a class="header-anchor" href="#Angular"> </a>Angular</h2>
<ul>
<li>
<p>單純可以執行的</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /dist/app-to-run-inside-docker /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 docker 環境內建置部屬 (multiple-stage)</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># stage 1</span></span><br><span class="line"><span class="keyword">FROM</span> node:alpine AS my-app-build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stage 2</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=my-app-build /app/dist/app-to-run-inside-docker /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="建置-Dockerfile"><a class="header-anchor" href="#建置-Dockerfile"> </a>建置 Dockerfile</h1>
<p>要建置 Image 透過指令就可以完成了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line">// 範例</span><br><span class="line">docker build -t angular-app .</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-t</code> : 上 Tag</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Container</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Container</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 如何寫具有非同步驗證的 Angular 自訂表單物件</title>
    <url>/2020/08/29/angular-custom-form-control-with-async-valiator/</url>
    <content><![CDATA[<p>前幾天有人在論壇問了一個自訂表單非同步驗證的問題，這問題是當一個自訂表單物件內有非同步驗證時，外部使用者無法正確地取得該表單物件的驗證狀態，這問題我一開始想說應該不難，但也花了我快一天的時間才釐清要怎麼寫一個具有非同步驗證的自訂表單物件，方法如下</p>
<span id="more"></span>
<h1 id="同步驗證"><a class="header-anchor" href="#同步驗證"> </a>同步驗證</h1>
<p>我們都知道 Angular <code>FormControl</code> 的驗證有分同步與分同步兩種方式，下面是同步驗證的寫法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-user&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./user.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./user.component.css&quot;</span>],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">NG_VALUE_ACCESSOR</span>,</span><br><span class="line">      <span class="attr">useExisting</span>: <span class="title class_">UserComponent</span>,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">NG_VALIDATORS</span>,</span><br><span class="line">      <span class="attr">useExisting</span>: <span class="title class_">UserComponent</span>,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">ControlValueAccessor</span>, <span class="title class_">Validator</span> &#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&quot;&quot;</span>, [<span class="title class_">Validators</span>.<span class="property">required</span>]);</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="attr">onTouched</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">onChange</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">onChange</span>(value);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">onTouched</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="title function_">writeValue</span>(<span class="params">obj: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="title function_">patchValue</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">registerOnChange</span>(<span class="params">fn: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onChange</span> = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">registerOnTouched</span>(<span class="params">fn: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onTouched</span> = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">validate</span>(<span class="params"></span>) &#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="property">errors</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="分同步驗證"><a class="header-anchor" href="#分同步驗證"> </a>分同步驗證</h1>
<p>非同步驗證在 <code>FormControl</code> 的驗證狀態是 <code>PENDING</code>  &lt;–&gt; <code>VALID/INVALID</code> 間切換，由於非同步與同步要實作的方法都是同一個，所以當非同步與同步驗證同時存在時，要以非同步為準，不然整個驗證都只會取得同步驗證的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="attr">providers</span>: [</span><br><span class="line">    ...</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">NG_ASYNC_VALIDATORS</span>,</span><br><span class="line">      <span class="attr">useExisting</span>: <span class="title class_">UserComponent</span>,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">ControlValueAccessor</span>, <span class="title class_">Validator</span> &#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&quot;&quot;</span>, [<span class="title class_">Validators</span>.<span class="property">required</span>], [<span class="variable language_">this</span>.<span class="property">asyncValidator</span>]);</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="attr">onTouched</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">asyncValidator</span>(<span class="params">c: AbstractControl</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">of</span>(c.<span class="property">value</span> === <span class="string">&quot;123&quot;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">delay</span>(<span class="number">500</span>),</span><br><span class="line">      <span class="title function_">map</span>(<span class="function"><span class="params">b</span> =&gt;</span> (b ? <span class="literal">null</span> : &#123; <span class="attr">nomatch</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">validate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="property">errors</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一旦註冊成 <code>NG_ASYNC_VALIDATORS</code> 時，外部使用這一個自訂 <code>FormControl</code> 的 status 就會處在 <code>PENDING</code> ，而其原因是因為 <code>validate</code>  的方法沒有回傳一個完成的訊號，基於這一個理由，我們需要調整 <code>validate</code> 的實作方式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">validate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="property">statusChanges</span>.<span class="title function_">pipe</span>(      </span><br><span class="line">      <span class="title function_">filter</span>(<span class="function"><span class="params">status</span> =&gt;</span> status !== <span class="string">&quot;PENDING&quot;</span>),</span><br><span class="line">      <span class="title function_">map</span>(<span class="function"><span class="params">status</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="property">errors</span>),      </span><br><span class="line">      <span class="title function_">first</span>()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>完整程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, <span class="title class_">OnInit</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">ControlValueAccessor</span>,</span><br><span class="line">  <span class="title class_">Validator</span>,</span><br><span class="line">  <span class="variable constant_">NG_VALUE_ACCESSOR</span>,</span><br><span class="line">  <span class="variable constant_">NG_VALIDATORS</span>,</span><br><span class="line">  <span class="variable constant_">NG_ASYNC_VALIDATORS</span>,</span><br><span class="line">  <span class="title class_">Validators</span>,</span><br><span class="line">  <span class="title class_">AbstractControl</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@angular/forms&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FormControl</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/forms&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; filter, tap, map, delay, first &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/operators&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&quot;app-user&quot;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&quot;./user.component.html&quot;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&quot;./user.component.css&quot;</span>],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">NG_VALUE_ACCESSOR</span>,</span><br><span class="line">      <span class="attr">useExisting</span>: <span class="title class_">UserComponent</span>,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">NG_ASYNC_VALIDATORS</span>,</span><br><span class="line">      <span class="attr">useExisting</span>: <span class="title class_">UserComponent</span>,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span>, <span class="title class_">ControlValueAccessor</span>, <span class="title class_">Validator</span> &#123;</span><br><span class="line">  firstName = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&quot;&quot;</span>, [<span class="title class_">Validators</span>.<span class="property">required</span>], [<span class="variable language_">this</span>.<span class="property">asyncValidator</span>]);</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="attr">onTouched</span>: <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">asyncValidator</span>(<span class="params">c: AbstractControl</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">of</span>(c.<span class="property">value</span> === <span class="string">&quot;123&quot;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">delay</span>(<span class="number">500</span>),</span><br><span class="line">      <span class="title function_">map</span>(<span class="function"><span class="params">b</span> =&gt;</span> (b ? <span class="literal">null</span> : &#123; <span class="attr">nomatch</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="property">valueChanges</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">onChange</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">onChange</span>(value);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">onTouched</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">writeValue</span>(<span class="params">obj: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="title function_">patchValue</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">registerOnChange</span>(<span class="params">fn: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onChange</span> = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">registerOnTouched</span>(<span class="params">fn: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onTouched</span> = fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">validate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="property">statusChanges</span>.<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">filter</span>(<span class="function"><span class="params">status</span> =&gt;</span> status !== <span class="string">&quot;PENDING&quot;</span>),</span><br><span class="line">      <span class="title function_">map</span>(<span class="function"><span class="params">status</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">firstName</span>.<span class="property">errors</span>),      </span><br><span class="line">      <span class="title function_">first</span>()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<p><a href="https://stackblitz.com/edit/angular-ivy-qdvfuj?file=src%2Fapp%2Fuser%2Fuser.component.ts">stackbliz</a></p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[EF Core] 新增一個計算欄位 (Computed Column)</title>
    <url>/2020/09/17/efcore-add-computed-column/</url>
    <content><![CDATA[<p>當使用 EF Code First 設計資料表時，如果有一個欄位是要設定計算公式時，程式碼該如何寫呢?</p>
<span id="more"></span>
<p>以下幾個步驟</p>
<ol>
<li>
<p>在欄位上標記欄位屬於 <code>computed</code> 性質</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DatabaseGenerated(DatabaseGeneratedOption.Computed)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> CalculatedField &#123;</span><br><span class="line">    <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增 <code>migration</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add-migration xxxx-xxxx</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>打開剛建立的 <code>migration</code> 檔案並找到剛剛所指定的欄位</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">migrationBuilder.CreateTable(</span><br><span class="line">                name: <span class="string">&quot;Demo&quot;</span>,</span><br><span class="line">                columns: table =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 刪除原本產生的欄位</span></span><br><span class="line">                   CalculatedField = table.Column&lt;<span class="built_in">int</span>&gt;(nullable: <span class="literal">false</span>, defaultValue: <span class="number">0</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">);</span><br><span class="line">migrationBuilder.Sql(<span class="string">&quot;ALTER TABLE dbo.Demo ADD CalculatedField AS ([你的計算規則])&quot;</span>);      </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>打完收工</p>
</li>
</ol>
<p>以上是我目前的作法，能正常運作。如果有更好的寫法，也歡迎在下面留言分享討論</p>
<h1 id="額外補充"><a class="header-anchor" href="#額外補充"> </a>額外補充</h1>
<p>如果想要透過 EF Migration 來新增 Stored Procedure 的話，可以這樣子寫</p>
<ol>
<li>
<p>將 storeㄎ procedure 的 SQL 檔案放在某資料夾下，並將 SQL 檔案設定為 <code>內嵌資源 (EmbeddedResource)</code></p>
</li>
<li>
<p>新增一個空的 migration 後加入以下的程式碼</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> assembly = Assembly.GetExecutingAssembly();</span><br><span class="line">            <span class="keyword">var</span> resourceNames =</span><br><span class="line">                        assembly.GetManifestResourceNames().                        </span><br><span class="line">                        Where(str=&gt; str.Contains(<span class="string">&quot;[sp file name].sql&quot;</span>));</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> resourceName <span class="keyword">in</span> resourceNames)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (Stream stream = assembly.GetManifestResourceStream(resourceName))</span><br><span class="line">                <span class="keyword">using</span> (StreamReader reader = <span class="keyword">new</span> StreamReader(stream))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> sql = reader.ReadToEnd();</span><br><span class="line">                    migrationBuilder.Sql(sql);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Down</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            migrationBuilder.Sql(<span class="string">&quot;DROP PROCEDURE [SP Name]&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>當進行 database 更新時，就會將該 SP 新增到資料庫中</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Entity Framework</category>
      </categories>
      <tags>
        <tag>Entity Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做出自動版號的效果</title>
    <url>/2020/11/02/how-to-auto-version/</url>
    <content><![CDATA[<p>最近再弄一個版號顯示的功能，但我真的好懶得手動去改版號，有什麼自動方便的作法呢? 以下是我找到比較方便的方式</p>
<span id="more"></span>
<h1 id="NET-Core"><a class="header-anchor" href="#NET-Core"> </a>.NET Core</h1>
<p>在以往的 <code>.NET 專案</code> 有一個記錄版本的檔案，叫做 <code>Assemblyinfo.cs</code>，裡面會記錄著專案的相關資訊包含作者、公司、產品名稱、及版本資訊等，目前可以透過 IDE 編輯專案屬性 -&gt; 編輯套件資訊</p>
<p><img src="image-20201102154101905.png" alt="image-20201102154101905"></p>
<p>如果要自動編版本號碼，這裡有一個透過編輯 <code>csproj</code> 來動態改變版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Build</span>&gt;</span>$([System.DateTime]::op_Subtraction($([System.DateTime]::get_Now().get_Date()),$([System.DateTime]::new(2000,1,1))).get_TotalDays())<span class="tag">&lt;/<span class="name">Build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Revision</span>&gt;</span>$([MSBuild]::Divide($([System.DateTime]::get_Now().get_TimeOfDay().get_TotalSeconds()), 2).ToString(&#x27;F0&#x27;))<span class="tag">&lt;/<span class="name">Revision</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Version</span>&gt;</span>1.$(Build).$(Revision)<span class="tag">&lt;/<span class="name">Version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;build&gt; </code> 、<code>&lt;Revision&gt;</code> 自定義變數供 <code>&lt;Version&gt;</code> 使用，這邊的規則可以依個人喜好修改</li>
<li><code>&lt;Version&gt;</code> 設定產品版本</li>
</ul>
<p><img src="image-20201102161627599.png" alt="image-20201102161627599"></p>
<p>對應產生的 <code>Assemblyinfo.cs</code> 內容為</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// &lt;auto-generated&gt;</span></span><br><span class="line"><span class="comment">//     這段程式碼是由工具產生的。</span></span><br><span class="line"><span class="comment">//     執行階段版本:4.0.30319.42000</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，</span></span><br><span class="line"><span class="comment">//     變更將會遺失。</span></span><br><span class="line"><span class="comment">// &lt;/auto-generated&gt;</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute(<span class="string">&quot;4a3c5c00-20b2-4c11-90d1-d01d65382565&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyCompanyAttribute(<span class="string">&quot;WebApplication4&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyConfigurationAttribute(<span class="string">&quot;Debug&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyFileVersionAttribute(<span class="string">&quot;1.7611.29271.0&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyInformationalVersionAttribute(<span class="string">&quot;1.7611.29271&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyProductAttribute(<span class="string">&quot;WebApplication4&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyTitleAttribute(<span class="string">&quot;WebApplication4&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">assembly: System.Reflection.AssemblyVersionAttribute(<span class="string">&quot;1.7611.29271.0&quot;</span>)</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由 MSBuild WriteCodeFragment 類別產生。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Angular"><a class="header-anchor" href="#Angular"> </a>Angular</h1>
<p>有時候我們也想要在前端網站給予設定版本，除了手動修改外，其實也可以透過 <code>npm version</code> 來完成，雖然有點奇怪，但還是可以運作啦</p>
<h2 id="npm-version"><a class="header-anchor" href="#npm-version"> </a>npm version</h2>
<p>這功能原本是用來更新 npm package 版本使用，指令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease [--preid=&lt;prerelease-id&gt;] | from-git]</span><br></pre></td></tr></table></figure>
<p>這指令會同步更新 <code>package.json</code> 的 <code>version</code> 欄位值，這邊就快速列出我所使用的 script</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;prebuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm --no-git-tag-version version patch&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;postversion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git add package.json package-lock.json &amp;&amp; git commit -mv%npm_package_version%&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>prebuild</code> 這行為會發生在執行 <code>npm build</code> 之前
<ul>
<li><code>--no-git-tag-version</code> 設定 <code>npm version</code> 不要自動 commit 且不要加上 tag</li>
<li><code>npm version patch</code> : 只更新 patch 版號</li>
</ul>
</li>
<li><code>postversion</code> 這動作會發生在 <code>npm version</code> 之後
<ul>
<li>加入並 commit 異動檔案</li>
</ul>
</li>
</ul>
<p>當 <code>package.json</code> 內的 <code>version</code> 處理完後，就可以在 <code>environment.ts</code> 的地方引用 <code>package.json</code> 了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> environment = &#123;</span><br><span class="line">  <span class="attr">version</span>: <span class="built_in">require</span>(<span class="string">&#x27;../../package.json&#x27;</span>).<span class="property">version</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>由於這邊有使用到 <code>node</code> 的 <code>required</code> ，在 <code>tsconfig.app.json</code> 及 <code>tsconfig.spec.json</code> 的 <code>compilerOptions.types</code> 內要加上 <code>node</code>，並安裝 <code>@types/node</code> 的型別定義檔，剩下就跟原來使用 environment 的方式一樣了</p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>目前是我處理自動版號的方式，如果有其他更好的作法，也歡迎分享給我</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://edi.wang/post/2018/9/27/get-app-version-net-core">Get App Version in .NET Core</a></li>
<li><a href="https://docs.npmjs.com/cli/v6/commands/npm-version">npm version</a></li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>[Dart] List 的操作 reduce 與 fold</title>
    <url>/2020/12/27/dart-reduce-fold/</url>
    <content><![CDATA[<p>每一個語言對於清單的操作，一直都是必須要掌握的能力之一，在 dart 裡面的 List 的操作方法常見又有幾種，而其中的 reduce 與 fold 這兩個操作方式，對我來說是有點特殊的，在此筆記一下</p>
<span id="more"></span>
<h1 id="List-的操作"><a class="header-anchor" href="#List-的操作"> </a>List   的操作</h1>
<h2 id="reduce"><a class="header-anchor" href="#reduce"> </a>reduce</h2>
<p>Dart 裡的 <code>reduce</code> 行為跟 <code>JavaScript</code> 的有點差異，先看程式碼再來說明</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> result = list.reduce((value, element) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + element;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result);</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p><code>reduce</code> 的過程中，資料操作的型別是不能做更換的，表示 value 與 element 的型別會是一致</p>
</li>
<li>
<p>如果想要操作得資料與想要取的的結果型態不一樣時，要先做轉型後(搭配 map) 再操作</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> carts = [</span><br><span class="line">    Cart(productName: <span class="string">&quot;蘋果&quot;</span>, price: <span class="number">50</span>, amount: <span class="number">1</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;蔬菜&#x27;</span>, price: <span class="number">20</span>, amount: <span class="number">2</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;雞肉&#x27;</span>, price: <span class="number">60</span>, amount: <span class="number">3</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;雞蛋&#x27;</span>, price: <span class="number">10</span>, amount: <span class="number">10</span>),</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> totalPrice = carts.map((element)=&gt; element.amount * element.price)</span><br><span class="line">   .reduce((value,element)=&gt; value+element);</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">print</span>(totalPrice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> productName;</span><br><span class="line">  <span class="built_in">num</span> price;</span><br><span class="line">  <span class="built_in">num</span> amount;</span><br><span class="line">  Cart(&#123;<span class="keyword">this</span>.productName, <span class="keyword">this</span>.price, <span class="keyword">this</span>.amount&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>method  介面</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">E reduce(</span><br><span class="line">  E combine(E value, E element)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="fold"><a class="header-anchor" href="#fold"> </a>fold</h2>
<p>上面的第二個範例寫法，如果寫習慣 JavaScript 的人會覺得很囉唆，但其實 JavaScript 的 reduce 等於 Dart 的 fold，一樣先來看程式碼</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> carts = [</span><br><span class="line">    Cart(productName: <span class="string">&quot;Apple&quot;</span>, price: <span class="number">50</span>, amount: <span class="number">1</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;蔬菜&#x27;</span>, price: <span class="number">20</span>, amount: <span class="number">2</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;雞肉&#x27;</span>, price: <span class="number">60</span>, amount: <span class="number">3</span>),</span><br><span class="line">    Cart(productName: <span class="string">&#x27;雞蛋&#x27;</span>, price: <span class="number">10</span>, amount: <span class="number">10</span>),</span><br><span class="line"> ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> totalPrice = carts.fold(<span class="number">0</span>, (prev, element) =&gt; prev + element.price * element.amount);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(totalPrice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> productName;</span><br><span class="line">  <span class="built_in">num</span> price;</span><br><span class="line">  <span class="built_in">num</span> amount;</span><br><span class="line">  Cart(&#123;<span class="keyword">this</span>.productName, <span class="keyword">this</span>.price, <span class="keyword">this</span>.amount&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>fold  的初始值是放在第一個位置</p>
</li>
<li>
<p>後面的使用方式就和 JavaScript  的 reduce 一樣了</p>
</li>
<li>
<p>method 介面</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> fold(</span><br><span class="line">  initialValue,</span><br><span class="line">  <span class="built_in">dynamic</span> combine(previousValue, E element)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>這兩個用法都有他試用的情境，根據情境挑適合的方法使用，可以讓程式碼乾淨許多</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Flutter] 設定 Firebase Messaging 功能</title>
    <url>/2021/01/13/flutter-firebase-message-setup/</url>
    <content><![CDATA[<p>網路上面關於設定 Flutter 的文章真的很亂，也不知道哪一個版本能用，乾脆自己整理一篇目前可以使用的版本，還好越晚使用，設定步驟就越簡單</p>
<span id="more"></span>
<h1 id="設定-Firebase-專案"><a class="header-anchor" href="#設定-Firebase-專案"> </a>設定 Firebase 專案</h1>
<p>需要從 Firebase 專案中下載 google-services.json 的檔案，以供後續套件使用，取得步驟如下</p>
<ol>
<li>進入 Firebase 專案</li>
<li>選擇專案設定
<img src="image-20210113123819276.png" alt="image-20210113123819276"></li>
<li>新增應用程式 (Android)後，即可取得 <code>google-services.json</code> 的檔案</li>
<li>將該檔案複製到 Flutter 專案下的 <code>android/app</code> 資料夾下
<img src="image-20210113124016995.png" alt="image-20210113124016995"></li>
</ol>
<h1 id="Flutter-Firebase-Message-套件"><a class="header-anchor" href="#Flutter-Firebase-Message-套件"> </a>Flutter Firebase Message 套件</h1>
<h2 id="套件安裝"><a class="header-anchor" href="#套件安裝"> </a>套件安裝</h2>
<p>於 <code>pubspec.yaml</code> 檔內新增下列套件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">firebase_core:</span> <span class="string">^0.7.0</span></span><br><span class="line"><span class="attr">firebase_messaging:</span> <span class="number">8.0</span><span class="number">.0</span><span class="string">-dev.13</span></span><br></pre></td></tr></table></figure>
<h2 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h2>
<p>為了要讓 Flutter 在建置時，能載入剛剛下載的 <code>google-services.json</code> 檔案，還需調整以下檔案</p>
<ol>
<li>
<p><code>android/build.gradle</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    // ... other dependencies</span><br><span class="line">    // 新增這一行</span><br><span class="line">    classpath &#x27;com.google.gms:google-services:4.3.3&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>/android/app/build.gradle</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apply plugin: &#x27;com.android.application&#x27;</span><br><span class="line">// 新增這一行</span><br><span class="line">apply plugin: &#x27;com.google.gms.google-services&#x27;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>※如果 Flutter 專案的 Flutter 版本是 1.12 以上，則不需要額外新增任何檔案，如果是低於該版本，請依此<a href="https://firebase.flutter.dev/docs/messaging/overview#flutter-android-embedding-v1">文件</a>說明新增檔案</p>
<h2 id="程式碼設定"><a class="header-anchor" href="#程式碼設定"> </a>程式碼設定</h2>
<p>Flutter 內的程式碼要增加的項目如下</p>
<ol>
<li>
<p>main.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">await</span> Firebase.initializeApp();</span><br><span class="line">  <span class="comment">// Set the background messaging handler early on, as a named top-level function</span></span><br><span class="line">  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Create an Android Notification Channel.</span></span></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">這裡有多使用套件: flutter<span class="emphasis">_local_</span>notifications: ^3.0.3</span></span></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">We use this channel in the <span class="code">`AndroidManifest.xml`</span> file to override the</span></span></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">default FCM channel to enable heads up notifications.</span></span></span><br><span class="line">  <span class="keyword">await</span> flutterLocalNotificationsPlugin</span><br><span class="line">      .resolvePlatformSpecificImplementation&lt;</span><br><span class="line">          AndroidFlutterLocalNotificationsPlugin&gt;()</span><br><span class="line">      ?.createNotificationChannel(channel);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Update the iOS foreground notification presentation options to allow</span></span></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">heads up notifications.</span></span></span><br><span class="line">  <span class="keyword">await</span> FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(</span><br><span class="line">    alert: <span class="keyword">true</span>,</span><br><span class="line">    badge: <span class="keyword">true</span>,</span><br><span class="line">    sound: <span class="keyword">true</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; _firebaseMessagingBackgroundHandler(RemoteMessage message) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// If you&#x27;re going to use other Firebase services in the background, such as Firestore,</span></span><br><span class="line">  <span class="comment">// make sure you call `initializeApp` before using other Firebase services.</span></span><br><span class="line">  <span class="keyword">await</span> Firebase.initializeApp();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Handling a background message <span class="subst">$&#123;message.messageId&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在啟動的第一個 widget 檔案內</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  <span class="comment">// 當 app 處於開啟狀態時，監聽推撥訊息用</span></span><br><span class="line">  FirebaseMessaging.onMessage.listen((RemoteMessage message) <span class="keyword">async</span> &#123;</span><br><span class="line">    RemoteNotification notification = message.notification;</span><br><span class="line">    AndroidNotification android = message.notification?.android;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (notification != <span class="keyword">null</span> &amp;&amp; android != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> flutterLocalNotificationsPlugin.<span class="keyword">show</span>(</span><br><span class="line">          notification.hashCode,</span><br><span class="line">          notification.title,</span><br><span class="line">          notification.body,</span><br><span class="line">          NotificationDetails(</span><br><span class="line">            android: AndroidNotificationDetails(</span><br><span class="line">              channel.id,</span><br><span class="line">              channel.name,</span><br><span class="line">              channel.description,</span><br><span class="line">              icon: <span class="string">&#x27;launch_background&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">          ));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">   </span><br><span class="line">  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;A new onMessageOpenedApp event was published!&#x27;</span>);</span><br><span class="line">    <span class="comment">// 這邊可以寫在 app 關閉狀態，點通知訊息時，打開 app 後要做的事情</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>當然還有其他可以設定的部分，更多細節可以參閱<a href="https://firebase.flutter.dev/docs/messaging/usage/">這裡的文件</a></p>
<h1 id="延伸閱讀"><a class="header-anchor" href="#延伸閱讀"> </a>延伸閱讀</h1>
<ul>
<li>
<p><a href="https://firebase.flutter.dev/docs/messaging/usage/">Firebase Cloud Messaging</a></p>
</li>
<li>
<p><a href="https://github.com/FirebaseExtended/flutterfire/tree/master/packages/firebase_messaging/firebase_messaging">Firebase_messaging_plugin</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 把 Angular 網站放到 VSCode Extension 內</title>
    <url>/2021/02/05/ng-vscode-extension-webview/</url>
    <content><![CDATA[<p>前幾天我分享了一個 YouTube  的影片，該影片大致上的內容是如何使用 VSCode Extension 使用 Webview API，既然可以用 webview 的方式來呈現網頁，那顯示一個 Angular App 也是很正常的事情，但環境設定上要怎麼調整呢? 這篇筆記就來整理一下</p>
<span id="more"></span>
<h1 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h1>
<ol>
<li>
<p>首先先建立一個 Angular 的專案 (這應該不用講要用什麼指令了吧)</p>
</li>
<li>
<p>打開 <code>package.json</code>，新增以下內容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publisher-name&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.53.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;Other&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;onCommand:angular-webview.start&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist/ext-src/extension.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;angular-webview.start&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Open Webview&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>categories</code> 、<code>activationEvents</code>、<code>contributes</code> 的區塊內容請配合 VS Code Extension 開發規範做調整</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">   <span class="attr">&quot;@types/vscode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.53.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;vscode-test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;vsce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.83.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改完後記得要執行 <code>npm install</code></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line">   <span class="comment">// 修改</span></span><br><span class="line">   <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ng build --prod --output-hashing none &amp;&amp; tsc -p tsconfig.extension.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="comment">// 新增指令</span></span><br><span class="line">   <span class="attr">&quot;package&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vsce package&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;vscode:prepublish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build &amp;&amp; tsc -p tsconfig.extension.json&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增 <code>.vscodeignore</code> 檔案 (可根據狀況調整)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">!dist</span><br><span class="line">.vscode</span><br><span class="line">e2e</span><br><span class="line">ext-src</span><br><span class="line">node_modules</span><br><span class="line">src</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增 <code>.vscode</code> 資料夾並新增 <code>launch.json</code> 檔案</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Run Extension&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extensionHost&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">				<span class="string">&quot;--extensionDevelopmentPath=$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">			<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;outFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">				<span class="string">&quot;$&#123;workspaceFolder&#125;/out/**/*.js&quot;</span></span><br><span class="line">			<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新增 <code>ext-src</code> 資料夾，並在該資料夾下新增 <code>extension.ts</code> 檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vscode <span class="keyword">from</span> <span class="string">&#x27;vscode&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Manages webview panels</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebPanel</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Track the currently panel. Only allow a single panel to exist at a time.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="attr">currentPanel</span>: <span class="title class_">WebPanel</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> viewType = <span class="string">&#x27;angular&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">panel</span>: vscode.<span class="property">WebviewPanel</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">extensionPath</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">builtAppFolder</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">disposables</span>: vscode.<span class="property">Disposable</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="title function_">createOrShow</span>(<span class="params"></span></span><br><span class="line"><span class="params">    extensionPath: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    context: vscode.ExtensionContext</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> column = vscode.<span class="property">window</span>.<span class="property">activeTextEditor</span></span><br><span class="line">      ? vscode.<span class="property">window</span>.<span class="property">activeTextEditor</span>.<span class="property">viewColumn</span></span><br><span class="line">      : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we already have a panel, show it.</span></span><br><span class="line">    <span class="comment">// Otherwise, create angular panel.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">WebPanel</span>.<span class="property">currentPanel</span>) &#123;</span><br><span class="line">      <span class="title class_">WebPanel</span>.<span class="property">currentPanel</span>.<span class="property">panel</span>.<span class="title function_">reveal</span>(column);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">WebPanel</span>.<span class="property">currentPanel</span> = <span class="keyword">new</span> <span class="title class_">WebPanel</span>(</span><br><span class="line">        extensionPath,</span><br><span class="line">        column || vscode.<span class="property">ViewColumn</span>.<span class="property">One</span>,</span><br><span class="line">        context</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">WebPanel</span>.<span class="property">currentPanel</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    extensionPath: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    column: vscode.ViewColumn,</span></span><br><span class="line"><span class="params">    context: vscode.ExtensionContext</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">extensionPath</span> = extensionPath;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">builtAppFolder</span> = <span class="string">&#x27;dist/cklab&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create and show a new webview panel</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">panel</span> = vscode.<span class="property">window</span>.<span class="title function_">createWebviewPanel</span>(</span><br><span class="line">      <span class="title class_">WebPanel</span>.<span class="property">viewType</span>,</span><br><span class="line">      <span class="string">&#x27;My Angular Webview&#x27;</span>,</span><br><span class="line">      column,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Enable javascript in the webview</span></span><br><span class="line">        <span class="attr">enableScripts</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// And restrict the webview to only loading content from our extension&#x27;s `media` directory.</span></span><br><span class="line">        <span class="attr">localResourceRoots</span>: [</span><br><span class="line">          vscode.<span class="property">Uri</span>.<span class="title function_">file</span>(path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">extensionPath</span>, <span class="variable language_">this</span>.<span class="property">builtAppFolder</span>)),</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the webview&#x27;s initial html content</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">panel</span>.<span class="property">webview</span>.<span class="property">html</span> = <span class="variable language_">this</span>.<span class="title function_">_getHtmlForWebview</span>(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Listen for when the panel is disposed</span></span><br><span class="line">    <span class="comment">// This happens when the user closes the panel or when the panel is closed programatically</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">panel</span>.<span class="title function_">onDidDispose</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">dispose</span>(), <span class="literal">null</span>, <span class="variable language_">this</span>.<span class="property">disposables</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle messages from the webview</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">panel</span>.<span class="property">webview</span>.<span class="title function_">onDidReceiveMessage</span>(</span><br><span class="line">      <span class="function">(<span class="params">message: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (message.<span class="property">command</span>) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;alert&#x27;</span>:</span><br><span class="line">            vscode.<span class="property">window</span>.<span class="title function_">showErrorMessage</span>(message.<span class="property">text</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">disposables</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">WebPanel</span>.<span class="property">currentPanel</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clean up our resources</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">panel</span>.<span class="title function_">dispose</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">disposables</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> x = <span class="variable language_">this</span>.<span class="property">disposables</span>.<span class="title function_">pop</span>();</span><br><span class="line">      <span class="keyword">if</span> (x) &#123;</span><br><span class="line">        x.<span class="title function_">dispose</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns html of the start page (index.html)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">_getHtmlForWebview</span>(<span class="params">context: vscode.ExtensionContext</span>) &#123;</span><br><span class="line">    <span class="comment">// path to dist folder</span></span><br><span class="line">    <span class="keyword">const</span> appDistPath = path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">extensionPath</span>, <span class="variable language_">this</span>.<span class="property">builtAppFolder</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get path to index.html file from dist folder</span></span><br><span class="line">    <span class="keyword">const</span> indexPath = path.<span class="title function_">join</span>(appDistPath, <span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read index file from file system</span></span><br><span class="line">    <span class="keyword">let</span> indexHtml = fs.<span class="title function_">readFileSync</span>(indexPath, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. Get all link prefixed by href or src</span></span><br><span class="line">    <span class="keyword">const</span> matchLinks = <span class="regexp">/(href|src)=&quot;([^&quot;]*)&quot;/g</span>;</span><br><span class="line">    <span class="comment">// 2. Transform the result of the regex into a vscode&#x27;s URI format</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">toUri</span> = (<span class="params">_: <span class="built_in">string</span>, prefix: <span class="string">&#x27;href&#x27;</span> | <span class="string">&#x27;src&#x27;</span>, link: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// For &lt;base href=&quot;#&quot; /&gt;</span></span><br><span class="line">      <span class="keyword">if</span> (link === <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>=&quot;<span class="subst">$&#123;link&#125;</span>&quot;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// For scripts &amp; links</span></span><br><span class="line">      <span class="keyword">const</span> _path = path.<span class="title function_">join</span>(appDistPath, link);</span><br><span class="line">      <span class="keyword">const</span> uri = vscode.<span class="property">Uri</span>.<span class="title function_">file</span>(_path);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span>=&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.panel.webview[<span class="string">&#x27;asWebviewUri&#x27;</span>](uri)&#125;</span>&quot;`</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update the base URI tag</span></span><br><span class="line">    indexHtml = indexHtml.<span class="title function_">replace</span>(matchLinks, toUri);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> indexHtml;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) &#123;</span><br><span class="line">  context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">    vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(<span class="string">&#x27;angular-webview.start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">WebPanel</span>.<span class="title function_">createOrShow</span>(context.<span class="property">extensionPath</span>, context);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this method is called when your extension is deactivated</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">deactivate</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>line 49: 請根據自己 Angular 專案輸出資料夾路徑做調整</li>
<li>line 138: 跟著 <code>package.json</code> 的指令註冊一起調整命令名稱</li>
</ul>
</li>
<li>
<p>新增 <code>tsconfig.extension.json</code> 檔案</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;es6&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ext-src&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules/*&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="string">&quot;.vscode/*&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>到這邊應算是完成最基本的 VS Code Extension 環境的設定，如何看是否有設定成功，可以執行以下步驟</p>
<ol>
<li>
<p>開 Terminal 執行 <code>npm run build</code></p>
</li>
<li>
<p>按 F5 進入 Debug 模式，這時候會開啟一個新的 VS Code 視窗</p>
</li>
<li>
<p>執行所設定的啟動指令，以這個範例來說就是 <code>CK: Open Webview</code></p>
<p><img src="image-20210205215343080.png" alt="image-20210205215343080"></p>
</li>
<li>
<p>成功後的顯示畫面</p>
<p><img src="image-20210205215408533.png" alt="image-20210205215408533"></p>
</li>
</ol>
<p>至於在 VS Code Webview 的環境下，Angular 開發上有什麼需要注意的事項，這部分就留到下一篇筆記了</p>
<h1 id="打包套件"><a class="header-anchor" href="#打包套件"> </a>打包套件</h1>
<p>如果都寫完要發布成可以安裝的擴充套件時，可以執行 <code>npm run package</code> 就會產生一個 <code>VSIX</code> 的安裝檔案</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://www.youtube.com/watch?v=a5DX5pQ9p5M">How to Code a VSCode Extension</a></li>
<li><a href="https://code.visualstudio.com/api/get-started/your-first-extension">VSCode Extension Get Started</a></li>
<li><a href="https://code.visualstudio.com/api/extension-guides/webview">VSCode Webview API</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Angular 在 VSCode Extension (Webview) 內做頁面切換</title>
    <url>/2021/02/05/angular-vscode-extension-page-navigate/</url>
    <content><![CDATA[<p>繼上一篇環境基礎設定完成後，這篇先來筆記一下要如何做頁面切換，有哪些地方需要留意的</p>
<span id="more"></span>
<p>首先要知道在 VSCode Extension Webview 的環境並不是一個 web server 而是檔案，所以我們就不能使用預設的路由設定模式，而必須改為 hash 模式 (<code>HashLocationStrategy</code>)，設定方式如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes, &#123;</span><br><span class="line">      <span class="attr">useHash</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>
<p>在到 <code>index.html</code> 的地方，調整 base 路徑的部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>到這邊基本上 Angular 的路由就可以正常運作了</p>
<p>或許會問說，那 LazyLoading 的部分呢? 很抱歉，在 VSCode Extension Webview 內是不能使用的，所以 <code>loadChildren</code> 的寫法要改成這樣</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;product&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="title class_">ProductModule</span> &#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Rust] Rust 學習筆記 - 跟著文件寫猜數字</title>
    <url>/2021/02/19/rust-note-1/</url>
    <content><![CDATA[<p>Rust 這語言關注他有一段時間，但都沒有真正的動手寫看看，趁年後還沒那麼多事情時，來學習一下，或許日後可以用他來寫 web assembly</p>
<span id="more"></span>
<h1 id="環境安裝"><a class="header-anchor" href="#環境安裝"> </a>環境安裝</h1>
<p>Rust 的執行環境基本上就依<a href="https://www.rust-lang.org/zh-TW/learn/get-started">官網</a>的安裝步驟做就可以了，如果是 Windows 的環境，當在執行 <code>cargo build</code> 時，有可能會出現 <code>link.exe</code> 找不到的錯誤訊息，通常這個問題跟電腦環境沒裝 <a href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">C++ Build Tools</a> 有關</p>
<p>開發工具的部分，選擇性還蠻多的，以我目前的環境，是直接選擇 VSCode + Rust 擴充套件進行學習環境</p>
<h1 id="建立新專案"><a class="header-anchor" href="#建立新專案"> </a>建立新專案</h1>
<p>安裝完 Rust 後，會有 <code>cargo</code> 的命令可以使用，跟 Angular CLI 的 <code>ng</code> 類似，可以用他來打包、開發、等工作</p>
<p><img src="image-20210219120226176.png" alt="image-20210219120226176"></p>
<p>建立專案的指令是 <code>cargo new &lt;project_name&gt;</code>，建立完成後專案資料夾下會有這些檔案</p>
<p><img src="image-20210219120327131.png" alt="image-20210219120327131"></p>
<ul>
<li><code>Cargo.toml</code> : 用來記載專案資訊，相依套件等資訊，類似 <code>package.json</code></li>
<li><code>Cargo.lock</code>: 用來紀錄套件安裝等資訊，類似 <code>package-lock.json</code></li>
<li><code>target</code> 資料夾：建置後(<code>cargo build</code>) 的輸出資料夾</li>
<li><code>src</code> 資料夾：程式放置位置</li>
<li><code>src/main.rs</code> : 主要進入點</li>
</ul>
<p>想執行程式時，使用 <code>cargo run</code> 的指令就可以了</p>
<h1 id="猜數字-官方範例"><a class="header-anchor" href="#猜數字-官方範例"> </a>猜數字(官方範例)</h1>
<ul>
<li><a href="https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html">文件位置</a></li>
</ul>
<p>當打開 <code>main.rs</code> 檔案，裡面只有一個 function ，這個是程式的初始執行的方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要從 console 上接收到使用者輸入得資料時，就要使用到內建的 <code>io</code> 方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io; <span class="comment">// 引用 package, library, namespace (就那個意思)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Guess the number!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>line 8: 建立一個可以被變更的文字型態的變數，</p>
<ul>
<li>使用 <code>mut</code> 關鍵字設定變數為可變更的</li>
</ul>
</li>
<li>
<p>line 10 ~ 11: 接收使用者輸入得資料，並存放到 <code>guess</code> 變數中</p>
<ul>
<li>使用 <code>&amp;</code> 建立一個 reference</li>
</ul>
</li>
<li>
<p>line 12: 需處理當 <code>read_line</code> 失敗時需要回傳什麼結果，這是 Rust 處理 Exception 的方式，可以思考成這樣</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> guess;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   guess = Console.Readline();   </span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">   guess = <span class="string">&quot;Failed to read line&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>必須處理 Error 的部分，不然 compiler 會跟你抱怨</p>
<p><img src="image-20210219135909589.png" alt="image-20210219135909589"></p>
</li>
</ul>
</li>
<li>
<p>line 14: 使用 <code>&#123;&#125;</code> 來空出變數要顯示的位置，當有多個時，會依序顯示</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x: &#123;&#125;, y: &#123;&#125;&quot;</span>, x, y);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="引用套件"><a class="header-anchor" href="#引用套件"> </a>引用套件</h2>
<p>使用其他相依套件的方式很簡單，就在 <code>Cargo.toml</code> 中將套件名稱與版本設定上去即可，類似 npm 的概念，rust 也有自己的 package 管理機制，可以上 <a href="https://crates.io/">crates.io</a> 搜尋套件，&lt;在這練習範例中，使用了 <code>rand</code> 這一個 package</p>
<p><img src="image-20210219140316275.png" alt="image-20210219140316275"></p>
<p>搜尋後再右邊有 install 的方式，只要複製貼到 <code>Cargo.toml</code> 的 <code>dependencies</code> 下即可</p>
<h2 id="使用套件"><a class="header-anchor" href="#使用套件"> </a>使用套件</h2>
<p>在 <code>main.rs</code>  裡要建立一個介於 1~ 100 的亂數，寫法如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..<span class="number">100</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://docs.rs/rand/0.8.3/rand/trait.Rng.html">gen_range API</a></li>
</ul>
<p>※備註一，Rust  不喜歡沒有使用的東西留在程式碼內，如果有那種沒使用的變數發生時，編譯時會出現下面的警示訊息</p>
<p><img src="image-20210219141201642.png" alt="image-20210219141201642"></p>
<h2 id="比較數字"><a class="header-anchor" href="#比較數字"> </a>比較數字</h2>
<p>Rust 有內建比較數字的方法 <code>std::cmp::Ordering;</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   ...</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..<span class="number">100</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">        Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">        Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">        Ordering::Equal =&gt; <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>match</code> : Pattern Matching 的關鍵字 (很常出現的一種寫法)</p>
</li>
<li>
<p><code>secret_number</code> 為數字型，<code>guess</code> 為文字型，line 10 的比較會跳出錯誤訊息</p>
<p><img src="image-20210219141553593.png" alt="image-20210219141553593"></p>
</li>
</ul>
<p>基於上面的原因，我們需要將 guess 轉換成數字型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Please type a number!&quot;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>trim()</code> 會將 <code>\n</code> 或是空白給清除掉</p>
</li>
<li>
<p><code>parse()</code> 將文字轉換成數字，由於宣告變數時，有指定型別, <code>: u32</code> ，所以會轉換成 <code>u32</code> 型別</p>
</li>
<li>
<p><code>expect(....)</code>，當發生 exception 時，會顯示裡面的文字</p>
<p><img src="image-20210219142058900.png" alt="image-20210219142058900"></p>
</li>
</ul>
<h2 id="持續進行遊戲直到猜對"><a class="header-anchor" href="#持續進行遊戲直到猜對"> </a>持續進行遊戲直到猜對</h2>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">       io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">           .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">           .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Please type a number!&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">           Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">           Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">           Ordering::Equal =&gt; &#123;</span><br><span class="line">               <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 1：新增 loop 迴圈</li>
<li>line 17: 猜對時跳出迴圈</li>
</ul>
<p>上面的寫法針對 <code>line 12</code> 輸入不是可轉換成數字的情況下，還是會被迫結束程式，所以要修正一下寫法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="keyword">match</span> guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>
<p>再次透過 pattern match 的方式，調整遇到 <code>Err</code> 時要做的行為，這樣就不會因為轉換失敗造成程式被強制中斷了。</p>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>到這邊是官網提供的一個算是完整的簡單範例，也可以從中觀察到 Rust 這語言的特性，自己在第一次寫時並沒有遇到太卡的地方，很多觀念都可以從其他語言延用，可以算是一個嚴謹但又不會讓你寫得很囉唆。第一印象是好的</p>
<p>接下來就會往更深層去瞭解這語言的其他部分，例如型別、流程控制、跟程式結構等，下篇見。</p>
]]></content>
      <categories>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>[Rust] Rust 學習筆記 - 基本概念篇</title>
    <url>/2021/02/23/rust-note-2/</url>
    <content><![CDATA[<p>繼上篇猜數字的練習範例中，大致上可以感受到 Rust 這語言的個性，但還是得知道語言的型別、語法及流程控制的方法，所以這邊筆記會針對 <a href="https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html">Command Programming Concepts 章節</a> 的內容擷取我覺得需要記下來的重點</p>
<span id="more"></span>
<h1 id="Variables-and-Mutability"><a class="header-anchor" href="#Variables-and-Mutability"> </a>Variables and Mutability</h1>
<ul>
<li>
<p>變數宣告後，預設皆為不可改變的狀態 (Immutable)，如果需要一個可以被改變的變數，必須加上 <code>mut</code> 的關鍵字</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">1</span>; <span class="comment">// immutable</span></span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// 這行會出錯</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;can be changed&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>變數的型別必須要一致，直到重新被宣告 <a href="https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#shadowing">(Shadowing)</a></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = a.<span class="title function_ invoke__">len</span>(); </span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line">b = b.<span class="title function_ invoke__">len</span>(); <span class="comment">// 型別不一致，會發生錯誤</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>variables 與 constants 的差異有以下幾點</p>
<ul>
<li>constants 不能使用 <code>mut</code></li>
<li>constants 使用 <code>const</code> 宣告而且必須指定型別，範例: <code>const MAX_POINTS: u32 = 100_000;</code></li>
<li>constants 只能被宣告一次</li>
</ul>
</li>
</ul>
<h1 id="Data-Types"><a class="header-anchor" href="#Data-Types"> </a>Data Types</h1>
<h2 id="Scalar-Type"><a class="header-anchor" href="#Scalar-Type"> </a>Scalar Type</h2>
<p>Rust 的標準型別 (scalar type) 有四種: <code>integers</code>、<code>floating-point numbers</code>、 <code>Booleans</code>、<code>characters</code>。</p>
<h3 id="Integer"><a class="header-anchor" href="#Integer"> </a>Integer</h3>
<ul>
<li>
<p>分為 signed (<code>i</code>) 和 unsigned (<code>u</code>)</p>
</li>
<li>
<p>有 8-bit、16-bit、32-bit、64-bit、128-bit、arch 長度</p>
</li>
<li>
<p>8 ~ 128 bit 的範圍算法說明如下</p>
<blockquote>
<p>Each signed variant can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive, where <em>n</em> is the number of bits that variant uses. So an <code>i8</code> can store numbers from -(27) to 27 - 1, which equals -128 to 127. Unsigned variants can store numbers from 0 to 2n - 1, so a <code>u8</code> can store numbers from 0 to 28 - 1, which equals 0 to 255.</p>
<p>Additionally, the <code>isize</code> and <code>usize</code> types depend on the kind of computer your program is running on: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.</p>
</blockquote>
</li>
<li>
<p>可以使 <code>_</code> 來增加數字的閱讀性，例如: <code>100_000</code> 等同於 <code>100000</code></p>
</li>
</ul>
<h3 id="floating-point"><a class="header-anchor" href="#floating-point"> </a>floating-point</h3>
<ul>
<li><code>f32</code> 和 <code>f64</code> 兩種 floating-point type</li>
<li>根據 <code>IEEE-754</code>  標準 (<a href="https://zh.wikipedia.org/wiki/IEEE_754">wiki</a>)</li>
</ul>
<h3 id="Boolean"><a class="header-anchor" href="#Boolean"> </a>Boolean</h3>
<ul>
<li>
<p>如一般使用 <code>true</code> 和 <code>false</code> 兩種結果，大小為 <code>1 byte</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">t</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span>: <span class="type">bool</span> = <span class="literal">false</span>; <span class="comment">// with explicit type annotation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Character"><a class="header-anchor" href="#Character"> </a>Character</h3>
<ul>
<li>
<p>基本文字型使用雙引號包起來，而 <code>character</code> 使用單引號，跟 C# 一樣</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z</span> = <span class="string">&#x27;ℤ&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">heart_eyed_cat</span> = &#x27;😻&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Compound-Types"><a class="header-anchor" href="#Compound-Types"> </a>Compound Types</h2>
<h3 id="Tuple"><a class="header-anchor" href="#Tuple"> </a>Tuple</h3>
<ul>
<li>
<p>宣告方式</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup1</span> = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup2</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>解構 tuple</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span> = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>直接使用 index 讀取 tuple</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">five_hundred</span> = x.<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">six_point_four</span> = x.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">one</span> = x.<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Array"><a class="header-anchor" href="#Array"> </a>Array</h3>
<ul>
<li>
<p>宣告方式</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = [<span class="number">1</span>; <span class="number">5</span>]; <span class="comment">// [1,1,1,1,1]</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>with 型別及長度宣告</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>從 0 開始，超過陣列長度會造成錯誤</p>
</li>
</ul>
<h1 id="Functions"><a class="header-anchor" href="#Functions"> </a>Functions</h1>
<ul>
<li>
<p>宣告方式: <code>fn</code></p>
</li>
<li>
<p>命名方式: <code>snake case</code>，範例: <code>fn another_function()&#123; &#125;</code></p>
</li>
<li>
<p>Function parameters 的設定方式</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">another_function</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">another_function</span>(x: <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Expression in Function</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>&#123; &#125;</code> 來建立一個新的 scope</li>
<li>line 6: 沒有分號結尾，視為 <code>expression</code> 會被 return</li>
</ul>
</li>
<li>
<p>Function 需回傳 <code>values</code> 或是 <code>expressions</code>，沒有 <code>void</code> 的概念</p>
</li>
</ul>
<h1 id="Comments"><a class="header-anchor" href="#Comments"> </a>Comments</h1>
<ul>
<li>
<p>註解符號為 : <code>//</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// I’m feeling lucky today</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">lucky_number</span> = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Control-Flow"><a class="header-anchor" href="#Control-Flow"> </a>Control Flow</h1>
<p>流程控制有 <code>if</code> 和 <code>loops</code> 兩種方法</p>
<h2 id="if"><a class="header-anchor" href="#if"> </a>if</h2>
<ul>
<li>
<p>語法，<code>if</code> 後面的條件不需要使用 <code>( )</code> 包起來</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>有 <code>else if</code> 這種東西</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number</span> = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 4&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 3&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 2&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is not divisible by 4, 3, or 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>可以搭配 <code>let</code> 使用，但回傳的型別必須一致</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">condition</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number</span> = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of number is: &#123;&#125;&quot;</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="loops"><a class="header-anchor" href="#loops"> </a>loops</h2>
<p>有三種 loops 的方式: <code>loop</code>、<code>while</code>、<code>for</code></p>
<ul>
<li>
<p>loop</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The result is &#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>while</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">number</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);</span><br><span class="line"></span><br><span class="line">        number -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;LIFTOFF!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>for</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> a.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>Rust 沒有像 C# 擁有很多不同型別或是程式語法，但這些都算是基本需要掌握的，如果有地方理解錯誤也請讓我知道，感謝</p>
]]></content>
      <categories>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure DevOps] Pipeline 建置時跨 Repo 情境下該如何處理呢?</title>
    <url>/2021/03/17/azure-devops-build-pipeline-resource/</url>
    <content><![CDATA[<p>在工作上遇到一個情況就是一個系統的前後端是分在兩個 Repository 的，但前端的檔案需要被包進後端的程式中做後續的發佈，就在思考該如何處理這個問題，終於想出一個還不錯簡單的方式</p>
<span id="more"></span>
<p>在 Pipeline 建置時，可以將打包出來的結果 Publish 成 Pipeline Artifact，yaml 的寫法如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">artifactName:</span> <span class="string">&#x27;ngApp&#x27;</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)/dist/front-website&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>artifactName</code> : 打包出來的檔案名稱</li>
<li><code>PathtoPublish</code>：要打包的檔案資料夾位置</li>
</ul>
<p>到後端的 Repository 的 Pipeline 的 Task 中，可以利用 <code>Download Pipeline Artifact</code> 的 Task 來下載某一個專案下的某一個 Pipeline 發佈的 Artifact，這一個任務可以將編譯建置後的結果跨專案的使用，真的很方便</p>
<p><img src="image-20210317230842327.png" alt="image-20210317230842327"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">DownloadPipelineArtifact@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Download Pipeline Artifact&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">buildType:</span> <span class="string">specific</span></span><br><span class="line">    <span class="attr">project:</span> <span class="string">&#x27;&lt;project-id&gt;&#x27;</span></span><br><span class="line">    <span class="attr">definition:</span> <span class="number">13</span></span><br><span class="line">    <span class="attr">specificBuildWithTriggering:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allowPartiallySucceededBuilds:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">artifactName:</span> <span class="string">ngAPP</span></span><br><span class="line">    <span class="attr">targetPath:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)/backend/wwwroot&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>targetPath</code> 下載目標路徑</li>
</ul>
<p>由於可能會有先後順序的問題，這時候也可以搭配 Triggers 中的 <code>Build completion </code> 來做到 Pipeline 間的連動</p>
<p><img src="image-20210317231019398.png" alt="image-20210317231019398"></p>
<p>途中的設定執行的順序是，當 <code>FrontCode</code> Pipeline 完成後會觸發執行 <code>PipelineTest</code> 的 Pipeline 。</p>
]]></content>
      <categories>
        <category>Azure DevOps</category>
      </categories>
      <tags>
        <tag>Azure DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>[Teams] 訊息傳遞 - webhooks and connectors</title>
    <url>/2021/03/20/teams-and-messages/</url>
    <content><![CDATA[<p>Teams 可透過 webhook and connectors 的方式來做訊息的交換，但對於每一種的使用及限制真的很不熟，所以將透過此筆記來釐清其中的關係</p>
<span id="more"></span>
<p>Teams 的應用程式中可以看到**連接器(connector)**的項目可以新增，其中有很多與第三方服務的連接器，而 <code>Incoming WebHook</code> 是我們一定要加入的功能，畢竟想要傳訊息到 Teams，這一條路是要開通的</p>
<h1 id="Webhooks-and-Connectors"><a class="header-anchor" href="#Webhooks-and-Connectors"> </a>Webhooks and Connectors</h1>
<p>根據官網文件指出，webhooks and connectors 有以下四種</p>
<h2 id="Outgoing-webhooks"><a class="header-anchor" href="#Outgoing-webhooks"> </a>Outgoing webhooks</h2>
<p>使用者可以透過 <code>Outgoing webhooks</code> 送 request 到自己設定的服務，並取回相對應的回應。以下重點整理</p>
<ul>
<li>
<p><strong>Scoped configuration</strong>: scoped on a team-by-team basis</p>
</li>
<li>
<p><strong>Reacive messaging</strong>: 透過 <code>@mentioned</code> 的方式啟動 <code>Outgoing webooks</code></p>
</li>
<li>
<p>被呼叫的服務只有 5 秒鐘可以回應</p>
</li>
<li>
<p><strong>Standard HTTP message exchange</strong>: 回傳的訊息會加在原本的訊息下 (as reply)</p>
</li>
<li>
<p>可回傳 message, 例如 單純文字或卡片</p>
</li>
<li>
<p>不能被包在 Teams app 內</p>
</li>
<li>
<p>適用情境特地的團隊工作流程，但不適用於資料量比較大的事件上，因為有回應時間上的限制</p>
</li>
<li>
<p>運作方式跟寫 bots 很像，但不一定要使用 Bot Framework</p>
</li>
<li>
<p><strong>Litmited Microsoft Teams API Message support</strong>: messages send to web service, but don’t have access to APIs like list of chnnels or the channel roster in team</p>
</li>
<li>
<p>註冊 Outgoing Webhooks 的地方</p>
<ul>
<li>
<p>在團隊 -&gt; 管理團隊 -&gt; 應用程式</p>
<p><img src="SNAGHTML1767ab8d.PNG" alt="img"></p>
<p><img src="image-20210320104530920.png" alt="image-20210320104530920"></p>
<p>建立完成後，會取得一個安全性金鑰，需要之後用來驗證資訊安全性使用，更多細節請參閱下一點</p>
</li>
<li>
<p>安全性</p>
<p><img src="image-20210320104740607.png" alt="image-20210320104740607"></p>
<p><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-outgoing-webhook#2-create-a-method-to-verify-the-outgoing-webhook-hmac-token">文件</a></p>
<p><a href="https://youtu.be/EqodWkS5PYM?t=358">Live Demo</a></p>
</li>
<li>
<p>參考文件</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-outgoing-webhook">Create an outgoing webhook</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Connectors"><a class="header-anchor" href="#Connectors"> </a>Connectors</h2>
<p>允許使用者訂閱服務的通知訊息</p>
<ul>
<li>會有對應的 https 網址</li>
</ul>
<h2 id="Incoming-webhooks"><a class="header-anchor" href="#Incoming-webhooks"> </a>Incoming webhooks</h2>
<ul>
<li>
<p>最單純的 Connector</p>
</li>
<li>
<p>Incoming webhooks 是根據團隊開放使用 (新增應用程式)</p>
</li>
<li>
<p>Independent HTTPs messaging support: present clear &amp; consisten messages with cards</p>
</li>
<li>
<p>Secure resource definition: message included as JSON paylods; prevents malicious code injetion</p>
</li>
<li>
<p>Actionable messaging support: send messages as text-based or rich cards</p>
</li>
<li>
<p>Markdown Support，不支援 HTML 語法</p>
</li>
<li>
<p>範例回應樣式</p>
<p><img src="image-20210320110740485.png" alt="image-20210320110740485"></p>
<p><img src="image-20210320110803618.png" alt="image-20210320110803618"></p>
</li>
<li>
<p>參考資料</p>
<ul>
<li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using">Sending messages to connectors and webhooks</a></li>
</ul>
</li>
</ul>
<h2 id="Office-365-Connectors"><a class="header-anchor" href="#Office-365-Connectors"> </a>Office 365 Connectors</h2>
<ul>
<li>可以被打包上架的 Connectors</li>
<li>可以有自己的設定頁面</li>
<li>messages type: Office 365 Connector cards</li>
<li>可以收集安裝 Connectors 的設定資料以供後續發訊息使用</li>
<li>參考資料
<ul>
<li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-creating">Creating Office 365 Connectors for Microsoft Teams</a></li>
</ul>
</li>
</ul>
<h2 id="Rate-limiting-for-Connectors"><a class="header-anchor" href="#Rate-limiting-for-Connectors"> </a>Rate limiting for Connectors</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Time (seconds)</th>
<th style="text-align:left">Maximum allowed requests</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">30</td>
<td style="text-align:left">60</td>
</tr>
<tr>
<td style="text-align:left">3600</td>
<td style="text-align:left">100</td>
</tr>
<tr>
<td style="text-align:left">7200</td>
<td style="text-align:left">150</td>
</tr>
<tr>
<td style="text-align:left">86400</td>
<td style="text-align:left">1800</td>
</tr>
</tbody>
</table>
<ul>
<li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/rate-limit#best-practices">Best Practice Doc</a></li>
</ul>
<h1 id="Cards"><a class="header-anchor" href="#Cards"> </a>Cards</h1>
<p>卡片訊息在 Teams 內很常見，而 Adaptive cards 算是比較新的卡片格式，但在 Connectors、Bots、Messaging extension 下分別有些限制</p>
<ul>
<li>Adaptive cards in incoming webhooks 的限制
<ul>
<li>All native adaptive card schema elements, except <code>Action.Submit</code>, are fully supported.</li>
<li>The supported actions are <a href="https://adaptivecards.io/explorer/Action.OpenUrl.html"><strong>Action.OpenURL</strong></a>, <a href="https://adaptivecards.io/explorer/Action.ShowCard.html"><strong>Action.ShowCard</strong></a>, and <a href="https://adaptivecards.io/explorer/Action.ToggleVisibility.html"><strong>Action.ToggleVisibility</strong></a>.</li>
</ul>
</li>
<li>更多卡片類型及限制的說明文件: <a href="https://docs.microsoft.com/zh-tw/microsoftteams/platform/task-modules-and-cards/cards/cards-reference#adaptive-card">網址</a></li>
</ul>
<p>目前的狀態: Adaptive Cards 遇上 Incoming webhooks 的支援度基本上是不能用的，支援完整度最好的是 Bots in Teams，只能透過 message 附件的方式包進去，可是這樣子的作法畫面就很醜 (<a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using#the-flow-for-sending-adaptive-cards-via-an-incoming-webhook-is-as-follows">範例</a>)，可惜</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/what-are-webhooks-and-connectors">文件: What are webhooks and connectors?</a></li>
<li><a href="https://www.youtube.com/watch?v=EqodWkS5PYM">影片: Connect web services to Microsoft Teams with webhooks and Office 3655 Connectors</a></li>
<li><a href="https://docs.microsoft.com/en-us/microsoftteams/platform/task-modules-and-cards/what-are-cards">文件: Cards</a></li>
</ul>
]]></content>
      <categories>
        <category>Teams</category>
      </categories>
      <tags>
        <tag>Teams</tag>
      </tags>
  </entry>
  <entry>
    <title>[Teams] 關於 MessageCard Action 的一些事情</title>
    <url>/2021/03/26/teams-messagecard-action-action/</url>
    <content><![CDATA[<p>Teams 可以讓使用者透過 Incoming Webhooks 的方式將資訊以 JSON 的方式傳入並用卡片的形式呈現，而卡片的內容也可以定義一些動作讓使用者做操作，例如收集資訊並回傳到指定的服務去(API)，但到底要怎麼傳，跟怎麼驗證，這部分的文件被藏在我認為還蠻角落的地方，透過這篇筆記稍微整理一下</p>
<span id="more"></span>
<blockquote>
<p>注意: 這邊所紀錄的內容的資料來源是 <code>Legacy actionable message card reference </code></p>
</blockquote>
<h1 id="MessageCard"><a class="header-anchor" href="#MessageCard"> </a>MessageCard</h1>
<p>挑幾個跟 Action 比較有關的欄位出來</p>
<ul>
<li><code>correlationId</code> : log 使用，在 HttpPost 時，會以 <code>Card-Correlation-Id</code> 紀錄，應和 <code>Action-Request-Id</code> 一同被紀錄起來供後續使用，<code>Action-Request-Id</code> 由 Office 365 產生，可以用來查使用者的執行哪一個動作</li>
<li><code>potentialAction</code> ：希望操作的動作會定義在這一個區塊，數量最多能放 4 個動作。在 Section 裡也可以放 <code>potentialAction</code></li>
</ul>
<h2 id="Action-行為"><a class="header-anchor" href="#Action-行為"> </a>Action 行為</h2>
<p>Action 可以有下列幾種行為模式</p>
<ul>
<li>OpenUri</li>
<li>HttpPost</li>
<li>ActionCard</li>
<li>InvokeAddInCommand</li>
</ul>
<h3 id="OpenUri"><a class="header-anchor" href="#OpenUri"> </a>OpenUri</h3>
<p><strong>功能</strong>: 打開網址或 APP</p>
<p><strong>建議</strong>:</p>
<ol>
<li>使用此方式提供使用者另開網站，而非將連結放到主文內</li>
<li>至少附上一個連結，讓使用者可以看到更多資訊</li>
<li>應為 <code>potentialAction</code> 的最後一個動作</li>
</ol>
<p><strong>格式</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OpenUri&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Learn More&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://docs.microsoft.com/outlook/actionable-messages&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>name</code> : 按鈕顯示名稱，使用動詞命名</p>
</li>
<li>
<p><code>targets</code>: 可以針對使用者設備的作業系統版本提供對應的連結</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yammer.com/.../123&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iOS&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yammer://u/123&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;android&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yammer://u/123&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="HttpPost"><a class="header-anchor" href="#HttpPost"> </a>HttpPost</h3>
<p>這一個應該會是最常用的行為，基本上就是做一個 API 呼叫</p>
<p><strong>功能</strong>: 呼叫外部 web 服務</p>
<p><strong>驗證</strong>: 如需驗證發送者的身份，除了可以在 URL 後面掛 token 驗證外，也可以參考此<a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/security-requirements#verifying-that-requests-come-from-microsoft">文件</a>內的方式</p>
<p><strong>格式</strong>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HttpPOST&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Save&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://docs.microsoft.com/outlook/actionable-messages&quot;</span></span><br><span class="line">    <span class="attr">&quot;body&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;payload content&quot;</span></span><br><span class="line">    <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bodyContentType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>body</strong> 是呼叫 HttpPost 要傳的內容，下面會介紹搭配 <code>ActionCard</code> 的方式做出動態收集資料的行為</li>
<li><strong>bodyContentType</strong>: 預設為 <code>application/json</code> ，另外一個有效的設定值為 <code>application/x-www-form-urlencoded</code></li>
<li><strong>headers</strong>: 就字面上意思，想要在發 HttpPost 時放在 header 區塊的資訊</li>
</ul>
<p><strong>執行過程</strong>: 整個 <code>HttpPost</code> 的發送行為會由微軟代為發送，並不是由 Client 端直接發送，這也是為什麼在驗證篇的文件中，提到可以驗證 http requests 是否來自微軟</p>
<h3 id="被呼叫服務的回應方式"><a class="header-anchor" href="#被呼叫服務的回應方式"> </a>被呼叫服務的回應方式</h3>
<p>當被呼叫的服務執行完動作時，需要給 Teams 一些回應，以下有幾點文件上提到的小叮嚀</p>
<ul>
<li>Response 的 header 中，要加入 <code>CARD-ACTION-STATUS</code>，而資訊應清晰，不需要加呼叫者的名字或是執行時間，因為這部分的資訊會被自動加上</li>
<li>Refresh Card: 可回傳一個完整的 MessageCard 內容來更新使用者發出動作的同一卡片資訊，例如移除原本卡片中的動作項目，或是更新同張卡片上的資訊內容
<ul>
<li>重點: 在 Header 加入 <code>CARD-UPDATE-IN-BODY: TRUE</code></li>
<li>不要使用 Refresh Cards 做精靈式回答的工作</li>
<li>至少包含一個 <code>OpenUri</code> 連結回原本系統</li>
</ul>
</li>
</ul>
<h3 id="ActionCard"><a class="header-anchor" href="#ActionCard"> </a>ActionCard</h3>
<p><img src="trello-example-expanded-explained.png" alt="trello-example-expanded-explained"></p>
<p><strong>功能</strong>: 收集使用者輸入資訊，收集到的資訊可用在 <code>HttpPost</code> 和 <code>OpenUri</code></p>
<p><strong>格式</strong>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ActionCard&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Comment&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TextInput&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comment&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isRequired&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isMultiline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HttpPOST&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Action&#x27;s name prop.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://yammer.com/comment?postId=123&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comment=&#123;&#123;comment.value&#125;&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>isRequried</code> : 欄位是否必填</li>
<li><code>value</code>: 預設值</li>
<li>line 17: 使用大括弧包住變數，可使用變數的來源為 <code>inputs</code> 區塊定義的物件並以 input 的 <code>id</code> 為變數名稱，格式 <code>&#123;&#123;<id of input>.value&#125;&#125;</code></li>
</ul>
<p>可使用的輸入欄位型態有</p>
<ul>
<li>
<p>TextInput</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TextInput&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comment&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isMultiline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;maxLength&quot;</span><span class="punctuation">:</span> <span class="number">250</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>isMultiline</code> : 為 true 時會顯示 textarea, 為 false 時會顯示 input</li>
<li><code>maxLength</code>: 設定可輸入文字的上限值</li>
</ul>
</li>
<li>
<p>DateInput</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DateInput&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dueDate&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;includeTime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Input&#x27;s title property&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>includeTime</code> : 是否要顯示時間設定</li>
</ul>
</li>
<li>
<p>MultichoiceInput</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultichoiceInput&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pick an option&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isMultiSelect&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expanded&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Choice 1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Choice 2&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Choice 3&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>isMultiSelect</code>: 設定為 <code>true</code> 時，會顯示成 checkbox ，當設定為 <code>false</code> 時，會顯示成 radio 。預設值為 `false</li>
<li><code>style</code>: 當 <code>isMultiSelect</code> 為 false 時且 style 設定為 <code>expanded</code> ，畫面會盡量將選項全部顯示。預設值為 <code>normal</code></li>
</ul>
</li>
</ul>
<h3 id="InvokeAddInCommand"><a class="header-anchor" href="#InvokeAddInCommand"> </a>InvokeAddInCommand</h3>
<p>這行為目前看起來只能用在 Offie Add-in，暫時不研究，Reference: <a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference?WT.mc_id=DOP-MVP-5002680#invokeaddincommand-action">InvokeAddInCommand action</a></p>
<h2 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h2>
<p>範例一</p>
<p><img src="trello-example-explained.png" alt="trello-example-explained"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;summary&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Card \&quot;Test card\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;themeColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0078D7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Card created: \&quot;Name of card\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sections&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;David Claux&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9/13/2016, 3:34pm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://connectorsdemo.azurewebsites.net/images/MSC12_Oscar_002.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;facts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Board:&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Name of board&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;List:&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Name of list&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Assigned to:&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(none)&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Due date:&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(none)&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;potentialAction&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ActionCard&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Set due date&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DateInput&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dueDate&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Select a date&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HttpPOST&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ActionCard&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Move&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MultichoiceInput&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;move&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pick a list&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span> <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;List 1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;l1&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;List 2&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;l2&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HttpPOST&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ActionCard&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Add a comment&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;inputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TextInput&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comment&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isMultiline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Enter your comment&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HttpPOST&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://...&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OpenUri&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;View in Trello&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://...&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>範例二</p>
<p><img src="twitter-example-explained.png" alt="twitter-example-explained"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;themeColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0078D7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sections&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;**Elon Musk**&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@elonmusk - 9/12/2016 at 5:33pm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://pbs.twimg.com/profile_images/782474226020200448/zDo-gAo0.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;activityText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Climate change explained in comic book form by xkcd xkcd.com/1732&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;activityTitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;**Mark Knopfler**&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;activitySubtitle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@MarkKnopfler - 9/12/2016 at 1:12pm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;activityImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://pbs.twimg.com/profile_images/378800000221985528/b2ebfafca6fd7b565fdf3bf4ccdb4dc9.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;activityText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mark Knopfler features on B.B King&#x27;s all-star album of Blues greats, released on this day in 2005...&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="驗證"><a class="header-anchor" href="#驗證"> </a>驗證</h1>
<ul>
<li>
<p>Action URL 必須是 HTTPS</p>
</li>
<li>
<p>可以驗證 hearer token 是否合法</p>
</li>
<li>
<p>可驗證 <code>aud</code> 是否與目前 service base URL 相符</p>
</li>
<li>
<p>可使用 URL 掛載 token 的方式作驗證</p>
</li>
<li>
<p>bearer token 包含了 AAD Office 365 User 資訊</p>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference?WT.mc_id=DOP-MVP-5002680">Legacy actionable message card reference</a></li>
<li><a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/security-requirements?WT.mc_id=DOP-MVP-5002680">Security requirements for actionable messages in Office 365</a></li>
</ul>
]]></content>
      <categories>
        <category>Teams</category>
      </categories>
      <tags>
        <tag>Teams</tag>
      </tags>
  </entry>
  <entry>
    <title>[Azure DevOps] 用 API 來建立 WorkItems - Angular 篇</title>
    <url>/2021/04/18/devops-api-angular-version/</url>
    <content><![CDATA[<p>當網路速度慢遇上要大量開  Work Items 時，就會有一種想下班的念頭，還好 Azure DevOps 有提供 API 可以讓我們用程式來建立 Work Items，雖然剛開始有點小麻煩，但弄通後就還好，所以這邊就筆記一下起手式</p>
<span id="more"></span>
<h1 id="OAuth"><a class="header-anchor" href="#OAuth"> </a>OAuth</h1>
<p>當呼叫 API 時，還是得通過驗證才能操作 API，這邊可以簡單的透過建立 <code>Personal access tokens</code> 的方式來完成權限控管及驗證等功能，至於如何在 Azure DevOps 建立 PAT，我相信網路上已經有很多文章在講怎麼操作了</p>
<p>每一個操作的 API 也有說明所需的權限，範例
<img src="image-20210418201316995.png" alt="image-20210418201316995"></p>
<h1 id="API-操作"><a class="header-anchor" href="#API-操作"> </a>API 操作</h1>
<p>這邊我使用 Angular 作為範例程式 ，先用一個 API 的操作來說明</p>
<h2 id="取得-iterations"><a class="header-anchor" href="#取得-iterations"> </a>取得 iterations</h2>
<ul>
<li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/work/iterations/list?view=azure-devops-rest-6.0">API - Work - Iterations</a></li>
</ul>
<p>根據 API 文件得知，呼叫 <code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/&#123;team&#125;/_apis/work/teamsettings/iterations?api-version=6.0</code> 可以取得開 project 下的 iterations 資訊，</p>
<p>程式碼的部分如下(以下的程式碼會產生錯誤)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">baseUrl = <span class="string">&#x27;`https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;&#x27;</span>; </span><br><span class="line"><span class="title function_">getIterations</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span>/work/teamsettings/iterations?api-version=<span class="subst">$&#123;<span class="variable language_">this</span>.apiVersion&#125;</span>`</span>);    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>organization</code> 和 <code>project</code> 請配合自己的 DevOps 專案修改</li>
<li>這段程式碼當在呼叫 API 時會出現錯誤，原因是沒有授權的關係</li>
</ul>
<p>來調整一下呼叫的 header 資訊，加入之前所建立的 PAT</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getIterations</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">get</span>(</span><br><span class="line">     <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span>/work/teamsettings/iterations?api-version=<span class="subst">$&#123;<span class="variable language_">this</span>.apiVersion&#125;</span>`</span>,</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(&#123;</span><br><span class="line">         <span class="title class_">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="variable language_">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">       &#125;),</span><br><span class="line">     &#125;</span><br><span class="line">   );    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Headers 的部分加入 <code>Authorization</code> 的內容</li>
<li>PAT 需要轉換成 Base64 的格式</li>
<li><code>PAT:$&#123;token&#125;</code> 的 <code>PAT:</code> 是必要的</li>
<li>重新執行即可取回所要的資訊</li>
</ul>
<p>每次呼叫 API 時後面都要加上 <code>api-version</code> 資訊，其實有點麻煩，這資訊可以改放到 headers 內</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(&#123;</span><br><span class="line">      <span class="title class_">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="variable language_">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">      <span class="string">&#x27;X-TFS-FedAuthRedirect&#x27;</span>: <span class="string">&#x27;Suppress&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;api-version&#x27;</span>: <span class="string">&#x27;6.0&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="建立-Work-Item"><a class="header-anchor" href="#建立-Work-Item"> </a>建立 Work Item</h2>
<ul>
<li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20items/create?view=azure-devops-rest-6.0">API - Work Items - Create</a></li>
</ul>
<blockquote>
<p>POST <a href="https://dev.azure.com/%7Borganization%7D/%7Bproject%7D/_apis/wit/workitems/$%7Btype%7D?api-version=6.0">https://dev.azure.com/{organization}/{project}/_apis/wit/workitems/${type}?api-version=6.0</a></p>
</blockquote>
<p>第一次看到 <code>$&#123;type&#125;</code> 的時候，我也搞不懂要放入什麼，經過一陣亂測試，終於知道要放什麼東西了 ，在網頁上面要新增一個 Work Item 時，可以選得類別會依開發模式來決定，基本操作都是一樣的</p>
<p><img src="image-20210418205023231.png" alt="image-20210418205023231"></p>
<p>如果要建立一個 <code>Task</code>，網址會是</p>
<p><code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/_apis/wit/workitems/$Task</code></p>
<p>如果是 <code>Issue</code>，網址則會是</p>
<p><code>https://dev.azure.com/&#123;organization&#125;/&#123;project&#125;/_apis/wit/workitems/$Issue</code></p>
<p>這樣子說明應該可以瞭解 <code>$&#123;type&#125;</code> 要怎麼改了</p>
<p>另外一個要注意的地方是 Request Body 的 Content-Type 需要設定為 <code>application/json-patch+json</code></p>
<p><img src="image-20210418205307166.png" alt="image-20210418205307166"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(&#123;</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="variable language_">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">    <span class="string">&#x27;api-version&#x27;</span>: <span class="variable language_">this</span>.<span class="property">apiVersion</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>範例程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createWorkItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span>/wit/workitems/$Task`</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.Title&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;Title here&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.Description&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;desc here&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/Microsoft.VSTS.Common.Priority&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/fields/System.IterationPath&#x27;</span>,</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;apiDemo\\w001&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ], &#123;</span><br><span class="line">        <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(&#123;</span><br><span class="line">            <span class="title class_">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="variable language_">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">            <span class="string">&#x27;api-version&#x27;</span>: <span class="variable language_">this</span>.<span class="property">apiVersion</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以修改的 path ，可參閱 <a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20item%20types%20field/list?view=azure-devops-rest-6.0">API - work item fields</a>，但不是所有的欄位都可以設定，這部分就請各位自己測試了</li>
</ul>
<h2 id="Update-Work-Item"><a class="header-anchor" href="#Update-Work-Item"> </a>Update Work Item</h2>
<ul>
<li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20items/update?view=azure-devops-rest-6.0">API - Work Item Update</a></li>
</ul>
<blockquote>
<p>PATCH <a href="https://dev.azure.com/%7Borganization%7D/_apis/wit/workitems/%7Bid%7D?api-version=6.0">https://dev.azure.com/{organization}/_apis/wit/workitems/{id}?api-version=6.0</a></p>
</blockquote>
<p>用一個 Related Work 的範例來說明更新 Work Item</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addLink</span>(<span class="params">parent, ...childrend</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">http</span>.<span class="title function_">patch</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span>/wit/workitems/<span class="subst">$&#123;parent&#125;</span>`</span>, [</span><br><span class="line">    ...childrend.<span class="title function_">map</span>(<span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">op</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/relations/-&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: &#123;</span><br><span class="line">          <span class="attr">rel</span>: <span class="string">&#x27;System.LinkTypes.Related&#x27;</span>,</span><br><span class="line">          <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.baseUrl&#125;</span>/wit/workItems/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">          <span class="attr">attributes</span>: &#123;</span><br><span class="line">            <span class="attr">comment</span>: <span class="string">&#x27;adding another task&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],  &#123;</span><br><span class="line">      <span class="attr">headers</span>: <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>(&#123;</span><br><span class="line">          <span class="title class_">Authorization</span>: <span class="string">`Basic <span class="subst">$&#123;btoa(<span class="string">`PAT:<span class="subst">$&#123;<span class="variable language_">this</span>.token&#125;</span>`</span>)&#125;</span>`</span>,</span><br><span class="line">          <span class="string">&#x27;api-version&#x27;</span>: <span class="variable language_">this</span>.<span class="property">apiVersion</span>,</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json-patch+json&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 API 文件中有提供更多範例可以參考</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/?view=azure-devops-rest-6.0">azure-devops-rest</a></li>
</ul>
]]></content>
      <categories>
        <category>Azure DevOps</category>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Azure DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>[NATS] Messaging architecture - 影片筆記</title>
    <url>/2021/05/08/nats-study-1/</url>
    <content><![CDATA[<p>最近工作上碰到了 Messaging 架構面的開發，或許對很多人來說這已經是很基本的常識，但對我來說這是新東西，所以看個影片將裡面提到的觀念筆記下來</p>
<span id="more"></span>
<h1 id="Messaging-架構"><a class="header-anchor" href="#Messaging-架構"> </a>Messaging 架構</h1>
<p><img src="image-20210508152057858.png" alt="image-20210508152057858"></p>
<ul>
<li>message had payload and subject</li>
<li>Subject names are extremely important (描述目標) -</li>
<li>Producers - message 建立者 (publishers)
<ul>
<li>Publisher may specify an optional reply, it change message type from notify to request</li>
</ul>
</li>
<li>Subscribe: receive messages matching a subscription
<ul>
<li>can specify a queue group name</li>
<li>can specify how many messages to receive before auto-canceling (big deal)</li>
<li>can specify wildcards, ex: <code>pokenats.*.*.hb.100</code>, <code>pokenats.eden-services.&gt;</code>
<ul>
<li><code>*</code> matches any value in that element</li>
<li><code>&gt;</code> matches all elements that follow, only valid at the end of subject</li>
</ul>
</li>
</ul>
</li>
<li>NATS Server
<ul>
<li>Clustered servers/cluster-aware clients
<ul>
<li>Build-in resiliency and high availability</li>
<li>Client will auto connect to another server in the cluster if one NATS server is down.</li>
</ul>
</li>
<li>Text-base protocol (payload is an array of bytes)
<ul>
<li>use telnet to explore</li>
</ul>
</li>
<li>Monitorable on a dedicated port - returning JSON data to describing the state of the server</li>
<li>Server protects itself first
<ul>
<li>Auto-pruning of slow/non-responsive client</li>
<li>Disconnect clients that send bad protocol messages</li>
</ul>
</li>
<li>at most once delivery</li>
<li>messages stored until number or size limits are reached</li>
<li>Subscribers can request messages sent earlier
<ul>
<li>Start with first/last/n-th/etc message</li>
</ul>
</li>
<li>Durable subscriptions
<ul>
<li>Resume previous session</li>
</ul>
</li>
<li>At least once delivery</li>
</ul>
</li>
<li>Three simple patterns
<ul>
<li>Publish-subscribe (基本行為)</li>
<li>Queueing (變化型)</li>
<li>Request-Reply (變化型)</li>
</ul>
</li>
</ul>
<p><img src="image-20210508154237496.png" alt="image-20210508154237496"></p>
<p>利用 Subject Name 來區分事件所對應的行為，<strong>事件名稱很重要</strong></p>
<h1 id="實做練習"><a class="header-anchor" href="#實做練習"> </a>實做練習</h1>
<ol>
<li>
<p>在 windows 電腦上要架設一個 NATS 服務，有 Docker 後一切都變簡單了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name nats-main -p 4222:4222 -p 6222:6222 -p 8222:8222 nats</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>如果沒有安裝過 NestJS CLI  的可以參考這篇<a href="https://docs.nestjs.com/#installation">文件</a>，這裡我建立了兩個 NestJS App，一個是 Client, 一個是 Server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nest new app-client</span><br><span class="line">nest new app-server</span><br></pre></td></tr></table></figure>
<ul>
<li>基本上，這邊命名為 client、server 沒什麼意義，因為在 Messaging 的世界裡，每一個都是 Client 或是 Server (因為都可以發訊息或接收訊息)</li>
</ul>
</li>
<li>
<p>在兩個專案中都安裝以下套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save @nestjs/microservices</span><br><span class="line">npm i --save nats@^1.4.12</span><br></pre></td></tr></table></figure>
<ul>
<li>留意: <code>nats</code> 套件 1.x 和 2.x 版的 API 是不相容</li>
</ul>
</li>
<li>
<p>設定 NATS Server 連線資訊</p>
<ul>
<li>main.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; natsConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;./nats.config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">connectMicroservice</span>(natsConfig);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> globalPrefix = <span class="string">&#x27;api&#x27;</span>;</span><br><span class="line">  app.<span class="title function_">setGlobalPrefix</span>(globalPrefix);</span><br><span class="line">  <span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">port</span> || <span class="number">3333</span>; <span class="comment">// Port 可改</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">startAllMicroservicesAsync</span>();</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Listening at http://localhost:&#x27;</span> + port + <span class="string">&#x27;/&#x27;</span> + globalPrefix);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>nats.config.ts</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">import <span class="punctuation">&#123;</span> NatsOptions<span class="punctuation">,</span> Transport <span class="punctuation">&#125;</span> from &#x27;@nestjs/microservices&#x27;;</span><br><span class="line"></span><br><span class="line">export const natsConfig<span class="punctuation">:</span> NatsOptions = <span class="punctuation">&#123;</span></span><br><span class="line">  transport<span class="punctuation">:</span> Transport.NATS<span class="punctuation">,</span></span><br><span class="line">  options<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    url<span class="punctuation">:</span> process.env.NATS_URL || &#x27;nats<span class="punctuation">:</span><span class="comment">//localhost:4222&#x27;,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Client 設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">import <span class="punctuation">&#123;</span> Module <span class="punctuation">&#125;</span> from &#x27;@nestjs/common&#x27;;</span><br><span class="line">import <span class="punctuation">&#123;</span> ClientsModule <span class="punctuation">&#125;</span> from &#x27;@nestjs/microservices&#x27;;</span><br><span class="line">import <span class="punctuation">&#123;</span> AppController <span class="punctuation">&#125;</span> from &#x27;./app.controller&#x27;;</span><br><span class="line">import <span class="punctuation">&#123;</span> AppService <span class="punctuation">&#125;</span> from &#x27;./app.service&#x27;;</span><br><span class="line">import <span class="punctuation">&#123;</span> natsConfig <span class="punctuation">&#125;</span> from &#x27;./nats.config&#x27;;</span><br><span class="line"></span><br><span class="line">@Module(<span class="punctuation">&#123;</span></span><br><span class="line">  imports<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    ClientsModule.register(<span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">      name<span class="punctuation">:</span> &#x27;MATH_SERVICE&#x27;<span class="punctuation">,</span></span><br><span class="line">      ...natsConfig<span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span>)</span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  controllers<span class="punctuation">:</span> <span class="punctuation">[</span>AppController<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  providers<span class="punctuation">:</span> <span class="punctuation">[</span>AppService<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>)</span><br><span class="line">export class AppModule <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>Client 是用來發送訊息的，如果只是單純監聽事件，就不需要設定這個
<ul>
<li><code>client.emit([subject], [payload])</code> :  event-driven messaging</li>
<li><code>client.send([subject], [payload])</code> :  request-response messaging</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Controller 設定</p>
<ol>
<li>發送端</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="meta">@Inject</span>(<span class="string">&#x27;MATH_SERVICE&#x27;</span>) <span class="keyword">private</span> client: ClientProxy,</span></span><br><span class="line"><span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@Inject('MATH_SERVICE')</code> 對應 <code>AppModule</code> 所註冊的名稱，可自行更換</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="attr">data</span>: <span class="built_in">number</span>[]): <span class="title class_">Observable</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">client</span>.<span class="property">send</span>&lt;<span class="built_in">number</span>&gt;(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;sum&#x27;</span> &#125;, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>發送一個 Event ，Subject Name: <code>&#123;cmd: 'sum'&#125;</code>，payload 是一個數字陣列</li>
</ul>
<ol start="2">
<li>接收端</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MessagePattern</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;sum&#x27;</span> &#125;)</span><br><span class="line"><span class="title function_">sum</span>(<span class="attr">data</span>: <span class="built_in">number</span>[]): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;MinionAppController: sum&#x27;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">minionAppService</span>.<span class="title function_">sum</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>@MessagePattern([subject])</code> 決定要監聽的 Subject  種類</li>
</ul>
</li>
</ol>
<h1 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h1>
<ul>
<li><a href="https://www.youtube.com/watch?v=SLb4rdI5lIM">NATS for Modern Messaging and Microservices</a></li>
<li><a href="https://docs.nats.io/">NATS 官網</a></li>
<li><a href="https://hub.docker.com/_/nats">NATS Docker Image</a></li>
<li><a href="https://docs.nestjs.com/microservices/nats#nats">NestJS - NATS</a></li>
<li>範例程式
<ul>
<li><a href="https://github.com/chgc/nats-nest-studyDemo/tree/client">Client</a></li>
<li><a href="https://github.com/chgc/nats-nest-studyDemo/tree/server">Server</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>NATS</category>
      </categories>
      <tags>
        <tag>NATS</tag>
      </tags>
  </entry>
  <entry>
    <title>[How-to] 如何寫一份 JSON Schema</title>
    <url>/2021/06/06/how-to-write-json-schema/</url>
    <content><![CDATA[<p>當要驗證 JSON 資料格式是否正確，有幾種做法</p>
<ol>
<li>丟給後端去驗證</li>
<li>寫個 JSON Schema 做驗證(前端就可以先檢查了)</li>
</ol>
<p>JSON Schema 是什麼？他有點像以前 XSD (用來描述 XML 結構的檔案，也有驗證的效果)，除了可以用來驗證 JSON 資料格式是否正確，也可以用來驗證 YAML 檔案的格式。</p>
<span id="more"></span>
<h1 id="基本語法"><a class="header-anchor" href="#基本語法"> </a>基本語法</h1>
<p>所以如何寫一個 JSON Schema，我們需要寫另外一份 JSON 來描述未來想要驗證的 JSON 資料格式為何，型態為何，可以輸入得資料有哪些等，下面就跟大家一起整理相關的語法筆記 (部分範例來自 JSON Schema 網站，連結在參考資料)</p>
<p>假設有一個 JSON 資料長這樣</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;productId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;productName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A green door&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">12.50</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;home&quot;</span><span class="punctuation">,</span> <span class="string">&quot;green&quot;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>一個基本的 JSON schema 長這樣</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://json-schema.org/draft/2020-12/schema&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;$id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://example.com/product.schema.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Product&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A product in the catalog&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>keyword
<ul>
<li><code>$schema</code>: 參考的 JSON schema 是哪一個版本</li>
<li><code>$id</code>: 這份 JSON schema 存放的位置</li>
</ul>
</li>
<li>annotation
<ul>
<li><code>title</code>，<code>description</code> 描述說明此份 schema 的用途</li>
</ul>
</li>
<li>validation keyword
<ul>
<li><code>type</code> : 資料格式型態，可以描述的型態有 <code>null</code>、 <code>boolean</code>、 <code>object</code>、 <code>array</code>、 <code>number</code>、 <code>string</code>、 <code>integer</code></li>
</ul>
</li>
</ul>
<p>上面是設定跟說明這份 schema 的用途，類似 metadata，至於如何描述資料結構，描述方法如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;productId&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The unique identifier for a product&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;productName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Name of the product&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;productId&quot;</span><span class="punctuation">,</span> <span class="string">&quot;productName&quot;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>validation keyword
<ul>
<li><code>properties</code> 用來描述此 <code>Object</code> 內有哪些欄位</li>
<li><code>required</code> 用來設定哪些欄位是必填的</li>
</ul>
</li>
</ul>
<h2 id="更多語法"><a class="header-anchor" href="#更多語法"> </a>更多語法</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The price of the product&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;number&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclusiveMinimum&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>數字型別</li>
<li>不能是 0 (用 <a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.2.5"><code>exclusiveMinimum</code></a> 規則排除)</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tags for the product&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;array&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minItems&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uniqueItems&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>此為陣列型別的欄位</li>
<li>陣列 內得資料格式，使用 <a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.1.2"><code>items</code></a> 定義</li>
<li>至少要有一筆資料 (<a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.4.2"><code>minItems</code></a> 來設定最少筆數)</li>
<li>且不能重複 (<a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.4.3"><code>uniqueItems</code></a> 檢查)</li>
</ul>
<h2 id="Nesting-data-structures"><a class="header-anchor" href="#Nesting-data-structures"> </a>Nesting data structures</h2>
<p>不難，一樣式套用上面的規則，做法是一樣的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dimensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;length&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;number&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;number&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;number&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;length&quot;</span><span class="punctuation">,</span> <span class="string">&quot;width&quot;</span><span class="punctuation">,</span> <span class="string">&quot;height&quot;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="References-schema"><a class="header-anchor" href="#References-schema"> </a>References schema</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;warehouseLocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Coordinates of the warehouse where the product is located.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://example.com/geographical-location.schema.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>$ref</code> 指定 schema 的參考路徑，可以是外部或內部 (<a href="https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00#section-8.2.4">spec</a>)</p>
<ul>
<li>
<p>外部參考: 使用 URI Reference</p>
</li>
<li>
<p>內部參考: 使用 <code>#/路徑</code> 的方式，搭配 <code>$defs</code> 使用</p>
<p><img src="image-20210606115417347.png" alt="image-20210606115417347"></p>
</li>
</ul>
</li>
</ul>
<h1 id="進階語法"><a class="header-anchor" href="#進階語法"> </a>進階語法</h1>
<ul>
<li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.2.3"><code>additionalProperties</code></a>: 是否有其他額外的欄位，<code>false</code> 時，JSON 得資料必須符合 schema 所定義的 <code>properties</code></li>
<li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.3.2.2"><code>patternProperties</code></a>: 用 Regex 來描述 Property 名稱規則及對應得資料格式</li>
<li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.10.2.1.3"><code>oneOf</code></a> 符合定義規則的其中一項
<ul>
<li>MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema.</li>
<li>An instance validates successfully against this keyword if it validates successfully against exactly one schema defined by this keyword’s value.</li>
</ul>
</li>
<li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.8.2.4"><code>$defs</code></a> 搭配 <code>$ref</code> 使用 (舊版名稱為: <code>definitions</code>)
<ul>
<li>MUST be an object. Each member value of this object MUST be a valid JSON Schema.</li>
<li>reserves a location for schema authors to inline re-usable JSON Schemas into a more general schema.</li>
</ul>
</li>
<li><a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.1.2"><code>enum</code></a>: 設定可以使用的值有哪些</li>
<li>MUST be an array and at least one element.</li>
<li>An instance validates successfully against this keyword if its value is equal to one of the elements in this keyword’s array value.</li>
<li><a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6.3.3"><code>pattern</code></a>: 使用 Regex 設定可以輸入資料的格式 (format)</li>
</ul>
<p>完整範例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://example.com/entry-schema&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://json-schema.org/draft/2020-12/schema&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JSON Schema for an fstab entry&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;storage&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;storage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;oneOf&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#/$defs/diskDevice&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#/$defs/diskUUID&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#/$defs/nfs&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span> <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#/$defs/tmpfs&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fstype&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;ext3&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ext4&quot;</span><span class="punctuation">,</span> <span class="string">&quot;btrfs&quot;</span> <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;array&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;minItems&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;items&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;uniqueItems&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;readonly&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;$defs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;diskDevice&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;disk&quot;</span> <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;device&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^/dev/[^/]+(/[^/]+)*$&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span> <span class="string">&quot;device&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;diskUUID&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;disk&quot;</span> <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^[a-fA-F0-9]&#123;8&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;4&#125;-[a-fA-F0-9]&#123;12&#125;$&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span> <span class="string">&quot;label&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nfs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;nfs&quot;</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;remotePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^(/[^/]+)+$&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;oneOf&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span> <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hostname&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipv4&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span> <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ipv6&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span> <span class="string">&quot;server&quot;</span><span class="punctuation">,</span> <span class="string">&quot;remotePath&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tmpfs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;enum&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;tmpfs&quot;</span> <span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sizeInMB&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;minimum&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;maximum&quot;</span><span class="punctuation">:</span> <span class="number">512</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;required&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;type&quot;</span><span class="punctuation">,</span> <span class="string">&quot;sizeInMB&quot;</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;additionalProperties&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>想要知道更多 JSON Schema 語法的寫法，可以到 <code>JSON Schema Store</code> 內去瞭解，裡面列出很多現在常用的服務，很多都是用來驗證 YAML 格式是否正確，或是閱讀這篇<a href="https://json-schema.org/understanding-json-schema/">文件</a></p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ol>
<li><a href="https://json-schema.org/">JSON Schema</a></li>
<li><a href="https://json-schema.org/specification.html">JSON Schema specification</a></li>
<li><a href="https://www.schemastore.org/json/">JSON Schema Store</a></li>
</ol>
]]></content>
      <categories>
        <category>How-to</category>
      </categories>
      <tags>
        <tag>How-to</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kotlin]學習筆記 - Hello World</title>
    <url>/2021/06/14/kotlin-note-001/</url>
    <content><![CDATA[<p>Kotlin 這語言名字最近一直出現在我的雷達中，但由於之前都不是走 Java 開發體系，當然就不會放在心上，但由於現在的工作基本上是走 Java 技術線，只好摸摸鼻子先來研究一下 Kotlin 這語言了</p>
<span id="more"></span>
<h1 id="What-is-Kotlin"><a class="header-anchor" href="#What-is-Kotlin"> </a>What is Kotlin?</h1>
<ul>
<li>跑在 JVM 上，是 JVM Language</li>
<li>Object Oriented</li>
<li>Functional, support Higher order function</li>
<li>Less ceremony than Java, 語法比 Java 簡潔</li>
</ul>
<h2 id="建立學習環境"><a class="header-anchor" href="#建立學習環境"> </a>建立學習環境</h2>
<p>這邊使用 IntelliJ 來做學習 Kotlin 的環境工具</p>
<ol>
<li>New Project with Kotlin Template
<ol>
<li>Project Name: 隨意</li>
<li>Project Template: Application</li>
<li>Project JSK 我選擇 1.8</li>
</ol>
</li>
<li>Next -&gt; Finish 建立 Kotlin 專案</li>
</ol>
<p>在 <code>src</code> 資料夾下會看到 <code>main/kotlin</code> 得資料夾但沒有 kotlin 檔案，所以先增一個 <code>main.kt</code>  (<code>.kt</code> 為 Kotlin 檔案的附檔名)</p>
<p><img src="image-20210614141411321.png" alt="image-20210614141411321"></p>
<p>在該檔案內增加一個 main function</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要執行這一個檔案時， 需要先新增一個執行設定檔，Run -&gt; Edit Configurations -&gt; Add New Configuration</p>
<p><img src="image-20210614141641413.png" alt="image-20210614141641413"></p>
<p>以上設定完後就能執行了。</p>
<p><img src="image-20210614141715897.png" alt="image-20210614141715897"></p>
<h2 id="建立第一個-package"><a class="header-anchor" href="#建立第一個-package"> </a>建立第一個 package</h2>
<p>一樣在 Source root 資料夾上新增一個 Kotlin 檔案，這時候可以連同輸入 package 的名稱，例如 <code>com.cky.Person</code></p>
<p><img src="image-20210614142141788.png" alt="image-20210614142141788"></p>
<p>這時候就會產生一個 <code>Person.kt</code> 檔案，並且建立 <code>com/cky</code> 得資料夾</p>
<p><img src="image-20210614142331342.png" alt="image-20210614142331342"></p>
<p>使用方式如其他 import package 一樣</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.cky.Person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line"> println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"> <span class="keyword">val</span> person = Person(<span class="string">&quot;kevin&quot;</span>)</span><br><span class="line"> println(<span class="string">&quot;Name is <span class="subst">$&#123;kevin.Name&#125;</span>&quot;</span>)</span><br><span class="line"> person.display()    </span><br><span class="line"> person.displayWithLamda(::println) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Display: <span class="variable">$name</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">displayWithLamda</span><span class="params">(func: (<span class="type">s</span>: <span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">        func(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="筆記"><a class="header-anchor" href="#筆記"> </a>筆記</h1>
<ol>
<li>
<p>建立一個 class instance  不需要 <code>new</code> keyword</p>
</li>
<li>
<p>使用 <code>var</code> and <code>val</code> 來決定變數是否能被重新定義，就像 <code>let</code> 和 <code>const</code>，也可在 class 定義 property 時使用</p>
<ul>
<li><code>var</code> ==&gt; <code>let</code> : mutable</li>
<li><code>val</code> ==&gt; <code>const</code> : immutable</li>
</ul>
</li>
<li>
<p>string template 的使用法，使用方法如下，這裡的寫法跟 Dart 一樣</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(<span class="keyword">val</span> name: <span class="type">string</span>)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;display: <span class="variable">$name</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或是</span><br><span class="line">   println(<span class="string">&quot;display: <span class="subst">$&#123;person.name&#125;</span>&quot;</span>); <span class="comment">// 通常用於比較複雜的值，例如 $&#123;objectClass.prop&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>if expression</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="keyword">if</span>(q.answer == q.correctAnswer) &#123; <span class="string">&quot;Correct&quot;</span> &#125; <span class="keyword">else</span> &#123; <span class="string">&quot;Wrong&quot;</span> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>null handle, Kotlin 會盡量讓使用者不要遇到 null 的問題，所以例如 String 是一個 non-null value. 如果要讓 property 可以接受 null 時，就要搭配 <code>?</code></p>
</li>
</ol>
   <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> answer: string? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同樣也可以使用 <code>?.</code> 的方式來判斷是否能繼續往下執行，這點跟 TypeScript 的 <code>?.</code> 是一樣的功能</p>
   <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> q: Question? = Question()</span><br><span class="line">q?.answer = <span class="string">&quot;42&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>
<p>沒有 <code>switch</code> 只有 <code>when</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> answer: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">val</span> correctAnswer = <span class="string">&quot;Answer&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">printResult</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 等同 if(q.answer == q.correctAnswer) &#123; &quot;Correct&quot; &#125; else &#123; &quot;Wrong&quot; &#125; </span></span><br><span class="line">        <span class="keyword">when</span> (answer) &#123;</span><br><span class="line">            correctAnswer -&gt; print(<span class="string">&quot;Correct&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span> -&gt; print(<span class="string">&quot;Wrong&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本概念跟 <code>switch</code> 一樣，也可以做到 pattern match 的效果</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">whatItIs</span><span class="params">(any: <span class="type">Any</span>)</span></span> = <span class="keyword">when</span> (any) &#123;</span><br><span class="line">    <span class="keyword">is</span> String -&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> firstLetter = any.first()        <span class="comment">// smart cast, any is String now</span></span><br><span class="line">        println(<span class="string">&quot;It seems like words, it is <span class="variable">$any</span> and the first word is <span class="variable">$firstLetter</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> doubleValue = any * <span class="number">2</span>        <span class="comment">// smart cast, any is Int now</span></span><br><span class="line">        println(<span class="string">&quot;It seems like a number, <span class="variable">$any</span> and multiply 2 is <span class="variable">$doubleValue</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> -&gt; println(<span class="string">&quot;Whatever&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多的寫法留在之後再深入研究</p>
</li>
<li>
<p>try block 的寫法也可以跟 If Expression 一樣</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number: <span class="built_in">Int</span>? = <span class="keyword">try</span> &#123; </span><br><span class="line">  Integer.parseInt(q.answer)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e: NumberFormatException) &#123;</span><br><span class="line">  <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>looping</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// range of value</span></span><br><span class="line"><span class="keyword">var</span> range = <span class="number">1.</span><span class="number">.10</span></span><br><span class="line"><span class="keyword">var</span> range = <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for loop</span></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line">    println(i) <span class="comment">// 1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span> step <span class="number">2</span>) &#123;</span><br><span class="line">	println(i) <span class="comment">// 10,8,6,4,2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 1 to 9 不包含 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loop list</span></span><br><span class="line"><span class="keyword">var</span> numbers = listOf(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loop list with index</span></span><br><span class="line"><span class="keyword">for</span>((index, element) <span class="keyword">in</span> numbers.withIndex()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loop through map</span></span><br><span class="line"><span class="keyword">for</span>((key, value) <span class="keyword">in</span> map) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>No Checked Exception，但仍可透過 try catch 的方式捕捉到 exception</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kotlin]學習筆記 - Functions</title>
    <url>/2021/06/16/kotlin-note-002/</url>
    <content><![CDATA[<p>繼續學習 Kotin，本篇筆記會紀錄 Functions</p>
<h1 id="主要特性"><a class="header-anchor" href="#主要特性"> </a>主要特性</h1>
<ol>
<li>不需要存活在 Class 內</li>
<li>使用 <code>fun</code> 關鍵字</li>
<li>參數可以設定預設值</li>
<li>可以使用 named parameters</li>
<li>可以擴充既有 types</li>
</ol>
<span id="more"></span>
<h1 id="筆記"><a class="header-anchor" href="#筆記"> </a>筆記</h1>
<ol>
<li>
<p>Function 宣告</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>: String</code> 宣告變數或回傳型別為何</li>
</ul>
</li>
<li>
<p>支援 Expessions 型態</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> message = <span class="keyword">if</span>(a&gt;b) <span class="string">&quot;a&quot;</span> <span class="keyword">else</span> <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>如何在 Java 內呼叫 Function</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cky</span><br><span class="line"><span class="comment">// Util.kt 檔案</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>編譯後，Java 會看成這樣，之後就跟使用其他 static function 的方法是一樣的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class UtilKt() &#123;</span></span><br><span class="line"><span class="comment">//    static boolean display(String message) &#123; ... &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cky.UtilKt;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        UtilKt.display(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以透過 <code>@file:JvmName(&quot;SomeClassName&quot;)</code> 的方式來改變 Jvm 看 Kotlin function 的方式</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@file:JvmName</span>(<span class="string">&quot;SomeClassName&quot;</span>)</span><br><span class="line"><span class="keyword">package</span> com.cky</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>會轉換成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class SomeClassName &#123;</span></span><br><span class="line"><span class="comment">//    static boolean display(String message) &#123; ... &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cky.SomeClassName;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SomeClassName.display(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Default Parameters 在 C# 或是其他語言已經存在一段時間，但在 Java 並沒有這樣的觀念，而 Kotlin 的 Function 是可以設定預設值的</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span> = <span class="string">&quot;World&quot;</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    display() <span class="comment">// 顯示 Hello world</span></span><br><span class="line">    display(<span class="string">&quot;Kevin&quot;</span>) <span class="comment">// 顯示 Hello Kevin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>因為 Java 沒有 Defatul Parameters 的觀念，所以當上面的 function 要在 Java 中使用，有兩種方式，</p>
<ol>
<li>有多少參數傳就傳多少</li>
<li>加上 <code>@JvmOverloads</code></li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span> = <span class="string">&quot;World&quot;</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Named Parameters，這一個觀念在其他語言也有存在， 正常在傳參數的時候，都是依 function 設計時的順序傳，而 Named Parameters 時，就可以使用指定名稱的方式傳</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">display</span><span class="params">(message: <span class="type">String</span> = <span class="string">&quot;World&quot;</span>, logLevel: <span class="type">Int</span> = <span class="number">1</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$message</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   display(logLevel = <span class="number">2</span>, message = <span class="string">&quot;Kevin&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Named Parameters 不能和 Position Parameters 混用</li>
<li>Named Parameters 順序不重要</li>
<li>Java 呼叫時，不能使用指定名稱傳值</li>
</ul>
</li>
<li>
<p>Extension Functions 的概念也存在於 C# 中，可以讓我們針對既有 Types / classes 擴充功能，例如: <code>&quot;abc&quot;.myCustomFunction()</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">hello</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Hello <span class="variable">$this</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Kevin&quot;</span>.hello()) <span class="comment">// Hello Kevin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line2: this 表示此 extension function 所接收到的值，以此範例就是 line 6 的 <code>&quot;Kevin&quot;</code></li>
</ul>
</li>
<li>
<p>Infix Functions</p>
<ul>
<li>Member or extension function</li>
<li>Have a single parameter</li>
<li>Marked with infix keyword</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 沒有使用 infix</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> h1 = Header(<span class="string">&quot;H1&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> h2 = Header(<span class="string">&quot;H2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> h3 = h1.plus(h2)</span><br><span class="line">    println(h3.Name) <span class="comment">//H1H2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span>(<span class="keyword">var</span> Name: String) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Header.<span class="title">plus</span><span class="params">(other: <span class="type">Header</span>)</span></span>: Header &#123;</span><br><span class="line">    <span class="keyword">return</span> Header(<span class="keyword">this</span>.Name + other.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 infix</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> h1 = Header(<span class="string">&quot;H1&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> h2 = Header(<span class="string">&quot;H2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> h3 = h1 plus h2 <span class="comment">// &lt;= 主要差異</span></span><br><span class="line">    println(h3.Name) <span class="comment">//H1H2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span>(<span class="keyword">var</span> Name: String) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> Header.<span class="title">plus</span><span class="params">(other: <span class="type">Header</span>)</span></span>: Header &#123;</span><br><span class="line">    <span class="keyword">return</span> Header(<span class="keyword">this</span>.Name + other.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>可以透過 infix 來 overloading operators (不建議大量使用)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Header.<span class="title">plus</span><span class="params">(other: <span class="type">Header</span>)</span></span>: Header &#123;</span><br><span class="line">    <span class="keyword">return</span> Header(<span class="keyword">this</span>.Name + other.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> h1 = Header(<span class="string">&quot;H1&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> h2 = Header(<span class="string">&quot;H2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> h3 = h1 + h2 <span class="comment">// 可以使用 + operator</span></span><br><span class="line">    println(h3.Name) <span class="comment">//H1H2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Tail Recursive Functions</p>
<ol>
<li>使用 <code>tailrec</code> keyword</li>
<li>必須要是正確型態 (corret form)</li>
<li>符合上面的條件，Kotlin 就會優化 Recursive Functions</li>
</ol>
</li>
</ol>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li>Kotlin Fundamentals | Plurasight</li>
</ul>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>[Kotlin]學習筆記 - Types</title>
    <url>/2021/06/19/kotlin-note-003/</url>
    <content><![CDATA[<p>繼續學習 Kotin，本篇筆記會紀錄 Types</p>
<p>這裡的 Types 就是常聽到的 Class 和 interface</p>
<span id="more"></span>
<h1 id="筆記"><a class="header-anchor" href="#筆記"> </a>筆記</h1>
<h2 id="Interface"><a class="header-anchor" href="#Interface"> </a>Interface</h2>
<ol>
<li>
<p>預設皆為 public</p>
</li>
<li>
<p>interface 有 basic definitions、default methods、properties</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Time</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(hours: <span class="type">Int</span>, mins: <span class="type">Int</span> = <span class="number">0</span>, secs: <span class="type">Int</span> =<span class="number">0</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(time: <span class="type">KevinTime</span>)</span></span> = setTime(time.hours, time.mins, time.secs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>要 implement 一個 interface 是使用 <code>:</code> 來表示 implements</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">YetiTime</span>: <span class="type">Time</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>實做一個 interface 的 method 要使用 <code>override</code> keyword</p>
 <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">YetiTime</span>: <span class="type">Time</span> &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(hours: <span class="type">Int</span>, mins: <span class="type">Int</span>, secs: <span class="type">Int</span>)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>multiple implements</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Time</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(hours: <span class="type">Int</span>, mins: <span class="type">Int</span> = <span class="number">0</span>, secs: <span class="type">Int</span> = <span class="number">0</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(time: <span class="type">KevinTime</span>)</span></span> = setTime(time.hours, time.mins,  time.secs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">EndOfTheWorld</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(time: <span class="type">KevinTime</span>)</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YetiTime</span> : <span class="type">Time</span>, <span class="type">EndOfTheWorld</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(time: <span class="type">KevinTime</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;Time&gt;.setTime(time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setTime</span><span class="params">(hours: <span class="type">Int</span>, mins: <span class="type">Int</span>, secs: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>,</code> 來實現多 interface implements</li>
<li>可使用 <code>super&lt;T&gt;.xxx</code> 來決定使用哪一個 interface 的 default methods</li>
</ul>
</li>
</ol>
<h2 id="Classes"><a class="header-anchor" href="#Classes"> </a>Classes</h2>
<ol>
<li>
<p><code>final</code> 、<code>public</code> by default - apply to class and functions</p>
</li>
<li>
<p>使用 <code>open</code> keyword 讓 function 可以被 override，讓 Class 可以被繼承</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> firstName: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> lastName: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;<span class="variable">$firstName</span> <span class="variable">$lastName</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="type">Person</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>with <code>abstract</code> keyword，該 class 或 function 就必須被 implement</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a = Person() <span class="comment">// 出現 Error: Cannot create an instance of an abstract class</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> firstName: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> lastName: String = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;<span class="variable">$firstName</span> <span class="variable">$lastName</span>&quot;</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAddress</span><span class="params">()</span></span>: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="type">Person</span>() &#123;    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAddress</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>sealed Class:  represent restricted class hierarchies that provide more control over inheritance</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Add</span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Operation()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Subtract</span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Operation()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Multiply</span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Operation()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Divide</span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Operation()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">(x: <span class="type">Int</span>, op: <span class="type">Operation</span>)</span></span> = <span class="keyword">when</span> (op) &#123;</span><br><span class="line">    <span class="keyword">is</span> Operation.Add -&gt;      x + op.value</span><br><span class="line">    <span class="keyword">is</span> Operation.Subtract -&gt; x - op.value</span><br><span class="line">    <span class="keyword">is</span> Operation.Multiply -&gt; x * op.value</span><br><span class="line">    <span class="keyword">is</span> Operation.Divide -&gt;   x / op.value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>很像 Enum</li>
<li>可以搭配 <code>when</code> 做 pattern match</li>
</ul>
</li>
<li>
<p>可以透過 <code>construction parameters</code> 定義 class property (Primary Constructor)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String)</span><br><span class="line"><span class="keyword">val</span> kevin = Person(<span class="string">&quot;Kevin&quot;</span>)</span><br><span class="line">println(kevin.name)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>可以設定第二組 constructor</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>): <span class="keyword">this</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用預設值</span></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Data Classes: 會自動實做 equals, hashCode, toString methods，且又是 immutable class 再加上 copy method</p>
</li>
</ol>
   <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Meeting</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> location:String)</span><br><span class="line"><span class="keyword">val</span> aMeeting = Meeting(<span class="string">&quot;A Meeting&quot;</span>, <span class="string">&quot;Taiwan&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> bMeeting = Meeting(<span class="string">&quot;A Meeting&quot;</span>, <span class="string">&quot;Taiwan&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> anotherMeeting = aMeeting.copy(location = <span class="string">&quot;Japan&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// equal: </span></span><br><span class="line">aMeeting == bMeeting <span class="comment">// true</span></span><br><span class="line"><span class="comment">// ToString</span></span><br><span class="line">println(aMeeting.ToString()) <span class="comment">// Meeting(name=A Meeting, location=Taiwan)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>equal: 會比對 data class 內得資料是否相同</li>
<li>ToString() 會印出文字而非 hashCode</li>
<li>可以使用 copy 來建立另外一個 data class</li>
</ul>
<h2 id="Objects"><a class="header-anchor" href="#Objects"> </a>Objects</h2>
<ol>
<li>
<p><code>object</code> keyword 用來建立 singleton</p>
</li>
<li>
<p>定義與建立發生在同一時間</p>
</li>
<li>
<p>object 可以有 properties, methods, initializers 但就是不能有 constructors</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span>(<span class="keyword">val</span> id: <span class="built_in">Int</span>, <span class="keyword">val</span> title: String)</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Courses&#123;</span><br><span class="line">    <span class="keyword">var</span> allCourses = arrayListOf&lt;Course&gt;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">enrole</span><span class="params">(courseName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    Courses.allCourses</span><br><span class="line">    .filter &#123; it.title == courseName &#125;</span><br><span class="line">    .firstOrNull()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>object 可以在 class 內出現，而此時他的 scope 會是該 class 內</p>
</li>
<li>
<p>companion object: Factory object and static members</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">createNormalPerson</span><span class="params">(name: <span class="type">String</span>)</span></span>: NormalPerson &#123;</span><br><span class="line">            <span class="keyword">return</span> NormalPerson(name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> normalPerson = Person.createNormalPerson(<span class="string">&quot;XXX&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>@JvmStatic</code> to mark as static method for Java compiler</p>
</li>
</ol>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://carterchen247.medium.com/kotlin%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97-sealed-class-82eccf890ac0">Sealed Class</a></li>
</ul>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Big Picture</title>
    <url>/2021/07/07/k8s-note-001/</url>
    <content><![CDATA[<p>終於有機會接觸 Kubernetes (K8s) ，但對於整體的掌握度並沒有很好，所以從頭學起</p>
<span id="more"></span>
<h1 id="Kubernetes-Big-Picutre"><a class="header-anchor" href="#Kubernetes-Big-Picutre"> </a>Kubernetes Big Picutre</h1>
<p>Kubernetes 是一個控制中心，來控制 node，多個 nodes 成一個 clusters，簡單來說就是管理一堆 VM，而每一個 node 內可以跑很多 pod，每一個 pod 內可以跑 container(s)</p>
<p><img src="image-20210707115306733.png" alt="image-20210707115306733"></p>
<p><img src="image-20210707115328473.png" alt="image-20210707115328473"></p>
<p>K8s 就是用來管理這些 Pod 的一種方式，搭配各種需求就會有各式的元素出現</p>
<p><img src="image-20210707120143894.png" alt="image-20210707120143894"></p>
<p>而大腦當然需要其他的服務來協助管理眾多的 node，而我們會透過 API Server 對 K8s 進行相關的操作</p>
<p><img src="image-20210707120512377.png" alt="image-20210707120512377"></p>
<p>node 當然也會有相關的服務人員跟上頭溝通</p>
<p><img src="image-20210707120951569.png" alt="image-20210707120951569"></p>
<ul>
<li>Kubelet: Agent 與 master 做溝通</li>
<li>Container Runtime: 用來跑 Pod 的</li>
<li>Kube-Proxy: 負責網路的部分</li>
</ul>
<h1 id="kubectl-命令"><a class="header-anchor" href="#kubectl-命令"> </a>kubectl 命令</h1>
<ul>
<li>kubectl version: 檢查 Kubernetes 版本</li>
<li>kubectl cluster-info: 顯示 Cluster 資訊</li>
<li>kubectl get all: 取得目前在跑得 pods, deployments, services, etc.</li>
<li>kubectl run [container-name] --image=[image-name]: 建立 deployement for pod</li>
<li>kubectl port-forward [pod] [ports]: Forward a port to allow external access</li>
<li>kubectl expose … : export port for a deployment/pod</li>
<li>kubectl create [resource]: 建立 resouce</li>
<li>kubectl apply [resource]: 套用 resouce</li>
<li>kubectl --help : 顯示出可用的命令列表</li>
</ul>
<h1 id="Pods"><a class="header-anchor" href="#Pods"> </a>Pods</h1>
<ul>
<li>K8s 內的最小單位</li>
<li>Container 的執行環境</li>
<li>organize application 「parts」 into Pods</li>
<li>擁有自己的 IP、記憶體等資源，Pod 內的 Container 會共用這些資源</li>
<li>live or die</li>
<li>can replicate</li>
</ul>
<h2 id="container"><a class="header-anchor" href="#container"> </a>container</h2>
<ul>
<li>share the same Network namespace</li>
<li>have the loopback network interface (localhost)</li>
<li>processes need to bind to different ports (in the same pod)</li>
</ul>
<h2 id="建立-Pod"><a class="header-anchor" href="#建立-Pod"> </a>建立 Pod</h2>
<blockquote>
<p>kubectl run [podname] --image=[image-name]</p>
<p>範例: kubectl run webserver --image=nginx:alpine</p>
</blockquote>
<ul>
<li>
<p>kubectl get pods : List pods</p>
</li>
<li>
<p>kubectl port-forward [name-of-pod] [external port]:[internal port]</p>
<p><code>kubectl port-forward webserver 8080:80</code></p>
</li>
<li>
<p>kubectl delete pod [name of pod] : 刪除 pod，但如果沒有刪除 deployment，pod 還會在長回來</p>
</li>
<li>
<p>kubectl delete deployment [name of deployment]: 刪除 deployment</p>
</li>
</ul>
<p>Tips:</p>
<ol>
<li>如果要拉的 image 不在 dockerhub (預設會去那邊找) 而只有在本地時，需要掛上 <code>–-image-pull-policy=Never</code> <code>，這樣才不會出現 </code><em>ErrImagePull</em>  的錯誤訊息</li>
</ol>
<h1 id="使用-YAML"><a class="header-anchor" href="#使用-YAML"> </a>使用 YAML</h1>
<p>Kubenetes 可以使用 YAML 的設定檔來作部屬</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">rel:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my-ngminx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>儲存成 <code>xxx.yml</code> 檔後，可透過以下的指令來建立、修改或刪除相關的服務</p>
<ul>
<li>
<p><code>kubectl create -f xxx.yml</code></p>
</li>
<li>
<p><code>kubectl apply -f xxx.yml</code></p>
</li>
<li>
<p><code>kubectl delete -f xxx.yml</code></p>
</li>
</ul>
<p>更多相關的指令可到網路上查詢</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://www.pluralsight.com/courses/kubernetes-developers-core-concepts">Pluralsight -  Kubernetes for Deveopers: Core Concepts</a></li>
</ul>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Deployment Strategies</title>
    <url>/2021/07/16/k8s-note-002/</url>
    <content><![CDATA[<p>Kubernetes  Deployments 功能很強，可以算是部屬中重要的一環，除了設定部屬的 Pod 資訊外，也可以透過他來做更新或退版的事情，以下是相關筆記</p>
<span id="more"></span>
<h1 id="Rolling-Update-Deployments"><a class="header-anchor" href="#Rolling-Update-Deployments"> </a>Rolling Update Deployments</h1>
<ul>
<li>
<p>Deployments 內建有兩種更新方式： Rolling Update (Default) 和 Recreate (會有 down-time)</p>
</li>
<li>
<p>spec 區塊</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>replicas</code> : Number of Pod replicas</li>
<li><code>minReadySeconds</code> : Seconds new Pod should be ready to be considered healthy. 預設值: 0 秒</li>
<li><code>progressDeadlineSeconds</code>: Seconds to wait before reporting stalled Deployment</li>
<li><code>revisionHistoryLimit</code>: Number of <code>ReplicaSets</code> that can be rolled back. 預設值 10</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">strategy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">rollingUpdate:</span></span><br><span class="line">    <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>type</code> 有兩種設定 <code>RollingUpdate</code> 或 <code>Recreate</code></p>
</li>
<li>
<p><code>maxSurge</code>:  Max Pods can exceed the replicas count，預設值: 25%</p>
<p><img src="image-20210716212233001.png" alt="image-20210716212233001"></p>
</li>
<li>
<p><code>maxUnavaible</code>: Max Pods that are not operational，預設值: 25%</p>
<p><img src="image-20210716214416118.png" alt="image-20210716214416118"></p>
</li>
<li>
<p>使用 <code>--record</code> 會將執行指令記錄在 Deployment revision history 內</p>
</li>
<li>
<p><code>kubectl rollout status deployment [deployment name]</code> 查詢歷史部屬記錄</p>
</li>
<li>
<p>rollout 相關命令</p>
<ul>
<li>rollout status: check deployment status</li>
<li>rollout history deployment [deployment-name]: view history of a Deployment</li>
<li>rollout undo -f [deployment file]: rollback a deployment</li>
<li>rollout undo deployment [deployment-name] --to-revision=n : rollback to 某一版</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Canary-Deployments"><a class="header-anchor" href="#Canary-Deployments"> </a>Canary Deployments</h1>
<ul>
<li>
<p>同一時間有兩個版本在線上，有主要版本跟要測試的版本，透過設定的方式將部分的流量導向測試版本</p>
<p><img src="image-20210717094909454.png" alt="image-20210717094909454"></p>
</li>
<li>
<p>分別有 Stable 和 Canary Deployment，有相同的 lable 但可透過第二個 label 來區分</p>
</li>
<li>
<p>Service 只在乎符合 selector 的項目，所以可透過 Deployment 的 replicas 的數量來決定流量百分比</p>
</li>
<li>
<p>如果測試版本通過測試，就將該版本的 replicas 設定為正式環境要的數量，確定有跑起來後，就將原版本的 Deployment 刪除後，就完成版本的轉換</p>
</li>
</ul>
<h1 id="Blue-Green-Deployments"><a class="header-anchor" href="#Blue-Green-Deployments"> </a>Blue-Green Deployments</h1>
<ul>
<li>
<p>新增 V2 版本</p>
<p><img src="image-20210717113303908.png" alt="image-20210717113303908"></p>
</li>
<li>
<p>測試完成後，將 Public Service 切換至 V2 版本</p>
<p><img src="image-20210717113323817.png" alt="image-20210717113323817"></p>
</li>
<li>
<p>移除 App V1</p>
<p><img src="image-20210717113634670.png" alt="image-20210717113634670"></p>
</li>
<li>
<p>需留意的是 Blue/Green 部屬時要留意是否有足夠的 resource 做這件事情</p>
</li>
</ul>
<p>※上面圖片使用皆出自於 <a href="https://app.pluralsight.com/library/courses/kubernetes-developers-deploying-code/table-of-contents">Kubernetes for Developers: Deploying Your Code by Dan Wahlin</a>，十分推薦此課程</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://blog.container-solutions.com/kubernetes-deployment-strategies">Article: Kubernetes deployment strategies by Etienne Tremel</a></li>
<li><a href="https://www.weave.works/blog/kubernetes-deployment-strategies">Article: Kubernetes Deployment Strategies by weaveworks</a></li>
</ul>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Jobs</title>
    <url>/2021/07/17/k8s-note-003/</url>
    <content><![CDATA[<p>K8s 內也可以跑 Jobs 和 CronJobs，這一篇筆記就是在記錄此事</p>
<span id="more"></span>
<h1 id="什麼是-Jobs"><a class="header-anchor" href="#什麼是-Jobs"> </a>什麼是 Jobs</h1>
<ul>
<li>one time execution</li>
<li>can run multiple Pods in parallel</li>
<li>Successful completions are tracked</li>
</ul>
<h1 id="什麼是-CronJobs"><a class="header-anchor" href="#什麼是-CronJobs"> </a>什麼是 CronJobs</h1>
<ul>
<li>Cron Job creates Jobs on a time-based schedule</li>
<li>scheduled using the Cron format</li>
<li>names must be less than 52 characters</li>
<li><code>* * * * *</code> 為標準 Cron format.
<ul>
<li>第一個 <code>*</code>: min (0~59)</li>
<li>第二個 <code>*</code>: hour (0~23)</li>
<li>第三個 <code>*</code>: day of month (1 - 31)</li>
<li>第四個 <code>*</code>: month (1 - 12) 或 jan, fan, mar,…</li>
<li>第五個 <code>*</code>: day of week (0 - 6, Sunday = 0 or 7) 或是 sun, mon, tue,…</li>
</ul>
</li>
<li>範例：
<ul>
<li>每週一早上 3 點， <code>0 3 * * 1</code></li>
<li>每小時: <code>0 * * * *</code> , <code>@hourly</code></li>
<li>每天: <code>0 0 * * *</code>，<code>@daily</code></li>
<li>每週: <code>0 0 1 * * </code>，<code>@monthly</code></li>
<li>每年: <code>0 0 1 1 *</code> ，<code>@yearly</code></li>
<li>每分鐘: <code>*/1 * * * * </code></li>
</ul>
</li>
<li><a href="https://crontab.guru/">cron format editor 網站</a></li>
</ul>
<h1 id="如何建立-Jobs-和-CronJobs"><a class="header-anchor" href="#如何建立-Jobs-和-CronJobs"> </a>如何建立 Jobs 和 CronJobs</h1>
<ul>
<li>
<p>先定義 Jobs</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">completions:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">xxx</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;sh&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;.....&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>apiVersion 和 kind  的設定方法如上</li>
<li>completions: 需要成功執行 Job 的 Pods 數量</li>
<li>parallelism: 平行執行 Job 的 Pods 數量</li>
<li>restartPolicy 設定值有
<ul>
<li>Never : Never try to restart</li>
<li>OnFailure: restart when job fail</li>
</ul>
</li>
<li>command: 執行指令</li>
</ul>
</li>
<li>
<p>Crobjob YAML 樣本如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">concurrencyPolicy:</span> <span class="string">Allow</span> <span class="comment"># Allow, Forbid, Replace</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&#x27;*/5 * * * *&#x27;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">completions:</span> <span class="number">4</span></span><br><span class="line">      <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pie-counter</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">xxx</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;sh&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;.....&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>concurrencyPolicy: 是否允許 cronjobs 重疊執行</li>
<li>schedule: 設定執行時間表 (Cron format)</li>
<li>使用 <code>jobTemplate</code> 來描述 <code>job</code> 的 template</li>
</ul>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/">Jobs</a></li>
<li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/">CrobJobs</a></li>
</ul>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>[K8s] 開始學習 Kubernetes - Multi-container Pods</title>
    <url>/2021/07/18/k8s-note-004/</url>
    <content><![CDATA[<p>Multi-container Pods 是另外一個很常見的使用方式，有 4 種模式 <code>Init Pattern</code> 、<code>Sidecar Pattern</code>、<code>Adapter Patter</code> 、<code>Ambassador Pattern</code>。</p>
<span id="more"></span>
<p>為什麼會出現這種模式，主要的目的是要讓 container 的工作可以單純化，透過組合的方式來完成原本應該要做的事情</p>
<h1 id="Init-Pattern"><a class="header-anchor" href="#Init-Pattern"> </a>Init Pattern</h1>
<ul>
<li>
<p>在主要 Container 前執行的 Container</p>
</li>
<li>
<p>只會跑一次</p>
</li>
<li>
<p>init container 完成後才會執行主要的 container</p>
</li>
<li>
<p>基本寫法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ps-init</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">initializer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-ctr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;until nslookup pluralsight-ftw; do echo waiting for pluralsight-ftw service; sleep 1; done; echo Service found!&#x27;</span>]</span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web-ctr</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">nigelpoulton/web-app:1.0</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>initContainers</code> 區塊就是用來定義 init containers 的</li>
<li>可以有多個 container</li>
<li>會依序執行</li>
<li>如果 init container 執行失敗，整個 Pod 會重新開始 (預設值)，可以被修改</li>
<li>應設定 resource requests &amp; limits</li>
</ul>
<h1 id="Sidecar-Pattern"><a class="header-anchor" href="#Sidecar-Pattern"> </a>Sidecar Pattern</h1>
<p><img src="image-20210718225552049.png" alt="image-20210718225552049"></p>
<ul>
<li>
<p>與 main container 同時執行，平行運作</p>
</li>
<li>
<p>寫法就是在 containers 下有第二個 image 時，基本上就是 sidecar pattern</p>
</li>
<li>
<p>範例:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">git-syncer</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">git-syncer</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">k8s.gcr.io/git-sync:v3.1.5</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">init-sync-ctr</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/tmp/git</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">emptyDir:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>常見用法: Logging</p>
</li>
</ul>
<h1 id="Adapter-Pattern"><a class="header-anchor" href="#Adapter-Pattern"> </a>Adapter Pattern</h1>
<p><img src="image-20210718225620546.png" alt="image-20210718225620546"></p>
<ul>
<li>
<p>範例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web-ctr</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nigelpoulton/nginxadapter:1.0</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">transformer</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx/nginx-prometheus-exporter</span></span><br><span class="line">    <span class="attr">args:</span> [<span class="string">&quot;-nginx.scrape-uri&quot;</span>,<span class="string">&quot;http://localhost/nginx_status&quot;</span>]</span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9113</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用另外一個 container 做輸出資料轉換</p>
</li>
<li>
<p>SRP</p>
</li>
</ul>
<h1 id="Ambassador-Pattern"><a class="header-anchor" href="#Ambassador-Pattern"> </a>Ambassador Pattern</h1>
<p><img src="image-20210718225658971.png" alt="image-20210718225658971"></p>
<ul>
<li>
<p>在 Pod 內的建立起的 proxy</p>
</li>
<li>
<p>Service 只對 Ambassador 做開放</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>[K8s 相關] 寫 Helm 技巧筆記</title>
    <url>/2021/07/28/helm-tips/</url>
    <content><![CDATA[<p>Helm 或許不是現在最新最流行的工具，但公司用這個，所以還是得知道怎麼寫，這邊整理一些撰寫中一些實用小技巧。因為他底層是用 go template，有些語法會跟 Go 很像</p>
<span id="more"></span>
<ol>
<li>
<p>使用 name template 來降低 template 的雜亂度</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">define</span> <span class="string">&quot;temp.name&quot;</span> &#125;&#125;</span><br><span class="line"><span class="string">...</span></span><br><span class="line">&#123;&#123;<span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用不會輸出到 YAML 的註解表示法: <code>&#123;&#123; /*    /*&#125;&#125;</code></p>
</li>
<li>
<p>需知道 <code>&#123;&#123;-    -&#125;&#125;</code> 中 <code>-</code> 的意思，知道他要去除那邊的空白</p>
</li>
<li>
<p>可以使用 <code>&#123;&#123;- $var  := printf "%s-%s" .Values.xxx .Values.yyy -&#125;&#125;</code> 的寫法來定義範圍區域變數</p>
</li>
<li>
<p>使用 <code>printf</code> 時，要留意資料型別，這部分可查閱  Go <code>printf</code> 的使用辦法</p>
</li>
<li>
<p>在 name template 內如果要使用全域變數時，可加上 <code>$</code> ，例如 <code>&#123;&#123; $.Values.xxxx&#125;&#125;</code></p>
</li>
<li>
<p>使用 name template 時，可以利用 <code>dict</code> 將多組資料傳入 name templates  中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">$data</span> <span class="string">:=</span> <span class="string">dict</span> <span class="string">&quot;key1&quot;</span> <span class="string">value1</span> <span class="string">&quot;key2&quot;</span> <span class="string">value2</span> <span class="string">-</span>&#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">include</span> <span class="string">&quot;name.template&quot;</span> <span class="string">$data</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">name</span> <span class="string">template</span> <span class="string">內使用傳進來資料的方式</span></span><br><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">define</span> <span class="string">&quot;name.template&quot;</span> &#125;&#125;</span><br><span class="line"><span class="attr">value1:</span> &#123;&#123; <span class="string">.key1</span> &#125;&#125;</span><br><span class="line"><span class="attr">value2:</span> &#123;&#123; <span class="string">.key2</span> &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">end</span> <span class="string">-</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 <code>range</code> 搭配 Values 中的列表資料，可以快速產生多組設定</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">$item</span> <span class="string">:=</span> <span class="string">.Values.items</span> &#125;&#125;</span><br><span class="line"><span class="attr">value in item:</span> &#123;&#123; <span class="string">$item.value</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">include</span> <span class="string">&quot;name.template&quot;</span> <span class="string">$item</span> &#125;&#125;</span><br><span class="line">&#123;&#123;<span class="bullet">-</span> <span class="string">end</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>HELM 有一些 Flow control 的運算式可以使用，可參閱 <a href="https://helm.sh/docs/chart_template_guide/control_structures/">Doc</a></p>
</li>
<li>
<p>內建 function 及善用 pipe 可以簡化很多工作</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="string">toYaml</span> <span class="string">.Values.resoureces</span> <span class="string">|</span> <span class="string">indent</span> <span class="number">12</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>轉成 YAML 格式且 indent 12 個空白</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>K8s</category>
      </categories>
      <tags>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>[Dhall] 學習筆記 001 - 基本知識建立</title>
    <url>/2021/08/15/dhall-note-001/</url>
    <content><![CDATA[<p>Dhall is a <a href="https://docs.dhall-lang.org/discussions/Programmable-configuration-files.html#">programmable configuration language</a> that you can think of as: JSON + functions + types + imports，這樣應該就解釋了什麼是 Dhall 了吧</p>
<span id="more"></span>
<p>貼個範例聞香一下</p>
<p><img src="image-20210815104539412.png" alt="image-20210815104539412"></p>
<p>左邊是 dhall 的語法，右邊是輸出結果，看起來還簡單明瞭的，接下來就是基本語言的筆記了，至於如何安裝就請按照這<a href="https://docs.dhall-lang.org/tutorials/Getting-started_Generate-JSON-or-YAML.html#installation">文件</a>安裝</p>
<h1 id="學習筆記"><a class="header-anchor" href="#學習筆記"> </a>學習筆記</h1>
<ul>
<li>
<p>Dhall 要轉換成不同格式，會透過不同的執行程式完成，例如 Dhall -&gt; JSON 就要用 dhall-to-json，要轉換成 YAML 就會用 dhall-to-yaml，這篇筆記看到 dhall-to-json 輸出結果就會是 JSON 格式</p>
<p><img src="image-20210815135615904.png" alt="image-20210815135615904"></p>
</li>
<li>
<p>Dhall 是一個強型別語言，compiler 會檢查型別是否正確，會將失敗的理由吐回給你，也可以使用 <code>--explain</code> 的 flag 來取得更多的訊息</p>
<p><img src="image-20210815105527602.png" alt="image-20210815105527602"></p>
<p><img src="image-20210815105609372.png" alt="image-20210815105609372"></p>
</li>
<li>
<p>支援 type annotations，類似 TypeScript 指定型別的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1, bar = True &#125; : &#123; foo : Natural, bar : Bool &#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>Type annotations 也可以用指定檔案的方式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1, bar = True &#125; : ./schema.dhall&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>變數宣告: 使用 <code>let</code> 來進行變數宣告，如上面範例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let home = &#x27;/home/$&#123;user&#125;&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>dhall 是 whitespace-insensitive，不像 yaml 一個 space 錯位就壞掉了，因為這樣的特性會有這樣的寫法出現</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span> <span class="keyword">let</span> y = <span class="number">2</span> <span class="keyword">in</span> [x, y]</span><br><span class="line"><span class="comment">// 等同於</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span></span><br><span class="line"><span class="keyword">in</span>  [x, y]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>一個比較完整的使用範例 (檔案: <code>employee.dhall</code>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> job = &#123; department = <span class="string">&quot;Data Platform&quot;</span>, title = <span class="string">&quot;Software Engineer&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = &#123; age = <span class="number">23</span>, name = <span class="string">&quot;John Doe&quot;</span>, position = job &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> alice = &#123; age = <span class="number">24</span>, name = <span class="string">&quot;Alice Smith&quot;</span>, position = job &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>  [ john, alice ]</span><br></pre></td></tr></table></figure>
<p>輸出結果 (執行命令: <code>dhall-to-json --file ./employee.dhall</code>)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;department&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Data Platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Software Engineer&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;department&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Data Platform&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Software Engineer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>可以寫 function，宣告方式: <code>\(inputName : inputType) -&gt; output</code>，範例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let twice = \(x : Natural) -&gt; [x, x] </span><br><span class="line">in twice 2</span><br><span class="line"></span><br><span class="line">// 輸出結果</span><br><span class="line">[2, 2]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>record 可以透過 <code>/\</code> 來合併</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dhall-to-json &lt;&lt;&lt; &#x27;&#123; foo = 1 &#125; /\ &#123; bar = 2&#125;&#x27;</span><br><span class="line"></span><br><span class="line">// 輸出結果</span><br><span class="line">&#123;</span><br><span class="line">   &quot;bar&quot;: 2,</span><br><span class="line">   &quot;foo&quot;: 1, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比較接近現實生活的範例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> smallServer = &#123; cpus = <span class="number">1</span>, gigabytesOfRAM = <span class="number">1</span>, terabytesOfDisk = <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mediumServer = &#123; cpus = <span class="number">8</span>, gigabytesOfRAM = <span class="number">16</span>, terabytesOfDisk = <span class="number">4</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> largeServer = &#123; cpus = <span class="number">64</span>, gigabytesOfRAM = <span class="number">256</span>, terabytesOfDisk = <span class="number">16</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>  [ smallServer /\ &#123; hostName = <span class="string">&quot;eu-west.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;us-east.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;ap-northeast.example.com&quot;</span> &#125;</span><br><span class="line">    , mediumServer /\ &#123; hostName = <span class="string">&quot;us-west.example.com&quot;</span> &#125;</span><br><span class="line">    , smallServer /\ &#123; hostName = <span class="string">&quot;sa-east.example.com&quot;</span> &#125;</span><br><span class="line">    , largeServer /\ &#123; hostName = <span class="string">&quot;ca-central.example.com&quot;</span> &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Operators</p>
<ul>
<li><code>++</code> 連接兩個字串</li>
<li><code>#</code> 連接兩個 List</li>
</ul>
</li>
<li>
<p><code>Optional</code> ，有時候會遇到缺欄位的資料，這時候就要使用 <code>Optional</code> 的表示法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ </span><br><span class="line">  &#123; x = 1, y = None Natural &#125; ,</span><br><span class="line">  &#123; x = 2, y = Some 3 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ul>
<li>Some -&gt; 表示這個欄位有可能有 Null 值出現</li>
<li>None <type> -&gt; 視為 Null 空值</li>
<li>指令多下 <code>--preserve-null</code> 參數，會將空值輸出 (null)</li>
</ul>
</li>
<li>
<p>使用 <code>Unions</code> 的方式可以讓清單內有不同型別得資料存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- ./package.dhall</span><br><span class="line"></span><br><span class="line">let Package =</span><br><span class="line">      &lt; Local : &#123; relativePath : Text &#125;</span><br><span class="line">      | GitHub : &#123; repository : Text, revision : Text &#125;</span><br><span class="line">      | Hackage : &#123; package : Text, version : Text &#125;</span><br><span class="line">      &gt;</span><br><span class="line"></span><br><span class="line">in  [ Package.GitHub</span><br><span class="line">        &#123; repository =</span><br><span class="line">            &quot;https://github.com/Gabriel439/Haskell-Turtle-Library.git&quot;</span><br><span class="line">        , revision = &quot;ae5edf227b515b34c1cb6c89d9c58ea0eece12d5&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/optparse-applicative&quot; &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/discrimination&quot; &#125;</span><br><span class="line">    , Package.Hackage &#123; package = &quot;lens&quot;, version = &quot;4.15.4&quot; &#125;</span><br><span class="line">    , Package.GitHub</span><br><span class="line">        &#123; repository = &quot;https://github.com/haskell/text.git&quot;</span><br><span class="line">        , revision = &quot;ccbfabedea1cf5b38ff19f37549feaf01225e537&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    , Package.Local &#123; relativePath = &quot;~/proj/servant-swagger&quot; &#125;</span><br><span class="line">    , Package.Hackage &#123; package = &quot;aeson&quot;, version = &quot;1.2.3.0&quot; &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 <code>mapKey</code> 和 <code>mapValue</code> 就可以做出動態資料，而指令參數 <code>--noMaps</code> 就會單純輸出結果不轉換</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ &#123; mapKey = &quot;daniel&quot;, mapValue = &#123; age = 17 &#125; &#125;</span><br><span class="line">, &#123; mapKey = &quot;rebecca&quot;, mapValue = &#123; age = 17 &#125; &#125;</span><br><span class="line">, &#123; mapKey = &quot;aiden&quot;, mapValue = &#123; age = 16 &#125; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>如果要輸出 yaml ，就使用 <code>dhall-to-yaml</code> 來跑 <code>dhall</code> 檔案</p>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.dhall-lang.org/index.html">Dhall 官方文件</a></li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Microfrontend with Module Federation 筆記</title>
    <url>/2021/09/12/ng-microfrontend-with-webpack-federation/</url>
    <content><![CDATA[<p>其實這觀念在去年由 Manfred Steyer (Angular GDE) 提出來，並花很多心力在研究這一塊的作法，一年過去後因為公司上有可能會使用到這樣的情境，所以就先來研究一下，但也因為晚了一年，現在很多工具和環境上已經好很多，而且該採的雷很多前輩都踩過了，這一篇筆記就是稍微整理一下如何從無到有的將 Angular 環境給設定起來</p>
<span id="more"></span>
<h1 id="Requirement"><a class="header-anchor" href="#Requirement"> </a>Requirement</h1>
<ul>
<li>Angular 12</li>
</ul>
<h1 id="設定"><a class="header-anchor" href="#設定"> </a>設定</h1>
<ol>
<li>
<p>建立一個空的 ng application。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new ng-mfe --create-application=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立一個 host (shell) application</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng g application shell --routing</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立一個 remote application</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng g application mfe1 --routing</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>為這兩個 application 加入 <code>@angular-architects/module-federation</code> 套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng add @angular-architects/module-federation --project shell --port 5000</span><br><span class="line">ng add @angular-architects/module-federation --project mfe1 --port 3000</span><br></pre></td></tr></table></figure>
<ol>
<li>這時候會產生 webpack.config.js 檔案: 用來設定 remote module 使用</li>
</ol>
</li>
</ol>
<p>到這邊算是基本完成套件的安裝，接下來就是一些 module/component 的設定</p>
<ol>
<li>
<p>在 <code>mfe1</code> application 中新增一個 <code>FlightsModule</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng g m flights --project=mfe --routing</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>設定 <code>webpack.config.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleFederationPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;webpack/lib/container/ModuleFederationPlugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mf = <span class="built_in">require</span>(<span class="string">&quot;@angular-architects/module-federation/webpack&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> share = mf.<span class="property">share</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sharedMappings = <span class="keyword">new</span> mf.<span class="title class_">SharedMappings</span>();</span><br><span class="line">sharedMappings.<span class="title function_">register</span>(</span><br><span class="line">  path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../../tsconfig.json&#x27;</span>),</span><br><span class="line">  [<span class="comment">/* mapped paths to share */</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">uniqueName</span>: <span class="string">&quot;mfe1&quot;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;auto&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">runtimeChunk</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,   </span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      ...sharedMappings.<span class="title function_">getAliases</span>(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ModuleFederationPlugin</span>(&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// For remotes (please adjust)</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;mfe1&quot;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;remoteEntry.js&quot;</span>,</span><br><span class="line">        <span class="attr">exposes</span>: &#123;</span><br><span class="line">          <span class="string">&quot;./flightModules&quot;</span>: <span class="string">&quot;./projects/mfe1/src/app/flights/flights.module.ts&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="attr">shared</span>: <span class="title function_">share</span>(&#123;</span><br><span class="line">          <span class="string">&quot;@angular/core&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/common&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/common/http&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;, </span><br><span class="line">          <span class="string">&quot;@angular/router&quot;</span>: &#123; <span class="attr">singleton</span>: <span class="literal">true</span>, <span class="attr">strictVersion</span>: <span class="literal">true</span>, <span class="attr">requiredVersion</span>: <span class="string">&#x27;auto&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">          ...sharedMappings.<span class="title function_">getDescriptors</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;),</span><br><span class="line">    sharedMappings.<span class="title function_">getPlugin</span>()</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>line 28: host 載入時的 <code>remoteName</code></li>
<li>line 29: webpack 要產生的 file name</li>
<li>line 31: expose 的 <code>module</code> 名稱及對應的 module 檔案</li>
</ul>
</li>
<li>
<p>在 host (shell) 的路由檔設定要 <code>lazyloading</code> 路徑</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; loadRemoteModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular-architects/module-federation&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="string">&#x27;http://localhost:3000/remoteEntry.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span>, <span class="attr">pathMatch</span>: <span class="string">&#x27;full&#x27;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;flights&#x27;</span>,</span><br><span class="line">    <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">loadRemoteModule</span>(&#123;</span><br><span class="line">        <span class="attr">remoteEntry</span>: <span class="variable constant_">URL</span>,</span><br><span class="line">        <span class="attr">remoteName</span>: <span class="string">&#x27;mfe1&#x27;</span>,</span><br><span class="line">        <span class="attr">exposedModule</span>: <span class="string">&#x27;./flightModule&#x27;</span>,</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">m</span>) =&gt;</span> m.<span class="property">FlightsModule</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes)],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">RouterModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppRoutingModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>line 7 ~ 15 是標準 Lazy loading 的寫法，而 line 10 從原本的 <code>import</code> 改寫成 <code>loadRemoteModule</code> 即可載入遠端的 module 檔案</li>
<li><code>remoteEmtry</code> 設定遠端主機位置及參考檔案，檔名為上一個步驟中所設定的檔名</li>
<li><code>remoteName</code> 為上一步驟所設定的 <code>name</code></li>
<li><code>exposedModule</code> 為上一步驟所設定的 exposes 內的某一個 <code>key</code></li>
</ul>
</li>
</ol>
<p>最後在調整一下 host 的 <code>AppComponent</code> 的 HTML 內容，例如加上連結到 flights module 等，到這邊算完成一個最小完成單位，可以將兩個 applications 跑起來後看一下執行結果</p>
<p><img src="image-20210912145552814.png" alt="image-20210912145552814"></p>
<h1 id="問題探討"><a class="header-anchor" href="#問題探討"> </a>問題探討</h1>
<p>看起來一起都很簡單，但仔細思考後，其實還有很多東西要考慮，例如各 module 間的版本如何控制、如何共用狀態、部屬的相依性等，這些都是很實際的問題，等著下一篇筆記再來研究吧</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://www.angulararchitects.io/aktuelles/the-microfrontend-revolution-part-2-module-federation-with-angular/"><strong>The Microfrontend Revolution: Module Federation with Angular</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Others] Windows 11 快速鍵</title>
    <url>/2021/10/11/win11-keboard-shortcuts/</url>
    <content><![CDATA[<p>升級到 windows 11 後，原生就提供了不少新功能，為了要讓整個操作流程流暢，勢必要記一些快速鍵，所以從網路上整理了一些</p>
<span id="more"></span>
<h1 id="新快速鍵"><a class="header-anchor" href="#新快速鍵"> </a>新快速鍵</h1>
<ol>
<li><strong>Open Action Center</strong> - <code>Win + A</code></li>
<li><strong>Open Notifications Panel</strong> - <code>Win + N</code></li>
<li><strong>Open Widgets Panel</strong> - <code>Win + W</code></li>
<li>☆ <strong>Quick Access to snap layout</strong> - <code>Win + Z</code></li>
</ol>
<h1 id="既有快速鍵"><a class="header-anchor" href="#既有快速鍵"> </a>既有快速鍵</h1>
<h2 id="一般"><a class="header-anchor" href="#一般"> </a>一般</h2>
<ol>
<li><strong>Alt + F4</strong>: Close active window. When you are on the desktop with no active window selected, this shortcut opens the shutdown dialog box with options to restart, sleep, hibernate, log out, or shut down your PC.</li>
<li><strong>Win + L</strong>: Lock your computer</li>
<li><strong>Win + D</strong>: Minimizes all open windows and takes you. to the Desktop</li>
<li><strong>Alt + Tab</strong>: Switch between the running applications (Task Switcher)</li>
<li><strong>Win + Tab</strong>: Open Task View</li>
<li><strong>Ctrl + Z</strong>: Undo an action</li>
<li><strong>Ctrl + Y</strong>: Redo an action</li>
<li><strong>Ctrl + Delete</strong>: Move selected item to Recycle Bin:</li>
<li><strong>Shift + Delete</strong>: Delete the selected item permanently</li>
<li><strong>Win + X</strong>: Open Start Button context menu</li>
<li><strong>Esc</strong>: Stop or close the current task</li>
<li><strong>F11</strong>: Enter/ Exit full-screen mode</li>
<li><strong>F2</strong>: Rename selected item</li>
<li><strong>F5</strong>: Refresh the active window. This shortcut also refreshes the Windows desktop when no active window is selected.</li>
<li><strong>F10</strong>: Open the Menu bar in the current app</li>
<li><strong>Win + I</strong>: Open Windows 11 Settings</li>
<li><strong>Win + R</strong>: Open Run command</li>
<li><strong>Alt + Page Up</strong>: Move up one screen</li>
<li><strong>Alt + Page Down</strong>: Move down one screen</li>
<li><strong>Ctrl + Shift + Es</strong>c: Keyboard shortcut to open Task Manager in Windows 11</li>
<li><strong>Win + S or Win + Q</strong>: Open Windows Search</li>
<li><strong>Ctrl + P</strong>: Print the current page</li>
<li><strong>Shift + Arrow keys</strong>: Select more than one item</li>
<li><strong>Ctrl + S</strong>: Save the current file (works on apps like Office 365, Notepad, Paint, etc.)</li>
<li><strong>Ctrl + Shift + S</strong>: Save As</li>
<li><strong>Ctrl + O</strong>: Open a file in the current app</li>
<li><strong>Alt + Esc</strong>: Cycle through the apps on the taskbar</li>
<li><strong>Alt + F8</strong>: Display your password on the login screen</li>
<li><strong>Alt + Spacebar</strong>: Open the shortcut menu for the current window</li>
<li><strong>Alt + Enter</strong>: Open properties for the selected item</li>
<li><strong>Alt + F10</strong>: Open the context menu (right-click menu) for the selected item</li>
<li><strong>Ctrl + N</strong>: Open a new program window of the current app</li>
<li><strong>Backspace</strong>: Go back to the Settings home page (while on any Windows Settings page)</li>
<li><strong>Win + period (.) or Win + semicolon (;)</strong>: Windows 11 keyboard shortcut to access the Emoji keyboard</li>
<li><strong>Win + P</strong>: Project a screen</li>
<li><strong>Win + H</strong>: Launch Voice Typing</li>
</ol>
<h2 id="Screenshot"><a class="header-anchor" href="#Screenshot"> </a>Screenshot</h2>
<ol>
<li><strong>PrtScn/ Print Screen</strong>: Take a screenshot of the entire desktop</li>
<li><strong>Alt + PrtScn</strong>: Take a screenshot of the Active Window</li>
<li><strong>Win + Shift + S</strong>: Capture any part of the screen with Snip &amp; Sketch</li>
</ol>
<h2 id="Desktop-and-Virtual-Desktop-Shortcuts"><a class="header-anchor" href="#Desktop-and-Virtual-Desktop-Shortcuts"> </a>Desktop and Virtual Desktop Shortcuts</h2>
<ol>
<li><strong>Windows key</strong>: Open Start Menu</li>
<li><strong>Ctrl + Shift</strong>: Switch the keyboard layout</li>
<li><strong>Alt + Tab</strong>: View all open apps</li>
<li><strong>Ctrl + Arrow keys + Spacebar</strong>: Select more than one item on the desktop</li>
<li><strong>Win + M</strong>: Minimize all open windows</li>
<li><strong>Win + Shift + M</strong>: Maximize all minimized windows</li>
<li><strong>Win + Home</strong>: Minimize or maximize all but the active window</li>
<li><strong>Win + Left Arrow Key</strong>: Snap the current app or window to the Left</li>
<li><strong>Win + Right Arrow Key</strong>: Snap the current app or window to the Right</li>
<li><strong>Win + Shift + Up arrow key</strong>: Stretch the active window to the top and bottom of the screen</li>
<li><strong>Win + Shift + down arrow key</strong>: Restore or minimize active desktop windows vertically, maintaining width</li>
<li><strong>Win + Tab</strong>: Open Desktop view</li>
<li><strong>Win + Ctrl + D</strong>: Add a new virtual desktop</li>
<li><strong>Win + Ctrl + F4</strong>: Close the active virtual desktop</li>
<li><strong>Win + Ctrl + Right Arrow</strong>: Switch to the virtual desktops on the Right</li>
<li><strong>Win + Ctrl + Left Arrow</strong>: Switch to the virtual desktops on the Left</li>
<li><strong>Ctrl + Shift</strong>: Create a shortcut (while dragging file or folder icon)</li>
<li><strong>Win + Comma (,)</strong>: Windows Peek (Take a peek at the desktop)</li>
<li><strong>Win + Ctrl + Shift + B</strong>: Keyboard shortcut to restart your graphics driver instantly in Windows 11</li>
</ol>
<h2 id="Taskbar"><a class="header-anchor" href="#Taskbar"> </a>Taskbar</h2>
<ol>
<li><strong>Ctrl + Shift + Left-click on app icon</strong>: Open an app as administrator from the Taskbar</li>
<li><strong>Win + Ctrl + Shift + Number key (0-9)</strong>: Open a second instance of an app with administrator privileges.</li>
<li><strong>Win + Number key</strong>: Open apps from their pinned taskbar icons. that means Win + 1 will open the first app whose icon is pinned on the Taskbar, while Win + 2 will open the second app, etc., depending on their position on the Taskbar.</li>
<li><strong>Win + T</strong>: Cycle through apps in the taskbar</li>
<li><strong>Win + Alt + D</strong>: View Date and Time from the taskbar</li>
<li><strong>Shift + Left Click app icon</strong>: Open another instance of an app from the taskbar</li>
<li><strong>Shift + Right-click grouped app icon</strong>: Show the window menu for the group apps from the taskbar</li>
<li><strong>Win + B</strong>: Highlight the Overflow key (upwards arrow) in the Notification Area (Once highlighted, you can press Enter and then use arrow keys to toggle between each icon under the overflow menu)</li>
<li><strong>Alt + Windows key + Number Key (0-9)</strong>: Open a Taskbar icon’s Jump List</li>
<li><strong>Win + Shift + Number Keys (0-9)</strong>: Open another instance of an open app</li>
<li><strong>Win + Ctrl + Number key (0-9)</strong>: Switch to the last active window of a pinned app</li>
</ol>
<h2 id="Miscellaneous"><a class="header-anchor" href="#Miscellaneous"> </a>Miscellaneous</h2>
<ol>
<li><strong>Win + forward slash (/)</strong>: Start IME reconversion</li>
<li><strong>Win + F</strong>: Open Feedback Hub</li>
<li><strong>Win + K</strong>: Open the “Connect” quick setting</li>
<li><strong>Win + O</strong>: Lock your device orientation</li>
<li><strong>Win + Pause</strong>: Display System Properties (About page) in Windows Settings</li>
<li><strong>Win + Ctrl + F</strong>: Search for PCs (if you are on a network)</li>
<li>☆ <strong>Win + Shift + Left/ Right arrow key</strong>: Move an app or window from one monitor to another</li>
<li><strong>Win + Spacebar</strong>: Switch input language and keyboard layout</li>
<li>☆ <strong>Win + V</strong>: Open Clipboard History</li>
<li><strong>Win + Y</strong>: Switch input between desktop and Windows Mixed Reality</li>
</ol>
<h1 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h1>
<ul>
<li><a href="https://beebom.com/windows-11-keyboard-shortcuts/">150+ Most Useful Windows 11 Keyboard Shortcuts You Should Know</a></li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Add E2E Testing from zero to one with cyrpess</title>
    <url>/2022/01/27/angular-e2e-cypress/</url>
    <content><![CDATA[<p>Angular 在 12 版之類就將 protactor E2E framework 從 CLI 起始專案中移除，主要原因是大家習慣用來做 E2E 測試的工具，Protractor 已經不是主流，是 cypress，為了這個原因，Angular 團隊決定把這選擇權還回開發者手上，讓開發者決定自己的 E2E 測試。</p>
<span id="more"></span>
<h1 id="初始環境"><a class="header-anchor" href="#初始環境"> </a>初始環境</h1>
<p>當然有強大 angular schematics，cypress 也有出可以快速設定測試環境的套件，以下是如何安裝及執行第一個 E2E 測試的步驟</p>
<ol>
<li>
<p>當起始一個新的 Agnular 專案，已經看不到 E2E 的資料夾了</p>
<p><img src="image-20220127205749466.png" alt="image-20220127205749466"></p>
</li>
<li>
<p>好家在有 <code>ng add</code> 的功能，cypress 的套件安裝可以透過 <code>ng add @cypress/schematic</code> 來完成，這個會執行以下工作</p>
<p>✅ Install Cypress</p>
<p>✅ Add npm scripts for running Cypress in <code>run</code> mode and <code>open</code> mode</p>
<p>✅ Scaffold base Cypress files and directories</p>
<p>✅ Provide the ability to add new e2e files easily using <code>ng-generate</code></p>
<p>✅ Optional: prompt you to add or update the default <code>ng e2e</code> command to use Cypress.</p>
<p><img src="image-20220127210133452.png" alt="image-20220127210133452"></p>
</li>
<li>
<p>當跑完後就可以執行 <code>ng e2e</code> 將 cypress 執行起來並執行第一個預設測試，但如果在沒有任何修改下，會測試錯誤</p>
<p><img src="image-20220127210434231.png" alt="image-20220127210434231"></p>
</li>
<li>
<p>就來修改一下 e2e 測試讓他綠燈</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;My First Test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;Welcome&#x27;</span>)</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;e2e-study app is running!&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="image-20220127210600806.png" alt="image-20220127210600806"></p>
</li>
<li>
<p>這樣就完成 cypress e2e 測試環境了</p>
</li>
</ol>
<h1 id="cypress-schematics-介紹"><a class="header-anchor" href="#cypress-schematics-介紹"> </a>cypress-schematics 介紹</h1>
<ol>
<li>
<p>To run Cypress in <code>open</code> mode within your project:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng run &#123;project-name&#125;:cypress-open</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>To run Cypress headlessly via <code>run</code> mode within your project:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng run &#123;project-name&#125;:cypress-run</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>If you have chosen to add or update the <code>ng e2e</code> command, you can also run Cypress in <code>open</code> mode using this:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng e2e</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>To generate new e2e spec files:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ng generate @cypress/schematic:e2e</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>更多設定參數可以到這<a href="https://github.com/cypress-io/cypress/tree/develop/npm/cypress-schematic#builder-options-">連結</a>仔細研究 (angular.json)</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://github.com/cypress-io/cypress/tree/develop/npm/cypress-schematic">cypress schematics</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Cypress E2E with TodoMVC 筆記 01</title>
    <url>/2022/01/28/angular-e2e-note-1/</url>
    <content><![CDATA[<p>建立好 E2E 的環境後，就拿 TodoMVC 的樣板來做練習，以下為練習實作中的筆記</p>
<span id="more"></span>
<h1 id="準備要測試的-TodoMVC"><a class="header-anchor" href="#準備要測試的-TodoMVC"> </a>準備要測試的 TodoMVC</h1>
<ol>
<li>
<p>將 TodoMVC  的 template 和 css 搬進 Angular 專案中</p>
<p><img src="image-20220128213454445.png" alt="image-20220128213454445"></p>
</li>
<li>
<p>建立一個練行用的 e2e spec file</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Main&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;Welcome&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;e2e-study app is running!&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>執行 ng e2e，預期會看到測試失敗</p>
<p><img src="image-20220128213434694.png" alt="image-20220128213434694"></p>
</li>
<li>
<p>將測試檔案修正成綠燈</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Main&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;todos&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="image-20220128213610960.png" alt="image-20220128213610960"></p>
</li>
</ol>
<h2 id="測試案例-1"><a class="header-anchor" href="#測試案例-1"> </a>測試案例 1</h2>
<p>檢查 Todo List 筆數是否為兩筆</p>
<ol>
<li>
<p>html 結構</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- These are here just to show the structure of the list items --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;completed&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Taste JavaScript<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Create a TodoMVC template&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Buy a unicorn<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Rule the web&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>測試案例 - 紅燈</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(ele.<span class="property">children</span>.<span class="property">length</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="image-20220128214335209.png" alt="image-20220128214335209"></p>
</li>
<li>
<p>綠燈</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">expect</span>(ele.<span class="property">children</span>.<span class="property">length</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查了一下官方文件，有另外一種更乾淨的寫法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);    </span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="測試案例-2"><a class="header-anchor" href="#測試案例-2"> </a>測試案例 2</h2>
<p>新增 Todo，列表會多一筆紀錄</p>
<ol>
<li>
<p>先重構一下 spec code，發現在兩個 test case 內有重複的 code，將其移到 <code>beforeEach</code> 內</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Main&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;todos&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 input 地方輸入並按下 enter，期待會看到 3 筆 (預設 2 筆 + 新增 1 筆)，預期失敗，因為沒有實作功能</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;add new todo, list should have 3 items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>實作功能</p>
<ul>
<li>app.component.ts</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; v4 <span class="keyword">as</span> uuidv4 &#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Todo</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">content</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">isComplete</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">todos</span>: <span class="title class_">Todo</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="params">ele: HTMLInputElement</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title function_">uuidv4</span>(),</span><br><span class="line">      <span class="attr">content</span>: ele.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">isComplete</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    ele.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>app.component.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span> <span class="attr">autofocus</span> #<span class="attr">newTodo</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;addTodo(newTodo)&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">     ...</span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [<span class="attr">value</span>]=<span class="string">&quot;todo.content&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重新執行測試就會看到綠燈了</p>
</li>
<li>
<p>整理 html 並配合調整測試檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Main&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">visit</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Visits the initial project page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">contains</span>(<span class="string">&#x27;todos&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;has two todo item in the list&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;add new todo, list should have 3 items&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>).<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span> <span class="attr">autofocus</span> #<span class="attr">newTodo</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;addTodo(newTodo)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- These are here just to show the structure of the list items --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --&gt;</span>          </span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [<span class="attr">value</span>]=<span class="string">&quot;todo.content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="小技巧"><a class="header-anchor" href="#小技巧"> </a>小技巧</h1>
<p>有時候在定位 HTMLElement 的時候會很麻煩，不像這個範例很單純，這時候就可透過 attribute 的方式來標註，根據這份 <a href="https://docs.cypress.io/guides/references/best-practices#Selecting-Elements">best practice</a> 內提到，我們可以使用 <code>data-cy</code>、<code>data-test</code>、<code>data-testid</code> 來標註，就可以很精準地拿到我們想要的 element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span> <span class="attr">autofocus</span> #<span class="attr">newTodo</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;addTodo(newTodo)&quot;</span> <span class="attr">data-cy</span>=<span class="string">&quot;newTodo&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原本寫法</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;.new-todo&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">// 改為以下寫法</span></span><br><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=newTodo]&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;abc&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h1>
<ul>
<li>
<p>Cypress API</p>
<ul>
<li>
<p><a href="https://docs.cypress.io/api/commands/should">should</a>: Create an assertion. Assertions are automatically retried until they pass or time out.</p>
</li>
<li>
<p><a href="https://docs.cypress.io/api/commands/type">type</a>: Type into a DOM element.</p>
</li>
<li>
<p><a href="https://docs.cypress.io/api/commands/children">children</a>: Get the children of each DOM element within a set of DOM elements.</p>
</li>
<li>
<p><a href="https://docs.cypress.io/api/commands/get">get</a> : Get one or more DOM elements by selector or <a href="https://docs.cypress.io/guides/core-concepts/variables-and-aliases">alias</a>.</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Cypress E2E with TodoMVC 筆記 02</title>
    <url>/2022/01/29/angular-e2e-note-2/</url>
    <content><![CDATA[<p>繼續上一篇的內容繼續下去，來完成整個 TodoMVC 跟 E2E 測試</p>
<span id="more"></span>
<h1 id="測試案例"><a class="header-anchor" href="#測試案例"> </a>測試案例</h1>
<h2 id="編輯-Todo"><a class="header-anchor" href="#編輯-Todo"> </a>編輯 Todo</h2>
<p>這個 TodoMVC 的範例中，要顯示 Todo 項目的編輯，只需要在 li 那層加上 <code>editing</code> 的 class 即可，E2E 測試程式如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;work with one todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="title function_">addTodo</span>(i.<span class="title function_">toString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;edit first item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">dblclick</span>();</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;editing&#x27;</span>);</span><br><span class="line">        cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;exist&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getTodoList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> cy.<span class="title function_">get</span>(<span class="string">&#x27;.todo-list&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params">content: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=newTodo]&#x27;</span>).<span class="title function_">type</span>(content).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>延續上一篇的測試，做了一些重構，將一些重複執行的動作包成 function</li>
<li>line 9: 使用 alias 的方式來代替 let/const 的寫法，也是官方建議寫法</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;editing: todo.isEdit&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> (<span class="attr">dblclick</span>)=<span class="string">&quot;todo.isEdit = true&quot;</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [<span class="attr">value</span>]=<span class="string">&quot;todo.content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>當然 todo 對應的型別也會配合加上 <code>isEdit</code> 的屬性型別</p>
<p>編輯內容後按 <code>Enter</code> 結束編輯模式，顯示內容也應該要對應修改</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="title function_">it</span>(<span class="string">&#x27;edit first item value and enter save&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">edtingItem</span>();</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;input.edit&#x27;</span>)</span><br><span class="line">     	.<span class="title function_">type</span>(<span class="string">&#x27;hello&#x27;</span>).<span class="title function_">type</span>(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>);</span><br><span class="line">      cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;contain.text&#x27;</span>, <span class="string">&#x27;0hello&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">edtingItem</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">dblclick</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>app.component.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;editing: todo.isEdit&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> (<span class="attr">dblclick</span>)=<span class="string">&quot;todo.isEdit = true&quot;</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;todo.content&quot;</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;todo.isEdit = false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用到 <code>ngModel</code> 所以在 <code>app.module.ts</code> 的地方需要 import <code>FormsModule</code></li>
</ul>
<h2 id="完成-Todo"><a class="header-anchor" href="#完成-Todo"> </a>完成 Todo</h2>
<p><img src="image-20220129105724937.png" alt="image-20220129105724937"></p>
<p>當 checkbox 選取時表示這個 todo 已經完成，會出現刪除線，在 li 上會加上 <code>completed</code> 的 class，E2E 測試如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;complete todo item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.class&#x27;</span>, <span class="string">&#x27;completed&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>app.component.html (這邊應該不用解釋了吧)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let todo of todos&quot;</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;editing: todo.isEdit, &#x27;completed&#x27;: todo.isCompleted&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> (<span class="attr">change</span>)=<span class="string">&quot;todo.isCompleted = !todo.isCompleted&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> (<span class="attr">dblclick</span>)=<span class="string">&quot;todo.isEdit = true&quot;</span>&gt;</span>&#123;&#123; todo.content &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span> [(<span class="attr">ngModel</span>)]=<span class="string">&quot;todo.content&quot;</span> (<span class="attr">keyup.enter</span>)=<span class="string">&quot;todo.isEdit = false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="刪除-Todo"><a class="header-anchor" href="#刪除-Todo"> </a>刪除 Todo</h2>
<p><img src="image-20220129110118056.png" alt="image-20220129110118056"></p>
<p>按下這個就能刪除這筆 todo</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;remove todo item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.destroy&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>angular 程式的部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;removeTodo(todo)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">removeTodo</span>(<span class="params">todo: Todo</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">todos</span> = <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="property">id</span> !== todo.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但這樣子寫看似沒有問題，可是執行起來會出現這個錯誤，</p>
<p><img src="image-20220129110749203.png" alt="image-20220129110749203"></p>
<p>主要是因為刪除的按鈕只有在滑鼠移到上面時才會顯示出來，所以單純這樣子找會發現找不到的問題，但又用到 <code>:hover</code> 的 CSS 屬性來控制 button 的顯示與否，這問題要怎麼處理呢? 有以下幾種方式</p>
<ol>
<li>
<p>使用 <code>.click(&#123;force: true&#125;)</code> 的暴力解法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;remove todo item&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;firstItem&#x27;</span>);</span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.destroy&#x27;</span>).<span class="title function_">click</span>(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 <code>.invoke('show')</code> 的方式強制顯示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">cy.<span class="title function_">get</span>(<span class="string">&#x27;@firstItem&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.destroy&#x27;</span>).<span class="title function_">invoke</span>(<span class="string">&#x27;show&#x27;</span>).<span class="title function_">click</span>();</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用社群開發的 plugin，但這個有瀏覽器環境的限制 (<a href="https://github.com/dmtrKovalenko/cypress-real-events">https://github.com/dmtrKovalenko/cypress-real-events</a>)</p>
</li>
</ol>
<h2 id="過濾-Todo"><a class="header-anchor" href="#過濾-Todo"> </a>過濾 Todo</h2>
<p>測試過濾功能，這邊就示範一個，使用上篇筆記的技巧，在要點選的目標上標註 <code>data-cy=xxx</code>，至於 todo filter 的實做我這邊就不寫了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should filter with only completed todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 準備測試資料</span></span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line">    <span class="comment">// 點選 completed 過濾條件</span></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=filter-completed]&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Todo-Items-Count"><a class="header-anchor" href="#Todo-Items-Count"> </a>Todo Items Count</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should have remain active todo count&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=todo-count]&#x27;</span>).<span class="title function_">as</span>(<span class="string">&#x27;todo-count&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@todo-count&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;0 item left&#x27;</span>);</span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@todo-count&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;2 item left&#x27;</span>);</span><br><span class="line">  <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line">  cy.<span class="title function_">get</span>(<span class="string">&#x27;@todo-count&#x27;</span>).<span class="title function_">should</span>(<span class="string">&#x27;have.text&#x27;</span>, <span class="string">&#x27;1 item left&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>理論上這邊應該要拆成更小的測試案例，但就讓我偷懶一下</p>
<h2 id="Clean-Complete"><a class="header-anchor" href="#Clean-Complete"> </a>Clean Complete</h2>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should clear completed todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="title function_">addTodo</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>(<span class="string">&#x27;li:first&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;.toggle&#x27;</span>).<span class="title function_">check</span>();</span><br><span class="line"></span><br><span class="line">    cy.<span class="title function_">get</span>(<span class="string">&#x27;[data-cy=clear-completed]&#x27;</span>).<span class="title function_">click</span>();</span><br><span class="line">    <span class="title function_">getTodoList</span>().<span class="title function_">children</span>().<span class="title function_">should</span>(<span class="string">&#x27;have.length&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h1>
<p>基本的 E2E 測試寫到後面其實就差不多這樣，當然還有其他更進階的測試手法，就留在後面學習了，而這裡還有一件事情需要處理的是重構測試碼，會看到很多重複的情況，這邊其實能整理的更乾淨</p>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.cypress.io/guides/core-concepts/variables-and-aliases#Return-Values">Variables and Aliases</a></li>
<li><a href="https://docs.cypress.io/api/commands/as">as</a></li>
<li><a href="https://docs.cypress.io/api/commands/check">check</a></li>
<li><a href="https://docs.cypress.io/api/commands/find">find</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>FSharp 也要走 minimal API 風</title>
    <url>/2022/01/30/fsharp-minimal-api/</url>
    <content><![CDATA[<p>Minimal API 推出後，很多人慢慢能接受這樣的風格了，而 F# 當然也要來一波，以下是簡單跟風過程</p>
<span id="more"></span>
<h1 id="基本型"><a class="header-anchor" href="#基本型"> </a>基本型</h1>
<p>透過 VS2022 建立一個空專案，語言選擇 F#，就完成了</p>
<p><img src="image-20220130135421055.png" alt="image-20220130135421055"></p>
<p><img src="image-20220130135458674.png" alt="image-20220130135458674"></p>
<p>後面就下一步到整個專案建立起來，然後就會看到一個很乾淨的 program.fs 了</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Hosting</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main args <span class="operator">=</span></span><br><span class="line">    <span class="keyword">let</span> builder <span class="operator">=</span> WebApplication.CreateBuilder(args)</span><br><span class="line">    <span class="keyword">let</span> app <span class="operator">=</span> builder.Build()</span><br><span class="line"></span><br><span class="line">    app.MapGet(<span class="string">&quot;/&quot;</span>, Func<span class="operator">&lt;</span>string<span class="operator">&gt;</span>(<span class="keyword">fun</span> () <span class="operator">-&gt;</span> <span class="string">&quot;Hello World!&quot;</span>)) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line"></span><br><span class="line">    app.Run()</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span> <span class="comment">// Exit code</span></span><br></pre></td></tr></table></figure>
<p>將專案執行起來後就可以看 Hello World! 的顯示</p>
<p><img src="image-20220130141201938.png" alt="image-20220130141201938"></p>
<h1 id="來點變化"><a class="header-anchor" href="#來點變化"> </a>來點變化</h1>
<p>新增一個 <code>HOme.fs</code> 的檔案，然後將 root request 的動作搬到新檔案中，然後多點變化</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Home.fs</span></span><br><span class="line"><span class="keyword">module</span> Home</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> showTime <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">let</span> getCurrentTime () <span class="operator">=</span> DateTime.Now</span><br><span class="line">    Func<span class="operator">&lt;</span>DateTime<span class="operator">&gt;</span>(getCurrentTime)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerRoutes (app<span class="operator">:</span> WebApplication) <span class="operator">=</span></span><br><span class="line">    app.MapGet(<span class="string">&quot;/&quot;</span>, showTime) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app</span><br></pre></td></tr></table></figure>
<p>而原本的 <code>Program.fs</code> 就可以改成這樣</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Hosting</span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main args <span class="operator">=</span></span><br><span class="line">    <span class="keyword">let</span> builder <span class="operator">=</span> WebApplication.CreateBuilder(args)</span><br><span class="line">    <span class="keyword">let</span> app <span class="operator">=</span> builder.Build()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Changing</span></span><br><span class="line">    app</span><br><span class="line">    <span class="operator">|&gt;</span> Home.registerRoutes</span><br><span class="line">    <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    </span><br><span class="line">    app.Run()</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span> <span class="comment">// Exit code</span></span><br></pre></td></tr></table></figure>
<p>這樣是不是就乾淨很多了，在來多寫一個 add/get items 的小功能</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Todo.fs</span></span><br><span class="line"><span class="meta">[&lt;RequireQualifiedAccess&gt;]</span></span><br><span class="line"><span class="keyword">module</span> Todo</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Todo</span> <span class="operator">=</span> </span><br><span class="line">    &#123; <span class="built_in">id</span><span class="operator">:</span> <span class="type">int</span></span><br><span class="line">      title<span class="operator">:</span> <span class="type">string</span></span><br><span class="line">      isDone<span class="operator">:</span> <span class="type">bool</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mutable</span> <span class="keyword">private</span> todos <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ITodoService</span> <span class="operator">=</span> </span><br><span class="line">   <span class="keyword">abstract</span> GetTodos<span class="operator">:</span> <span class="type">unit</span> <span class="operator">-&gt;</span> Todo <span class="type">seq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> TodoService <span class="operator">=</span> &#123; <span class="keyword">new</span> ITodoService <span class="keyword">with</span></span><br><span class="line">                       <span class="keyword">member</span> this.GetTodos()<span class="operator">:</span> <span class="type">seq</span><span class="operator">&lt;</span>Todo<span class="operator">&gt;</span> <span class="operator">=</span></span><br><span class="line">                         todos <span class="operator">|&gt;</span> List.toSeq  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> getTodos <span class="operator">=</span> </span><br><span class="line">    Func<span class="operator">&lt;</span>ITodoService, Todo seq<span class="operator">&gt;</span></span><br><span class="line">        (<span class="keyword">fun</span> (todos<span class="operator">:</span> ITodoService) <span class="operator">-&gt;</span> todos.GetTodos())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> addTodo <span class="operator">=</span></span><br><span class="line">    Func<span class="operator">&lt;</span>Todo, bool<span class="operator">&gt;</span></span><br><span class="line">        (<span class="keyword">fun</span> todo <span class="operator">-&gt;</span> </span><br><span class="line">            todos <span class="operator">&lt;-</span> todo<span class="operator">::</span> todos</span><br><span class="line">            <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerRoutes (app<span class="operator">:</span> WebApplication) <span class="operator">=</span></span><br><span class="line">    app.MapGet(<span class="string">&quot;/todos&quot;</span>, getTodos) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app.MapPost(<span class="string">&quot;/todos&quot;</span>, addTodo) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app</span><br></pre></td></tr></table></figure>
<p><code>Program.fs</code></p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Hosting</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.DependencyInjection <span class="comment">// 註冊 service 需要的 namespace</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[&lt;EntryPoint&gt;]</span></span><br><span class="line"><span class="keyword">let</span> main args <span class="operator">=</span></span><br><span class="line">    <span class="keyword">let</span> builder <span class="operator">=</span> WebApplication.CreateBuilder(args)</span><br><span class="line">    <span class="comment">// 註冊 service</span></span><br><span class="line">    builder</span><br><span class="line">        .Services</span><br><span class="line">        .AddSingleton<span class="operator">&lt;</span>Todo.ITodoService<span class="operator">&gt;</span>(<span class="keyword">fun</span> _ <span class="operator">-&gt;</span> Todo.TodoService) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> app <span class="operator">=</span> builder.Build()</span><br><span class="line">   </span><br><span class="line">    app</span><br><span class="line">    <span class="operator">|&gt;</span> Home.registerRoutes</span><br><span class="line">    <span class="operator">|&gt;</span> Todo.registerRoutes</span><br><span class="line">    <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    app.Run()</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span> <span class="comment">// Exit code</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="測試"><a class="header-anchor" href="#測試"> </a>測試</h2>
<p>寫完後就可以用 postman 來測試一下</p>
<ol>
<li>
<p>Query Items</p>
<p><img src="image-20220130144502653.png" alt="image-20220130144502653"></p>
</li>
<li>
<p>Add Item</p>
<p><img src="image-20220130144622387.png" alt="image-20220130144622387"></p>
<p>新增成功後在查詢看有沒有存進去</p>
<p><img src="image-20220130144654827.png" alt="image-20220130144654827"></p>
</li>
</ol>
<h1 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h1>
<p>同樣的架構在 F# 有可以試用，這是個好消息，之後會再嘗試接上 mongo了，此篇文章的程式碼是參考 <a href="https://github.com/AngelMunoz/NetSixSamples/tree/main/Newishfs">Github Repo</a>，也會在平日的晚上找時間開 F# 讀書會，有興趣的可以 follow 一下</p>
]]></content>
      <categories>
        <category>FSharp</category>
      </categories>
      <tags>
        <tag>FSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>FSharp + Minimal API + MongoDB</title>
    <url>/2022/01/30/fsharp-minimalAPI-mongodb/</url>
    <content><![CDATA[<p>延續<a href="https://blog.kevinyang.net/2022/01/30/fsharp-minimal-api/">上一篇</a> 寫的內容，將 MongoDB 的功能加進來，順便練習 F#</p>
<span id="more"></span>
<h1 id="Work-with-MongoDB"><a class="header-anchor" href="#Work-with-MongoDB"> </a>Work with MongoDB</h1>
<p>.net core 專案不管是 C# 或是 F# 要使用 MongoDB 都需要安裝一個 package <code>MongoDB.Driver</code>，安裝完成後就可以連接 MongoDB 了，這邊就假設各位的電腦已經有一個正常運行的 MongoDB，如果沒有，網路上有很多安裝教學</p>
<p>接下來的檔案都是在 <code>Todo.fs</code> 內做異動</p>
<ol>
<li>
<p>調整 <code>Todo</code> type 定義</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Todo</span> <span class="operator">=</span> &#123;</span><br><span class="line">      <span class="built_in">id</span><span class="operator">:</span> BsonObjectId <span class="comment">// mongodb 自己的 key 欄位, 需要 open MongoDB.Bson</span></span><br><span class="line">      uid<span class="operator">:</span> <span class="type">string</span> <span class="comment">// 上一篇使用 int, 這裡改用 Guid 當作 uid</span></span><br><span class="line">      title<span class="operator">:</span> <span class="type">string</span></span><br><span class="line">      isDone<span class="operator">:</span> <span class="type">bool</span> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>增加 property 和 method 到 <code>ITodoService</code> type</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ITodoService</span> <span class="operator">=</span>  </span><br><span class="line">   <span class="keyword">abstract</span> mongo<span class="operator">:</span> MongoClient</span><br><span class="line">   <span class="keyword">abstract</span> db<span class="operator">:</span> IMongoDatabase</span><br><span class="line">   <span class="keyword">abstract</span> GetTodos<span class="operator">:</span> <span class="type">unit</span> <span class="operator">-&gt;</span> Todo <span class="type">seq</span></span><br><span class="line">   <span class="keyword">abstract</span> SaveTodo<span class="operator">:</span> Todo <span class="operator">-&gt;</span> <span class="type">bool</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>將缺少的部分實做補齊</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> TodoService <span class="operator">=</span> </span><br><span class="line">    &#123; <span class="keyword">new</span> ITodoService <span class="keyword">with</span>   </span><br><span class="line">        <span class="keyword">member</span> __.mongo <span class="operator">=</span> MongoClient(<span class="string">&quot;your mongodb connection string&quot;</span>)</span><br><span class="line">        <span class="keyword">member</span> __.db <span class="operator">=</span> __.mongo.GetDatabase <span class="string">&quot;todos&quot;</span> <span class="comment">// 可以換成自己建立的 database 名稱</span></span><br><span class="line">        <span class="keyword">member</span> __.GetTodos()<span class="operator">:</span> <span class="type">seq</span><span class="operator">&lt;</span>Todo<span class="operator">&gt;</span> <span class="operator">=</span></span><br><span class="line">            __.db</span><br><span class="line">              .GetCollection<span class="operator">&lt;</span>Todo<span class="operator">&gt;</span>(<span class="string">&quot;todos&quot;</span>)</span><br><span class="line">              .Find(Builders.Filter.Empty)</span><br><span class="line">              .ToEnumerable() <span class="operator">|&gt;</span> Seq.cast</span><br><span class="line">              </span><br><span class="line">        <span class="keyword">member</span> __.SaveTodo todo <span class="operator">=</span></span><br><span class="line">            <span class="keyword">let</span> collection <span class="operator">=</span> __.db.GetCollection<span class="operator">&lt;</span>Todo<span class="operator">&gt;</span>(<span class="string">&quot;todos&quot;</span>)</span><br><span class="line">            <span class="keyword">let</span> todos <span class="operator">=</span> </span><br><span class="line">                collection</span><br><span class="line">                    .Find(<span class="keyword">fun</span> x<span class="operator">-&gt;</span> x.uid <span class="operator">=</span> todo.uid)</span><br><span class="line">                    .ToEnumerable()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">match</span> Seq.isEmpty todos <span class="keyword">with</span></span><br><span class="line">            <span class="operator">|</span> <span class="literal">true</span> <span class="operator">-&gt;</span> </span><br><span class="line">                collection.InsertOne &#123; todo <span class="keyword">with</span></span><br><span class="line">                                        <span class="built_in">id</span> <span class="operator">=</span> BsonObjectId(ObjectId.GenerateNewId())</span><br><span class="line">                                        uid <span class="operator">=</span> Guid.NewGuid().ToString() &#125; <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">            <span class="operator">|</span> <span class="literal">false</span> <span class="operator">-&gt;</span> </span><br><span class="line">                <span class="keyword">let</span> filter <span class="operator">=</span> Builders<span class="operator">&lt;</span>Todo<span class="operator">&gt;.</span>Filter.Eq((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.uid), todo.uid)</span><br><span class="line">                <span class="keyword">let</span> update <span class="operator">=</span></span><br><span class="line">                    Builders<span class="operator">&lt;</span>Todo<span class="operator">&gt;.</span>Update</span><br><span class="line">                        .Set((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.title), todo.title)</span><br><span class="line">                        .Set((<span class="keyword">fun</span> x <span class="operator">-&gt;</span> x.isDone), todo.isDone)</span><br><span class="line"></span><br><span class="line">                collection.UpdateOne(filter, update) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">                <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>__.GetTodos()</code> 這一段我稍微卡到的地方在於 <code>IEnumerable</code> 轉型到 <code>Seq</code> 的地方，查了一下文件，發現 <code>IEnumerable</code> 和 <code>Seq</code> 的本質上是一樣的，所以只要使用 <code>Seq.cast</code> 的方法轉一下即可</li>
<li>MongoDB Collection 的查詢是使用 <code>Builders.filter</code> 的方法建立，這裡因為是要全撈，所以就單純使用 <code>Builders.Filter.Empty</code></li>
<li><code>__.SaveTodo</code> 的部分，我將建立與更新寫在一起，判斷方式是先用傳進來的 <code>todo.uid</code> 去尋找是否有存在的記錄，透過 pattern match 的寫法來區分新增與更新</li>
<li>line 24: 建立 <code>filter</code> 與 <code>update</code> 的定義，<code>colletion.UpdateOne</code> 方法需要傳進這兩個定義</li>
</ul>
</li>
<li>
<p>修改 <code>addTodo</code> 的方法</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">private</span> addTodo <span class="operator">=</span></span><br><span class="line">    Func<span class="operator">&lt;</span>ITodoService, Todo, bool<span class="operator">&gt;</span></span><br><span class="line">        (<span class="keyword">fun</span> (todos<span class="operator">:</span> ITodoService) (todo) <span class="operator">-&gt;</span> todos.SaveTodo todo)</span><br></pre></td></tr></table></figure>
<p>有好一段時間沒有寫 C#，熊熊忘記 <code>Func</code> 的使用方式，還好後來有想起來，而這邊跟寫 C# 的差異在於 line 3 的部分，如果是 C# 會這樣子寫 <code>(todos: ITodoService , todo) =&gt; &#123;...&#125;</code>，但在 F# 的世界裡，因為 <code>Func</code> 的 signature 是 <code>Func(a -&gt; b -&gt; c)</code>，所以才會有 line 3 的寫法出現了，算是 FP 的特性之一。</p>
<p>BTW，如果想要將 FP 學好，要學會看懂 signature</p>
</li>
</ol>
<p>這樣調整完後，重新執行測試 API ，沒有意外就可以看到資料有儲存到 MongoDB 內了</p>
<h1 id="注入-IConfiguration"><a class="header-anchor" href="#注入-IConfiguration"> </a>注入 IConfiguration</h1>
<p>經過一晚的思考，還是將如何使用 Configuration 的作法補上來，順便熟悉 <code>Minimal API</code> 的 DI 機制，接下來會分兩塊來看</p>
<ol>
<li>
<p>map func 直接注入 dependency</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;RequireQualifiedAccess&gt;]</span></span><br><span class="line"><span class="keyword">module</span> Home</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> System</span><br><span class="line"><span class="keyword">open</span> Microsoft.AspNetCore.Builder</span><br><span class="line"><span class="keyword">open</span> Microsoft.Extensions.Configuration</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> showVersion <span class="operator">=</span> </span><br><span class="line">    <span class="keyword">let</span> getCurrentVersion (config<span class="operator">:</span>IConfiguration) <span class="operator">=</span> config[<span class="string">&quot;version&quot;</span>]</span><br><span class="line">    Func<span class="operator">&lt;</span>IConfiguration, string<span class="operator">&gt;</span>(getCurrentVersion)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerRoutes (app<span class="operator">:</span> WebApplication) <span class="operator">=</span></span><br><span class="line">    app.MapGet(<span class="string">&quot;/&quot;</span>, showVersion) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br><span class="line">    app</span><br></pre></td></tr></table></figure>
<ul>
<li>line 10: 的 <code>Func</code> 寫法如同上面的，可以用這樣子的方式取得註冊在 services 內的服務 (framework 幫我們完成)</li>
</ul>
</li>
<li>
<p>註冊 service 層的 DI</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> TodoService (config<span class="operator">:</span> IConfiguration) <span class="operator">=</span> </span><br><span class="line">    &#123; <span class="keyword">new</span> ITodoService <span class="keyword">with</span>        </span><br><span class="line">        <span class="keyword">member</span> __.mongo <span class="operator">=</span> MongoClient(config[<span class="string">&quot;mongodb&quot;</span>])</span><br><span class="line">        <span class="keyword">member</span> __.db <span class="operator">=</span> __.mongo.GetDatabase <span class="string">&quot;todos&quot;</span></span><br><span class="line">      <span class="operator">....</span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 1: 在宣告時就表明要給 <code>IConfiuration</code></li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line">builder</span><br><span class="line">    .services</span><br><span class="line">    .AddSingleton<span class="operator">&lt;</span>Todo.ITodoService<span class="operator">&gt;</span>(<span class="keyword">fun</span> _ <span class="operator">-&gt;</span> Todo.TodoService builder.Configuration) <span class="operator">|&gt;</span> <span class="built_in">ignore</span></span><br></pre></td></tr></table></figure>
<ul>
<li>所以在註冊的時候就餵給他 Configuration 就好</li>
</ul>
</li>
</ol>
<p>這樣子就完成了，這部分的寫法我一開始有點鬼打牆，主要是因為我卡在 C# 版本的觀念，service 的 DI 要從 <code>constructure</code> 注入，後來想通其實他就是 function，就直接傳進去就好了。</p>
<p>換另外一個層面來看，當你發現一個 function 要傳入的東西太多時，就要重新思考這段程式碼是否有問題，是不是負責太多事情了。</p>
]]></content>
      <categories>
        <category>FSharp</category>
      </categories>
      <tags>
        <tag>FSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>[FSharp] Seq Study</title>
    <url>/2022/02/20/fsharp-seq-study/</url>
    <content><![CDATA[<p>最近在練習 F# 時，發現自己對於 F# Collection 操作不熟悉，尤其是 Seq 的部分，特地拉出單章刻意練習</p>
<span id="more"></span>
<p>來自官網的介紹</p>
<blockquote>
<p>「 <em>序列</em> 」（sequence）是一種元素的邏輯系列，全都是一種類型。 當您有大量的資料收集，但不一定會預期使用所有元素時，序列特別有用。 個別順序元素只會在必要時計算，因此在不使用所有元素的情況下，序列可以提供比清單更佳的效能。 順序是以類型表示 <code>seq&lt;'T&gt;</code> ，這是的別名 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.ienumerable-1">IEnumerable</a> 。 因此，任何實介面的 .NET 型別都 <a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.collections.generic.ienumerable-1">IEnumerable</a> 可以用來做為序列。 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html">Seq 模組</a>可支援涉及序列的操作。</p>
</blockquote>
<h1 id="Notes"><a class="header-anchor" href="#Notes"> </a>Notes</h1>
<h2 id="建立-Seq"><a class="header-anchor" href="#建立-Seq"> </a>建立 Seq</h2>
<p>F# 建立 range 數列的方式可以透過 <code>..</code> 的方式來完成，例如 <code>[ 1 .. 3 ]</code> 就能產生 <code>[ 1;2;3 ]</code> 的 List，要表示 step n 時，可以這樣子表示 <code>[ 1..2..5]</code> 就會得到 <code>[1;3;5]</code>，同樣的表示法套用在 seq 上會是這樣子寫</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123; <span class="number">1.</span><span class="number">.2</span><span class="operator">..</span><span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure>
<p>更進一步可以透過程式的方式產生 seq 的內容</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">-&gt;</span> i <span class="operator">*</span> i &#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span>. <span class="number">10</span> <span class="keyword">do</span> i <span class="operator">*</span> i&#125;</span><br></pre></td></tr></table></figure>
<p>另外一種會遇到的情況是想將一個 seq 展開並放入到另外一個 seq 時，可以使用 <code>yield!</code> 的關鍵字 ，其效果跟 JavaScript 的 flatMap 是一樣的</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">seq</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">yield!</span> <span class="keyword">seq</span> &#123; <span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>; <span class="number">4</span>; <span class="number">5</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件中提到一點就是如果運算是中有使用到 <code>yield!</code> 時，其他回傳值就必須使用 <code>yield</code></p>
<h2 id="轉換"><a class="header-anchor" href="#轉換"> </a>轉換</h2>
<p>可以透過兩種方式來將 <code>List</code> or <code>Array</code> 轉換成 <code>seq</code></p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Convert an array to a sequence by using a cast.</span></span><br><span class="line"><span class="keyword">let</span> seqFromArray1 <span class="operator">=</span> [<span class="operator">|</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">|</span>] <span class="operator">:&gt;</span> seq<span class="operator">&lt;</span>int<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">// let seqFromArray1 = Seq.cast [| 1 .. 10 |]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert an array to a sequence by using Seq.ofArray.</span></span><br><span class="line"><span class="keyword">let</span> seqFromArray2 <span class="operator">=</span> [<span class="operator">|</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">|</span>] <span class="operator">|&gt;</span> Seq.ofArray</span><br></pre></td></tr></table></figure>
<h2 id="搜尋"><a class="header-anchor" href="#搜尋"> </a>搜尋</h2>
<p>常用的方法有  <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#exists">Seq. exists</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#exists">array.exists2</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#find">seq. find</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#findIndex">findIndex</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#pick">Seq. pick</a>、 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#tryFind">tryFind</a> 和 <a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#tryFindIndex">array.tryfindindex</a></p>
<h2 id="Obtaining-Subsequences"><a class="header-anchor" href="#Obtaining-Subsequences"> </a>Obtaining Subsequences</h2>
<ul>
<li>
<p>常看到的有 <code>Seq.filter</code> 、<code>Seq.choose</code>，跟 List 的版本功能一樣但運作方式不同，filtering 和 choosing 的行為只會針對當下的 seq element</p>
</li>
<li>
<p>取 n 筆記錄的方法有 <code>Seq.take</code> 或是 <code>Seq.truncate</code> 兩者的差異是要處理的 seq 內是否有足夠得資料比數，如果資料比數不夠時，<code>Seq.take</code> 會傳回 <code>System.InvalidOperationException</code> 的例外狀況，而 <code>Seq.truncate</code> 不會發生</p>
</li>
<li>
<p><code>Seq.takeWhile</code> 取值直到第一個不吻合條件發生</p>
</li>
<li>
<p><code>Seq.skip</code> 跳過 n  筆記錄</p>
</li>
<li>
<p><code>Seq.skipWhil</code> skip until first element tor which the predicate return false</p>
</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// takeWhile</span></span><br><span class="line"><span class="keyword">let</span> mySeqLessThan10 <span class="operator">=</span> Seq.takeWhile (<span class="keyword">fun</span> elem <span class="operator">-&gt;</span> elem <span class="operator">&lt;</span> <span class="number">10</span>) mySeq</span><br><span class="line">mySeqLessThan10 <span class="operator">|&gt;</span> printSeq</span><br><span class="line"></span><br><span class="line"><span class="comment">// skip</span></span><br><span class="line"><span class="keyword">let</span> mySeqSkipFirst5 <span class="operator">=</span> Seq.skip <span class="number">5</span> mySeq</span><br><span class="line">mySeqSkipFirst5 <span class="operator">|&gt;</span> printSeq</span><br><span class="line"></span><br><span class="line"><span class="comment">// skipWhile</span></span><br><span class="line"><span class="keyword">let</span> mySeqSkipWhileLessThan10 <span class="operator">=</span> Seq.skipWhile (<span class="keyword">fun</span> elem <span class="operator">-&gt;</span> elem <span class="operator">&lt;</span> <span class="number">10</span>) mySeq</span><br><span class="line">mySeqSkipWhileLessThan10 <span class="operator">|&gt;</span> printSeq</span><br></pre></td></tr></table></figure>
<h2 id="Transforming-Sequences"><a class="header-anchor" href="#Transforming-Sequences"> </a>Transforming Sequences</h2>
<p>發現很多用法跟 RxJS 好像</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> printSeq seq1 <span class="operator">=</span> Seq.iter (<span class="built_in">printf</span> <span class="string">&quot;%A &quot;</span>) seq1; <span class="built_in">printfn</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> seqPairwise <span class="operator">=</span> Seq.pairwise (<span class="keyword">seq</span> &#123; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..</span> <span class="number">10</span> <span class="operator">-&gt;</span> i<span class="operator">*</span>i &#125;)</span><br><span class="line">printSeq seqPairwise</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>) (<span class="number">4</span>, <span class="number">9</span>) (<span class="number">9</span>, <span class="number">16</span>) (<span class="number">16</span>, <span class="number">25</span>) (<span class="number">25</span>, <span class="number">36</span>) (<span class="number">36</span>, <span class="number">49</span>) (<span class="number">49</span>, <span class="number">64</span>) (<span class="number">64</span>, <span class="number">81</span>) (<span class="number">81</span>, <span class="number">100</span>) </span><br></pre></td></tr></table></figure>
<p><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#windowed">Seq.windowed</a> 用法跟 <code>Seq.pairwise</code> 很像，只是他可以指定每組的數量</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> seqNumbers <span class="operator">=</span> [ <span class="number">1.0</span>; <span class="number">1.5</span>; <span class="number">2.0</span>; <span class="number">1.5</span>; <span class="number">1.0</span>; <span class="number">1.5</span> ] <span class="operator">:&gt;</span> seq<span class="operator">&lt;</span>float<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">let</span> seqWindows <span class="operator">=</span> Seq.windowed <span class="number">3</span> seqNumbers</span><br><span class="line"><span class="keyword">let</span> seqMovingAverage <span class="operator">=</span> Seq.map Array.average seqWindows</span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;Initial sequence: &quot;</span></span><br><span class="line">printSeq seqNumbers <span class="comment">// 1.0 1.5 2.0 1.5 1.0 1.5</span></span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;\nWindows of length 3: &quot;</span></span><br><span class="line">printSeq seqWindows <span class="comment">// [|1.0; 1.5; 2.0|] [|1.5; 2.0; 1.5|] [|2.0; 1.5; 1.0|] [|1.5; 1.0; 1.5|]</span></span><br><span class="line"><span class="built_in">printfn</span> <span class="string">&quot;\nMoving average: &quot;</span></span><br><span class="line">printSeq seqMovingAverage <span class="comment">// 1.5 1.666666667 1.5 1.333333333</span></span><br></pre></td></tr></table></figure>
<h1 id="API-Study"><a class="header-anchor" href="#API-Study"> </a>API Study</h1>
<h2 id="Seq-collect"><a class="header-anchor" href="#Seq-collect"> </a>Seq.collect</h2>
<p><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html#collect">API</a></p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> <span class="string">&quot;AB\nDE&quot;</span></span><br><span class="line"></span><br><span class="line">d.Split [<span class="operator">|</span> <span class="string">&#x27;\n&#x27;</span> <span class="operator">|</span>]</span><br><span class="line"><span class="operator">|&gt;</span> Seq.collect (Seq.skip <span class="number">1</span> <span class="operator">&gt;&gt;</span> Seq.take <span class="number">1</span>)</span><br><span class="line"><span class="operator">|&gt;</span> <span class="built_in">printfn</span> <span class="string">&quot;%A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// seq [&#x27;B&#x27;; &#x27;E&#x27;]</span></span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://docs.microsoft.com/zh-tw/dotnet/fsharp/language-reference/sequences">sequences</a></li>
<li><a href="https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-seqmodule.html">fsharp collections seqmodule</a></li>
</ul>
]]></content>
      <categories>
        <category>FSharp</category>
      </categories>
      <tags>
        <tag>FSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>[筆記] Dockerfile for 建置靜態網站與使用 nginx 來跑</title>
    <url>/2022/05/19/static-website-docker-with-nginx/</url>
    <content><![CDATA[<p>每次都要想 Dockerfile 怎麼寫，乾脆筆記起來. build static website &amp; run with nginx</p>
<span id="more"></span>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:lts-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> NPM_CONFIG_LOGLEVEL=warn</span><br><span class="line"><span class="keyword">ENV</span> NPM_CONFIG_COLOR=false</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## production environment</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:stable-alpine as deploy</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/build /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>[HowTo] asp.net core 設定 Configuration 的方法</title>
    <url>/2022/06/05/howto-dotnet-configuration/</url>
    <content><![CDATA[<p>Quick note for setting configuration  in .net core.</p>
<span id="more"></span>
<p>透過建立 Class 來作為 Configuration 的容器</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MongoConnectionOptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> name = <span class="string">&quot;MongoConnection&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ConnectionString &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Database &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>line 3: 單純是方便設定使用 (Option)</li>
<li>line 5 ~ 6 需與 <code>appsettings.json</code> 想設定的 section 內的欄位一致</li>
</ol>
<p><code>appsettings.json</code> 依此範例內會有一個 <code>MongoConnection</code> 的 section 並且有 <code>ConnectionString</code> 和 <code>Database</code> 的設定</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;MongoConnection&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ConnectionString&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>預設 <a href="http://asp.net">asp.net</a> core 新建的範本，會使用 top function 的模式建立，所以 <code>program.cs</code> 檔案會變成這樣</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> apiWithMongo.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add services to the container.</span></span><br><span class="line">builder.Services.Configure&lt;MongoConnectionOptions&gt;(builder.Configuration.GetSection(MongoConnectionOptions.name));</span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>透過 line 6 的寫法，我們可以將 <code>appsettings.json</code> 內的某一個 section 值與 class 關連設定起來</li>
</ul>
<p>設定完成後，在任何地方如果要使用這組設定值時，可以透過 <code>IOptions&lt;T&gt;</code> 的方式取得</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> MongoConnectionOptions _options;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span>(<span class="params">IOptions&lt;MongoConnectionOptions&gt; options</span>)</span>&#123;</span><br><span class="line">        _options = options.Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a class="header-anchor" href="#Reference"> </a>Reference</h2>
<ul>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0&amp;WT.mc_id=DOP-MVP-5002594">Options pattern in ASP.NET Core</a></li>
<li><a href="https://blog.yowko.com/aspdotnet-core-config-array/">在 ASP.NET Core Configuration 中使用 array</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core</category>
      </categories>
      <tags>
        <tag>.NET Core</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 自訂 Decorator 使用範例</title>
    <url>/2022/06/11/angular-custom-decorators-demo/</url>
    <content><![CDATA[<p>距離上一篇關於 decorator 的文章已經是 2017 一月份的事情了，時間過真快，那時候來不知道能拿 decorator 做什麼，現在終於有一個還不錯的使用情境</p>
<span id="more"></span>
<h2 id="讓程式碼講話"><a class="header-anchor" href="#讓程式碼講話"> </a>讓程式碼講話</h2>
<p>開發 app 有時候會希望記錄某功能的使用量，常見的作法就是打一發 API 做記錄的動作，而這其實是可以透過 decorator 的方式封裝起來，然後讓任何需要記錄的 function 使用，以下就用程式碼說話了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LogService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../my-feature/log.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Logger</span>(<span class="params">typeName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    target: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">    key: <span class="built_in">string</span> | <span class="built_in">symbol</span>,</span></span><br><span class="line"><span class="params">    descriptor: PropertyDescriptor</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> service = <span class="title class_">AppModule</span>?.<span class="property">injector</span>?.<span class="title function_">get</span>(<span class="title class_">LogService</span>);</span><br><span class="line">      <span class="keyword">if</span> (!!service) &#123;</span><br><span class="line">        service.<span class="title function_">recordUsage</span>(typeName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>line 4: 如果想要 decorator 能接受外部傳進來的值，就可以在這邊定義</li>
<li>line 10: 保留被 decorated 的 function，等等在第 line 19 會用到</li>
<li>line 12: 覆寫原本的 function</li>
<li>line 13: 從 <code>AppModule</code> 取得 injector，可透過 injector 拿到有註冊到 <code>RootModule</code>的 service</li>
<li>line 19: 繼續執行原本 function 的行為</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">injector</span>: <span class="title class_">Injector</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">injector: Injector</span>) &#123;</span><br><span class="line">    <span class="title class_">AppModule</span>.<span class="property">injector</span> = injector;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>建立一個 static 變數讓自訂的 decorator 內可以使用</li>
</ul>
<p>基本上，上面就已經完成了一個 Decorator 的開發了，當然那個 <code>logService</code> 就是自行發揮了</p>
<p>至於如何使用，範例如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Logger</span>(<span class="string">&#x27;AppComponent&#x27;</span>)</span><br><span class="line"><span class="title function_">c</span>(<span class="params">msg: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;clicked&#x27;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/decorators.html">TypeScript Decorator</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[.NET Core] 自訂 Authentication handler</title>
    <url>/2022/06/11/aspnet-custom-authSchema/</url>
    <content><![CDATA[<p><a href="http://asp.net">asp.net</a> core 有很多 authentication 的方法，但有時候想要自訂驗證規則時，該怎麼做，跟著官方文件做完一次後，將自己理解的版本筆記下來</p>
<span id="more"></span>
<h1 id="自訂-Authentication"><a class="header-anchor" href="#自訂-Authentication"> </a>自訂 Authentication</h1>
<p>一開始在思考這題時，繞了幾個圈，但理解後其實不難，就是實做一個 <code>AuthenticationHandler</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiAuthHandler</span> : <span class="title">AuthenticationHandler</span>&lt;<span class="title">AuthenticationSchemeOptions</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ApiAuthHandler</span>(<span class="params">IOptionsMonitor&lt;AuthenticationSchemeOptions&gt; options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock</span>) : <span class="title">base</span>(<span class="params">options, logger, encoder, clock</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task&lt;AuthenticateResult&gt; <span class="title">HandleAuthenticateAsync</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 回傳驗證結果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>實做完上面後，就可以回到 <code>program.cs</code> 內做註冊的動作</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddAuthentication(<span class="string">&quot;Basic&quot;</span>) <span class="comment">// 預設 schema</span></span><br><span class="line">    .AddScheme&lt;AuthenticationSchemeOptions, ApiAuthHandler&gt;(<span class="string">&quot;Basic&quot;</span>, o =&gt; &#123; &#125;);    </span><br><span class="line">    .AddScheme&lt;AuthenticationSchemeOptions, AnotherApiAuthHandler&gt;(<span class="string">&quot;SchemaName&quot;</span>, o =&gt; &#123; &#125;);</span><br></pre></td></tr></table></figure>
<p>而這裡也允許新增多組 schema，在 API Controller 的地方也可以指定要使用哪一組 schema 做驗證</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Authorize(AuthenticationSchemes = <span class="string">&quot;SchemaName&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SomeFunction</span>()</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="自訂-Options"><a class="header-anchor" href="#自訂-Options"> </a>自訂 Options</h2>
<p>如果希望從 <code>Program.cs</code> 的地方傳入設定檔，就需要自訂一個 <code>AuthenticationSchemeOptions</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiAuthHandlerOption</span>: <span class="title">AuthenticationSchemeOptions</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// add your custom properties</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> MyProp &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = String.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line">builder.Services.AddAuthentication(<span class="string">&quot;Basic&quot;</span>) <span class="comment">// 預設 schema</span></span><br><span class="line">    .AddScheme&lt;ApiAuthHandlerOption, ApiAuthHandler&gt;(<span class="string">&quot;Basic&quot;</span>, o =&gt; &#123;</span><br><span class="line">        o.MyProp = <span class="string">&quot;some prop&quot;</span>;</span><br><span class="line">    &#125;); </span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task&lt;AuthenticateResult&gt; <span class="title">HandleAuthenticateAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> myPro = <span class="keyword">base</span>.Options.MyProp; <span class="comment">// 可以取上面那段所設定的值</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<h1 id="參考文件"><a class="header-anchor" href="#參考文件"> </a>參考文件</h1>
<ul>
<li><a href="https://github.com/referbruv/CustomSchemeNinja/blob/main/CustomSchemeNinjaApi/Providers/AuthHandlers/MyNinjaAuthHandler.cs">MyNinjaAuthHandler.cs</a></li>
<li><a href="https://jasonwatmore.com/post/2019/10/21/aspnet-core-3-basic-authentication-tutorial-with-example-api#basic-authentication-handler-cs">Basic Authentication</a></li>
<li><a href="https://www.dotblogs.com.tw/Null/2020/07/03/172547">[ASP.NET Core] 自定義自己的 Authentication 身份驗證器</a></li>
</ul>
]]></content>
      <categories>
        <category>.NET Core </category>
      </categories>
      <tags>
        <tag>.NET Core </tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 跳過 Http Interceptor</title>
    <url>/2022/06/12/angular-skip-interceptor/</url>
    <content><![CDATA[<p>Angular Http Interceptor 使用情境很多，例如加 header token、處理 response error 等，但有時候如果真的有 http request 想要跳過 interceptor 這層該怎麼處理，以下是處理手法</p>
<span id="more"></span>
<h2 id="程式碼"><a class="header-anchor" href="#程式碼"> </a>程式碼</h2>
<p>這裡會利用 <code>HttpBackend</code> 來完成</p>
<blockquote>
<p>Interceptors sit between the <code>HttpClient</code> interface and the <code>HttpBackend</code>.</p>
<p>When injected, <code>HttpBackend</code> dispatches requests directly to the backend, without going through the interceptor chain.</p>
</blockquote>
<p><code>HttpClient</code> 原始碼</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HttpClient</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> handler: HttpHandler</span>) &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>HttpBackend</code> interface</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpBackend</span> <span class="keyword">implements</span> <span class="title class_">HttpHandler</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">handle</span>(<span class="attr">req</span>: <span class="title class_">HttpRequest</span>&lt;<span class="built_in">any</span>&gt;): <span class="title class_">Observable</span>&lt;<span class="title class_">HttpEvent</span>&lt;<span class="built_in">any</span>&gt;&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>範例程式</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HttpBackend</span>, <span class="title class_">HttpClient</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Injectable</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>(&#123;</span><br><span class="line">  <span class="attr">providedIn</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SkipInterceptorService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">httpClient</span>: <span class="title class_">HttpClient</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> handler: HttpBackend</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">httpClient</span> = <span class="keyword">new</span> <span class="title class_">HttpClient</span>(handler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>手動建立一個 <code>HttpClient</code>，之後透過這個 <code>httpClient</code> 的 request 就不會經過 Interceptor 那層，就是這麼簡單</p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://angular.io/api/common/http/HttpBackend">Angular API - HttpBackend</a></li>
<li><a href="https://itnext.io/bypass-angular-interceptors-with-request-metadata-cf28061cda69">Bypass Angular Interceptors with Request Metadata</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Standalone Component 第一次接觸</title>
    <url>/2022/07/09/angular-standalone-first-tryout/</url>
    <content><![CDATA[<p>Angular standalone component 功能在 v14 版本推出 developer preview version (表示不建議使用在 production 環境上)，還是可以先玩弄一下，稍微感覺未來可能的開發模式跟架構會有怎樣的選擇出現</p>
<span id="more"></span>
<h2 id="基本語法"><a class="header-anchor" href="#基本語法"> </a>基本語法</h2>
<p>standalone component 的寫法很簡單，在 component 的 decorator 內新增 <code>standalone: true</code> 即可完成設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;photo-gallery&#x27;</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">ImageGridComponent</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    ... &lt;image-grid [images]=&quot;imageList&quot;&gt;&lt;/image-grid&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">PhotoGalleryComponent</span> &#123;</span><br><span class="line">  <span class="comment">// component logic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一旦設定成 standalone component ，過往設定在 <code>NgModule</code> 的 imports 的其他 <code>NgModules</code> 都需要在這邊設定，也包含這 component 內使用的其他 components</p>
<p>而在路由設定這邊新增 <code>loadComponent</code> 的功能</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./admin/panel.component&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">AdminPanelComponent</span>)&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p><code>loadChildren</code> 也支援讀取另外一組 route setting</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="attr">loadChildren</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./admin/routes&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">mod</span> =&gt;</span> mod.<span class="property">ADMIN_ROUTES</span>)&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// In admin/routes.ts:</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">ADMIN_ROUTES</span>: <span class="title class_">Route</span>[] = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AdminHomeComponent</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;users&#x27;</span>, <span class="attr">component</span>: <span class="title class_">AdminUsersComponent</span>&#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p><code>main.ts</code> 也可以直接啟動 standalone component</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;bootstrapApplication&#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">PhotoAppComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./app/photo.app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">PhotoAppComponent</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Dive-in-a-little-bit"><a class="header-anchor" href="#Dive-in-a-little-bit"> </a>Dive in a little bit</h2>
<p>main.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode, importProvidersFrom &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HomeComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/home/home.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Routes</span> = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomeComponent</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;demo&#x27;</span>,</span><br><span class="line">    <span class="attr">loadComponent</span>: <span class="function">() =&gt;</span></span><br><span class="line">      <span class="keyword">import</span>(<span class="string">&#x27;./app/demo/demo.component&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">m</span>) =&gt;</span> m.<span class="property">DemoComponent</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bootstrapApplication</span>(<span class="title class_">AppComponent</span>, &#123;</span><br><span class="line">  <span class="attr">providers</span>: [importProvidersFrom(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes))],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>透過這種方式完全不使用 <code>NgModule</code> 來啟動一個 Angular App，而在近期的 AngularAir 看到這樣的嘗試</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">&#x27;./environments/environment&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.<span class="property">production</span>) &#123;</span><br><span class="line">  <span class="title function_">enableProdMode</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AppComponent</span>.<span class="title function_">bootstrap</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, importProvidersFrom &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bootstrapApplication &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">RouterModule</span>, <span class="title class_">CommonModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">bootstrapApplication</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">      <span class="attr">providers</span>: [importProvidersFrom(<span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>(routes))],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這改法大幅的降低 main.ts 的複雜度，同時也增加了不少彈性</p>
<p>那 Provider 的部分該怎麼處理，好消息是就跟有 <code>NgModule</code> 時的用法是一樣的。</p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://angular.io/guide/standalone-components">Getting started with standalone component</a></li>
<li><a href="https://stackblitz.com/edit/angular-ivy-2kth3b?file=src%2Fmain.ts,src%2Fapp%2Fapp.component.ts">範例程式碼</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[HowTo] 讀取 WebAPI 資料到 Excel 表內</title>
    <url>/2022/07/16/excel-load-webapi/</url>
    <content><![CDATA[<p>週五突然想到 Excel 是否能載入 JSON 檔案或是 WebAPI 的資料，因為 PowerBI 可以做到，想說 Excel 應該也可以，所以就來試試看</p>
<span id="more"></span>
<p>一樣的，我們拿 <code>[JSONPlaceholder](https://jsonplaceholder.typicode.com/)</code> 所提供的 API 來當作範例資料，使用 <a href="https://jsonplaceholder.typicode.com/posts">https://jsonplaceholder.typicode.com/posts</a> 這組資料</p>
<h2 id="步驟"><a class="header-anchor" href="#步驟"> </a>步驟</h2>
<ol>
<li>
<p>建立一個空的 Excel 檔案</p>
</li>
<li>
<p>選擇 <code>資料</code> Tab 內的<code>從 web</code></p>
<p><img src="image-20220716125829631.png" alt="image-20220716125829631"></p>
</li>
<li>
<p>將文章一開始的網址貼入到 URL 內後按下『確定』</p>
<p><img src="image-20220716132852792.png" alt="image-20220716132852792"></p>
</li>
<li>
<p>會開啟存取 Web 內容的視窗，這邊如果 API 有相關權限設定，可在這邊進行設定</p>
<p><img src="image-20220716130028794.png" alt="image-20220716130028794"></p>
</li>
<li>
<p>確認後下『連接』，Excel 會去呼叫 API 並取回資料</p>
</li>
<li>
<p>取得資料後會開啟 Power Query 編輯器</p>
<p><img src="image-20220716130216544.png" alt="image-20220716130216544"></p>
<p>這時候我們就需要針對取回得資料作一些轉換的設定</p>
<ol>
<li>
<p>點 『到表格』</p>
<p><img src="image-20220716130621219.png" alt="image-20220716130621219"></p>
</li>
<li>
<p>無分隔符號，直接按下『確定』</p>
<p><img src="image-20220716130659427.png" alt="image-20220716130659427"></p>
</li>
<li>
<p>這時候畫面會轉換成以下圖片</p>
<p><img src="image-20220716130731882.png" alt="image-20220716130731882"></p>
</li>
<li>
<p>點選 Column1 旁邊的小圖示，這個動作會開啟另外一個視窗來設定要展開哪些欄位</p>
<p><img src="image-20220716130806821.png" alt="image-20220716130806821"></p>
<p><img src="image-20220716130847323.png" alt="image-20220716130847323"></p>
</li>
<li>
<p>如果確認後沒問題就可以按下『確定』。備註: 如果不想要使用原始資料行列名稱當前置詞，可以把設定取消掉</p>
</li>
<li>
<p>瀏覽資料，確認無誤後按下『關閉並載入』即可在 Excel 上看到資料了</p>
<p><img src="SNAGHTML35f5e08.PNG" alt="img"></p>
</li>
<li>
<p>最終成果</p>
<p><img src="image-20220716131228238.png" alt="image-20220716131228238"></p>
<p>如果想要手動更新 API 得資料，單純點選這個圖示即可，或是上方的『重新整理』</p>
<p><img src="image-20220716131326794.png" alt="image-20220716131326794"></p>
</li>
</ol>
</li>
</ol>
<h2 id="修改-Query"><a class="header-anchor" href="#修改-Query"> </a>修改 Query</h2>
<p>如果想要回頭編輯 Query 的方式，可以從這個地方將 Power Query 編輯器開啟</p>
<p><img src="image-20220716131657411.png" alt="image-20220716131657411"></p>
]]></content>
      <categories>
        <category>Office</category>
      </categories>
      <tags>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 測試 ControlContainer with FormArray 版本</title>
    <url>/2022/08/06/angular-test-controlContainer-with-formarrayname/</url>
    <content><![CDATA[<p>很久以前寫過一篇關於 <code>ControlContainer</code> 的文章，但那時候太菜不知道怎麼寫測試，今天回頭寫 <code>ControlContainer</code> 配上 <code>formArrayName</code> 時，熊熊發現不知道怎寫測試，稍微有點悲劇，但還好根據官方的測試檔案，還是可以整理出答案，以下就是如何測試有使用 <code>ControlContainer</code> 的 Component</p>
<span id="more"></span>
<p>Component 的用法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-filter-field</span> <span class="attr">formArrayName</span>=<span class="string">&quot;dynamicFields&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">app-filter-field</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>ts</code>  的部分</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FilterFieldComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  formData!: <span class="title class_">FormArray</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> controlContainer: ControlContainer</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span> = <span class="variable language_">this</span>.<span class="property">controlContainer</span>.<span class="property">control</span> <span class="keyword">as</span> <span class="title class_">FormArray</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spec 檔案</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fdescribe</span>(<span class="string">&#x27;FilterFieldComponent&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">FilterFieldComponent</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">FilterFieldComponent</span>&gt;;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">formModel</span>: <span class="title class_">FormArray</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">formArrayDir</span>: <span class="title class_">FormArrayName</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = <span class="keyword">new</span> <span class="title class_">FormGroupDirective</span>([], []);</span><br><span class="line">    formModel = <span class="keyword">new</span> <span class="title class_">FormArray</span>([]);</span><br><span class="line">    parent.<span class="property">form</span> = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123; <span class="attr">dynamicFields</span>: formModel &#125;);</span><br><span class="line">    formArrayDir = <span class="keyword">new</span> <span class="title class_">FormArrayName</span>(parent, [], []);</span><br><span class="line">    formArrayDir.<span class="property">name</span> = <span class="string">&#x27;dynamicFields&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">FilterFieldComponent</span>],</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">ReactiveFormsModule</span>],</span><br><span class="line">      <span class="attr">providers</span>: [&#123; <span class="attr">provide</span>: <span class="title class_">ControlContainer</span>, <span class="attr">useValue</span>: formArrayDir &#125;],</span><br><span class="line">      <span class="attr">schemas</span>: [<span class="variable constant_">CUSTOM_ELEMENTS_SCHEMA</span>],</span><br><span class="line">    &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>line 17: 因為 <code>ControlContainer</code> 需要特別去做 mock，所以這邊就手動註冊一下，但如果沒有寫過的人就會卡住，慘，這邊要用哪種型別的值，根據<a href="https://angular.io/api/forms/ControlContainer#controlcontainer">官方 API 文件說明</a>，得知有以下幾種 subclass 可以使用</p>
<p><img src="image-20220806212706185.png" alt="image-20220806212706185"></p>
<p>而其中的 <code>FormArrayName</code> 是我想要的類型，接下來的另外一個問題會是，如何建立 <code>FormArrayName</code> Class，這時候就是  line 8 ~ 12 的用途啦，這裡的寫法是參考官方的測試 form directive 的<a href="https://github.com/angular/angular/tree/main/packages/forms/test#L448-L454">測試檔案</a></p>
<p>以上就是如何測試 <code>ControlContainer</code> 的設定寫法</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Obsidian] 第一次接觸</title>
    <url>/2022/08/21/obsidian-note-1/</url>
    <content><![CDATA[<p>其實我知道 <code>Obsidian</code> 這工具已經好一段時間了，只是一直都沒有真的去使用他，看了很多文章和影片介紹，覺得是時候給他一個機會，真的去用看看他的功能是否適合在工作上，或是有其他可以使用的情境</p>
<span id="more"></span>
<h2 id="安裝-Obsidian"><a class="header-anchor" href="#安裝-Obsidian"> </a>安裝 Obsidian</h2>
<p>要安裝 Obsidian 很簡單，到<a href="https://obsidian.md/">官網</a>上就可以下載符合自己作業系統的安裝檔</p>
<p><img src="image-20220821105956550.png" alt="image-20220821105956550"></p>
<p>安裝完成後，第一次開啟會詢問要建立 <code>Vault</code> 或是選擇 <code>Vault</code> 的位置</p>
<p><img src="image-20220821110154460.png" alt="image-20220821110154460"></p>
<p>什麼是 <code>Vault</code> ? <code>Vault</code> 簡單來說就是存放筆記得資料夾位置，因為是第一次使用，就給他一個 Vault 的名稱跟實際檔案要放哪，建立完成後就會看到這一個畫面</p>
<p><img src="image-20220821110432244.png" alt="image-20220821110432244"></p>
<p>如果有使用 Typora 的朋友，基本畫面應該還沒熟悉的，但當然還有左邊跟其他功能圖示，這就等之後在一一探索研究了，當然第一件事情就是新增第一則筆記，Obsidian 是使用 Markdown 的格式來寫筆記，不熟悉 Markdown 的可以去學一下，應該 1 小時內就可以學玩了</p>
<p>新增筆記的方法，點選左上角的檔案圖示</p>
<p><img src="image-20220821110711236.png" alt="image-20220821110711236"></p>
<p>給予筆記標題名稱 (即檔名)</p>
<p><img src="image-20220821110744590.png" alt="image-20220821110744590"></p>
<p>編輯區如下圖，Obsidian 也支援 Live Preview 的功能，會即時將 Markdown 轉換成顯示模式，這對於寫筆記的節奏其實幫助很大</p>
<p><img src="image-20220821111028433.png" alt="image-20220821111028433"></p>
<h2 id=""><a class="header-anchor" href="#"> </a></h2>
<h2 id="設定調整-Optional"><a class="header-anchor" href="#設定調整-Optional"> </a>設定調整 (Optional)</h2>
<p>因為自身的使用習慣，還是要調整一下預設設定，例如圖片存放資料夾的位置等，調整設定可以由左下角的齒輪進去</p>
<p><img src="image-20220821112342482.png" alt="image-20220821112342482"></p>
<h3 id="設定附件資料夾位置"><a class="header-anchor" href="#設定附件資料夾位置"> </a>設定附件資料夾位置</h3>
<p><img src="image-20220821114111247.png" alt="image-20220821114111247"></p>
<h3 id="安裝-Plugin"><a class="header-anchor" href="#安裝-Plugin"> </a>安裝 Plugin</h3>
<p>Obsidian 之所有強大是因為他支援安裝 plugin，有分官方版與社群版</p>
<p><img src="image-20220821114234602.png" alt="image-20220821114234602"></p>
<p>這裡先列出幾個社群熱門的 plugin</p>
<ol>
<li>
<p>Advanced tables: 簡單明瞭，幫助編輯 Markdown Table</p>
<p><img src="image-20220821114644538.png" alt="image-20220821114644538"></p>
</li>
<li>
<p>Calendar: 如果使用 Obsidian 寫 daily notes 時，安裝 Calendar 可以用月曆的方式呈現 daily notes，這之後在介紹</p>
</li>
<li>
<p>Dataview: 將 Obsidian 的 Vault 當作資料庫看待，使用 Query 語法將筆記整理會出成另外一份表格使用</p>
</li>
<li>
<p>Kanban:看板模式 <a href="https://github.com/mgmeyers/obsidian-kanban">GitHub Repo</a></p>
<p><img src="image-20220821115414561.png" alt="image-20220821115414561"></p>
</li>
<li>
<p>Excalidraw: Open source 的白板功能 (<a href="https://excalidraw.com/">範例</a>)</p>
<p><img src="image-20220821115531883.png" alt="image-20220821115531883"></p>
</li>
<li>
<p>Admonition: 這效果在寫文章筆記時真的很棒，可以很清楚的將需要注意的地方用不同的方式標記出來，例如</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```ad-note</span></span><br><span class="line"><span class="code">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla.</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>
<p><img src="image-20220821115725690.png" alt="image-20220821115725690"></p>
</li>
</ol>
<h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2>
<p>Obsidian 確實能提供完整的筆記所需要的功能，當然還有更強大的功能，例如筆記與筆記之間的關連呈現，能透過連結的方式將知識庫給建立出來，雖然初期學習門檻有點高，但是一個值得投資的學習項目，網路上也有很多學習資源</p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://ithelp.ithome.com.tw/users/20131832/ironman/4271">Obsidian 雙向鏈結型筆記工具研究與應用，打造屬於個人的專業知識圖譜 系列</a></li>
<li><a href="https://www.youtube.com/c/NicolevanderHoeven">YouTube - Nicole van der Hoeven</a></li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>[Obsidian] 使用 Obsidian 來寫 Docusaurus Doc &amp; Blog</title>
    <url>/2022/08/21/use-obsidian-to-maintian-docusaurus/</url>
    <content><![CDATA[<p>使用 Obsidian 來寫 <code>Docusaurus</code> 似乎也是個好選擇，以下是我嘗試後的一些設定方式</p>
<span id="more"></span>
<h2 id="環境設定"><a class="header-anchor" href="#環境設定"> </a>環境設定</h2>
<p>因為 Obsidian 可以將資料夾視為一個 Vault，我們可以將 <code>Docusaurus</code> 下的 Doc &amp; Blog 兩個資料夾設定為兩個 vault 使用，這篇文章會使用 <code>blog</code> 來做示範</p>
<h3 id="Open-Folder-as-Vault"><a class="header-anchor" href="#Open-Folder-as-Vault"> </a>Open Folder as Vault</h3>
<p>將 blog 資料夾開啟，這時候會在 <code>blog</code> 資料夾下新增 <code>.obsidian</code> 的資料夾，所以在 <code>.gitignore</code> 需要設定排除 <code>.obsidian</code> 資料夾，既然都開啟 <code>.gitignore</code> 了，順便排除 <code>@Templates</code> 資料夾  (可自行命名，是用來存放 Obsidian Template 的地方，等等會講到)</p>
<h3 id="安裝-community-plugin"><a class="header-anchor" href="#安裝-community-plugin"> </a>安裝 community plugin</h3>
<p>這裡需要安裝兩個 plugin</p>
<ol>
<li>
<p>Custom attachment Location: 方便我們貼圖時可以將圖片動態指定我們設定的位置，以下是我設定的方式 (可自行設定)</p>
<p><img src="image-20220821151228868.png" alt="image-20220821151228868"></p>
<p>因為貼圖路徑的關係，還有一個地方需要配合調整，在 <code>Files &amp; Links</code> 的地方</p>
<p><img src="image-20220821151341432.png" alt="image-20220821151341432"></p>
<p>Step 2 需要將連結的格式改為相對路徑，這樣 <code>docusaurus</code> 才能正常判讀檔案位置，當然就不能使用 <code>wikilinks</code> 的格式，所幸這些設定檔都是跟著 Vault 走，所以修改不會影響到其他人</p>
</li>
<li>
<p>mdx as md: 因為 <code>docusurus</code> 支援 md 和 mdx 兩種文件格式，所以 Obsidian 需要安裝這個才可以看到兩種檔案格式</p>
</li>
</ol>
<h2 id="設定-Templates"><a class="header-anchor" href="#設定-Templates"> </a>設定 Templates</h2>
<p>剛剛在前面 <code>.gitignore</code> 時多排除一個 <code>@Templates</code> 的資料夾，當然現在要多新增一個 <code>@Templates</code> 的資料夾在 Blog 資料夾(Vault) 內，並多做以下兩點設定</p>
<ol>
<li>
<p>Template 為 Core Plugin，預設是開啟狀態，所以 Settings 內可以看到 <code>Templates</code> 的選單</p>
<p><img src="image-20220821152120598.png" alt="image-20220821152120598"></p>
</li>
<li>
<p>設定 Hotkey，這裡可以依各人喜好設定</p>
<p><img src="image-20220821152234652.png" alt="image-20220821152234652"></p>
</li>
</ol>
<p>當這些設定完成後，這時候我們就可以來新增一個 Blog Template 供後面新增時使用，在 <code>@Templates</code> 資料夾下新增一個 <code>Note</code>，名稱自取</p>
<p><img src="image-20220821152401960.png" alt="image-20220821152401960"></p>
<p>在該篇 Note 內，輸入以下內容，這些內容就可以在之後新增 Notes 時透過 Insert template 的方式將內容加入</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">slug: </span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line">authors: []</span><br><span class="line"><span class="section">tags: []</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>能用變數說明</p>
<ul>
<li><code>&#123;&#123;title&#125;&#125;</code>: 目前這篇 Note 的標題</li>
<li><code>&#123;&#123;date&#125;&#125;</code> 和 <code>&#123;&#123;time&#125;&#125;</code> 是日期變數 - (memo: 這邊沒有使用到)</li>
</ul>
<h3 id="使用方式"><a class="header-anchor" href="#使用方式"> </a>使用方式</h3>
<ol>
<li>新增一篇 Note 並輸入標題</li>
<li>使用 Hotkey 來新增 Template，當有多個 templates 時，會出現選單讓我們選擇要套用哪一個</li>
</ol>
<h3 id="Templater-plugin"><a class="header-anchor" href="#Templater-plugin"> </a><code>Templater plugin</code></h3>
<p>這個 plugin 很強大，可以允許我們寫 script 來處理各種 template 樣式，這邊有一個<a href="https://www.youtube.com/watch?v=1eUxQo6Dy7k">介紹影片</a>，<a href="https://silentvoid13.github.io/Templater/introduction.html">plugin 文件</a>，當然如果使用 <code>Templater plugin</code> 剛剛寫的 template 要做些調整</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">slug: </span><br><span class="line">title: &#x27;&lt;% tp.file.title %&gt;&#x27;</span><br><span class="line">authors: []</span><br><span class="line"><span class="section">tags: []</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>
<p>另外要留意的是 Hotkey 的部分，<code>Templater</code> 有自己的 Hotkey 設定，所以這邊會建議只使用一套，就看哪一套適合自己的寫作節奏</p>
<p><img src="image-20220821154520713.png" alt="image-20220821154520713"></p>
<p><img src="image-20220821154534208.png" alt="image-20220821154534208"></p>
<h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2>
<p>當上述這些設定完成後，<code>Dousaurus</code> 的 Doc 或 Blog 的編寫就會更貼近一般文書編輯的模式，圖片，表格等都可以使用 Obsidian 強大的功能來完成編輯</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Typed Form study notes</title>
    <url>/2022/09/09/ng14-typed-form/</url>
    <content><![CDATA[<p>Angular 14 推出 Typed Form 的功能，利用中秋放假的時間，好好地將這個功能給仔細玩過一次，掌握好才能在專案上使用到</p>
<span id="more"></span>
<h2 id="基本元素"><a class="header-anchor" href="#基本元素"> </a>基本元素</h2>
<p>Angular 13  有 <code>FormGroup</code>、<code>FormControl</code>、<code>FormArray</code>、<code>FormBuilder</code>，而在 Angular 14 裡原本的這些 <code>FormControl</code> 都會變成 <code>UntypedFormGroup</code>、<code>UntypedFormControl</code>、<code>UnTypedFormArray</code>、<code>UnTypedFormBuilder</code> (透過 ng update 時，Angular 會更換成這些類別)，在 Angular 14 以後的 <code>FormGroup</code>、<code>FormControl</code>、<code>FormArray</code>、<code>FormBuilder</code> 都具有型別了，另外還有一個 <code>FormRecord</code> 的新類別，後面會介紹到他</p>
<p>使用 Typed Form 的好處是在開發時期就可以知道表單型別，避免一些不必要的錯誤，也可以針對 <code>null</code> 的狀況作防範，有好處就一定有壞處，如果遇到比較動態類型的表單，使用 Typed Form 就比較綁手綁腳，這時候可以退回使用 <code>UnTyped</code> 版本的</p>
<h2 id="FormControl"><a class="header-anchor" href="#FormControl"> </a>FormControl</h2>
<p><code>FormControl</code> 在 Typed Form 下多了幾個特性，下面一一說明</p>
<h3 id="Nullability"><a class="header-anchor" href="#Nullability"> </a>Nullability</h3>
<p>表單中最基本成員，寫法與 API 跟之前一模一樣</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;myEmail@xxx.com&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><code>FormControl</code> 執行  <code>reset()</code>  時，預設會變成 <code>null</code>，但這件事情在 Angular 14 的時候多了一個選項，可以在建立 <code>FormControl</code> 時，設定 <code>&#123;nonNullable: true&#125;</code>，這時候當執行 <code>reset()</code> 時，就會回到一開始建立 <code>FormControl</code> 所賦予的預設值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;myEmail@xxx.com&#x27;</span>, &#123;<span class="attr">nonNullable</span>: <span class="literal">true</span>&#125;); </span><br></pre></td></tr></table></figure>
<p>這特性很重要，可以避免很多不必要的 null 處理</p>
<h3 id="Specifying-an-Explicit-Type"><a class="header-anchor" href="#Specifying-an-Explicit-Type"> </a>Specifying an Explicit Type</h3>
<p>既然是有型別的 <code>FormControl</code>，指定 <code>FormControl</code> 的型別後，一旦設定不符合型別的值就會通知 invalid 了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="literal">null</span>);</span><br><span class="line">email.<span class="title function_">setValue</span>(<span class="string">&#x27;myEmail@xx.com&#x27;</span>); </span><br></pre></td></tr></table></figure>
<p><img src="image-20220909151348349.png" alt="image-20220909151348349"></p>
<p>要迴避這問題的解法有兩種</p>
<ol>
<li>用空字串做預設值</li>
<li>設定 <code>FormControl&lt;string | null&gt;</code></li>
</ol>
<h2 id="FormArray"><a class="header-anchor" href="#FormArray"> </a>FormArray</h2>
<p>如果 <code>FormArray</code> 內只會有同一種型別的 Control，可以直接使用 <code>FormArray</code>，如果是多種類型，例如同時有 <code>FormGroup</code>、<code>FormControl</code>，那就要使用 <code>UntypedFormArray</code> 了</p>
<h2 id="FormGroup"><a class="header-anchor" href="#FormGroup"> </a>FormGroup</h2>
<p><code>FormGroup</code> 的 value 與 <code>getRawValue</code> 會回傳不同型別的結果，其實也蠻符合應有的行為</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> group = <span class="keyword">new</span> <span class="title class_">FormGroup</span>(&#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      <span class="attr">roomId</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = group.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">const</span> rawValue = group.<span class="title function_">getRawValue</span>();</span><br></pre></td></tr></table></figure>
<p>以這段程式碼來說，<code>value</code> 會自動判斷為這個型別</p>
<p><img src="image-20220909153051507.png" alt="image-20220909153051507"></p>
<p>為什麼會有這樣的型別推導呢，理由有兩個</p>
<ol>
<li>一開始與初始化時是使用  <code>new FormControl('')</code>，即表示這個 <code>FormControl</code>  的值有可能是 <code>string | null</code>，假設這邊有多設定 <code>nonNullable: true</code> 時，就可以明確知道 <code>FormControl</code> 的值一定不會有 <code>null</code> 發生</li>
<li>當 <code>FormGroup</code> 裡的 <code>FormControl</code> 是 <code>disabled</code>  時，<code>FormGroup.value</code> 裡就不會有該 <code>FormControl</code> 的值，所以這邊使用 <code>Partial</code> 十分合理</li>
</ol>
<p>換句話說，<code>FormGroup.getRawValue()</code> 的回傳值型別推導就會是</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">    <span class="attr">roomId</span>: <span class="built_in">string</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>進一步看 <code>FormGroup</code> 的使用指定型別，一旦指定型別後，Angular 就會檢查相關的資料結構，一但有破壞資料結構的行為出現，就會出現錯誤提示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyForm</span> &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">roomId</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> group = <span class="keyword">new</span> <span class="title class_">FormGroup</span>&lt;<span class="title class_">MyForm</span>&gt;(&#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">roomId</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">group.<span class="title function_">removeControl</span>(<span class="string">&#x27;roomId&#x27;</span>); <span class="comment">// error warning</span></span><br></pre></td></tr></table></figure>
<p>上述範例就是要移除一個必須要存在的 <code>username</code> ，這時候就會出現錯誤提示，反之，如果要額外加入 <code>FormControl</code>，一樣會噴錯，這表示我們可以透過 interface 的定義來保護 <code>FormGroup</code> 最後輸出資料的結構完整性</p>
<h2 id="FormRecord"><a class="header-anchor" href="#FormRecord"> </a>FormRecord</h2>
<p>假設我們真的需要動態的新增或移除 <code>FormControl</code> 時該怎麼辦呢?  這時候可以使用 <code>FormRecord</code>，<code>FormRecord</code> 跟 <code>FormGroup</code> 一樣，只是他在型別上就沒有那麼要求了，可以讓我們自由的新增移除 <code>control</code>，但這裡有一個限制就是，只能增修同一種類型的物件，如果想要不同類型物件的增減，就得回到 <code>UntypedFormGroup</code> 了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">fb</span>.<span class="property">record</span>&lt;<span class="title class_">FormControl</span>&lt;<span class="built_in">string</span> | <span class="literal">null</span>&gt;&gt;(&#123;</span><br><span class="line">     <span class="attr">username</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">     <span class="attr">roomId</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">     <span class="attr">address</span>: <span class="keyword">new</span> <span class="title class_">FormControl</span>(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="FormBuilder"><a class="header-anchor" href="#FormBuilder"> </a>FormBuilder</h2>
<p>預設的 <code>FormBuilder</code> 建立出來的 <code>FormControl</code> 都是 <code>nonNullable: false</code> 的狀態，如果想要 <code>FormControl</code> 都是 <code>nonNullable: true</code> 時，可以使用 <code>NonNullableFormBuilder</code>.，又或者是這樣使用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fb = <span class="keyword">new</span> <span class="title class_">FormBuilder</span>();</span><br><span class="line"><span class="keyword">const</span> login = fb.<span class="property">nonNullable</span>.<span class="title function_">group</span>(&#123;</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2>
<p>上述的文章筆記都是閱讀官方文件，經過理解實際測試後寫下的，下方參考聯結有附上官方文件</p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://angular.io/guide/typed-forms">Typed Forms</a></li>
<li><a href="https://fullstackladder.dev/blog/2022/05/15/angular-14-strict-typed-reactive-forms/">搶先體驗強型別表單(Strict Typed Reactive Forms)</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[RxJS] Config.onUnhandledError</title>
    <url>/2022/09/18/rxjs-config/</url>
    <content><![CDATA[<p>今天心血來潮跑去 <code>RxJS</code> 官網晃了一下，無意間看到一個我從沒注意到的好功能，特地寫一篇文章記錄一下，我們在寫 Angular 時會去寫一個 global 的 error handle，主要目的是為了那些未被處理的 exception，而 <code>RxJS</code> 也有一樣的功能，那就是 <code>config</code></p>
<span id="more"></span>
<p>先貼上一段 code，直接用程式碼說明</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; config, throwError &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line">config.<span class="property">onUnhandledError</span> = <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">warn</span>(err);</span><br><span class="line"></span><br><span class="line"><span class="title function_">throwError</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;error without handle&#x27;</span>).<span class="title function_">subscribe</span>();</span><br><span class="line"><span class="title function_">throwError</span>(<span class="function">() =&gt;</span> <span class="string">&#x27;error with handle&#x27;</span>).<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">error</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>執行效果如下圖</p>
<p><img src="image-20220918225327395.png" alt="image-20220918225327395"></p>
<p>光看到這樣是否就覺得有使用他的地方了，而實際在 Angular 內會怎麼使用呢? 因為 <code>config</code> 是 global 設定，所以可以在 root module 定義，剩下的就會自己處理了，十分方便</p>
<p><img src="image-20220918230230345.png" alt="image-20220918230230345"></p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://rxjs.dev/api/index/interface/GlobalConfig">RxJS config</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Playwright 探索日記(1) - 初次見面</title>
    <url>/2022/10/22/playwright-note1/</url>
    <content><![CDATA[<p>Playwright 是一套 E2E 的測試工具，可以測試多種瀏覽器環境(包含手機)，是一個功能強大且完整的工具</p>
<span id="more"></span>
<p>引用官網的介紹</p>
<p><img src="image-20221022105911680.png" alt="image-20221022105911680"></p>
<h2 id="專案初始"><a class="header-anchor" href="#專案初始"> </a>專案初始</h2>
<p>建立一個 playwright 的專案動作很單純，可以透過 <code>npm init</code> 的方式完成，步驟如下</p>
<ol>
<li>建立一個資料夾來放 playwright 專案</li>
<li>開啟命令視窗切換到該資料夾</li>
<li>執行 <code>npm init playwright@latest</code></li>
<li>過程中會遇到幾個選擇
<ol>
<li>語言: JavaScript or TypeScript</li>
<li>測試資料夾的名稱</li>
<li>是否要加入 GitHub Actions 的指令</li>
</ol>
</li>
<li>等待安裝，即可完成</li>
</ol>
<p>等 <code>npm install</code> 結束後即可用 <code>VSCode</code> 開啟該資料夾專案，檔案結構很簡單</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">playwright.config.ts</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br><span class="line">tests/</span><br><span class="line">  example.spec.ts</span><br><span class="line">tests-examples/</span><br><span class="line">  demo-todo-app.spec.ts</span><br></pre></td></tr></table></figure>
<p><code>playwright.config.ts</code> 和 <code>tests/</code> 下的東西晚點來看，先來跑一下測試與測試報告</p>
<p>執行測試的指令: <code>npx playwright test</code></p>
<p>測試報告指令: <code>npx playwright show-report</code></p>
<h2 id="Playwright-設定檔"><a class="header-anchor" href="#Playwright-設定檔"> </a>Playwright 設定檔</h2>
<p>在 <code>playwright.config.ts</code> 內充滿了滿滿的註解，想要看不懂設定真的有一定的難度，除了測試檔案資料夾或是 timeout 設定都算基本的，測試環境的設定也是在這個設定檔內，相信這個各位開啟檔案後應該知道怎麼處理了</p>
<h2 id="測試檔的語法"><a class="header-anchor" href="#測試檔的語法"> </a>測試檔的語法</h2>
<p>先從預設新增的測試檔案說明起，因為 playwright 提供的 api 功能強大，需要分別研究，現階段先看個感覺</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; test, expect &#125; <span class="keyword">from</span> <span class="string">&#x27;@playwright/test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;homepage has Playwright in title and get started link linking to the intro page&#x27;</span>, <span class="keyword">async</span> (&#123; page &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">&#x27;https://playwright.dev/&#x27;</span>);</span><br><span class="line">  <span class="comment">// Expect a title &quot;to contain&quot; a substring.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveTitle</span>(<span class="regexp">/Playwright/</span>);</span><br><span class="line">  <span class="comment">// create a locator</span></span><br><span class="line">  <span class="keyword">const</span> getStarted = page.<span class="title function_">getByText</span>(<span class="string">&#x27;Get Started&#x27;</span>);</span><br><span class="line">  <span class="comment">// Expect an attribute &quot;to be strictly equal&quot; to the value.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(getStarted).<span class="title function_">toHaveAttribute</span>(<span class="string">&#x27;href&#x27;</span>, <span class="string">&#x27;/docs/intro&#x27;</span>);</span><br><span class="line">  <span class="comment">// Click the get started link.</span></span><br><span class="line">  <span class="keyword">await</span> getStarted.<span class="title function_">click</span>();</span><br><span class="line">  <span class="comment">// Expects the URL to contain intro.</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">expect</span>(page).<span class="title function_">toHaveURL</span>(<span class="regexp">/.*intro/</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>基本語法結構跟寫 JS Unit test 很像，在 <code>test</code> 內可已有測試描述即要執行的測試程式</li>
<li><code>page</code> 物件的操作等同操作瀏覽器的一個網頁</li>
<li>使用 jasmine line 的 expect assertion 的語法來做測試，像是 <code>expect(page).toHaveTitle(/Playwright/);</code></li>
<li>page 的操作會持續等待結果回來，或是超過 timeout 時間就會噴錯</li>
<li>也可以執行按鈕的動作或是點選連結的行為</li>
<li>整個測試流程可讀性還蠻高的</li>
</ul>
<h2 id="VSCode-Extension"><a class="header-anchor" href="#VSCode-Extension"> </a>VSCode Extension</h2>
<p>如果有使用 VSCode，也可以安裝 playwright 的 extension，裝了之後可以讓測試 playwright 更輕鬆</p>
<p><img src="image-20221022222048276.png" alt="image-20221022222048276"></p>
<p>看起來就是簡單好用，更多件介紹<a href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright">由此去</a></p>
<h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2>
<p>快速掃過官方文件，其實他可以做的不只有 E2E，也還可以做 API Testing，而且不像 <a href="http://cypress.io">cypress.io</a> 一開始就那麼肥大，看起來是一個值得深入研究的工具</p>
]]></content>
      <categories>
        <category>playwright</category>
      </categories>
      <tags>
        <tag>playwright</tag>
      </tags>
  </entry>
  <entry>
    <title>[Keycloak] 環境準備 &amp; 基本設定</title>
    <url>/2022/10/23/keycloak-note-1/</url>
    <content><![CDATA[<p><code>Keycloak is an open source identity and access management solution</code>. 他能提供 SSO 系統服務，一個簡單的驗證機制可以快速被建立出來，更多資訊可以到<a href="https://www.keycloak.org/">官網</a>上閱讀，那為什麼要寫這篇筆記，主要是想要瞭解開發時，如何與 Keycloak 串接，所以要在本機上面將該環境給準備出來，以供開發使用。</p>
<span id="more"></span>
<h2 id="環境架設"><a class="header-anchor" href="#環境架設"> </a>環境架設</h2>
<p>好家在的是在本機電腦上面啟動一套 Keycloak 的動作很簡單，拜 container 技術的進步，只要一行指令就可以完成安裝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:19.0.3 start-dev</span><br></pre></td></tr></table></figure>
<ul>
<li>登入帳號密碼預設為 <code>admin</code> / <code>admin</code></li>
<li>登入網址: <code>http://localhost:8080</code></li>
</ul>
<h2 id="Keycloak-後台基本操作"><a class="header-anchor" href="#Keycloak-後台基本操作"> </a>Keycloak 後台基本操作</h2>
<p>開啟 <code>http://localhost:8080</code> 會看到這個畫面</p>
<p><img src="image-20221023102214910.png" alt="image-20221023102214910"></p>
<p>進入 <code>Administration Console </code> 會先看到登入畫面，帳號密碼如上面說到的 <code>admin</code> / <code>admin</code>，登入帳後密碼後會看到一堆設定選單，我們的主要目的是要測試開發時能串接 Keycloak 的登入功能，所以會做以下幾件事情</p>
<h3 id="建立-realm"><a class="header-anchor" href="#建立-realm"> </a>建立 realm</h3>
<p>於左上角的下拉選單中，可以看到 <code>Crate Realm</code>，從這邊進行建立 realm 的動作</p>
<p><img src="image-20221023103522222.png" alt="image-20221023103522222"></p>
<p>什麼是 <code>realm</code> ? <code>realm</code> 是一個 workspace 讓你可以管理 users、applications、roles and groups.</p>
<p><img src="image-20221023103719261.png" alt="image-20221023103719261"></p>
<p>輸入一個名字後按下 <code>Create</code> 即可完成建立，建立完成後在左上角的下拉選單中就可以看到剛剛所建立的 <code>realm</code></p>
<h3 id="建立-User"><a class="header-anchor" href="#建立-User"> </a>建立 User</h3>
<p>切換到剛剛所新增的 <code>realm</code> ，然後點選 <code>Users</code> 來準備建立第一個 User 帳號</p>
<p><img src="image-20221023103904970.png" alt="image-20221023103904970"></p>
<p>點 <code>Create new user</code> 後，輸入一些基本資訊，按下 <code>Create</code> 完成新增第一個使用者</p>
<p><img src="image-20221023104129585.png" alt="image-20221023104129585"></p>
<p>新增完成後，需要來設定一下登入密碼，在畫面上設定密碼的地方在</p>
<p><img src="image-20221023104247821.png" alt="image-20221023104247821"></p>
<p><img src="image-20221023104307523.png" alt="image-20221023104307523"></p>
<p><img src="image-20221023104339043.png" alt="image-20221023104339043"></p>
<ul>
<li><code>Temporary</code> ：使用者於第一次登入時是否要重新設定密碼，預設是 <code>On</code> 表示使用者在第一次登入後是需要變更密碼的</li>
</ul>
<p>驗證剛剛設定的 User 是否能正常使用，可以透過開啟 <a href="http://localhost:8080/realms/myrealm/account">Keycloak Account Console</a> 的畫面來進行驗證，如果能正確的登入就代表設定正確</p>
<h2 id="開發-串接"><a class="header-anchor" href="#開發-串接"> </a>開發 &amp; 串接</h2>
<p>上述完成後就可以來試著串看看了，當然首發是 Angular</p>
<h3 id="設定-Client-on-Keycloak"><a class="header-anchor" href="#設定-Client-on-Keycloak"> </a>設定 Client (on Keycloak)</h3>
<p>我覺得這塊是最困惑的地方，一個地方沒設定好，前端就沒法正常使用了</p>
<ol>
<li>
<p>建立 clients</p>
<p><img src="image-20221023115522307.png" alt="image-20221023115522307"></p>
</li>
<li>
<p>設定 Client ID，之後在 Angular 設定時需要</p>
<p><img src="image-20221023115602969.png" alt="image-20221023115602969"></p>
</li>
<li>
<p><code>Capability Config</code> 的頁面先保持預設值</p>
<p><img src="image-20221023115647040.png" alt="image-20221023115647040"></p>
</li>
<li>
<p><code>Save</code> 完成新增 Client</p>
</li>
<li>
<p>這時候會跳到 Client 的詳細頁面，這個頁面需要多設定一些網址資訊</p>
<ol>
<li><strong>Valid redirect URIs</strong> 新增 <code>http://localhost:4200/*</code></li>
<li><strong>Valid post logout redirect URIs</strong> 新增 <code>http://localhost:4200/*</code></li>
<li><strong>Web origins</strong> 新增 <code>http://localhost:4200</code></li>
</ol>
<p>設定完成後按下 <code>Save</code> 儲存異動</p>
</li>
</ol>
<h3 id="Angular-安裝-Keycloack-library"><a class="header-anchor" href="#Angular-安裝-Keycloack-library"> </a>Angular 安裝 Keycloack library</h3>
<ol>
<li>
<p>假設已經有一個 Angular 專案</p>
</li>
<li>
<p>安裝 library</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install keycloak-angular keycloak-js</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>設定 initial config (<code>app.mdoule.ts</code>)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">APP_INITIALIZER</span>, <span class="title class_">NgModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakAngularModule</span>, <span class="title class_">KeycloakService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-angular&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initializeKeycloak</span>(<span class="params">keycloak: KeycloakService</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">    keycloak.<span class="title function_">init</span>(&#123;</span><br><span class="line">      <span class="attr">config</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">        <span class="attr">realm</span>: <span class="string">&#x27;myrealm&#x27;</span>,</span><br><span class="line">        <span class="attr">clientId</span>: <span class="string">&#x27;ngclient&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">loadUserProfileAtStartUp</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">initOptions</span>: &#123;</span><br><span class="line">        <span class="attr">onLoad</span>: <span class="string">&#x27;check-sso&#x27;</span>,</span><br><span class="line">        <span class="attr">silentCheckSsoRedirectUri</span>:</span><br><span class="line">          <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span> + <span class="string">&#x27;/assets/silent-check-sso.html&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">BrowserModule</span>, <span class="title class_">KeycloakAngularModule</span>, <span class="title class_">RouterModule</span>.<span class="title function_">forRoot</span>([])],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">provide</span>: <span class="variable constant_">APP_INITIALIZER</span>,</span><br><span class="line">      <span class="attr">useFactory</span>: initializeKeycloak,</span><br><span class="line">      <span class="attr">multi</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">deps</span>: [<span class="title class_">KeycloakService</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>line 12: Keycloak server 位置</p>
</li>
<li>
<p>line 13: 要存取哪一個 <code>realm</code></p>
</li>
<li>
<p>line 14: 使用的 ClientID</p>
</li>
<li>
<p>line 20: <code>slient-check-sso.html</code> 的內容是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">      parent.postMessage(location.href, location.origin);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>line 16 ~ 21: 其他關於驗證的設定項目</p>
</li>
</ul>
<p>當上述設定完成後，基本上整個 angular application 已經跟 keycloak 做好連接了</p>
<p>以下有一個簡單的範例，用來展示 login 前後的操作</p>
<ul>
<li>
<p><code>app.component.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Keycloak Angular Example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> *<span class="attr">ngIf</span>=<span class="string">&quot;isLoggedIn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;logout()&quot;</span>&gt;</span>Log out<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!isLoggedIn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;login()&quot;</span>&gt;</span>Log in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User information<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.username&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.firstName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>First name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.firstName &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.lastName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>Last name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> *<span class="attr">ngIf</span>=<span class="string">&quot;userProfile.email&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>E-mail<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.email &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span>&gt;</span>E-mail verified<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; userProfile.emailVerified ? &#x27;Yes&#x27; : &#x27;No&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>app.component.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ActivatedRoute</span>, <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-angular&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">KeycloakProfile</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;keycloak-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> isLoggedIn = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">userProfile</span>: <span class="title class_">KeycloakProfile</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> keycloak: KeycloakService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isLoggedIn</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">isLoggedIn</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isLoggedIn</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">userProfile</span> = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">loadUserProfile</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">login</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keycloak</span>.<span class="title function_">logout</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>呈現畫面</p>
<p><img src="image-20221023132329423.png" alt="image-20221023132329423"></p>
</li>
</ol>
<p>而 login 後的 User 資訊到底可以取到什麼程度，也是可以從後台做設定的</p>
<p><img src="image-20221023132432605.png" alt="image-20221023132432605"></p>
<h3 id="AuthGuide-HttpInterceptor"><a class="header-anchor" href="#AuthGuide-HttpInterceptor"> </a>AuthGuide &amp; HttpInterceptor</h3>
<p>所安裝的套件也好心的將這兩區塊的功能，範例程式碼都提供出來了，這裡就不多寫，直接附上連結</p>
<ul>
<li><a href="https://github.com/mauriciovigolo/keycloak-angular#authguard">AuthGuard</a></li>
<li><a href="https://github.com/mauriciovigolo/keycloak-angular#httpclient-interceptor">HttpClient Interceptor</a></li>
</ul>
<h2 id="心得"><a class="header-anchor" href="#心得"> </a>心得</h2>
<p>Keycloak 的設定很多，很多細節需要仔細的研究，但總的來說，功能很強也保有一定的彈性，例如 User Info Storage 的部分可以串接其他的資訊，或是支援其他的 Identity providers 等，開發上的使用也支援很多常見語言，例如 Java、.NET、JavaScript 、Python 等</p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://www.keycloak.org/">Keycloak</a></li>
<li><a href="https://github.com/mauriciovigolo/keycloak-angular">keycloak-angular</a></li>
<li><a href="https://www.keycloak.org/docs/latest/securing_apps/#_javascript_adapter">Keycloak JavaScript dapter</a></li>
</ul>
<p><a href="https://www.keycloak.org/">
</a></p>
]]></content>
      <categories>
        <category>Keycloak</category>
      </categories>
      <tags>
        <tag>Keycloak</tag>
      </tags>
  </entry>
  <entry>
    <title>[Keycloak] WebAPI with Keycloak</title>
    <url>/2022/10/23/keycloak-note-2/</url>
    <content><![CDATA[<p>上一篇介紹了基本環境設定與 Angular 前端如何套用 Keycloak，但一個完整的流程應該還會包含後端的 API 驗證，這篇會用 C# 的 WebAPI 來做一個簡單範例</p>
<span id="more"></span>
<h2 id="New-Keycloak-Client"><a class="header-anchor" href="#New-Keycloak-Client"> </a>New Keycloak Client</h2>
<p>在 KeyCloak Admin Console 內多新增一個 Client 並把一些設定全部關掉，在最新版的介面裡面已經找不到設定 <code>access type</code> 的介面了，Google 一番後發現只要將所有的 Authentication flow 全部取消掉，就是以前的 Bearer-only 模式</p>
<p>所謂的 Bearer-only 模式: the application only allows bearer token requests</p>
<p><img src="image-20221023185121179.png" alt="image-20221023185121179"></p>
<p>設定完成後可以到同一畫面的右上角取額 setting json 內容</p>
<p><img src="image-20221023185454979.png" alt="image-20221023185454979"></p>
<p>將內容複製起來，等等建立在 Core WebAPI 專案的地方用的到</p>
<h2 id="c-專案"><a class="header-anchor" href="#c-專案"> </a>c# 專案</h2>
<p>先新增一個 <a href="http://ASP.NET">ASP.NET</a> Core WebAPI 的專案，並安裝 <a href="https://www.nuget.org/packages/Keycloak.AuthServices.Authentication/1.2.1?_src=template">Keycloak.AuthServices.Authentication</a> 套件</p>
<p>將上個步驟的 adapter config 內容新增到 <code>appsettings.json</code> 檔內，這邊是示範，Production 使用時請依正確做法設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Logging&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;LogLevel&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Information&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Microsoft.AspNetCore&quot;</span>: <span class="string">&quot;Warning&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;AllowedHosts&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Keycloak&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;realm&quot;</span>: <span class="string">&quot;myrealm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;auth-server-url&quot;</span>: <span class="string">&quot;http://localhost:8080/&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ssl-required&quot;</span>: <span class="string">&quot;external&quot;</span>,</span><br><span class="line">    <span class="string">&quot;resource&quot;</span>: <span class="string">&quot;api-client&quot;</span>,</span><br><span class="line">    <span class="string">&quot;public-client&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;confidential-port&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回到 <code>Program.cs</code> 檔案內新增 Authentication 的設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddKeycloakAuthentication(configuration, o =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    o.RequireHttpsMetadata = <span class="literal">false</span>;    </span><br><span class="line">    o.Audience = <span class="string">&quot;account&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>記得在 <code>app.UseAuthorization()</code> 的上方加入 <code>app.UseAuthentication();</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">app.UseAuthentication();</span><br><span class="line">app.UseAuthorization();</span><br></pre></td></tr></table></figure>
<p>上述完成設定後，就可以到 API 的地方加上 <code>[Authorize]</code> 的標籤</p>
<p><img src="image-20221023185907306.png" alt="image-20221023185907306"></p>
<p>一旦加上去後，只要要呼叫這個 API 時，就會檢查 request header 內的 <strong>authorization</strong> 的 <code>Bearer</code> 值是否合法正確</p>
<h3 id="如果遇到-CORS-問題"><a class="header-anchor" href="#如果遇到-CORS-問題"> </a>如果遇到 CORS 問題</h3>
<p>如果從 angular application 呼叫 API 時，通常會撞上 CORS 的問題，這時候就得在 <code>Program.cs</code> 加上 <code>Cors</code> 的相關設定，減少大家 google 的時間，這邊就附上最不嚴謹的設定</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddCors(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.AddPolicy(<span class="string">&quot;policy&quot;</span>,</span><br><span class="line">                    policy =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        policy.AllowAnyOrigin()</span><br><span class="line">                            .AllowAnyHeader()</span><br><span class="line">                            .AllowAnyMethod();</span><br><span class="line">                    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br><span class="line">app.UseCors(<span class="string">&quot;policy&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>Controller 的部分也需要加上 <code>[EnableCors]</code> 的標籤</p>
<h3 id="實際呼叫的-Network-截圖"><a class="header-anchor" href="#實際呼叫的-Network-截圖"> </a>實際呼叫的 Network 截圖</h3>
<p><img src="image-20221023190406972.png" alt="image-20221023190406972"></p>
<p>在 Web 的部分會多判斷處理 Token 過期的問題，如果後臺有設定可自動 Refresh，那麼在呼叫 API 時就會去做 Token 更新的動作，之後才會進行 API 呼叫 (with authorization: Bearer xxxxxx)</p>
<p><img src="image-20221023190645948.png" alt="image-20221023190645948"></p>
]]></content>
      <categories>
        <category>Keycloak</category>
      </categories>
      <tags>
        <tag>Keycloak</tag>
      </tags>
  </entry>
  <entry>
    <title>[OIDC] 瞭解 OIDC 的表層</title>
    <url>/2022/10/30/oidc-notes/</url>
    <content><![CDATA[<p>Keycloak 提供了幾種 protocols，OpenID Connect (OIDC)、OAuth 2.0 and SAML。雖然 OIDC &amp; OAuth 2.0 已存在一段時間，但因為沒有使用實做上的情境，所以都沒有花時間去瞭解背後的運作原理，一樣利用週末的時間來做一下功課</p>
<span id="more"></span>
<p>根據閱讀多篇文件瞭解，OIDC 是基於 OAuth 2.0 發展出來的，看起來得先看 OAuth 2.0 是什麼</p>
<p><img src="image-20221030104933158.png" alt="image-20221030104933158"></p>
<h2 id="OAuth-2-0"><a class="header-anchor" href="#OAuth-2-0"> </a>OAuth 2.0</h2>
<p>OAuth 2.0 基本上處理 Authorization 的部分，用來控制授權<strong>誰</strong>能存取<strong>資源</strong>，有四個基本元素</p>
<ol>
<li><strong>authorization server</strong>: 用來發 access token 的 server</li>
<li><strong>resource owner</strong>: 有權限能存取資料的使用者</li>
<li><strong>client</strong>: 將 access token 傳給系統服務的應用程式</li>
<li><strong>resource server</strong>: 接受 access token 並驗證其合法性</li>
</ol>
<p>其他名詞</p>
<ol>
<li><strong>authorization grant</strong>: 授權範圍</li>
<li><strong>access token</strong>: 由 <code>authorization server</code> 發出，會在發請求時附加在進去給 <code>resource server</code></li>
<li><strong>redirect URI</strong>: 登入後要轉回的路徑</li>
</ol>
<h3 id="授權流程"><a class="header-anchor" href="#授權流程"> </a>授權流程</h3>
<ol>
<li>
<p>Authorization Code</p>
<p><img src="image-20221030091611632.png" alt="image-20221030091611632"></p>
<p>這算是比較常見的模式，登入畫面會由 <code>authorization server</code> 提供，透過 <code>redirect URI</code> 的方式帶著 <code>authorization code</code> 回到 <code>client</code> 端供後面使用</p>
<blockquote>
<p>這流程也是 Keycloak JavaScript adapter 預設行為</p>
</blockquote>
</li>
<li>
<p>Implicit</p>
<p><img src="image-20221030091931055.png" alt="image-20221030091931055"></p>
<p>使用場景是 SPA 或是純前端系統，與 <code>Authorization Code</code> 模式的差異在於 <code>access token</code> 的取得方式，</p>
<blockquote>
<p>這模式比較不安全，「透過 URI Fragment 來傳 Access Token ，所以可能會外洩」</p>
</blockquote>
</li>
<li>
<p>Resource Owner Password Credentials</p>
<p><img src="image-20221030092328110.png" alt="image-20221030092328110"></p>
<p>這比較像是過往的 server side 網頁服務</p>
</li>
<li>
<p>Client Credentials</p>
<p><img src="image-20221030092618674.png" alt="image-20221030092618674"></p>
<p>適用場景: machine-to-machine (M2M) applications</p>
</li>
</ol>
<p>(圖片出自: <a href="https://medium.com/%E9%BA%A5%E5%85%8B%E7%9A%84%E5%8D%8A%E8%B7%AF%E5%87%BA%E5%AE%B6%E7%AD%86%E8%A8%98/%E7%AD%86%E8%A8%98-%E8%AA%8D%E8%AD%98-oauth-2-0-%E4%B8%80%E6%AC%A1%E4%BA%86%E8%A7%A3%E5%90%84%E8%A7%92%E8%89%B2-%E5%90%84%E9%A1%9E%E5%9E%8B%E6%B5%81%E7%A8%8B%E7%9A%84%E5%B7%AE%E7%95%B0-c42da83a6015">[筆記] 認識 OAuth 2.0：一次了解各角色、各類型流程的差異</a>)</p>
<h2 id="OIDC"><a class="header-anchor" href="#OIDC"> </a>OIDC</h2>
<p>瞭解基本 OAuth 2.0 後，那 OIDC 又是什麼，一開始提到 <code>OIDC 是基於 OAuth 2.0 發展出來的</code></p>
<p>先提一下 <code>OAuth 2.0</code> 只有做 <code>Authorization</code> 的部分，並沒有涵蓋<code>Authentication</code> 的部分，這兩者的差異是什麼呢?</p>
<ul>
<li>Authorization: 授權使用範圍</li>
<li>Authentication: 使用者認證，使用者是否存在及使用者是誰，都算在認證的範圍內</li>
</ul>
<p><img src="image-20221030093943446.png" alt="image-20221030093943446"></p>
<p>(圖片來源: <a href="https://openid.net/connect/">https://openid.net/connect/</a>)</p>
<p>整個的流程大概會是這樣</p>
<p><img src="image-20221030094329195.png" alt="image-20221030094329195"></p>
<p>一些會出現在 OIDC 的名詞</p>
<ul>
<li><strong>End User</strong>: Human participant.</li>
<li><strong>Replying Party (RP)</strong>: OAuth 2.0 Client application requiring End-User Authentication and Claims from an OpenID Provider.</li>
<li><strong>OpenID Provider (OP)</strong>: OAuth 2.0 Authorization Server that is capable of Authenticating the End-User and providing Claims to a Relying Party about the Authentication event and the End-User.</li>
<li><strong>ID Token</strong>: <a href="https://openid.net/specs/openid-connect-core-1_0.html#JWT">JSON Web Token (JWT)</a> [JWT] that contains Claims about the Authentication event. It MAY contain other Claims.</li>
<li><strong>UserInfo Endpoint</strong>: Protected Resource that, when presented with an Access Token by the Client, returns authorized information about the End-User represented by the corresponding Authorization Grant. The UserInfo Endpoint URL MUST use the <code>https</code> scheme and MAY contain port, path, and query parameter components.</li>
</ul>
<h3 id="常見-flow"><a class="header-anchor" href="#常見-flow"> </a>常見 flow</h3>
<ol>
<li><strong>Authorization Code</strong></li>
<li><strong>Implicit</strong>: with Id_token</li>
<li><strong>Hybrid</strong>:  Authorization Code+ Implicit</li>
</ol>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=996OiexHze0&amp;t=2s">OAuth 2.0 and OpenID Connect (in plain English)</a></li>
<li><a href="https://kimlin20011.medium.com/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-openid-connect-%E4%B8%80-8701bbf00958">深入淺出 OpenID Connect (一)</a></li>
</ul>
]]></content>
      <categories>
        <category>Keycloak</category>
      </categories>
      <tags>
        <tag>Keycloak</tag>
      </tags>
  </entry>
  <entry>
    <title>[Dapr] What is Dapr?</title>
    <url>/2022/11/05/study-dapr-1/</url>
    <content><![CDATA[<p>Dapr 在 2019 第一次公開時，那時候版本還是 0.1 時，就有留意到，想不到幾年後，不僅進入 CNCF 還變成很多人推薦的框架，所以重新拾回研究一下 Dapr 的架構及如何使用在工作上</p>
<span id="more"></span>
<p>為什麼會回來看 Dapr，最主要的原因是目前的工作，系統都是以微服務的形式跑在自架的 K8s 上，一旦到達一個規模整個管理跟實做上要考慮的事情變的相對複雜，而 Dapr 可以降低這部分的工作並以一致的模式套用在不同的語言跟技術框架上</p>
<h2 id="What-is-Dapr"><a class="header-anchor" href="#What-is-Dapr"> </a>What is Dapr</h2>
<p>官網上是這樣子介紹的</p>
<blockquote>
<p>APIs for building portable and reliable microservices</p>
<p>Leverage industry best practices and focus on your application’s logic.</p>
</blockquote>
<p><img src="image-20221105101325259.png" alt="image-20221105101325259"></p>
<p>從圖片上可以知道  Dapr 是走 sidecar 模式，但好家在他底層是使用 go 實做，執行起來也不會太笨重，並提供簡化不少原系統要處理的東西。而且 Dapr sidecar 之間的溝通是採用 <code>gRPC</code> 的模式來降低整體的負擔，將效能影響降至最低</p>
<h2 id="Dapr-架構"><a class="header-anchor" href="#Dapr-架構"> </a>Dapr 架構</h2>
<p><img src="dapr-high-level.png" alt="Dapr at 20,000 feet"></p>
<p>從這張圖尚可知道，原本的應用程式可透過 HTTP 或 gRPC 的方式與 Dapr 的元件溝通，在這模式下，應用程式間的互動會由 <code>代理人</code> Dapr 來處理，之後我會說明為什麼我會將其定義成 <code>代理人</code> 的原因</p>
<p>Dapr 提供幾個積木供我們使用 (如下表)，讓我們有抽換背後對應的服務 (抽象化)</p>
<table>
<thead>
<tr>
<th style="text-align:left">Building block</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">State management</td>
<td style="text-align:left">Support contextual information for long running stateful services.</td>
</tr>
<tr>
<td style="text-align:left">Service invocation</td>
<td style="text-align:left">Invoke direct, secure service-to-service calls using platform agnostic protocols and well-known endpoints.</td>
</tr>
<tr>
<td style="text-align:left">Publish and subscribe</td>
<td style="text-align:left">Implement secure, scalable pub/sub messaging between services.</td>
</tr>
<tr>
<td style="text-align:left">Bindings</td>
<td style="text-align:left">Trigger code from events raised by external resources with bi-directional communication.</td>
</tr>
<tr>
<td style="text-align:left">Observability</td>
<td style="text-align:left">Monitor and measure message calls across networked services.</td>
</tr>
<tr>
<td style="text-align:left">Secrets</td>
<td style="text-align:left">Securely access external secret stores.</td>
</tr>
<tr>
<td style="text-align:left">Actors</td>
<td style="text-align:left">Encapsulate logic and data in reusable actor objects.</td>
</tr>
</tbody>
</table>
<p><img src="building-blocks-integration.png" alt="Dapr building blocks integration"></p>
<p>一開始有提到 Dapr 是使用 <code>sidecar</code> 模式與 application 做互動，所以架構會長的像這樣</p>
<p><img src="sidecar-generic.png" alt="Sidecar architecture"></p>
<h2 id="Hosting-Environment"><a class="header-anchor" href="#Hosting-Environment"> </a>Hosting Environment</h2>
<p>Dapr 的執行環境有分 <code>self-hosted</code> 和 <code>container</code> 模式</p>
<p><img src="self-hosted-dapr-sidecar.png" alt="Self-hosted sidecar architecture"></p>
<p><img src="kubernetes-hosted-dapr-sidecar.png" alt="Kubernetes-hosted sidecar architecture"></p>
<p>所以在本機開發環境如果沒有 docker 也還是可以透過 <code>self-hosted</code> 的模式進行開發，不會影響之後的部屬，<code>self-hosted</code> 可透過 Dapr cli 來完成相關的操作 (<a href="https://docs.Dapr.io/getting-started/install-Dapr-cli/">Dapr CLI installer</a>)</p>
<h3 id="Service-Mesh-Dapr"><a class="header-anchor" href="#Service-Mesh-Dapr"> </a>Service  Mesh &amp; Dapr</h3>
<p>Service Mesh 是另外一個偉大的坑，其負責範圍其實很多，科普一下</p>
<blockquote>
<p>服務網格是一個可設定的基礎結構層，內建功能可處理服務對服務通訊、復原、負載平衡和遙測擷取。 它會將這些考慮的責任移出服務，並移入服務網格層。</p>
</blockquote>
<p>Dapr 也遵循一樣的模式，所以接下來的問題會是 Dapr 可以取代原本的 service mesh 嗎? 其實 Dapr 可以與原有的 Service Mesh 共存，負責的業務範圍會不太一樣，Dapr 提供系統服務，service mesh 提供服務間的網路溝通</p>
<p><img src="dapr-and-service-mesh.png" alt="Dapr and Service Mesh together"></p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://learn.microsoft.com/en-us/dotnet/architecture/dapr-for-net-developers/">Dapr for .NET Developers</a></li>
<li><a href="https://docs.Dapr.io/getting-started/install-Dapr-cli/">Dapr CLI installer</a></li>
</ul>
]]></content>
      <categories>
        <category>Dapr</category>
      </categories>
      <tags>
        <tag>Dapr</tag>
      </tags>
  </entry>
  <entry>
    <title>[Dapr] 使用 Dapr 開發 - Hello World</title>
    <url>/2022/11/05/study-dapr-2/</url>
    <content><![CDATA[<p>上一篇知道 Dapr 是什麼後，就要進入 Hello World 的世界了，著手寫看看第一個 Dapr 應用程式</p>
<span id="more"></span>
<h2 id="環境安裝"><a class="header-anchor" href="#環境安裝"> </a>環境安裝</h2>
<p>如果沒有安裝過 <code>Dapr CLI</code> 的，可以先安裝，他可以任我們在開發環境上執行、啟動、管理和除錯 Dapr instances。雖然不是必要但建議開發環境要支援 Docker</p>
<p>步驟如下</p>
<ol>
<li>
<p><a href="https://docs.dapr.io/getting-started/install-dapr-cli/">安裝 Dapr CLI</a></p>
</li>
<li>
<p><a href="https://docs.dapr.io/getting-started/install-dapr-selfhost/">初始化 Dapr</a>。 此步驟會安裝最新的 Dapr 二進位檔和容器映射，以設定您的開發環境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dapr init</span><br></pre></td></tr></table></figure>
<p><img src="image-20221105194553626.png" alt="image-20221105194553626"></p>
<p><img src="image-20221105194623033.png" alt="image-20221105194623033"></p>
<p>環境多準備了這三個 containers，這時候我們就可以準備來開發第一個 Dapr 應用程式</p>
</li>
</ol>
<h2 id="第一個-Dapr-應用程式"><a class="header-anchor" href="#第一個-Dapr-應用程式"> </a>第一個 Dapr 應用程式</h2>
<p>Dapr 有提供不同語言的 SDK，方便使用者能自然且直覺的與 Dapr 做互動</p>
<p><img src="image-20221105194821719.png" alt="image-20221105194821719"></p>
<p>這裡的範例我使用 .net core console 來練習</p>
<ol>
<li>
<p>建立一個 console 程式</p>
</li>
<li>
<p>安裝 <code>Dapr.Client</code> 套件</p>
</li>
<li>
<p>在 <code>program.cs</code> 貼上這段程式碼</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Dapr.Client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> storeName = <span class="string">&quot;statestore&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> key = <span class="string">&quot;counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> daprClient = <span class="keyword">new</span> DaprClientBuilder().Build();</span><br><span class="line"><span class="keyword">var</span> counter = <span class="keyword">await</span> daprClient.GetStateAsync&lt;<span class="built_in">int</span>&gt;(storeName, key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Counter = <span class="subst">&#123;counter++&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> daprClient.SaveStateAsync(storeName, key, counter);</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>line 6: 建立 dapr Client</li>
<li>line 7: 取得 <code>counter</code> state</li>
<li>line 13: 儲存值回 <code>counter</code> state</li>
</ul>
</li>
<li>
<p>試著用 <code>dapr</code> 指令來執行程式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dapr run --app-id DaprCounter dotnet run</span><br></pre></td></tr></table></figure>
<p>會看到程式會跑起來，而且也能看到 Counter 的值被持續增加上去，而且當重啟程式後，也會保留上一次的結果繼續  	
<img src="image-20221105200300957.png" alt="image-20221105200300957"></p>
<p><img src="image-20221105200334950.png" alt="image-20221105200334950"></p>
</li>
</ol>
<p>使用 <code>dapr run</code> 時，<code>--app-id</code> 很重要，state management building block 是使用這個為 prefix 的值，所以第二次執行不是使用同一個 <code>app-id</code> 則會被視為不同的狀態</p>
<p>還記得一開始在 <code>dapr init</code> 時，有啟動幾個 container，其中一個是 <code>redis</code>，這也是 dapr 儲存狀態的地方，在上一篇也有提到每一個 building block 後面的元件是可以被抽換的，相關設定檔是透過 yaml 來設定，設定檔儲存位置如下</p>
<ul>
<li>
<p>mac/Linux: <code>$HOME/.dapr/components</code></p>
</li>
<li>
<p>windows: <code>%USERPROFILE%\.dapr\components</code></p>
<p><img src="image-20221105201130802.png" alt="image-20221105201130802"></p>
</li>
</ul>
<p>從圖片中可以看到有一個 <code>statesotre.yaml</code> 的檔案，內容會是這樣</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">statestore</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">state.redis</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redisHost</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">localhost:6379</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redisPassword</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">actorStateStore</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">scopes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DaprCounter</span></span><br></pre></td></tr></table></figure>
<ul>
<li>line 4: 這裡的 name 會對應到上面程式碼的 line 3 <code>const string storeName = &quot;statestore&quot;;</code></li>
<li>line 15: 可透過 <code>scopes</code> 來限定能存取此元件的應用程式 (<code>app-id</code>)</li>
</ul>
]]></content>
      <categories>
        <category>Dapr</category>
      </categories>
      <tags>
        <tag>Dapr</tag>
      </tags>
  </entry>
  <entry>
    <title>[Discord] Bot 新手上路</title>
    <url>/2022/11/20/discord-bot/</url>
    <content><![CDATA[<p>最近接了關於 Bot 開發相關的業務，趁休息時間玩一下 Discord Bot 的開發體驗，將過程記錄一下，搞不好後面還用的到。</p>
<p>在這之前還是快速介紹一下 Discord。Discord是一款專為社群設計的免費網路即時通話軟體與數位發行平台，在早期很常被遊戲玩家拿來做線上連線時的通訊軟體，現在是很多產品、社群等都會利用 Discord 來經營社群。</p>
<span id="more"></span>
<p>既然是平台，本身又提供 Bot 開發的能力，就要好好的探索一下到底 Bot 在 Discord 能做到什麼事情</p>
<h2 id="建立第一個-Bot"><a class="header-anchor" href="#建立第一個-Bot"> </a>建立第一個 Bot</h2>
<p>在建立第一個 Bot 之前，假設你是純新手沒有開過 Discord 帳號，可以透過這篇<a href="https://support.discord.com/hc/en-us/articles/360033931551-Getting-Started">說明</a>建立自己的 Discord 帳號。</p>
<h3 id="Create-Application"><a class="header-anchor" href="#Create-Application"> </a>Create Application</h3>
<p>進入 <a href="https://discord.com/developers/applications">Developer Portal</a> 並登入應可看到這個畫面</p>
<p><img src="image-20221120110706291.png" alt="image-20221120110706291"></p>
<p>點選右上角的 <code>New Application</code> 會跳出建立 Application 的詢問視窗，輸入你想的名字，打勾 agree Terms of services 後，按下 <code>Create</code> 即完成第一個 Application 的建立</p>
<p><img src="image-20221120110903558.png" alt="image-20221120110903558"></p>
<p>建立完成後在 <code>Applications</code> 的列表上就可看到剛剛建立的 application，點進去會看到等等開發時所需要的資訊，類似  Application ID 和 Endpoint URL 。</p>
<h3 id="Config-Bot"><a class="header-anchor" href="#Config-Bot"> </a>Config Bot</h3>
<p>因為我們要建立 Bot，所以還要多做一個步驟</p>
<p><img src="image-20221120111248877.png" alt="image-20221120111248877"></p>
<p><img src="image-20221120111311212.png" alt="image-20221120111311212"></p>
<p>完成這步驟後，會看到一些可以設定的項目，其中 Token 會是待會開發時需要的資訊，晚點再回來這邊建立新 Token</p>
<p>Bot 需要取得使用權限及授權範圍，Discord 也很好心的給了建立方式，一樣在 Application 的畫面裡，左邊選單的<code>OAuth2</code> 下的 <code>URL Generator</code>，這頁面上，我們需要設定幾樣東西</p>
<ul>
<li>SCOPES: <code>bot</code> 、<code>applications.commands</code></li>
<li>BOT PERMISSIONS: <code>Send Messages</code> 和 <code>Use Slash Commands</code></li>
</ul>
<p><img src="image-20221120112233735.png" alt="image-20221120112233735"></p>
<p>此畫面的最後面會有一個 <code>GENERATED URL</code> ，複製並貼到瀏覽器上，會開啟一個設定畫面，詢問這一個 Bot 想要加到哪一個伺服器中，就跟著步驟一步一步完成即可</p>
<h2 id="開發-Bot"><a class="header-anchor" href="#開發-Bot"> </a>開發 Bot</h2>
<p>雖然官方有提供一個範例程式碼，但我還是想從頭做一次，過程中還是會參考 <a href="https://github.com/discord/discord-example-app">example code</a></p>
<ol>
<li>
<p>建立一個 node express 專案，我這邊使用 NX 來幫忙建立 workspace</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-nx-workspace --preset=express</span><br></pre></td></tr></table></figure>
<p><img src="image-20221120114918739.png" alt="image-20221120114918739"></p>
</li>
<li>
<p>現在我們有一個可以用的 express app 可以運作，但為了讓 Discord Server 可以將訊息打到我們的 App，需要透過 <code>ngrok</code> 的協助</p>
<ol>
<li>啟動 express app on port 3333</li>
<li>啟動 ngrok 並監聽 port 3333，正確啟動後會取得一個對外網址，這個網址我們要回填到 Discord Application 的 <code>INTERACTIONS ENDPOINT URL</code> 中，當這樣設定完成後，Discord Server 就會將相關的訊息以 webhook 的方式打給我們</li>
<li>但這裡會發現無法正確儲存，原因是我們還沒有實做對應的 Endpoint 給 discord server 做驗證，下面會完成第一階段的功能</li>
</ol>
</li>
<li>
<p>假設填入的網址是 <code>https://xxxxxx.ngrok.io/interactions</code>，express 這邊需要實做一個對應的<code>POST</code> 方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/interactions&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在上一步驟時進行設定儲存時，會出現這個錯誤訊息</p>
<p><img src="image-20221120121208822.png" alt="image-20221120121208822"></p>
<p>要排除這個錯誤，需要實做一個 <code>PING-PONG</code> 的回應，實做程式碼如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InteractionResponseType</span>, <span class="title class_">InteractionType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;discord-interactions&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/interactions&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="keyword">type</span>, id, data &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Handle verification requests</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="title class_">InteractionType</span>.<span class="property">PING</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">type</span>: <span class="title class_">InteractionResponseType</span>.<span class="property">PONG</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>有多安裝一個套件 <code>discord-interactions</code></li>
</ul>
</li>
<li>
<p>這時候回去 discord application 頁面按儲存時還是會失敗，而且 express 這邊也會噴 <code>req.body</code> 是 undefined 的錯誤，還少一個驗證 request 的功能</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>(&#123; <span class="attr">verify</span>: <span class="title class_">VerifyDiscordRequest</span>(process.<span class="property">env</span>.<span class="property">PUBLIC_KEY</span>) &#125;));</span><br></pre></td></tr></table></figure>
<ul>
<li><code>PUBLIC_KEY</code> 可以從 Discord Application Detail 頁面中取得，放置 <code>.env</code> 檔案內即可</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; verifyKey &#125; <span class="keyword">from</span> <span class="string">&#x27;discord-interactions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">VerifyDiscordRequest</span>(<span class="params">clientKey</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">req, res, buf, encoding</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> signature = req.<span class="title function_">get</span>(<span class="string">&#x27;X-Signature-Ed25519&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> timestamp = req.<span class="title function_">get</span>(<span class="string">&#x27;X-Signature-Timestamp&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> isValidRequest = <span class="title function_">verifyKey</span>(buf, signature, timestamp, clientKey);</span><br><span class="line">    <span class="keyword">if</span> (!isValidRequest) &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">send</span>(<span class="string">&#x27;Bad request signature&#x27;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Bad request signature&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這段功能補上去後，Discord Application 設定頁面應可正確的儲存了</p>
</li>
</ol>
<h3 id="註冊-Command"><a class="header-anchor" href="#註冊-Command"> </a>註冊 Command</h3>
<p>上面已經完成最基本與 discord 互動的 Endpoint，接下來就是要是處理 Command 的部分，我們期望是 User 在 Discord 頻道中使用 Bot 來下指令，用一個 <code>test</code> 作為指令行為驗證。使用前要先註冊，這邊有點繁瑣，拆步驟說明</p>
<ol>
<li>
<p>取得 APP_ID: 資訊可以從 Discord Application Detail 頁面上取得</p>
</li>
<li>
<p>GUILD_ID: 這部分稍微麻煩點</p>
<ol>
<li>
<p>首先開啟 Discord 網頁版並切到有 Bot 的 Channel</p>
</li>
<li>
<p>網址大概會長這樣</p>
<p><img src="image-20221120132856679.png" alt="image-20221120132856679"></p>
<p>Channels 後面的第一組數字就是我們要的 GUILD_ID 了</p>
</li>
</ol>
</li>
<li>
<p>詢問 Channel 是否有註冊過 Commands，如果沒有就註冊</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">HasGuildCommands</span>(<span class="params">appId, guildId, commands</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (guildId === <span class="string">&#x27;&#x27;</span> || appId === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  commands.<span class="title function_">forEach</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> <span class="title class_">HasGuildCommand</span>(appId, guildId, c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">HasGuildCommand</span>(<span class="params">appId, guildId, command</span>) &#123;</span><br><span class="line">  <span class="comment">// API endpoint to get and post guild commands</span></span><br><span class="line">  <span class="keyword">const</span> endpoint = <span class="string">`applications/<span class="subst">$&#123;appId&#125;</span>/guilds/<span class="subst">$&#123;guildId&#125;</span>/commands`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title class_">DiscordRequest</span>(endpoint, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">      <span class="keyword">const</span> installedNames = data.<span class="title function_">map</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">      <span class="comment">// This is just matching on the name, so it&#x27;s not good for updates</span></span><br><span class="line">      <span class="keyword">if</span> (!installedNames.<span class="title function_">includes</span>(command[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Installing &quot;<span class="subst">$&#123;command[<span class="string">&#x27;name&#x27;</span>]&#125;</span>&quot;`</span>);</span><br><span class="line">        <span class="title class_">InstallGuildCommand</span>(appId, guildId, command);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`&quot;<span class="subst">$&#123;command[<span class="string">&#x27;name&#x27;</span>]&#125;</span>&quot; command already installed`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Installs a command</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">InstallGuildCommand</span>(<span class="params">appId, guildId, command</span>) &#123;</span><br><span class="line">  <span class="comment">// API endpoint to get and post guild commands</span></span><br><span class="line">  <span class="keyword">const</span> endpoint = <span class="string">`applications/<span class="subst">$&#123;appId&#125;</span>/guilds/<span class="subst">$&#123;guildId&#125;</span>/commands`</span>;</span><br><span class="line">  <span class="comment">// install command</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">DiscordRequest</span>(endpoint, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">body</span>: command &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Command 宣告</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">TEST_COMMAND</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&#x27;Basic guild command&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>當 express 啟動時執行</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title class_">HasGuildCommands</span>(process.<span class="property">env</span>.<span class="property">APP_ID</span>, process.<span class="property">env</span>.<span class="property">GUILD_ID</span>, [<span class="variable constant_">TEST_COMMAND</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>這段有實做一個 <code>DiscordRequest</code> function，內容如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">&#x27;node-fetch&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">DiscordRequest</span>(<span class="params">endpoint, options</span>) &#123;</span><br><span class="line">  <span class="comment">// append endpoint to root API URL</span></span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://discord.com/api/v10/&#x27;</span> + endpoint;</span><br><span class="line">  <span class="comment">// Stringify payloads</span></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">body</span>) options.<span class="property">body</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(options.<span class="property">body</span>);</span><br><span class="line">  <span class="comment">// Use node-fetch to make requests</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="title class_">Authorization</span>: <span class="string">`Bot <span class="subst">$&#123;process.env.DISCORD_TOKEN&#125;</span>`</span>,</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;User-Agent&#x27;</span>:</span><br><span class="line">        <span class="string">&#x27;DiscordBot (https://github.com/discord/discord-example-app, 1.0.0)&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...options,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// throw API errors</span></span><br><span class="line">  <span class="keyword">if</span> (!res.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">status</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return original response</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>需要安裝 <code>node-fetch</code> 套件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install node-fetch@^2.6.6</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>DISCORD_TOKEN: 來自 Bot 頁面的 Token</p>
<p><img src="image-20221120133514279.png" alt="image-20221120133514279"></p>
</li>
</ul>
<p>重新啟動 express app，應該可以看到 Command 被成功註冊的訊息，重新啟動一次 app，也可以看到 Command 已經被註冊的訊息。回到 Channel 中輸入 /test 就能看到被註冊的指令了</p>
<p><img src="image-20221120135115034.png" alt="image-20221120135115034"></p>
<h3 id="處理-Command"><a class="header-anchor" href="#處理-Command"> </a>處理 Command</h3>
<p>上一階段把 Command 註冊成功了，express app (Bot Service) 這邊也要實做對應的邏輯</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">type</span> === <span class="title class_">InteractionType</span>.<span class="property">APPLICATION_COMMAND</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = data;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// Send a message into the channel where command was triggered from</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">InteractionResponseType</span>.<span class="property">CHANNEL_MESSAGE_WITH_SOURCE</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="comment">// Fetches a random emoji to send from a helper function</span></span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;hello world !&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>執行結果</p>
<p><img src="image-20221120135415958.png" alt="image-20221120135415958"></p>
<h2 id="小結"><a class="header-anchor" href="#小結"> </a>小結</h2>
<p>初期要設定 Bot 在 Discord 上面跑需要一些設定，在寫這篇筆記時，比較會卡住的點是流程面，Discord 在相關的設定上其實還算簡單，第一關打通後，後面會比較順一點。所以稍微複雜的互動行為就留在下一篇筆記了</p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://support.discord.com/hc/en-us/articles/360033931551-Getting-Started">Discord Getting Start</a></li>
<li><a href="https://discord.com/developers/docs/intro">Discord Developer Portal</a></li>
<li><a href="https://discord.com/developers/docs/getting-started">Discord 開發 APP QuickStart</a></li>
</ul>
]]></content>
      <categories>
        <category>BOT</category>
      </categories>
      <tags>
        <tag>BOT</tag>
        <tag>Discord</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Singals 嘗鮮</title>
    <url>/2023/03/11/angular-signals/</url>
    <content><![CDATA[<p>Angular 嘗試在下一世代中加入新的 reactive 機制，試圖找到取代 zone.js 的方式，因此引進了 <code>signals</code> 來試試看是否能成為下一代 change detection 的選擇。想要嘗試的朋友可以安裝 <code>angular cli v16</code> 的版本</p>
<span id="more"></span>
<h2 id="什麼是-Signals"><a class="header-anchor" href="#什麼是-Signals"> </a>什麼是 Signals</h2>
<p>Signals 不是 Angular team 創造出來的 library，而是引用其他 framework 內所有使用的一個機制，如果沒記錯應該是來自 <code>[SolidJS](https://www.solidjs.com/tutorial/introduction_signals)</code></p>
<blockquote>
<p><em>Signals</em> are the cornerstone of reactivity in Solid. They contain values that change over time; when you change a signal’s value, it automatically updates anything that uses it.</p>
</blockquote>
<h2 id="如何在-Angular-內使用-Signals"><a class="header-anchor" href="#如何在-Angular-內使用-Signals"> </a>如何在 Angular 內使用 Signals</h2>
<h3 id="建立-signal-物件"><a class="header-anchor" href="#建立-signal-物件"> </a>建立 signal 物件</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, signal &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;....&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>singal</code> 介面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> signal&lt;T&gt;(<span class="attr">initialValue</span>: T, equal?: <span class="title class_">ValueEqualityFn</span>&lt;T&gt;): <span class="title class_">SettableSignal</span>&lt;T&gt;</span><br></pre></td></tr></table></figure>
<h3 id="顯示"><a class="header-anchor" href="#顯示"> </a>顯示</h3>
<p>要取得 signal 物件值的方式很直接，直接當 function 使用即可，接續上面的範例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; count() &#125;&#125; </span><br></pre></td></tr></table></figure>
<p>這樣就可以在 html 上顯示 count 的值了，或許會問不要在 html render 時寫 function call 嗎，會有效能問題，這裡這樣使用是沒有問題的 (之前有聽 angular team 說為什麼不會有問題，但我忘記理由了)</p>
<h3 id="更新"><a class="header-anchor" href="#更新"> </a>更新</h3>
<p>當建立一個 signal 物件後，更新值得方式有三種，<code>set</code> 、<code>update</code>  和 <code>mutate</code></p>
<ul>
<li>
<p>set: Directly set the signal to a new value, and notify any dependents.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">set</span>(<span class="attr">value</span>: T): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>update: Update the value of the signal based on its current value, and notify any dependents.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="attr">updateFn</span>: <span class="function">(<span class="params">value: T</span>) =&gt;</span> T): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>mutate: Update the current value by mutating it in-place, and notify any dependents.</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mutate</span>(<span class="attr">mutatorFn</span>: <span class="function">(<span class="params">value: T</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CommonModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, signal &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    Count: &#123;&#123; count() &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;increase()&quot;&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;reset()&quot;&gt;reset&lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">  <span class="attr">standalone</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">CommonModule</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>.<span class="title function_">set</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>.<span class="title function_">update</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> ++c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="進階用法"><a class="header-anchor" href="#進階用法"> </a>進階用法</h2>
<p>開頭有提到 signals 是一個 reactive library，當然不會只有這種單一值的使用情境，一定會有錯綜複雜的使用情境，這時候會怎麼使用呢</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, signal, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line"> ...</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;p&gt;Count: &#123;&#123; count() &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Double: &#123;&#123; double() &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">	...</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  count = <span class="title function_">signal</span>(<span class="number">0</span>);</span><br><span class="line">  double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">count</span>() * <span class="number">2</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>computed</code> 可以讓我們與其他 signal 作互動結合，當 computed 內的 signal 值改變時，此 computed 結果也會跟著改變，使用上算直覺</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">function</span> computed&lt;T&gt;(<span class="attr">computation</span>: <span class="function">() =&gt;</span> T, equal?: <span class="title class_">ValueEqualityFn</span>&lt;T&gt;): <span class="title class_">Signal</span>&lt;T&gt;;</span><br></pre></td></tr></table></figure>
<p>除了 computed，還有一個是 <code>effect</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">effectFn: () =&gt; <span class="built_in">void</span></span>): <span class="title class_">Effect</span>;</span><br></pre></td></tr></table></figure>
<p>須留意的是兩者回傳的物件是不一樣的，<code>computed</code> 會回傳一個新的 <code>Signal</code> 物件，但 <code>effect</code> 是回傳一個 <code>Effect</code> 物件，這 Effect 型別的物件可以允許我們停用 <code>effect</code> ，類似 Observable.subscribe 會回傳 subscription 的概念</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">count</span>());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RxJS-怎麼辦"><a class="header-anchor" href="#RxJS-怎麼辦"> </a>RxJS 怎麼辦?</h2>
<p>Signal 的使用方式與 RxJS 其實有很大部分是重疊的，但 RxJS 有很好用的 operators，這時候該怎麼辦呢? 是否有方法能結合兩者。在 GitHub 上面有一個 PR 就是要解決這個問題，Angular team 提供兩個 function，<code>fromSignal</code> 和 <code>fromObservable</code>，這過這兩個 function  可以將 Observable 和 Signal 物件做彼此轉換，我是覺得這樣就可保留相當的彈性了，當然也要等實際使用在產品才能知道會有那些坑</p>
<h2 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h2>
<ul>
<li><a href="https://github.com/angular/angular/discussions/49090">[Watch This Space] Angular Reactivity with Signals</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] Pipe</title>
    <url>/2017/05/13/angular-pipe/</url>
    <content><![CDATA[<p>Angular Pipe 是一個很強大的資料顯示轉型的工具，可以透過 Pipe 的幫忙，將原始資料轉換成我們想要顯示的樣式，且不會異動到原始資料的內容。</p>
<p>Angular 有內建了一些 Pipe 像是 <code>DatePipe</code>、 <code>UpperCasePipe</code>、<code>LowerCasePipe</code>、 <code>CurrencyPipe</code> 和 <code>PercentPipe</code>及其他的 <a href="https://angular.io/docs/ts/latest/api/#!?query=pipe">Pipe</a>。當然 Angular 也允許讓我們自訂 Pipe 的功能。</p>
<span id="more"></span>
<p>先從內建的 Pipe 介紹起</p>
<h1 id="內建-Pipe"><a class="header-anchor" href="#內建-Pipe"> </a>內建 Pipe</h1>
<p>在詳細介紹內建 <code>Pipe </code>之前，有一點要注意的是，如果有使用到 <code>DatePipe</code> 和 <code>CurrencyPipe</code> 時，要在舊版瀏覽器上正常運作的話，需要額外再加上一個 polyfill 的 library</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="DatePipe"><a class="header-anchor" href="#DatePipe"> </a>DatePipe</h2>
<h3 id="功能"><a class="header-anchor" href="#功能"> </a>功能</h3>
<p>將日期根據當地的顯示規則顯示</p>
<h3 id="使用方式"><a class="header-anchor" href="#使用方式"> </a>使用方式</h3>
<blockquote>
<p>date_expression | date[:format]</p>
</blockquote>
<h3 id="說明"><a class="header-anchor" href="#說明"> </a>說明</h3>
<ul>
<li>
<p><code>date_expression</code> 必須是日期型別的物件或是數字(milliseconds) 或是 <a href="https://www.w3.org/TR/NOTE-datetime">ISO 文字</a></p>
</li>
<li>
<p><code>format</code> 可以用來調整要顯示的日期格式，可以使用的格式說明如下</p>
<ul>
<li><code>'short'</code>: 相當於 <code>'yMdjm'</code> (例如 <code>9/3/2010, 12:05 PM</code> for <code>en-US</code>)</li>
<li><code>'medium'</code>: 相當於 <code>'yMMMdjms'</code> (例如 <code>Sep 3, 2010, 12:05:08 PM</code> for <code>en-US</code>)</li>
<li><code>long</code>: 相當於 <code>MMMM d, y, h:mm:ss a z</code> (例如 <code>June 15, 2015 at 9:03:01 AM GMT+1</code>)</li>
<li><code>'full'</code>: 相當於 <code>'EEEE, MMMM d, y, h:mm:ss a zzzz'</code> (例如 <code>Monday, June 15, 2015 at 9:03:01 AM GMT+01:00</code>)</li>
<li><code>'fullDate'</code>: 相當於 <code>'yMMMMEEEEd'</code> (例如 <code>Friday, September 3, 2010</code> for <code>en-US</code>)</li>
<li><code>'shortDate'</code>: 相當於 <code>'yMd'</code> (例如 <code>9/3/2010</code> for <code>en-US</code>)</li>
<li><code>'longDate'</code>: 相當於 <code>'yMMMMd'</code> (例如 <code>September 3, 2010</code> for <code>en-US</code>)</li>
<li><code>'mediumDate'</code>: 相當於 <code>'yMMMd'</code> (例如 <code>Sep 3, 2010</code> for <code>en-US</code>)</li>
<li><code>'fullDate'</code>: 相當於 <code>'EEEE, MMMM d, y'</code> (例如 <code>Monday, June 15, 2015</code>)</li>
<li><code>'shortTime'</code>: 相當於 <code>'jm'</code> (例如 <code>12:05 PM</code> for <code>en-US</code>)</li>
<li><code>'mediumTime'</code>: 相當於 <code>jms'</code> (例如 <code>12:05:08 PM</code> for <code>en-US</code>)</li>
<li><code>'longTime'</code>: 相當於 <code>'h:mm:ss a z'</code> (例如 <code>9:03:01 AM GMT+1</code>)</li>
<li><code>'fullTime'</code>: 相當於 <code>'h:mm:ss a zzzz'</code> (例如 <code>9:03:01 AM GMT+01:00</code>)</li>
</ul>
<table>
<thead>
<tr>
<th>描述</th>
<th>符號</th>
<th>短表示</th>
<th>長表示</th>
<th>數值</th>
<th>2 位數</th>
</tr>
</thead>
<tbody>
<tr>
<td>ear</td>
<td>G</td>
<td>GGG(AD)</td>
<td>GGGG<br/>(Anno Domini)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>year</td>
<td>y</td>
<td></td>
<td></td>
<td>y(2015)</td>
<td>yy(15)</td>
</tr>
<tr>
<td>month</td>
<td>M</td>
<td>MMM(Sep)</td>
<td>MMMM<br/>(September)</td>
<td>M(9)</td>
<td>MM(09)</td>
</tr>
<tr>
<td>day</td>
<td>d</td>
<td></td>
<td></td>
<td>d(3)</td>
<td>dd(03)</td>
</tr>
<tr>
<td>weekday</td>
<td>E</td>
<td>EEE(Sun)</td>
<td>EEEE<br/>(Sunday)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>hour</td>
<td>j</td>
<td></td>
<td></td>
<td>j(13)</td>
<td>jj(13)</td>
</tr>
<tr>
<td>hour12</td>
<td>h</td>
<td></td>
<td></td>
<td>h(1 PM)</td>
<td>hh(01 PM)</td>
</tr>
<tr>
<td>hour24</td>
<td>H</td>
<td></td>
<td></td>
<td>h(13)</td>
<td>HH(13)</td>
</tr>
<tr>
<td>minute</td>
<td>m</td>
<td></td>
<td></td>
<td>m(5)</td>
<td>mm(05)</td>
</tr>
<tr>
<td>second</td>
<td>s</td>
<td></td>
<td></td>
<td>s(9)</td>
<td>ss(09)</td>
</tr>
<tr>
<td>timezone</td>
<td>z</td>
<td></td>
<td>z <br/>(Pacific Standard Time)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>timezone</td>
<td>Z</td>
<td>Z(GMT-8:00)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>timezone</td>
<td>a</td>
<td>a(PM)</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="範例"><a class="header-anchor" href="#範例"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;DatePipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; dateObj | date &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; dateObj | date: &#x27;medium&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; dateObj | date: &#x27;shortTime&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; dateObj | date: &#x27;mmss&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  dateObj = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4159/34581824156_b21fe3eecf_o.png" alt=""></p>
<h2 id="UpperCasePipe"><a class="header-anchor" href="#UpperCasePipe"> </a>UpperCasePipe</h2>
<h3 id="功能-v2"><a class="header-anchor" href="#功能-v2"> </a>功能</h3>
<p>將所有英文字轉換成大寫</p>
<h3 id="使用方式-v2"><a class="header-anchor" href="#使用方式-v2"> </a>使用方式</h3>
<blockquote>
<p>string_expression | uppercase</p>
</blockquote>
<h3 id="範例-v2"><a class="header-anchor" href="#範例-v2"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;UpperCase&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; display | uppercase &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  display = <span class="string">&#x27;this is upperCase testcase&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4187/33813227533_255dea8cb8_o.png" alt=""></p>
<h2 id="LowerCasePipe"><a class="header-anchor" href="#LowerCasePipe"> </a>LowerCasePipe</h2>
<h3 id="功能-v3"><a class="header-anchor" href="#功能-v3"> </a>功能</h3>
<p>將所有英文字轉換成小寫</p>
<h3 id="使用方式-v3"><a class="header-anchor" href="#使用方式-v3"> </a>使用方式</h3>
<p>string_expression | lowercase</p>
<h3 id="範例-v3"><a class="header-anchor" href="#範例-v3"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;LowerCasePipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; display | lowercase &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  display = <span class="string">&#x27;this is LOWERCASE testcase&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4165/34623295465_458e50f4b6_o.png" alt=""></p>
<h2 id="TitleCasePipe"><a class="header-anchor" href="#TitleCasePipe"> </a>TitleCasePipe</h2>
<h3 id="功能-v4"><a class="header-anchor" href="#功能-v4"> </a>功能</h3>
<p>將每一個英文單字的第一個字母變成大寫</p>
<h3 id="使用方式-v4"><a class="header-anchor" href="#使用方式-v4"> </a>使用方式</h3>
<p>string_expression | titlecase</p>
<h3 id="範例-v4"><a class="header-anchor" href="#範例-v4"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;TitleCasePipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123; display | titlecase &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  display = <span class="string">&#x27;this is TILECASE testcase&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4183/34581944296_a977159858_o.png" alt=""></p>
<h2 id="CurrencyPipe"><a class="header-anchor" href="#CurrencyPipe"> </a>CurrencyPipe</h2>
<h3 id="功能-v5"><a class="header-anchor" href="#功能-v5"> </a>功能</h3>
<p>將數字根據當地貨幣的顯示規則顯示</p>
<h3 id="使用方式-v5"><a class="header-anchor" href="#使用方式-v5"> </a>使用方式</h3>
<blockquote>
<p>number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]</p>
</blockquote>
<h3 id="說明-v2"><a class="header-anchor" href="#說明-v2"> </a>說明</h3>
<ul>
<li>只接收數字型別的資料</li>
<li><code>currencyCode</code> 是 <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a> 貨幣代碼，例如 <code>USD</code> 代表美金， <code>TWD</code> 代表新台幣。</li>
<li><code>symbolDisplay</code> 是布林值，用來決定是否顯示貨幣符號或是貨幣代碼
<ul>
<li><code>true</code> 使用符號 (例如 <code>$</code>).</li>
<li><code>false</code> (預設): 使用貨幣代碼 (e.g. <code>USD</code>).</li>
</ul>
</li>
<li><code>digitInfo</code> 請參閱<a href="https://angular.io/docs/ts/latest/api/common/index/DecimalPipe-pipe.html"><code>DecimalPipe</code></a> 的說明.</li>
</ul>
<h3 id="範例-v5"><a class="header-anchor" href="#範例-v5"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;CurrencyPipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;A: &#123;&#123; a | currency: &#x27;USD&#x27;:false &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;B: &#123;&#123; b | currency: &#x27;USD&#x27;:true:&#x27;4.2-2&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;C: &#123;&#123; c | currency: &#x27;TWD&#x27;:false &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;D: &#123;&#123; d | currency: &#x27;TWD&#x27;:true:&#x27;4.2-2&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span> = <span class="number">0.259</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">1.3495</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">number</span> = <span class="number">15000</span>;</span><br><span class="line">  <span class="attr">d</span>: <span class="built_in">number</span> = <span class="number">20000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4178/34623423285_752310283f_o.png" alt=""></p>
<h2 id="PercentPipe"><a class="header-anchor" href="#PercentPipe"> </a>PercentPipe</h2>
<h3 id="功能-v6"><a class="header-anchor" href="#功能-v6"> </a>功能</h3>
<p>將數字根據當地顯示規則顯示百分比</p>
<h3 id="使用方式-v6"><a class="header-anchor" href="#使用方式-v6"> </a>使用方式</h3>
<blockquote>
<p>number_expression | percent[:digitInfo]</p>
</blockquote>
<h3 id="說明-v3"><a class="header-anchor" href="#說明-v3"> </a>說明</h3>
<ul>
<li>只接收數字型別的資料</li>
<li><code>digitInfo</code> 請參閱<a href="https://angular.io/docs/ts/latest/api/common/index/DecimalPipe-pipe.html"><code>DecimalPipe</code></a> 的說明.</li>
</ul>
<h3 id="範例-v6"><a class="header-anchor" href="#範例-v6"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;PercentPipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;A: &#123;&#123; a | percent &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;B: &#123;&#123; b | percent: &#x27;4.3-5&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span> = <span class="number">0.259</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">1.3495</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4175/34582068606_8f95ef28c1_o.png" alt=""></p>
<h2 id="DecimalPipe"><a class="header-anchor" href="#DecimalPipe"> </a>DecimalPipe</h2>
<h3 id="功能-v7"><a class="header-anchor" href="#功能-v7"> </a>功能</h3>
<p>將數字根據當地顯示規則顯示</p>
<h3 id="使用方式-v7"><a class="header-anchor" href="#使用方式-v7"> </a>使用方式</h3>
<blockquote>
<p>number_expression | number[:digitInfo]</p>
</blockquote>
<h3 id="說明-v4"><a class="header-anchor" href="#說明-v4"> </a>說明</h3>
<ul>
<li>
<p>只接收數字型別的資料</p>
</li>
<li>
<p><code>digitInfo</code> 以文字形式來設定數字顯示規則</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;minIntegerDigits&#125;.&#123;minFractionDigits&#125;-&#123;maxFractionDigits&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>minIntegerDigits</code> 是整數最小顯示位數，預設為 <code>1</code>.</li>
<li><code>minFractionDigits</code> 是小數點後最小顯示位數，預設為 <code>0</code>.</li>
<li><code>maxFractionDigits</code> 是小數點後最大顯示位數，預設為 <code>3</code></li>
</ul>
</li>
</ul>
<h3 id="範例-v7"><a class="header-anchor" href="#範例-v7"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;DecimalPipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;e (no formatting): &#123;&#123; e &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;e (3.1-5): &#123;&#123; e | number: &#x27;3.1-5&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;pi (no formatting): &#123;&#123; pi &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;pi (3.5-5): &#123;&#123; pi | number: &#x27;3.5-5&#x27; &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">pi</span>: <span class="built_in">number</span> = <span class="number">3.141592</span>;</span><br><span class="line">  <span class="attr">e</span>: <span class="built_in">number</span> = <span class="number">2.718281828459045</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4157/34461393612_3e66c3de42_o.png" alt=""></p>
<h2 id="JsonPipe"><a class="header-anchor" href="#JsonPipe"> </a>JsonPipe</h2>
<h3 id="功能-v8"><a class="header-anchor" href="#功能-v8"> </a>功能</h3>
<p>將值轉換成 JSON 文字</p>
<h3 id="使用方式-v8"><a class="header-anchor" href="#使用方式-v8"> </a>使用方式</h3>
<p>expression | json</p>
<h3 id="說明-v5"><a class="header-anchor" href="#說明-v5"> </a>說明</h3>
<ul>
<li>使用 <code>JSON.stringify</code> 的方法將值轉換成文字</li>
</ul>
<h3 id="範例-v8"><a class="header-anchor" href="#範例-v8"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;JsonPipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Without JSON pipe:&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;pre&gt;&#123;&#123; object &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;With JSON pipe:&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;pre&gt;&#123;&#123; object | json &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">object</span>: <span class="title class_">Object</span> = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="attr">baz</span>: <span class="string">&#x27;qux&#x27;</span>,</span><br><span class="line">    <span class="attr">nested</span>: &#123; <span class="attr">xyz</span>: <span class="number">3</span>, <span class="attr">numbers</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4180/34288536410_a1b29ab000_o.png" alt=""></p>
<h2 id="SlicePipe"><a class="header-anchor" href="#SlicePipe"> </a>SlicePipe</h2>
<h3 id="功能-v9"><a class="header-anchor" href="#功能-v9"> </a>功能</h3>
<p>建立新的清單或是切割後的部分文字</p>
<h3 id="使用方式-v9"><a class="header-anchor" href="#使用方式-v9"> </a>使用方式</h3>
<p>array_or_string_expression | slice:start[:end]</p>
<h3 id="說明-v6"><a class="header-anchor" href="#說明-v6"> </a>說明</h3>
<ul>
<li>只接收陣列或是文字型的資料</li>
<li><code>start</code> 是切割的開始位置
<ul>
<li>如果是 <code>正整數</code> 則會回傳該位置以後的資料或文字。</li>
<li>如果是 <code>負整數</code> 則會從資料或文字結尾往回計算開始位置，在回傳該位置之後的資料或文字。</li>
<li>如果是 <code>正整數</code> 而且該整數大於陣列或是文字長度時，則會回傳空的陣列或文字。</li>
<li>如果是 <code>負整數</code> 而且該整數大於陣列或是文字長度時，則會回傳整個陣列或文字。</li>
</ul>
</li>
<li><code>end</code> 是切割的結束位置
<ul>
<li>如果是沒有給予任何數字時，則回傳到結尾的所有資料。</li>
<li>如果是 <code>正整數</code> 則回傳結束位置前的所有資料或文字。</li>
<li>如果是 <code>負整數</code> 則會從資料或文字結尾往回計算結束位置，並回傳結束位置前的所有資料或文字。</li>
</ul>
</li>
<li>所有的行為都是基於 <code>Array.prototype.slice()</code> 和 <code>String.prototype.slice()</code> 的基礎上。</li>
<li>如果操作的對象是一個陣列，每次都會回傳一個全新的陣列</li>
<li>如果操作的資料是空值，Pipe 會回傳空值</li>
</ul>
<h3 id="範例-v9"><a class="header-anchor" href="#範例-v9"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;SlicePipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;操作陣列&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li *ngFor=&quot;let i of collection | slice: 1:3&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;操作文字&lt;/h2&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; str &#125;&#125;[0:4]: &#x27;&#123;&#123; str | slice: 0:4 &#125;&#125;&#x27; - 預期輸出為 &#x27;abcd&#x27;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; str &#125;&#125;[4:0]: &#x27;&#123;&#123; str | slice: 4:0 &#125;&#125;&#x27; - 預期輸出為 &#x27;&#x27;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; str &#125;&#125;[-4]: &#x27;&#123;&#123; str | slice: -4 &#125;&#125;&#x27; - 預期輸出為 &#x27;ghij&#x27;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; str &#125;&#125;[-4:-2]: &#x27;&#123;&#123; str | slice: -4:-2 &#125;&#125;&#x27; - 預期輸出為 &#x27;gh&#x27;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; str &#125;&#125;[-100]: &#x27;&#123;&#123; str | slice: -100 &#125;&#125;&#x27; - 預期輸出為 &#x27;abcdefghij&#x27;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; str &#125;&#125;[100]: &#x27;&#123;&#123; str | slice: 100 &#125;&#125;&#x27; - 預期輸出為 &#x27;&#x27;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">collection</span>: <span class="built_in">string</span>[] = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line">  <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;abcdefghij&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4170/34512030522_8b45394b1e_o.png" alt=""></p>
<h2 id="AsyncPipe"><a class="header-anchor" href="#AsyncPipe"> </a>AsyncPipe</h2>
<h3 id="功能-v10"><a class="header-anchor" href="#功能-v10"> </a>功能</h3>
<p>從非同步動作 (Promise/Observable) 中取出資料</p>
<h3 id="使用方式-v10"><a class="header-anchor" href="#使用方式-v10"> </a>使用方式</h3>
<p>observable_or_promise_expression | async</p>
<h3 id="說明-v7"><a class="header-anchor" href="#說明-v7"> </a>說明</h3>
<p><code>async</code> pipe 會訂閱一個 <code>Observable</code> 或是 <code>Promise</code> 物件，並獲取最後發生的資料。當有新的資料產生時，<code>async</code> pipe 會提示 <code>ChangeDetector</code> 要檢查 <code>Component</code> 的值。</p>
<p>當 <code>Comoponent</code> 被摧毀時，通常是離開該 <code>Component</code>的時候，<code>async</code> 會自動取消訂閱 ( unsubscribe)，避免潛在的記憶體洩漏問題。</p>
<h3 id="範例-v10"><a class="header-anchor" href="#範例-v10"> </a>範例</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Observable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subscriber</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/Subscriber&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;AsyncPipe&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;&lt;code&gt;observable|async&lt;/code&gt;: Time: &#123;&#123; time | async &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  time = <span class="keyword">new</span> <span class="title class_">Observable</span>&lt;<span class="built_in">string</span>&gt;(<span class="function">(<span class="params">observer: Subscriber&lt;<span class="built_in">string</span>&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> observer.<span class="title function_">next</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toString</span>()), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顯示結果</p>
<p><img src="https://farm5.staticflickr.com/4191/34673947075_be9600bd26_o.png" alt=""></p>
<h2 id="I18nPluralPipe-I18nSelectPipe"><a class="header-anchor" href="#I18nPluralPipe-I18nSelectPipe"> </a>I18nPluralPipe &amp; I18nSelectPipe</h2>
<p>由於這兩個 Pipe 跟多國語系功能有關係，且皆處於 <code>Experimental</code> 階段，故在次先不做說明。</p>
<h1 id="自訂-Pipe"><a class="header-anchor" href="#自訂-Pipe"> </a>自訂 Pipe</h1>
<p>透過 CLI 產生 <code>Pipe</code> 是最快的，指令是</p>
<p>​```typescript
ng g p 「pipeName」</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">所產生出來的基本架構是</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​```typescript</span><br><span class="line">import &#123; Pipe, PipeTransform &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"></span><br><span class="line">@Pipe(&#123;</span><br><span class="line">  name: &#x27;exponential&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">export class ExponentialPipe implements PipeTransform &#123;</span><br><span class="line"></span><br><span class="line">  transform(value: number, exponent: string): number &#123;</span><br><span class="line">    let exp = parseFloat(exponent);</span><br><span class="line">    return Math.pow(value, isNaN(exp) ? 1 : exp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>transform</code> function 所回傳的值，會用來顯示在畫面上</li>
<li>第一個參數 <code>value</code> 是所要轉換的資料來源</li>
<li>第二個之後的參數可以用來接 Template 傳給 <code>pipe</code> 的參數值</li>
</ul>
<p>如果要傳入多個參數的時後，transform 的地方值直接加上第 3 的參數或是使用 …args 也是可以，而在 template 的使用方式則是 {{ value | xxpipe: 1_arg: 2_arg: 3:arg }} 以此類推。</p>
<h1 id="Pipe-與-ChangeDetection"><a class="header-anchor" href="#Pipe-與-ChangeDetection"> </a>Pipe 與 ChangeDetection</h1>
<p>Angular 會透過 <code>change detection</code> 方法執行的過程中，去檢查 data-bound 值的變化，而 <code>change detection</code> 會在每一次 DOM Eevent 後被觸發，例如按下鍵盤的鍵，滑鼠的移動，伺服器的回應等事件，這個過程是需要付出相對的成本，為了效能，Angular 會盡量降低 <code>change detection</code> 的次數</p>
<p>所以 Pipe 會採用最簡單又快速的判斷規則，<a href="https://angular.io/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html">ChangeDetectionStrategy.OnPush</a>。</p>
<p>這表示當 Pipe 如果用在陣列上，就有機會出現不在預期內的顯示結果，如以下的範例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pipe</span>, <span class="title class_">PipeTransform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Flyer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;flyingHeroes&#x27;</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FlyingHeroesPipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">allHeroes: Flyer[]</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> allHeroes.<span class="title function_">filter</span>(<span class="function">(<span class="params">hero</span>) =&gt;</span> hero.<span class="property">canFly</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>component</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; #box (keyup.enter)=&quot;addHero(box.value); box.value = &#x27;&#x27;&quot; placeholder=&quot;hero name&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)=&quot;reset()&quot;&gt;Reset&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;div *ngFor=&quot;let hero of heroes | flyingHeroes&quot;&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; hero.name &#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.css&#x27;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppComponent</span> &#123;</span><br><span class="line">  <span class="attr">heroes</span>: <span class="built_in">any</span>[] = [];</span><br><span class="line">  canFly = <span class="literal">true</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">reset</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addHero</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    name = name.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> hero = &#123; name, <span class="attr">canFly</span>: <span class="variable language_">this</span>.<span class="property">canFly</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this.heroes.push(hero); // 這個不會更新畫面，因為不符合 OnPush 的條件</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heroes</span> = [...<span class="variable language_">this</span>.<span class="property">heroes</span>, hero]; <span class="comment">// 因會產生一個新的 Array Object, 所以會觸發 CD</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heroes</span> = <span class="variable constant_">HEROS</span>.<span class="title function_">slice</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Pure-and-Impure-Pipes"><a class="header-anchor" href="#Pure-and-Impure-Pipes"> </a>Pure and Impure Pipes</h1>
<p>Angular 的 Pipe 預設皆為 <code>Pure</code>，如果需要設定為 <code>Impure</code>的話，請這樣子設定</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;flyingHeroesImpure&#x27;</span>,</span><br><span class="line">  <span class="attr">pure</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>至於什麼是 <code>Pure Pipe</code> ，什麼是 <code>Impure Pipe</code></p>
<h2 id="Pure-Pipe"><a class="header-anchor" href="#Pure-Pipe"> </a>Pure Pipe</h2>
<p>這裡所指的 <code>Pure</code>，至針對 <code>Pipe</code> 所要轉換的值是否為 <code>Pure Change</code>，所謂的 <code>Pure Change</code> 是改變 primitive input value( String, Number, Boolean, Symbol) 或是改變 Object 參考的位址 (Date, Array, Function, Object)。</p>
<p>這規則與 <a href="https://angular.io/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html">ChangeDetectionStrategy.OnPush</a> 是一樣的。在上面的例子中，因為 <code>heroes</code> 是一個陣列物件，如果是 <code>push</code>的行為並不會改變該陣列所參考的位址 (ByReference)，必須重新建立一個新的陣列物件，才會改變參考位址。</p>
<h2 id="Impure-Pipe"><a class="header-anchor" href="#Impure-Pipe"> </a>Impure Pipe</h2>
<p><code>Impure Pipe</code> 就是 <code>Pure</code>的相反，也是 <code>ChangeDetectionStrategy</code> 預設的執行方式，只要有資料異動，就會觸發改變。</p>
<p>來調整一下上面的範例，來讓 array.push 也可以做到畫面更新顯示的功能。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Pipe</span>, <span class="title class_">PipeTransform</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Flyer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;flyingHeroes&#x27;</span>, <span class="attr">pure</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FlyingHeroesPipe</span> <span class="keyword">implements</span> <span class="title class_">PipeTransform</span> &#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">allHeroes: Flyer[]</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> allHeroes.<span class="title function_">filter</span>(<span class="function">(<span class="params">hero</span>) =&gt;</span> hero.<span class="property">canFly</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當這樣子設定為 <code>Impure</code>時，下面的 <code>push</code> 就可以使用而且畫面也會更新</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">addHero</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    name = name.<span class="title function_">trim</span>();</span><br><span class="line">    <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> hero = &#123;name, <span class="attr">canFly</span>: <span class="variable language_">this</span>.<span class="property">canFly</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">heroes</span>.<span class="title function_">push</span>(hero);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/docs/ts/latest/guide/pipes.html">官方文件</a></li>
<li><a href="http://www.ngx-translate.com/">ngx-translate</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular]angular.io官網程式碼學習筆記001</title>
    <url>/2017/06/15/angular-aio-code-study-001/</url>
    <content><![CDATA[<p>近期 <a href="https://angular.io">angular.io</a> 換新版，使用 Angular 4 重新撰寫官方網站，網站開啟速度非常的快 (PWA)，所以就想要從官方出手寫的程式碼學習 Angular 程式碼可以怎麼寫，接下來的一系列學習筆記將圍繞的這個主題，程式碼可以從 <a href="https://github.com/angular/angular">github</a> 下載</p>
<span id="more"></span>
<h1 id="main-ts"><a class="header-anchor" href="#main-ts"> </a>main.ts</h1>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">platformBrowserDynamic</span>().<span class="title function_">bootstrapModule</span>(<span class="title class_">AppModule</span>).<span class="title function_">then</span>(<span class="function"><span class="params">ref</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (environment.<span class="property">production</span> &amp;&amp; <span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> (navigator <span class="keyword">as</span> <span class="built_in">any</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">appRef</span>: <span class="title class_">ApplicationRef</span> = ref.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">ApplicationRef</span>);</span><br><span class="line">    appRef.<span class="property">isStable</span>.<span class="title function_">first</span>().<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      (navigator <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;/worker-basic.min.js&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>bootstrapModule</code> 完成後會回傳一個 <code>NgModuleRef</code>，可以透過 <code>ngModuleRef</code> 的  <code>injector</code> 取得 <code>ApplicationRef</code>，利用這樣子的寫法，可以將 <code>service-worker</code> 注入到網頁裡。原本這一段是寫在 index.html 裡，但透過這樣子的方式註冊，更有彈性，例如我們可以設定只有在 <code>production</code>模式下才要註冊 <code>service-worker</code>。</p>
<h1 id="app-component-ts"><a class="header-anchor" href="#app-component-ts"> </a>app.component.ts</h1>
<h2 id="template-html"><a class="header-anchor" href="#template-html"> </a>template html</h2>
<p>使用 Angular Materia 2 當作專案樣式</p>
<h3 id="gotop-anchor"><a class="header-anchor" href="#gotop-anchor"> </a>gotop anchor</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;top-of-page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>GoTOP的錨點</li>
</ul>
<h3 id="loading-bar"><a class="header-anchor" href="#loading-bar"> </a>loading bar</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;isFetching&quot;</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">md-progress-bar</span> <span class="attr">mode</span>=<span class="string">&quot;indeterminate&quot;</span> <span class="attr">color</span>=<span class="string">&quot;warn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">md-progress-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>顯示條件: <code>isFetching</code>是 <code>true</code>時</li>
<li><code>&lt;md-progress-bar&gt;</code> 是一個 materia2 橫向進度顯示物件</li>
<li><code>mode</code> 可以有以下的參數設定， 共 4 種顯示模式
<ul>
<li><code>determinate</code>: 標準的進度表，從 0 ~ 100 %</li>
<li><code>indeterminate</code>: 用來顯示有事情正在進行中</li>
<li><code>buffer</code>: 可以同時顯示兩種進度，例如撥放影片時，顯示緩衝讀取進度，與影片撥放進度</li>
<li><code>query</code>: 顯示兩種狀態模式，預設顯示樣式為 <code>indeterminate</code>反過來的樣式，值到另外一種狀態發生時，就會切換至 <code>determinate</code> 模式</li>
</ul>
</li>
<li>顏色 <code>color</code> 參數
<ul>
<li>Primary</li>
<li>Accent</li>
<li>Warn</li>
</ul>
</li>
<li><code>Value</code> 用來設定進度的百分比</li>
<li><code>bufferValue</code> 用來設定 <code>buffer</code>模式下的緩衝進度百分比</li>
</ul>
<h3 id="top-menu"><a class="header-anchor" href="#top-menu"> </a>top-menu</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">md-toolbar</span> <span class="attr">color</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app-toolbar&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;hamburger&quot;</span> [<span class="attr">class.starting</span>]=<span class="string">&quot;isStarting&quot;</span> <span class="attr">md-button</span></span></span><br><span class="line"><span class="tag">    (<span class="attr">click</span>)=<span class="string">&quot;sidenav.toggle()&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Docs menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">md-icon</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;&#x27;sidenav-open&#x27;: !isSideBySide &#125;&quot;</span> <span class="attr">svgIcon</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">md-icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;nav-link home&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; homeImageUrl &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Home&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aio-top-menu</span> *<span class="attr">ngIf</span>=<span class="string">&quot;isSideBySide&quot;</span> [<span class="attr">nodes</span>]=<span class="string">&quot;topMenuNodes&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-top-menu</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aio-search-box</span> <span class="attr">class</span>=<span class="string">&quot;search-container&quot;</span> #<span class="attr">searchBox</span> (<span class="attr">onSearch</span>)=<span class="string">&quot;doSearch($event)&quot;</span> (<span class="attr">onFocus</span>)=<span class="string">&quot;doSearch($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-search-box</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">md-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aio-search-results</span> #<span class="attr">searchResults</span> *<span class="attr">ngIf</span>=<span class="string">&quot;showSearchResults&quot;</span> (<span class="attr">resultSelected</span>)=<span class="string">&quot;hideSearchResults()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-search-results</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;md-toobar&gt;</code> 可用來當作 <code>headers</code>、<code>titles</code>、 或 <code>actions</code>  的容器</li>
<li>可透過 <code>color</code> 設定背景顏色: Primary、Accent、Warn</li>
<li><code>&lt;aio-top-menu&gt;</code> 、<code>&lt;aio-search-box&gt;</code>、<code>&lt;aio-search-results&gt;</code> 皆為自訂的 component</li>
<li><code>&lt;aio-search-box&gt;</code>  的行為
<ul>
<li>onFocus: 會根據目前搜尋視窗內的值，進行搜尋的動作</li>
<li>onSearch: 每一次 <code>keyUp</code> 都會被觸發一次</li>
</ul>
</li>
</ul>
<h3 id="content-display"><a class="header-anchor" href="#content-display"> </a>content display</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">md-sidenav-container</span> <span class="attr">class</span>=<span class="string">&quot;sidenav-container&quot;</span> [<span class="attr">class.starting</span>]=<span class="string">&quot;isStarting&quot;</span> [<span class="attr">class.has-floating-toc</span>]=<span class="string">&quot;hasFloatingToc&quot;</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">md-sidenav</span> [<span class="attr">ngClass</span>]=<span class="string">&quot;&#123;&#x27;collapsed&#x27;: !isSideBySide &#125;&quot;</span> #<span class="attr">sidenav</span> <span class="attr">class</span>=<span class="string">&quot;sidenav&quot;</span> [<span class="attr">opened</span>]=<span class="string">&quot;isOpened&quot;</span> [<span class="attr">mode</span>]=<span class="string">&quot;mode&quot;</span> (<span class="attr">open</span>)=<span class="string">&quot;updateHostClasses()&quot;</span> (<span class="attr">close</span>)=<span class="string">&quot;updateHostClasses()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aio-nav-menu</span> *<span class="attr">ngIf</span>=<span class="string">&quot;!isSideBySide&quot;</span> [<span class="attr">nodes</span>]=<span class="string">&quot;topMenuNarrowNodes&quot;</span> [<span class="attr">currentNode</span>]=<span class="string">&quot;currentNodes?.TopBarNarrow&quot;</span> [<span class="attr">isWide</span>]=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-nav-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aio-nav-menu</span> [<span class="attr">nodes</span>]=<span class="string">&quot;sideNavNodes&quot;</span> [<span class="attr">currentNode</span>]=<span class="string">&quot;currentNodes?.SideNav&quot;</span> [<span class="attr">isWide</span>]=<span class="string">&quot;isSideBySide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-nav-menu</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;doc-version&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Angular docs version &#123;&#123;currentDocVersion?.title&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aio-select</span> (<span class="attr">change</span>)=<span class="string">&quot;onDocVersionChange($event.index)&quot;</span> [<span class="attr">options</span>]=<span class="string">&quot;docVersions&quot;</span> [<span class="attr">selected</span>]=<span class="string">&quot;docVersions &amp;&amp; docVersions[0]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">md-sidenav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;sidenav-content&quot;</span> [<span class="attr">id</span>]=<span class="string">&quot;pageId&quot;</span> <span class="attr">role</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aio-doc-viewer</span> [<span class="attr">doc</span>]=<span class="string">&quot;currentDocument&quot;</span> (<span class="attr">docRendered</span>)=<span class="string">&quot;onDocRendered()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-doc-viewer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aio-dt</span> [<span class="attr">on</span>]=<span class="string">&quot;dtOn&quot;</span> [(<span class="attr">doc</span>)]=<span class="string">&quot;currentDocument&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">md-sidenav-container</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;md-sidenav-container&gt;</code> 是用來包 <code>&lt;md-sidenav&gt;</code> 及主要顯示內容的容器</li>
<li><a href="https://material.angular.io/components/component/sidenav"><md-sidenav></a>是顯示側邊選單物件</li>
<li><code>&lt;aio-nav-menu&gt;</code>、<code>&lt;aio-select&gt;</code>、<code>&lt;aio-doc-viewer&gt;</code> 及 <code>&lt;aio-dt&gt;</code> 皆為自訂 component</li>
</ul>
<h3 id="toc"><a class="header-anchor" href="#toc"> </a>toc</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;hasFloatingToc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toc-container&quot;</span> [<span class="attr">style.max-height.px</span>]=<span class="string">&quot;tocMaxHeight&quot;</span> (<span class="attr">mousewheel</span>)=<span class="string">&quot;restrainScrolling($event)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aio-toc</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-toc</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>針對 <code>mousewheel</code> 事件進行判斷，限制頁面滾動的行為</li>
<li><code>&lt;aio-toc&gt;</code> 為自訂 component</li>
</ul>
<h3 id="footer"><a class="header-anchor" href="#footer"> </a>footer</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aio-footer</span> [<span class="attr">nodes</span>]=<span class="string">&quot;footerNodes&quot;</span> [<span class="attr">versionInfo</span>]=<span class="string">&quot;versionInfo&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">aio-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;aio-footer&gt;</code> 為自訂 component</li>
</ul>
<h2 id="class-AppComponent"><a class="header-anchor" href="#class-AppComponent"> </a>class AppComponent</h2>
<h3 id="constructor"><a class="header-anchor" href="#constructor"> </a>constructor</h3>
<p>注入所需的 <code>service</code></p>
<ul>
<li>DocumentService</li>
<li>ElementRef</li>
<li>LocationService</li>
<li>NavigationService</li>
<li>ScrollService</li>
<li>SearchService</li>
<li>SwUpdateNotificationsService</li>
<li>TocService</li>
</ul>
<h3 id="ngOnInit"><a class="header-anchor" href="#ngOnInit"> </a>ngOnInit</h3>
<ul>
<li>判斷是否有支援 serviceWorker，如果有，則初始化 『search-worker』</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// Do not initialize the search on browsers that lack web worker support</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;Worker&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchService</span>.<span class="title function_">initWorker</span>(<span class="string">&#x27;app/search/search-worker.js&#x27;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchService</span>.<span class="title function_">loadIndex</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>調整顯示大小，並設定 <code>&lt;md-sidenav-container&gt;</code> 的 <code>class.has-floating-toc</code> 屬性</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> showFloatingToc = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>(<span class="literal">false</span>);</span><br><span class="line">...</span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">onResize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> hasNonEmptyToc = <span class="variable language_">this</span>.<span class="property">tocService</span>.<span class="property">tocList</span>.<span class="title function_">map</span>(<span class="function"><span class="params">tocList</span> =&gt;</span> tocList.<span class="property">length</span> &gt; <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">combineLatest</span>(hasNonEmptyToc, <span class="variable language_">this</span>.<span class="property">showFloatingToc</span>)</span><br><span class="line">        .<span class="title function_">subscribe</span>(<span class="function">(<span class="params">[hasToc, showFloatingToc]</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="property">hasFloatingToc</span> = hasToc &amp;&amp; showFloatingToc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HostListener</span>(<span class="string">&#x27;window:resize&#x27;</span>, [<span class="string">&#x27;$event.target.innerWidth&#x27;</span>])</span><br><span class="line"><span class="title function_">onResize</span>(<span class="params">width</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isSideBySide</span> = width &gt; <span class="variable language_">this</span>.<span class="property">sideBySideWidth</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">showFloatingToc</span>.<span class="title function_">next</span>(width &gt; <span class="variable language_">this</span>.<span class="property">showFloatingTocWidth</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>監控並註冊目前所在的 document</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">DocumentContents</span> &#123;</span><br><span class="line">  <span class="comment">/** The unique identifier for this document */</span></span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/** The HTML to display in the doc viewer */</span></span><br><span class="line">  <span class="attr">contents</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//==========================================</span></span><br><span class="line"><span class="attr">currentDocument</span>: <span class="title class_">DocumentContents</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">documentService</span>.<span class="property">currentDocument</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">doc</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentDocument</span> = doc;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setPageId</span>(doc.<span class="property">id</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setFolderId</span>(doc.<span class="property">id</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">updateHostClasses</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="title function_">setPageId</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// Special case the home page</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pageId</span> = (id === <span class="string">&#x27;index&#x27;</span>) ? <span class="string">&#x27;home&#x27;</span> : id.<span class="title function_">replace</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setFolderId</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// Special case the home page</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">folderId</span> = (id === <span class="string">&#x27;index&#x27;</span>) ? <span class="string">&#x27;home&#x27;</span> : id.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新本身component的class</span></span><br><span class="line"> <span class="meta">@HostBinding</span>(<span class="string">&#x27;class&#x27;</span>)</span><br><span class="line">  hostClasses = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">updateHostClasses</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sideNavOpen = <span class="string">`sidenav-<span class="subst">$&#123;<span class="variable language_">this</span>.sidenav.opened ? <span class="string">&#x27;open&#x27;</span> : <span class="string">&#x27;closed&#x27;</span>&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> pageClass = <span class="string">`page-<span class="subst">$&#123;<span class="variable language_">this</span>.pageId&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> folderClass = <span class="string">`folder-<span class="subst">$&#123;<span class="variable language_">this</span>.folderId&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> viewClasses = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">currentNodes</span> || &#123;&#125;).<span class="title function_">map</span>(<span class="function"><span class="params">view</span> =&gt;</span> <span class="string">`view-<span class="subst">$&#123;view&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hostClasses</span> = <span class="string">`<span class="subst">$&#123;sideNavOpen&#125;</span> <span class="subst">$&#123;pageClass&#125;</span> <span class="subst">$&#123;folderClass&#125;</span> <span class="subst">$&#123;viewClasses&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>documentService.currentDocument</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="variable language_">this</span>.<span class="property">currentDocument</span> = location.<span class="property">currentPath</span>.<span class="title function_">switchMap</span>(<span class="function"><span class="params">path</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">getDocument</span>(path));</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">getDocument</span>(<span class="params">url: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = url || <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;getting document&#x27;</span>, id);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(id, <span class="variable language_">this</span>.<span class="title function_">fetchDocument</span>(id));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>監控網址變化，並執行相對應的動作</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">  ...   </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">locationService</span>.<span class="property">currentPath</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">path</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path === <span class="variable language_">this</span>.<span class="property">currentPath</span>) &#123;</span><br><span class="line">      <span class="comment">// scroll only if on same page (most likely a change to the hash)</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">autoScroll</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// don&#x27;t scroll; leave that to `onDocRendered`</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentPath</span> = path;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Start progress bar if doc not rendered within brief time</span></span><br><span class="line">      <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">isFetchingTimeout</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isFetchingTimeout</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">isFetching</span> = <span class="literal">true</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title function_">autoScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scrollService</span>.<span class="title function_">scroll</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>監控瀏覽的狀態，細部的功能檢視會在看 <code>navigationService</code> 時研究</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A map of current nodes by view.</span></span><br><span class="line"><span class="comment"> * This is needed because some urls map to nodes in more than one view.</span></span><br><span class="line"><span class="comment"> * If a view does not contain a node that matches the current url then the value will be undefined.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">CurrentNodes</span> &#123;</span><br><span class="line">  [<span class="attr">view</span>: <span class="built_in">string</span>]: <span class="title class_">CurrentNode</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;&lt;md-sidenav&gt; 物件</span></span><br><span class="line"><span class="meta">@ViewChild</span>(<span class="title class_">MdSidenav</span>)</span><br><span class="line">  <span class="attr">sidenav</span>: <span class="title class_">MdSidenav</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">currentNodes</span>: <span class="title class_">CurrentNodes</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">  ...   </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">currentNodes</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">currentNodes</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentNodes</span> = currentNodes;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Preserve current sidenav open state by default</span></span><br><span class="line">      <span class="keyword">let</span> openSideNav = <span class="variable language_">this</span>.<span class="property">sidenav</span>.<span class="property">opened</span>;</span><br><span class="line">      <span class="comment">// const sideNavView = &#x27;SideNav&#x27;;</span></span><br><span class="line">      <span class="keyword">const</span> isSideNavDoc = !!currentNodes[sideNavView];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isSideNavDoc</span> !== isSideNavDoc) &#123;</span><br><span class="line">        <span class="comment">// View type changed. Is it now a sidenav view (e.g, guide or tutorial)?</span></span><br><span class="line">        <span class="comment">// Open if changed to a sidenav doc; close if changed to a marketing doc.</span></span><br><span class="line">        openSideNav = <span class="variable language_">this</span>.<span class="property">isSideNavDoc</span> = isSideNavDoc;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// May be open or closed when wide; always closed when narrow</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">sideNavToggle</span>(<span class="variable language_">this</span>.<span class="property">isSideBySide</span> ? openSideNav : <span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Compute the version picker list from the current version and the versions in the navigation map</span></span><br><span class="line">    <span class="title function_">combineLatest</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">versionInfo</span>.<span class="title function_">map</span>(<span class="function"><span class="params">versionInfo</span> =&gt;</span> (&#123; <span class="attr">title</span>: versionInfo.<span class="property">raw</span>, <span class="attr">url</span>: <span class="literal">null</span> &#125;)),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">navigationViews</span>.<span class="title function_">map</span>(<span class="function"><span class="params">views</span> =&gt;</span> views[<span class="string">&#x27;docVersions&#x27;</span>]),</span><br><span class="line">      <span class="function">(<span class="params">currentVersion, otherVersions</span>) =&gt;</span> [currentVersion, ...otherVersions])</span><br><span class="line">      .<span class="title function_">subscribe</span>(<span class="function"><span class="params">versions</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">docVersions</span> = versions;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentDocVersion</span> = <span class="variable language_">this</span>.<span class="property">docVersions</span>[<span class="number">0</span>];</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">navigationViews</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">views</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">footerNodes</span>  = views[<span class="string">&#x27;Footer&#x27;</span>]  || [];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sideNavNodes</span> = views[<span class="string">&#x27;SideNav&#x27;</span>] || [];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">topMenuNodes</span> = views[<span class="string">&#x27;TopBar&#x27;</span>]  || [];</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">topMenuNarrowNodes</span> = views[<span class="string">&#x27;TopBarNarrow&#x27;</span>] || <span class="variable language_">this</span>.<span class="property">topMenuNodes</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">navigationService</span>.<span class="property">versionInfo</span>.<span class="title function_">subscribe</span>( <span class="function"><span class="params">vi</span> =&gt;</span> <span class="variable language_">this</span>.<span class="property">versionInfo</span> = vi );</span><br><span class="line">  ...</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="title function_">sideNavToggle</span>(<span class="params">value?: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sidenav</span>.<span class="title function_">toggle</span>(value);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>啟動 <code>swUpdateNotification</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">swUpdateNotifications</span>.<span class="title function_">enable</span>();</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="onClick"><a class="header-anchor" href="#onClick"> </a>onClick</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HostListener</span>(<span class="string">&#x27;click&#x27;</span>, [<span class="string">&#x27;$event.target&#x27;</span>, <span class="string">&#x27;$event.button&#x27;</span>, <span class="string">&#x27;$event.ctrlKey&#x27;</span>, <span class="string">&#x27;$event.metaKey&#x27;</span>, <span class="string">&#x27;$event.altKey&#x27;</span>])</span><br><span class="line"><span class="title function_">onClick</span>(<span class="attr">eventTarget</span>: <span class="title class_">HTMLElement</span>, <span class="attr">button</span>: <span class="built_in">number</span>, <span class="attr">ctrlKey</span>: <span class="built_in">boolean</span>, <span class="attr">metaKey</span>: <span class="built_in">boolean</span>, <span class="attr">altKey</span>: <span class="built_in">boolean</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Hide the search results if we clicked outside both the &quot;search box&quot; and the &quot;search results&quot;</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">searchElements</span>.<span class="title function_">some</span>(<span class="function"><span class="params">element</span> =&gt;</span> element.<span class="property">nativeElement</span>.<span class="title function_">contains</span>(eventTarget))) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">hideSearchResults</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Show developer source view if the footer is clicked while holding the meta and alt keys</span></span><br><span class="line">  <span class="keyword">if</span> (eventTarget.<span class="property">tagName</span> === <span class="string">&#x27;FOOTER&#x27;</span> &amp;&amp; metaKey &amp;&amp; altKey) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dtOn</span> = !<span class="variable language_">this</span>.<span class="property">dtOn</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Deal with anchor clicks; climb DOM tree until anchor found (or null)</span></span><br><span class="line">  <span class="keyword">let</span> target = eventTarget;</span><br><span class="line">  <span class="keyword">while</span> (target &amp;&amp; !(target <span class="keyword">instanceof</span> <span class="title class_">HTMLAnchorElement</span>)) &#123;</span><br><span class="line">    target = target.<span class="property">parentElement</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (target <span class="keyword">instanceof</span> <span class="title class_">HTMLAnchorElement</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">locationService</span>.<span class="title function_">handleAnchorClick</span>(target, button, ctrlKey, metaKey);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allow the click to pass through</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>監聽頁面上所有的 <code>click</code>事件</p>
<ul>
<li>
<p>如果在 <code>search box</code> 外的地方點擊，會把搜尋結果的區塊隱藏起來。</p>
</li>
<li>
<p>win+alt+click on <code>footer</code> (1)的地方，會切換顯示/隱藏頁面內容的原始碼(2)</p>
<p><img src="https://farm5.staticflickr.com/4214/35189085881_94d86e10ae_o.png" alt=""></p>
</li>
<li>
<p>處理連結錨點</p>
</li>
</ul>
<h3 id="onDocRendered"><a class="header-anchor" href="#onDocRendered"> </a>onDocRendered</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onDocRendered</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Stop fetching timeout (which, when render is fast, means progress bar never shown)</span></span><br><span class="line">  <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">isFetchingTimeout</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Put page in a clean visual state</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scrollService</span>.<span class="title function_">scrollToTop</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Scroll 500ms after the doc-viewer has finished rendering the new doc</span></span><br><span class="line">  <span class="comment">// The delay is to allow time for async layout to complete</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">autoScroll</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isStarting</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isFetching</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>觸發時機點是在<code>&lt;aio-doc-viewer&gt;</code>的 <code>docRendered</code> output 事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aio-doc-viewer</span> [<span class="attr">doc</span>]=<span class="string">&quot;currentDocument&quot;</span> (<span class="attr">docRendered</span>)=<span class="string">&quot;onDocRendered()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-doc-viewer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="onDocVersionChange"><a class="header-anchor" href="#onDocVersionChange"> </a>onDocVersionChange</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onDocVersionChange</span>(<span class="params">versionIndex: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> version = <span class="variable language_">this</span>.<span class="property">docVersions</span>[versionIndex];</span><br><span class="line">  <span class="keyword">if</span> (version.<span class="property">url</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">locationService</span>.<span class="title function_">go</span>(version.<span class="property">url</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>觸發時機點是在<code>&lt;aio-select&gt;</code>下拉選單選擇完後</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;aio-select (change)=<span class="string">&quot;onDocVersionChange($event.index)&quot;</span> [options]=<span class="string">&quot;docVersions&quot;</span> [selected]=<span class="string">&quot;docVersions &amp;&amp; docVersions[0]&quot;</span>&gt;&lt;/aio-select&gt;</span><br></pre></td></tr></table></figure>
<h3 id="onScroll"><a class="header-anchor" href="#onScroll"> </a>onScroll</h3>
<p>根據滾動的狀態，決定 ToC 的高度</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dynamically change height of table of contents container</span></span><br><span class="line"><span class="meta">@HostListener</span>(<span class="string">&#x27;window:scroll&#x27;</span>)</span><br><span class="line"><span class="title function_">onScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">tocMaxHeightOffset</span>) &#123;</span><br><span class="line">    <span class="comment">// Must wait until now for md-toolbar to be measurable.</span></span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">this</span>.<span class="property">hostElement</span>.<span class="property">nativeElement</span> <span class="keyword">as</span> <span class="title class_">Element</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tocMaxHeightOffset</span> =</span><br><span class="line">      el.<span class="title function_">querySelector</span>(<span class="string">&#x27;footer&#x27;</span>).<span class="property">clientHeight</span> +</span><br><span class="line">      el.<span class="title function_">querySelector</span>(<span class="string">&#x27;md-toolbar.app-toolbar&#x27;</span>).<span class="property">clientHeight</span> +</span><br><span class="line">      <span class="number">44</span>; <span class="comment">//  margin</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tocMaxHeight</span> = (<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span> - <span class="variable language_">window</span>.<span class="property">pageYOffset</span> - <span class="variable language_">this</span>.<span class="property">tocMaxHeightOffset</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;hasFloatingToc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toc-container&quot;</span> [<span class="attr">style.max-height.px</span>]=<span class="string">&quot;tocMaxHeight&quot;</span><span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aio-toc</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-toc</span>&gt;</span></span><br><span class="line">&lt;/div</span><br></pre></td></tr></table></figure>
<h3 id="restrainScrolling"><a class="header-anchor" href="#restrainScrolling"> </a>restrainScrolling</h3>
<p>限制滑鼠滾輪在 ToC 範圍內的滾動頁面的功能</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Restrain scrolling inside an element, when the cursor is over it</span></span><br><span class="line">  <span class="title function_">restrainScrolling</span>(<span class="params">evt: WheelEvent</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> elem = evt.<span class="property">currentTarget</span> <span class="keyword">as</span> <span class="title class_">Element</span>;</span><br><span class="line">    <span class="keyword">const</span> scrollTop = elem.<span class="property">scrollTop</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (evt.<span class="property">deltaY</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Trying to scroll up: Prevent scrolling if already at the top.</span></span><br><span class="line">      <span class="keyword">if</span> (scrollTop &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Trying to scroll down: Prevent scrolling if already at the bottom.</span></span><br><span class="line">      <span class="keyword">const</span> maxScrollTop = elem.<span class="property">scrollHeight</span> - elem.<span class="property">clientHeight</span>;</span><br><span class="line">      <span class="keyword">if</span> (maxScrollTop - scrollTop &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">&quot;hasFloatingToc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;toc-container&quot;</span> <span class="attr">...</span> (<span class="attr">mousewheel</span>)=<span class="string">&quot;restrainScrolling($event)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aio-toc</span>&gt;</span><span class="tag">&lt;/<span class="name">aio-toc</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="onKeyUp"><a class="header-anchor" href="#onKeyUp"> </a>onKeyUp</h3>
<p>使用鍵盤控制頁面功能</p>
<ul>
<li>使用 <code>/</code> 進入 <code>searchbox</code></li>
<li>使用 <code>ESC</code> 取消搜尋結果，並重新將焦點設定於 <code>searchbox</code>上</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HostListener</span>(<span class="string">&#x27;document:keyup&#x27;</span>, [<span class="string">&#x27;$event.key&#x27;</span>, <span class="string">&#x27;$event.which&#x27;</span>])</span><br><span class="line"><span class="title function_">onKeyUp</span>(<span class="params">key: <span class="built_in">string</span>, keyCode: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="comment">// forward slash &quot;/&quot;</span></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&#x27;/&#x27;</span> || keyCode === <span class="number">191</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">focusSearchBox</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&#x27;Escape&#x27;</span> || keyCode === <span class="number">27</span> ) &#123;</span><br><span class="line">    <span class="comment">// escape key</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">showSearchResults</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">hideSearchResults</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">focusSearchBox</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="筆記"><a class="header-anchor" href="#筆記"> </a>筆記</h2>
<ul>
<li>
<p>有很多事件都被註冊於 app.component 內，主要的原因是 <code>app.component</code> 為 <code>root component</code> ，除非把網頁關掉，否哲永遠不會被摧毀掉。</p>
</li>
<li>
<p><code>services</code> 與 <code>component</code> 之間的溝通，大多數都使用 RxJS 的 Subject 作為溝通的橋樑，這樣子 component 或是其他 child component 都可以被通知有資料異動</p>
</li>
<li>
<p><code>HostListener</code> 善用第二個參數，只取出需要的屬性即可，即可將程式碼的可讀性大幅的提升</p>
</li>
<li>
<p>適當的使用 <code>get</code> 寫法，簡化變數的長度或將判斷邏輯封裝</p>
</li>
<li>
<p>商業邏輯的部分盡量封裝到 <code>service</code> 內</p>
</li>
<li>
<p>顯示區塊拆成子 <code>component</code> ，透過 <code>@Input</code>、<code>@Output</code>、<code>services</code> 的方式做溝通</p>
</li>
<li>
<p><code>ViewChildren</code>的 selector 可以同時撈取多格範本變數(Template Reference Variable)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChildren</span>(<span class="string">&#x27;searchBox, searchResults&#x27;</span>, &#123;<span class="attr">read</span>: <span class="title class_">ElementRef</span>&#125;)</span><br><span class="line"><span class="attr">searchElements</span>: <span class="title class_">QueryList</span>&lt;<span class="title class_">ElementRef</span>&gt;;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h1 id="參考資料"><a class="header-anchor" href="#參考資料"> </a>參考資料</h1>
<ul>
<li><a href="https://angular.io/api/core/NgModuleRef">NgModuleRef</a></li>
<li><a href="https://angular.io/api/core/ApplicationRef">ApplicationRef</a></li>
<li><a href="https://github.com/angular/material2">material2</a></li>
</ul>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>[Angular] 整合測試</title>
    <url>/2017/09/07/angular-integration-test/</url>
    <content><![CDATA[<p>整合測試主要的目的，是要測試 Component 的 template 的動作是否能如我們所預期的方式運作，而這是單元測試無法涵的範圍</p>
<p>Angular 也貼心準備小幫手，<code>TestBed</code>，來協助我們完成整合測試</p>
<span id="more"></span>
<h1 id="TestBed"><a class="header-anchor" href="#TestBed"> </a>TestBed</h1>
<p>TestBed 是 Angular 提供的小幫手來建立測試用的 Module 環境，基本的用法如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">async</span>, <span class="title class_">ComponentFixture</span>, <span class="title class_">TestBed</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">By</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DebugElement</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">let</span> <span class="attr">component</span>: <span class="title class_">VoteComponent</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">VoteComponent</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">de</span>: <span class="title class_">DebugElement</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">el</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">... </span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">     <span class="attr">declarations</span>: [ <span class="title class_">VoteComponent</span> ]  <span class="comment">// declare the test component</span></span><br><span class="line">   &#125;)</span><br><span class="line">   .<span class="title function_">compileComponents</span>(); <span class="comment">// compile template and css</span></span><br><span class="line"> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">VoteComponent</span>);</span><br><span class="line">    component = fixture.<span class="property">componentInstance</span>; <span class="comment">// 取得 component instance</span></span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>(); <span class="comment">// 執行 CD，這行會觸發 ngOnInit()，僅限第一次執行</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// query for the title &lt;h1&gt; by CSS element selector</span></span><br><span class="line">    de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;p&#x27;</span>)); <span class="comment">// 使用標轉的 CSS Selector 尋找並取得 debugElement</span></span><br><span class="line">    el = de.<span class="property">nativeElement</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p><code>configuratTestingModule</code> 內的物件結構，與設定 <code>@NgModule</code> 是一樣的，在 <code>beforeEach</code> 內設定，可以確保每個測試案例不會受到其他測試案例結果的影響，當 <code>TestingModule</code> 設定完成後，可以透過 <code>createComponent</code> 的方式建立相對於 component 的 <code>fixtureComponent</code>，這個 <code>fixtureComponent</code> 將提供完整的 component 本身與對應的 template 內容</p>
<p>這裡有一個要留意的事情是，第一個 <code>beforeEach</code> 有使用 <code>async</code> 這個關鍵字讓包在裡面的函式變成非同步的處理方式，當 component 的 template 是單獨一個檔案時，因為有 IO 的非同步行為，所以需要 <code>async</code> 的幫忙讓非同步變成同步行為的處理方式，但是如果是使用 webpack 作為建置工具時，其實是不需要使用 <code>async</code> 的，因為 webpack 會將獨立的 html 檔案變成 inline template 的模式</p>
<p><code>fixture.detectChanges()</code> 是手動觸發 changeDetector 的方法，任何變數異動後要更新到 template 上時，都必須執行 <code>detectChanges()</code>，當然，也可以設定自動偵測異動並執行更新動作，透過以下的設定即可達成</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ComponentFixtureAutoDetect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    &#123; <span class="attr">provide</span>: <span class="title class_">ComponentFixtureAutoDetect</span>, <span class="attr">useValue</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>當這樣子設定完成後，之後的測試案例內，就不需要執行 <code>fixture.detectChages()</code> 了，但是請注意，預設的 <code>detechChages() </code> 只為在非同步的事件觸發時才會被執行，例如 promise resolution、timers 或是 DOM Events，上述行為不包含直接修改變數值，因為這是屬於同步的行為，在這情況下，還是得自行執行 <code>fixture.detectChanges()</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should still see original title after comp.title change&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> oldTitle = comp.<span class="property">title</span>;</span><br><span class="line">  comp.<span class="property">title</span> = <span class="string">&#x27;Test Title&#x27;</span>;</span><br><span class="line">  <span class="comment">// 改變 title 內容並不會觸發 template 顯示的更新，因屬於同步行為</span></span><br><span class="line">  <span class="title function_">expect</span>(el.<span class="property">textContent</span>).<span class="title function_">toContain</span>(oldTitle);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should display updated title after detectChanges&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  comp.<span class="property">title</span> = <span class="string">&#x27;Test Title&#x27;</span>;</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>(); <span class="comment">// 需手動觸發 detectChanges，更新 template 內容</span></span><br><span class="line">  <span class="title function_">expect</span>(el.<span class="property">textContent</span>).<span class="title function_">toContain</span>(comp.<span class="property">title</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>所以，手動控制 detectChanges 會比開啟自動偵測機制來的好，我們就不需要去考慮什麼時候要自己執行 detectChanges，什麼時候不用，反正多執行也不會造成問題</p>
<h1 id="測試範例"><a class="header-anchor" href="#測試範例"> </a>測試範例</h1>
<h2 id="property-and-class-bindings"><a class="header-anchor" href="#property-and-class-bindings"> </a>property and class bindings</h2>
<p>測試屬性 ( property ) 是一個很常見的測試情境，當一個變數值改變時，畫面上是否有正常顯示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should render total votes&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   component.<span class="property">otherVotes</span> = <span class="number">20</span>;</span><br><span class="line">   component.<span class="property">myVote</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// totalValue = otherVotes + myVote;</span></span><br><span class="line">   fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line"></span><br><span class="line">   de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;.vote-count&#x27;</span>));</span><br><span class="line">   el = de.<span class="property">nativeElement</span>;</span><br><span class="line">   <span class="title function_">expect</span>(el.<span class="property">innerText</span>).<span class="title function_">toContain</span>(<span class="string">&#x27;21&#x27;</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;vote-count&quot;</span>&gt;</span>&#123;&#123; totalVotes &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>寫法上要注意的還是 <code>fixture.detectChanges()</code>，記得要執行阿，不然測試會失敗</p>
<p><code>debugElement</code> 本身有提供方法可以取得 <code>classes</code>、<code>style</code>、<code>attributes</code>、<code>properties</code> 等資訊，在這個測試案例，我們要測試當 <code>myVote == 1</code> 時，是否有 <code>hightlight</code> 的 css class 產生，而 debugElement.classes 是一個 keyValue 形式的物件，測試 Class 是否有正常的運作，測試案例可以這樣子寫</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;upVote&quot;</span> [<span class="attr">class.highlight</span>]=<span class="string">&quot;myVote==1&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;upVote()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should hightlight the upvote button is click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  component.<span class="property">myVote</span> = <span class="number">1</span>;</span><br><span class="line">  fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line"></span><br><span class="line">  de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;.upVote&#x27;</span>));    </span><br><span class="line">  <span class="title function_">expect</span>(de.<span class="property">classes</span>[<span class="string">&#x27;highlight&#x27;</span>]).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Event-bindings"><a class="header-anchor" href="#Event-bindings"> </a>Event bindings</h2>
<p>觸發事件的方法有兩種，一個是使用 debugElement 的 <code>triggerEventHandler</code> ，另外一種是使用 navtiveElement 轉型成 HTMLElement 後，操作 HTMLElement 的事件，這兩種方式都可以達到效果</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should click upVote and totalValue is 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> button = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;.upVote&#x27;</span>));</span><br><span class="line">    button.<span class="title function_">triggerEventHandler</span>(<span class="string">&#x27;click&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="title function_">expect</span>(component.<span class="property">totalVotes</span>).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should click upVote and totalValue is 1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;.upVote&#x27;</span>));</span><br><span class="line">    el = de.<span class="property">nativeElement</span>;</span><br><span class="line">    el.<span class="title function_">click</span>();</span><br><span class="line">    <span class="title function_">expect</span>(component.<span class="property">totalVotes</span>).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>到這個階段，或許會有一個問題，這個跟直接觸發 <code>component.upVote()</code> 後在檢查 <code>totalVotes</code> 的結果有什麼差別呢? 整合測試是要確保 template 上的行為是可以正常執行的，有時候函式在單元測試內是測試成功的，但是 template 上會因為沒有正常實作而造成測試失敗，這也是單元測試與整合測試的差異了。</p>
<h2 id="Dependencies"><a class="header-anchor" href="#Dependencies"> </a>Dependencies</h2>
<h3 id="Providing-the-dependencies"><a class="header-anchor" href="#Providing-the-dependencies"> </a>Providing the dependencies</h3>
<p>一個 Component 通常都會注入其他的 service，在測試時又該怎麼處理呢? 回想看看 <code>TestBed</code> 的功能是什麼，是設定一個測試用的 module，既然是 module，providers 和 imports 的動作就跟平常在設定 <code>@NgModules</code> 的方式是一模一樣的</p>
<p>假設 TodosComponent 有注入 TodoService，TodoService 有注入 HttpClient 服務。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TodosComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  todos = [];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> service: TodoService</span>) &#123;&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>測試檔案的內容於 <code>beforeEach</code> 的區塊，加上 imports 與 providers 兩個區塊，並將所需要的 service 與 modules 設定進去</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="title function_">beforeEach</span>(</span><br><span class="line">    <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">        <span class="attr">imports</span>: [<span class="title class_">HttpClientModule</span>],</span><br><span class="line">        <span class="attr">declarations</span>: [<span class="title class_">TodosComponent</span>],</span><br><span class="line">        <span class="attr">providers</span>: [<span class="title class_">TodoService</span>]</span><br><span class="line">      &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>當這樣子設定完成後，providing service 的部分就已經完成了</p>
<h3 id="Getting-the-dependencies"><a class="header-anchor" href="#Getting-the-dependencies"> </a>Getting the dependencies</h3>
<p>Angular 設定 provider 的地方有兩個，<code>@NgModule</code> 與 <code>@Component</code> 內都可以設定 providers，因為設定位置的不一樣，所以取得的方式也會有所不同</p>
<p>如果 service 是設定在 <code>@NgModule</code> 內時，取得 service 的方式如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> service = <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">TodoService</span>);</span><br></pre></td></tr></table></figure>
<p>如果 service 是設定在 <code>@Component</code> 內時，取得 service 的方式如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> service = fixture.<span class="property">debugElement</span>.<span class="property">injector</span>.<span class="title function_">get</span>(<span class="title class_">TodoService</span>);</span><br></pre></td></tr></table></figure>
<p>在整合測試時，我們還是不希望依賴外部引用的 service ，這裡的處理方式會跟單元測試的方式一樣，透過 <code>spyOn</code> 的方式控制 service 的行為</p>
<h3 id="providing-stubs"><a class="header-anchor" href="#providing-stubs"> </a>providing stubs</h3>
<p>有時候 component 所使用的 service 會遇到測試困難，例如路由。有時為了簡化測試的複雜度，會使用 <code>stubs</code> 的手法簡化，與其使用真的 service，不如自己建立一個簡單又符合目前所需的 service class 即可，也感謝 Angular 的 DI 機制，讓這一切變簡單了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TodosComponent</span> <span class="keyword">implements</span> <span class="title class_">OnInit</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> router: Router, <span class="keyword">private</span> route: ActivatedRoute</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">params</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (params[<span class="string">&#x27;id&#x27;</span>] === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;not-found&#x27;</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">save</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;/dash&#x27;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Router 本身的功能很複雜，要測試的項目又很多，所以簡化的方式就是建立一個 RouterStub class 替換真的 Router</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RouterStub</span> &#123;</span><br><span class="line">  <span class="title function_">navigate</span>(<span class="params">params</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActivatedRouteStub</span> &#123;</span><br><span class="line">  <span class="attr">params</span>: <span class="title class_">Observable</span>&lt;<span class="built_in">any</span>&gt; = <span class="title class_">Observable</span>.<span class="title function_">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="title function_">beforeEach</span>(</span><br><span class="line">  <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">HttpClientModule</span>],</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">TodosComponent</span>],</span><br><span class="line"> 	  <span class="attr">providers</span>: [          </span><br><span class="line">          &#123; <span class="attr">provide</span>: <span class="title class_">Router</span>, <span class="attr">useClass</span>: <span class="title class_">RouterStub</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">provide</span>: <span class="title class_">ActivatedRoute</span>, <span class="attr">useClass</span>: <span class="title class_">ActivatedRouteStub</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>這樣子的手法就可以大大的簡化測試的難度，這手法適用於其他第三方套件情境</p>
<h2 id="Route"><a class="header-anchor" href="#Route"> </a>Route</h2>
<h3 id="Navigation"><a class="header-anchor" href="#Navigation"> </a>Navigation</h3>
<p>由於在上一小節將 Router 與 ActivatedRoute 都用假的 class 替換掉了，所以這裡的測試就變簡單了</p>
<p>測試當某動作完成後，是否有正確的呼叫 router.navigate 函式，可以使用 <code>toHaveBeenCalledWith</code> 的方法來檢查</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should redirect user to dash page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> router = <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">Router</span>);</span><br><span class="line">   <span class="keyword">const</span> spy = <span class="title function_">spyOn</span>(router, <span class="string">&#x27;navigate&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   component.<span class="title function_">save</span>();</span><br><span class="line">   <span class="comment">// this.router.navigate([&#x27;dash&#x27;]); </span></span><br><span class="line">   <span class="comment">// 測試傳入引數是否正確</span></span><br><span class="line">   <span class="title function_">expect</span>(spy).<span class="title function_">toHaveBeenCalledWith</span>([<span class="string">&#x27;dash&#x27;</span>]);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Parameters"><a class="header-anchor" href="#Parameters"> </a>Parameters</h3>
<p>測試路由參數的方式跟測試路由轉換的方式很類似，但還是要稍微修改一下 ActiveatedRouteStub 的內容，我們必須建立一個方法可以讓外部使用者將要設定路由參數傳入，修改如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ActivatedRouteStub</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> subject = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">params</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subject</span>.<span class="title function_">asObservable</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subject</span>.<span class="title function_">next</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>透過 RxJS Subject 的特性，可以很簡單的完成這個 <code>params.subscribe</code> 的功能，接下來就是測試在 <code>ngOnInit</code> 內的功能是否正常</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ngOnInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">route</span>.<span class="property">params</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (params[<span class="string">&#x27;id&#x27;</span>] === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">router</span>.<span class="title function_">navigate</span>([<span class="string">&#x27;not-found&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>當路由參數  id 是 0 時，會轉址到 <code>not-found</code> 的頁面</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should redirect user to NotFound page&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">Router</span>);</span><br><span class="line">    <span class="keyword">const</span> spy = <span class="title function_">spyOn</span>(router, <span class="string">&#x27;navigate&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">route</span>: <span class="title class_">ActivatedRouteStub</span> = <span class="title class_">TestBed</span>.<span class="title function_">get</span>(<span class="title class_">ActivatedRoute</span>);</span><br><span class="line">    route.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(spy).<span class="title function_">toHaveBeenCalledWith</span>([<span class="string">&#x27;not-found&#x27;</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="RouterOutlet-components"><a class="header-anchor" href="#RouterOutlet-components"> </a>RouterOutlet components</h2>
<p><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> 是搭配路由設定顯示 Component 的標籤，一但沒有這個就無法正常地顯示 component 內容，那要怎麼確保這個標籤不會被誤刪呢? 就是寫個測試來保護他</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouterOutlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/router&#x27;</span>;</span><br><span class="line">...  </span><br><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should have a route-outlet tag&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">directive</span>(<span class="title class_">RouterOutlet</span>));</span><br><span class="line">    <span class="title function_">expect</span>(de).<span class="property">not</span>.<span class="title function_">toBeNull</span>();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>除了 <code>&lt;router-outlet&gt;</code> 外，也會有  <code>routerLink</code> 做頁面連結的入口，測試 <code>routerLink</code> 的方法有幾種，這裡用最簡單的方式作為範例，稍微複雜一點的是寫一個 <code>RouterLinkStubDirective</code> 來替換內建的 <code>RouterLinkDirective</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should have todos link&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> de = fixture.<span class="property">debugElement</span>.<span class="title function_">queryAll</span>(<span class="title class_">By</span>.<span class="title function_">directive</span>(<span class="title class_">RouterLinkWithHref</span>));</span><br><span class="line">  <span class="comment">// &lt;a routerLink=&quot;/todos&quot;&gt;todos&lt;/a&gt;</span></span><br><span class="line">  <span class="keyword">const</span> idx = de.<span class="title function_">findIndex</span>(</span><br><span class="line">    <span class="function"><span class="params">element</span> =&gt;</span> element.<span class="property">properties</span>[<span class="string">&#x27;href&#x27;</span>] === <span class="string">&#x27;/todos&#x27;</span></span><br><span class="line">  );</span><br><span class="line">  <span class="title function_">expect</span>(idx).<span class="title function_">toBeGreaterThan</span>(-<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Shallow-component"><a class="header-anchor" href="#Shallow-component"> </a>Shallow component</h2>
<p>當一個 Component 內有使用到其他的 component 時，因為其他的 component 並不是我們所在乎的重點，所以在 TestingModule 內的 declarations 不應該註冊其他的 component，但是，這樣子會發生錯誤，Angular 會抱怨說有些 tag element 他看不懂，這時候就需要在 TestingModule 內加上 <code>schemas: [NO_ERRORS_SCHEMA]</code> 來避免錯誤訊息</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEach</span>(</span><br><span class="line">  <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">RouterTestingModule</span>],</span><br><span class="line">      <span class="attr">declarations</span>: [<span class="title class_">AppComponent</span>],</span><br><span class="line">      <span class="attr">schemas</span>: [<span class="variable constant_">NO_ERRORS_SCHEMA</span>] <span class="comment">// 重點</span></span><br><span class="line">    &#125;).<span class="title function_">compileComponents</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="Attribute-directives"><a class="header-anchor" href="#Attribute-directives"> </a>Attribute directives</h2>
<p>測試 attribute directive 時，建立一個空的 host component 用來測試 directive</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-host-comp&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HostComponent</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;HighlightDirective&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">fixture</span>: <span class="title class_">ComponentFixture</span>&lt;<span class="title class_">HostComponent</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(</span><br><span class="line">    <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">TestBed</span>.<span class="title function_">configureTestingModule</span>(&#123;</span><br><span class="line">        <span class="attr">declarations</span>: [<span class="title class_">HostComponent</span>, <span class="title class_">HighlightDirective</span>]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">createComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fixture = <span class="title class_">TestBed</span>.<span class="title function_">createComponent</span>(<span class="title class_">HostComponent</span>);</span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should highlight with cyan&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">overrideComponent</span>(<span class="title class_">HostComponent</span>, &#123;</span><br><span class="line">      <span class="attr">set</span>: &#123; <span class="attr">template</span>: <span class="string">`&lt;p highlight=&quot;cyan&quot;&gt;empty&lt;/p&gt;`</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">createComponent</span>();</span><br><span class="line">    <span class="keyword">const</span> de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;p&#x27;</span>));</span><br><span class="line">    <span class="title function_">expect</span>(de.<span class="property">nativeElement</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;cyan&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should highlight with yellow&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">TestBed</span>.<span class="title function_">overrideComponent</span>(<span class="title class_">HostComponent</span>, &#123;</span><br><span class="line">      <span class="attr">set</span>: &#123; <span class="attr">template</span>: <span class="string">`&lt;p highlight&gt;empty&lt;/p&gt;`</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">createComponent</span>();</span><br><span class="line">    <span class="keyword">const</span> de = fixture.<span class="property">debugElement</span>.<span class="title function_">query</span>(<span class="title class_">By</span>.<span class="title function_">css</span>(<span class="string">&#x27;p&#x27;</span>));</span><br><span class="line">    <span class="title function_">expect</span>(de.<span class="property">nativeElement</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>).<span class="title function_">toBe</span>(<span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>利用 <code>overrideComponent</code> 的方法來改變 TestBed 內某 component template 的設定，利用這樣子的方式就可以測試 attribute directive 了</p>
<h2 id="Asynchronous-operations"><a class="header-anchor" href="#Asynchronous-operations"> </a>Asynchronous operations</h2>
<p>遇到 promise 的非同步行為時，又該怎麼測試呢? Angular 有兩種方式測試非同步行為</p>
<p>這個是用來做測試範例的 component</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QuoteService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./quote.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;my-quote&#x27;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;h3&gt;Random Quote&lt;/h3&gt; &lt;div&gt;&#123;&#123;quote&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">QuoteComponent</span> &#123;</span><br><span class="line">  <span class="attr">quote</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> quoteService: QuoteService</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getQuote</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">quoteService</span>.<span class="title function_">getQuote</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">quote</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">quote</span> = quote;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="async-whenStable"><a class="header-anchor" href="#async-whenStable"> </a>async + whenStable</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QuoteService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./quote.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QuoteComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./quote.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">async</span>, <span class="title class_">TestBed</span>, fakeAsync, tick &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockQuoteService</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">quote</span>: <span class="built_in">string</span> = <span class="string">&#x27;Test quote&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getQuote</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">quote</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Testing Quote Component&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fixture;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Should get quote&#x27;</span>, <span class="title function_">async</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fixture.<span class="property">componentInstance</span>.<span class="title function_">getQuote</span>();    </span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    fixture.<span class="title function_">whenStable</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> compiled = fixture.<span class="property">debugElement</span>.<span class="property">nativeElement</span>;</span><br><span class="line">      <span class="title function_">expect</span>(compiled.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;Test quote&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="fakeAsync-tick"><a class="header-anchor" href="#fakeAsync-tick"> </a>fakeAsync + tick</h3>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QuoteService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./quote.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">QuoteComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./quote.component&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">async</span>, <span class="title class_">TestBed</span>, fakeAsync, tick &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core/testing&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockQuoteService</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">quote</span>: <span class="built_in">string</span> = <span class="string">&#x27;Test quote&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getQuote</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">quote</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Testing Quote Component&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fixture;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;Should get quote&#x27;</span>, <span class="title function_">fakeAsync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fixture.<span class="property">componentInstance</span>.<span class="title function_">getQuote</span>();</span><br><span class="line">    <span class="title function_">tick</span>();</span><br><span class="line">    fixture.<span class="title function_">detectChanges</span>();</span><br><span class="line">    <span class="keyword">const</span> compiled = fixture.<span class="property">debugElement</span>.<span class="property">nativeElement</span>;</span><br><span class="line">    <span class="title function_">expect</span>(compiled.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>).<span class="property">innerText</span>).<span class="title function_">toEqual</span>(<span class="string">&#x27;Test quote&#x27;</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>fakeAsync</code> 搭配 <code>tick()</code> 方法使用，我們可以控制時間的變化，將非同步的行為轉換成同步行為進行測試。</p>
<p>延伸測試應用，當我們有一個函式的功能是每分鐘會觸發一次動作，在測試的過程中，當然不可能等 1 分鐘後才知道測試結果，使用 <code>tick(ms)</code> 就可以讓時間快轉了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;this test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;looks async but is synchronous&#x27;</span>, &lt;<span class="built_in">any</span>&gt;<span class="title function_">fakeAsync</span>((): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; flag = <span class="literal">true</span>; &#125;, <span class="number">100</span>);</span><br><span class="line">       <span class="title function_">expect</span>(flag).<span class="title function_">toBe</span>(<span class="literal">false</span>);</span><br><span class="line">       <span class="title function_">tick</span>(<span class="number">50</span>);</span><br><span class="line">       <span class="title function_">expect</span>(flag).<span class="title function_">toBe</span>(<span class="literal">false</span>);</span><br><span class="line">       <span class="title function_">tick</span>(<span class="number">50</span>);</span><br><span class="line">       <span class="title function_">expect</span>(flag).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">     &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="總結"><a class="header-anchor" href="#總結"> </a>總結</h1>
<p>單元測試與整合測試是互相支援的，不能只單獨測試一種，因為某些情況下，還是得依靠整合測試才能覆蓋所有的可能性，但至於哪些要寫單元測試，哪些要補整合測試，因為每個人測試的手感不同，很難有一個統一的規則在，至少我是這樣子認為的，每人有自己一套對於測試的理解方式，這就留給各位去探索了。</p>
]]></content>
      <categories>
        <category>Angular</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>測試</tag>
      </tags>
  </entry>
</search>
